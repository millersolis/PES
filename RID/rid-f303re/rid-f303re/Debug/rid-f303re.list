
rid-f303re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba0  08006ba0  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  08006ba0  08006ba0  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ba0  08006ba0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08006ba8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          000002cc  20000110  20000110  00020110  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200003dc  200003dc  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c5a  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003121  00000000  00000000  00030d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00033ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd3  00000000  00000000  00034ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e35  00000000  00000000  00035a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116fa  00000000  00000000  0005a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb7b3  00000000  00000000  0006bfc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000003c  00000000  00000000  00137775  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c58  00000000  00000000  001377b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000002c3  00000000  00000000  0013b40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000c3  00000000  00000000  0013b6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__do_global_dtors_aux>:
 80001a4:	b510      	push	{r4, lr}
 80001a6:	4c05      	ldr	r4, [pc, #20]	; (80001bc <__do_global_dtors_aux+0x18>)
 80001a8:	7823      	ldrb	r3, [r4, #0]
 80001aa:	b933      	cbnz	r3, 80001ba <__do_global_dtors_aux+0x16>
 80001ac:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x1c>)
 80001ae:	b113      	cbz	r3, 80001b6 <__do_global_dtors_aux+0x12>
 80001b0:	4804      	ldr	r0, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x20>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	2301      	movs	r3, #1
 80001b8:	7023      	strb	r3, [r4, #0]
 80001ba:	bd10      	pop	{r4, pc}
 80001bc:	20000110 	.word	0x20000110
 80001c0:	00000000 	.word	0x00000000
 80001c4:	08006500 	.word	0x08006500

080001c8 <frame_dummy>:
 80001c8:	b508      	push	{r3, lr}
 80001ca:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <frame_dummy+0x10>)
 80001cc:	b11b      	cbz	r3, 80001d6 <frame_dummy+0xe>
 80001ce:	4903      	ldr	r1, [pc, #12]	; (80001dc <frame_dummy+0x14>)
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <frame_dummy+0x18>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	bd08      	pop	{r3, pc}
 80001d8:	00000000 	.word	0x00000000
 80001dc:	20000114 	.word	0x20000114
 80001e0:	08006500 	.word	0x08006500

080001e4 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b089      	sub	sp, #36	; 0x24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80001ee:	2300      	movs	r3, #0
 80001f0:	61fb      	str	r3, [r7, #28]
 80001f2:	e030      	b.n	8000256 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80001f4:	69fb      	ldr	r3, [r7, #28]
 80001f6:	009b      	lsls	r3, r3, #2
 80001f8:	683a      	ldr	r2, [r7, #0]
 80001fa:	441a      	add	r2, r3
 80001fc:	69fb      	ldr	r3, [r7, #28]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	6879      	ldr	r1, [r7, #4]
 8000202:	440b      	add	r3, r1
 8000204:	7812      	ldrb	r2, [r2, #0]
 8000206:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8000208:	69fb      	ldr	r3, [r7, #28]
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	3301      	adds	r3, #1
 800020e:	683a      	ldr	r2, [r7, #0]
 8000210:	441a      	add	r2, r3
 8000212:	69fb      	ldr	r3, [r7, #28]
 8000214:	009b      	lsls	r3, r3, #2
 8000216:	3301      	adds	r3, #1
 8000218:	6879      	ldr	r1, [r7, #4]
 800021a:	440b      	add	r3, r1
 800021c:	7812      	ldrb	r2, [r2, #0]
 800021e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000220:	69fb      	ldr	r3, [r7, #28]
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	3302      	adds	r3, #2
 8000226:	683a      	ldr	r2, [r7, #0]
 8000228:	441a      	add	r2, r3
 800022a:	69fb      	ldr	r3, [r7, #28]
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	3302      	adds	r3, #2
 8000230:	6879      	ldr	r1, [r7, #4]
 8000232:	440b      	add	r3, r1
 8000234:	7812      	ldrb	r2, [r2, #0]
 8000236:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000238:	69fb      	ldr	r3, [r7, #28]
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	3303      	adds	r3, #3
 800023e:	683a      	ldr	r2, [r7, #0]
 8000240:	441a      	add	r2, r3
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	3303      	adds	r3, #3
 8000248:	6879      	ldr	r1, [r7, #4]
 800024a:	440b      	add	r3, r1
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	3301      	adds	r3, #1
 8000254:	61fb      	str	r3, [r7, #28]
 8000256:	69fb      	ldr	r3, [r7, #28]
 8000258:	2b03      	cmp	r3, #3
 800025a:	d9cb      	bls.n	80001f4 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 800025c:	2304      	movs	r3, #4
 800025e:	61fb      	str	r3, [r7, #28]
 8000260:	e081      	b.n	8000366 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	3b01      	subs	r3, #1
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	69bb      	ldr	r3, [r7, #24]
 800026e:	4413      	add	r3, r2
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	3301      	adds	r3, #1
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	4413      	add	r3, r2
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8000280:	69bb      	ldr	r3, [r7, #24]
 8000282:	3302      	adds	r3, #2
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	4413      	add	r3, r2
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	3303      	adds	r3, #3
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	4413      	add	r3, r2
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	f003 0303 	and.w	r3, r3, #3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d125      	bne.n	80002ee <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 80002a2:	7b3b      	ldrb	r3, [r7, #12]
 80002a4:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 80002a6:	7b7b      	ldrb	r3, [r7, #13]
 80002a8:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 80002aa:	7bbb      	ldrb	r3, [r7, #14]
 80002ac:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 80002b2:	7dfb      	ldrb	r3, [r7, #23]
 80002b4:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 80002b6:	7b3b      	ldrb	r3, [r7, #12]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b30      	ldr	r3, [pc, #192]	; (800037c <KeyExpansion+0x198>)
 80002bc:	5c9b      	ldrb	r3, [r3, r2]
 80002be:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 80002c0:	7b7b      	ldrb	r3, [r7, #13]
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b2d      	ldr	r3, [pc, #180]	; (800037c <KeyExpansion+0x198>)
 80002c6:	5c9b      	ldrb	r3, [r3, r2]
 80002c8:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 80002ca:	7bbb      	ldrb	r3, [r7, #14]
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b2b      	ldr	r3, [pc, #172]	; (800037c <KeyExpansion+0x198>)
 80002d0:	5c9b      	ldrb	r3, [r3, r2]
 80002d2:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	461a      	mov	r2, r3
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <KeyExpansion+0x198>)
 80002da:	5c9b      	ldrb	r3, [r3, r2]
 80002dc:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 80002de:	7b3a      	ldrb	r2, [r7, #12]
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	089b      	lsrs	r3, r3, #2
 80002e4:	4926      	ldr	r1, [pc, #152]	; (8000380 <KeyExpansion+0x19c>)
 80002e6:	5ccb      	ldrb	r3, [r1, r3]
 80002e8:	4053      	eors	r3, r2
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	69fb      	ldr	r3, [r7, #28]
 80002f6:	3b04      	subs	r3, #4
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	4413      	add	r3, r2
 8000302:	7819      	ldrb	r1, [r3, #0]
 8000304:	7b3a      	ldrb	r2, [r7, #12]
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	4403      	add	r3, r0
 800030c:	404a      	eors	r2, r1
 800030e:	b2d2      	uxtb	r2, r2
 8000310:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8000312:	69bb      	ldr	r3, [r7, #24]
 8000314:	3301      	adds	r3, #1
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4413      	add	r3, r2
 800031a:	7819      	ldrb	r1, [r3, #0]
 800031c:	7b7a      	ldrb	r2, [r7, #13]
 800031e:	693b      	ldr	r3, [r7, #16]
 8000320:	3301      	adds	r3, #1
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	4403      	add	r3, r0
 8000326:	404a      	eors	r2, r1
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 800032c:	69bb      	ldr	r3, [r7, #24]
 800032e:	3302      	adds	r3, #2
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	4413      	add	r3, r2
 8000334:	7819      	ldrb	r1, [r3, #0]
 8000336:	7bba      	ldrb	r2, [r7, #14]
 8000338:	693b      	ldr	r3, [r7, #16]
 800033a:	3302      	adds	r3, #2
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	4403      	add	r3, r0
 8000340:	404a      	eors	r2, r1
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000346:	69bb      	ldr	r3, [r7, #24]
 8000348:	3303      	adds	r3, #3
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	7819      	ldrb	r1, [r3, #0]
 8000350:	7bfa      	ldrb	r2, [r7, #15]
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	3303      	adds	r3, #3
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	4403      	add	r3, r0
 800035a:	404a      	eors	r2, r1
 800035c:	b2d2      	uxtb	r2, r2
 800035e:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	3301      	adds	r3, #1
 8000364:	61fb      	str	r3, [r7, #28]
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	2b2b      	cmp	r3, #43	; 0x2b
 800036a:	f67f af7a 	bls.w	8000262 <KeyExpansion+0x7e>
  }
}
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	3724      	adds	r7, #36	; 0x24
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	080068a8 	.word	0x080068a8
 8000380:	08006aa8 	.word	0x08006aa8

08000384 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6839      	ldr	r1, [r7, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff26 	bl	80001e4 <KeyExpansion>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <AES_ctx_set_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
}
void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	33b0      	adds	r3, #176	; 0xb0
 80003ae:	2210      	movs	r2, #16
 80003b0:	6839      	ldr	r1, [r7, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f006 f88e 	bl	80064d4 <memcpy>
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b087      	sub	sp, #28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
 80003cc:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80003ce:	2300      	movs	r3, #0
 80003d0:	75fb      	strb	r3, [r7, #23]
 80003d2:	e027      	b.n	8000424 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 80003d4:	2300      	movs	r3, #0
 80003d6:	75bb      	strb	r3, [r7, #22]
 80003d8:	e01e      	b.n	8000418 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 80003da:	7dfa      	ldrb	r2, [r7, #23]
 80003dc:	7dbb      	ldrb	r3, [r7, #22]
 80003de:	68b9      	ldr	r1, [r7, #8]
 80003e0:	0092      	lsls	r2, r2, #2
 80003e2:	440a      	add	r2, r1
 80003e4:	4413      	add	r3, r2
 80003e6:	7818      	ldrb	r0, [r3, #0]
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	009a      	lsls	r2, r3, #2
 80003ec:	7dfb      	ldrb	r3, [r7, #23]
 80003ee:	4413      	add	r3, r2
 80003f0:	009a      	lsls	r2, r3, #2
 80003f2:	7dbb      	ldrb	r3, [r7, #22]
 80003f4:	4413      	add	r3, r2
 80003f6:	461a      	mov	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4413      	add	r3, r2
 80003fc:	7819      	ldrb	r1, [r3, #0]
 80003fe:	7dfa      	ldrb	r2, [r7, #23]
 8000400:	7dbb      	ldrb	r3, [r7, #22]
 8000402:	4041      	eors	r1, r0
 8000404:	b2c8      	uxtb	r0, r1
 8000406:	68b9      	ldr	r1, [r7, #8]
 8000408:	0092      	lsls	r2, r2, #2
 800040a:	440a      	add	r2, r1
 800040c:	4413      	add	r3, r2
 800040e:	4602      	mov	r2, r0
 8000410:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000412:	7dbb      	ldrb	r3, [r7, #22]
 8000414:	3301      	adds	r3, #1
 8000416:	75bb      	strb	r3, [r7, #22]
 8000418:	7dbb      	ldrb	r3, [r7, #22]
 800041a:	2b03      	cmp	r3, #3
 800041c:	d9dd      	bls.n	80003da <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 800041e:	7dfb      	ldrb	r3, [r7, #23]
 8000420:	3301      	adds	r3, #1
 8000422:	75fb      	strb	r3, [r7, #23]
 8000424:	7dfb      	ldrb	r3, [r7, #23]
 8000426:	2b03      	cmp	r3, #3
 8000428:	d9d4      	bls.n	80003d4 <AddRoundKey+0x14>
    }
  }
}
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	371c      	adds	r7, #28
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e01d      	b.n	8000482 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8000446:	2300      	movs	r3, #0
 8000448:	73bb      	strb	r3, [r7, #14]
 800044a:	e014      	b.n	8000476 <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800044c:	7bba      	ldrb	r2, [r7, #14]
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	0092      	lsls	r2, r2, #2
 8000454:	440a      	add	r2, r1
 8000456:	4413      	add	r3, r2
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	7bba      	ldrb	r2, [r7, #14]
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	490d      	ldr	r1, [pc, #52]	; (8000498 <SubBytes+0x60>)
 8000462:	5c08      	ldrb	r0, [r1, r0]
 8000464:	6879      	ldr	r1, [r7, #4]
 8000466:	0092      	lsls	r2, r2, #2
 8000468:	440a      	add	r2, r1
 800046a:	4413      	add	r3, r2
 800046c:	4602      	mov	r2, r0
 800046e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000470:	7bbb      	ldrb	r3, [r7, #14]
 8000472:	3301      	adds	r3, #1
 8000474:	73bb      	strb	r3, [r7, #14]
 8000476:	7bbb      	ldrb	r3, [r7, #14]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d9e7      	bls.n	800044c <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3301      	adds	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	2b03      	cmp	r3, #3
 8000486:	d9de      	bls.n	8000446 <SubBytes+0xe>
    }
  }
}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	080068a8 	.word	0x080068a8

0800049c <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	785b      	ldrb	r3, [r3, #1]
 80004a8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	795a      	ldrb	r2, [r3, #5]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	7a5a      	ldrb	r2, [r3, #9]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	7b5a      	ldrb	r2, [r3, #13]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	7bfa      	ldrb	r2, [r7, #15]
 80004c6:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	789b      	ldrb	r3, [r3, #2]
 80004cc:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	7a9a      	ldrb	r2, [r3, #10]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	7bfa      	ldrb	r2, [r7, #15]
 80004da:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	799b      	ldrb	r3, [r3, #6]
 80004e0:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	7b9a      	ldrb	r2, [r3, #14]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	7bfa      	ldrb	r2, [r7, #15]
 80004ee:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	78db      	ldrb	r3, [r3, #3]
 80004f4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	7bda      	ldrb	r2, [r3, #15]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	7ada      	ldrb	r2, [r3, #11]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	79da      	ldrb	r2, [r3, #7]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	7bfa      	ldrb	r2, [r7, #15]
 8000512:	71da      	strb	r2, [r3, #7]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	b25a      	sxtb	r2, r3
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	09db      	lsrs	r3, r3, #7
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	0049      	lsls	r1, r1, #1
 800053a:	440b      	add	r3, r1
 800053c:	4619      	mov	r1, r3
 800053e:	00c8      	lsls	r0, r1, #3
 8000540:	4619      	mov	r1, r3
 8000542:	4603      	mov	r3, r0
 8000544:	440b      	add	r3, r1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	b25b      	sxtb	r3, r3
 800054a:	4053      	eors	r3, r2
 800054c:	b25b      	sxtb	r3, r3
 800054e:	b2db      	uxtb	r3, r3
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e0a4      	b.n	80006b4 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 800056a:	7bfa      	ldrb	r2, [r7, #15]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000572:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8000574:	7bfa      	ldrb	r2, [r7, #15]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	4053      	eors	r3, r2
 8000588:	b2da      	uxtb	r2, r3
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	6879      	ldr	r1, [r7, #4]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	4053      	eors	r3, r2
 8000596:	b2da      	uxtb	r2, r3
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	440b      	add	r3, r1
 80005a0:	78db      	ldrb	r3, [r3, #3]
 80005a2:	4053      	eors	r3, r2
 80005a4:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80005a6:	7bfa      	ldrb	r2, [r7, #15]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	6879      	ldr	r1, [r7, #4]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	440b      	add	r3, r1
 80005b6:	785b      	ldrb	r3, [r3, #1]
 80005b8:	4053      	eors	r3, r2
 80005ba:	733b      	strb	r3, [r7, #12]
 80005bc:	7b3b      	ldrb	r3, [r7, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffae 	bl	8000520 <xtime>
 80005c4:	4603      	mov	r3, r0
 80005c6:	733b      	strb	r3, [r7, #12]
 80005c8:	7bfa      	ldrb	r2, [r7, #15]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80005d0:	7b3a      	ldrb	r2, [r7, #12]
 80005d2:	7b7b      	ldrb	r3, [r7, #13]
 80005d4:	4053      	eors	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	7bfa      	ldrb	r2, [r7, #15]
 80005da:	404b      	eors	r3, r1
 80005dc:	b2d9      	uxtb	r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	785a      	ldrb	r2, [r3, #1]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	440b      	add	r3, r1
 80005f6:	789b      	ldrb	r3, [r3, #2]
 80005f8:	4053      	eors	r3, r2
 80005fa:	733b      	strb	r3, [r7, #12]
 80005fc:	7b3b      	ldrb	r3, [r7, #12]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff8e 	bl	8000520 <xtime>
 8000604:	4603      	mov	r3, r0
 8000606:	733b      	strb	r3, [r7, #12]
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	7859      	ldrb	r1, [r3, #1]
 8000612:	7b3a      	ldrb	r2, [r7, #12]
 8000614:	7b7b      	ldrb	r3, [r7, #13]
 8000616:	4053      	eors	r3, r2
 8000618:	b2da      	uxtb	r2, r3
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	404a      	eors	r2, r1
 800061e:	b2d1      	uxtb	r1, r2
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4413      	add	r3, r2
 8000626:	460a      	mov	r2, r1
 8000628:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	789a      	ldrb	r2, [r3, #2]
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	440b      	add	r3, r1
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	4053      	eors	r3, r2
 8000640:	733b      	strb	r3, [r7, #12]
 8000642:	7b3b      	ldrb	r3, [r7, #12]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff6b 	bl	8000520 <xtime>
 800064a:	4603      	mov	r3, r0
 800064c:	733b      	strb	r3, [r7, #12]
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	7899      	ldrb	r1, [r3, #2]
 8000658:	7b3a      	ldrb	r2, [r7, #12]
 800065a:	7b7b      	ldrb	r3, [r7, #13]
 800065c:	4053      	eors	r3, r2
 800065e:	b2da      	uxtb	r2, r3
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	404a      	eors	r2, r1
 8000664:	b2d1      	uxtb	r1, r2
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	460a      	mov	r2, r1
 800066e:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	78da      	ldrb	r2, [r3, #3]
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	4053      	eors	r3, r2
 800067e:	733b      	strb	r3, [r7, #12]
 8000680:	7b3b      	ldrb	r3, [r7, #12]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff4c 	bl	8000520 <xtime>
 8000688:	4603      	mov	r3, r0
 800068a:	733b      	strb	r3, [r7, #12]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	78d9      	ldrb	r1, [r3, #3]
 8000696:	7b3a      	ldrb	r2, [r7, #12]
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	4053      	eors	r3, r2
 800069c:	b2da      	uxtb	r2, r3
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	404a      	eors	r2, r1
 80006a2:	b2d1      	uxtb	r1, r2
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	460a      	mov	r2, r1
 80006ac:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	3301      	adds	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	f67f af57 	bls.w	800056a <MixColumns+0xe>
  }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80006c6:	b5b0      	push	{r4, r5, r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	e33b      	b.n	8000d4c <InvMixColumns+0x686>
  {
    a = (*state)[i][0];
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80006dc:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	789b      	ldrb	r3, [r3, #2]
 80006f4:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	78db      	ldrb	r3, [r3, #3]
 8000700:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8000702:	7afb      	ldrb	r3, [r7, #11]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff0b 	bl	8000520 <xtime>
 800070a:	4603      	mov	r3, r0
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff07 	bl	8000520 <xtime>
 8000712:	4603      	mov	r3, r0
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff03 	bl	8000520 <xtime>
 800071a:	4603      	mov	r3, r0
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff feff 	bl	8000520 <xtime>
 8000722:	7abb      	ldrb	r3, [r7, #10]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fefb 	bl	8000520 <xtime>
 800072a:	4603      	mov	r3, r0
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fef7 	bl	8000520 <xtime>
 8000732:	7abb      	ldrb	r3, [r7, #10]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fef3 	bl	8000520 <xtime>
 800073a:	4603      	mov	r3, r0
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff feef 	bl	8000520 <xtime>
 8000742:	4603      	mov	r3, r0
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff feeb 	bl	8000520 <xtime>
 800074a:	4603      	mov	r3, r0
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fee7 	bl	8000520 <xtime>
 8000752:	7a7b      	ldrb	r3, [r7, #9]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fee3 	bl	8000520 <xtime>
 800075a:	7a7b      	ldrb	r3, [r7, #9]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fedf 	bl	8000520 <xtime>
 8000762:	4603      	mov	r3, r0
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fedb 	bl	8000520 <xtime>
 800076a:	4603      	mov	r3, r0
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fed7 	bl	8000520 <xtime>
 8000772:	4603      	mov	r3, r0
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fed3 	bl	8000520 <xtime>
 800077a:	7a3b      	ldrb	r3, [r7, #8]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fecf 	bl	8000520 <xtime>
 8000782:	7a3b      	ldrb	r3, [r7, #8]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fecb 	bl	8000520 <xtime>
 800078a:	4603      	mov	r3, r0
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fec7 	bl	8000520 <xtime>
 8000792:	7a3b      	ldrb	r3, [r7, #8]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fec3 	bl	8000520 <xtime>
 800079a:	4603      	mov	r3, r0
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff febf 	bl	8000520 <xtime>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff febb 	bl	8000520 <xtime>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff feb7 	bl	8000520 <xtime>
 80007b2:	7afb      	ldrb	r3, [r7, #11]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff feb3 	bl	8000520 <xtime>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461c      	mov	r4, r3
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fead 	bl	8000520 <xtime>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fea9 	bl	8000520 <xtime>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4063      	eors	r3, r4
 80007d2:	b2dc      	uxtb	r4, r3
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fea2 	bl	8000520 <xtime>
 80007dc:	4603      	mov	r3, r0
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fe9e 	bl	8000520 <xtime>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fe9a 	bl	8000520 <xtime>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4063      	eors	r3, r4
 80007f0:	b2dc      	uxtb	r4, r3
 80007f2:	7abb      	ldrb	r3, [r7, #10]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fe93 	bl	8000520 <xtime>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	7abb      	ldrb	r3, [r7, #10]
 8000800:	4053      	eors	r3, r2
 8000802:	b2dd      	uxtb	r5, r3
 8000804:	7abb      	ldrb	r3, [r7, #10]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fe8a 	bl	8000520 <xtime>
 800080c:	4603      	mov	r3, r0
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fe86 	bl	8000520 <xtime>
 8000814:	4603      	mov	r3, r0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe82 	bl	8000520 <xtime>
 800081c:	4603      	mov	r3, r0
 800081e:	406b      	eors	r3, r5
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4063      	eors	r3, r4
 8000824:	b2dc      	uxtb	r4, r3
 8000826:	7a7b      	ldrb	r3, [r7, #9]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fe79 	bl	8000520 <xtime>
 800082e:	4603      	mov	r3, r0
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe75 	bl	8000520 <xtime>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	7a7b      	ldrb	r3, [r7, #9]
 800083c:	4053      	eors	r3, r2
 800083e:	b2dd      	uxtb	r5, r3
 8000840:	7a7b      	ldrb	r3, [r7, #9]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fe6c 	bl	8000520 <xtime>
 8000848:	4603      	mov	r3, r0
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fe68 	bl	8000520 <xtime>
 8000850:	4603      	mov	r3, r0
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fe64 	bl	8000520 <xtime>
 8000858:	4603      	mov	r3, r0
 800085a:	406b      	eors	r3, r5
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4063      	eors	r3, r4
 8000860:	b2dc      	uxtb	r4, r3
 8000862:	7a3b      	ldrb	r3, [r7, #8]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fe5b 	bl	8000520 <xtime>
 800086a:	4603      	mov	r3, r0
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe57 	bl	8000520 <xtime>
 8000872:	4603      	mov	r3, r0
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fe53 	bl	8000520 <xtime>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	7a3b      	ldrb	r3, [r7, #8]
 8000880:	4053      	eors	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4063      	eors	r3, r4
 8000886:	b2d9      	uxtb	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8000890:	7afb      	ldrb	r3, [r7, #11]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe44 	bl	8000520 <xtime>
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe40 	bl	8000520 <xtime>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe3c 	bl	8000520 <xtime>
 80008a8:	7afb      	ldrb	r3, [r7, #11]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe38 	bl	8000520 <xtime>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe34 	bl	8000520 <xtime>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fe30 	bl	8000520 <xtime>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe2c 	bl	8000520 <xtime>
 80008c8:	7abb      	ldrb	r3, [r7, #10]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe28 	bl	8000520 <xtime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fe24 	bl	8000520 <xtime>
 80008d8:	4603      	mov	r3, r0
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe20 	bl	8000520 <xtime>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe1c 	bl	8000520 <xtime>
 80008e8:	7a7b      	ldrb	r3, [r7, #9]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe18 	bl	8000520 <xtime>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fe14 	bl	8000520 <xtime>
 80008f8:	7a7b      	ldrb	r3, [r7, #9]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fe10 	bl	8000520 <xtime>
 8000900:	4603      	mov	r3, r0
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fe0c 	bl	8000520 <xtime>
 8000908:	4603      	mov	r3, r0
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe08 	bl	8000520 <xtime>
 8000910:	4603      	mov	r3, r0
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fe04 	bl	8000520 <xtime>
 8000918:	7a3b      	ldrb	r3, [r7, #8]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe00 	bl	8000520 <xtime>
 8000920:	7a3b      	ldrb	r3, [r7, #8]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fdfc 	bl	8000520 <xtime>
 8000928:	4603      	mov	r3, r0
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fdf8 	bl	8000520 <xtime>
 8000930:	4603      	mov	r3, r0
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fdf4 	bl	8000520 <xtime>
 8000938:	4603      	mov	r3, r0
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fdf0 	bl	8000520 <xtime>
 8000940:	7afb      	ldrb	r3, [r7, #11]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fdec 	bl	8000520 <xtime>
 8000948:	4603      	mov	r3, r0
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fde8 	bl	8000520 <xtime>
 8000950:	4603      	mov	r3, r0
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fde4 	bl	8000520 <xtime>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	7afb      	ldrb	r3, [r7, #11]
 800095e:	4053      	eors	r3, r2
 8000960:	b2dc      	uxtb	r4, r3
 8000962:	7abb      	ldrb	r3, [r7, #10]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fddb 	bl	8000520 <xtime>
 800096a:	4603      	mov	r3, r0
 800096c:	461d      	mov	r5, r3
 800096e:	7abb      	ldrb	r3, [r7, #10]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fdd5 	bl	8000520 <xtime>
 8000976:	4603      	mov	r3, r0
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fdd1 	bl	8000520 <xtime>
 800097e:	4603      	mov	r3, r0
 8000980:	406b      	eors	r3, r5
 8000982:	b2dd      	uxtb	r5, r3
 8000984:	7abb      	ldrb	r3, [r7, #10]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fdca 	bl	8000520 <xtime>
 800098c:	4603      	mov	r3, r0
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fdc6 	bl	8000520 <xtime>
 8000994:	4603      	mov	r3, r0
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fdc2 	bl	8000520 <xtime>
 800099c:	4603      	mov	r3, r0
 800099e:	406b      	eors	r3, r5
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4063      	eors	r3, r4
 80009a4:	b2dc      	uxtb	r4, r3
 80009a6:	7a7b      	ldrb	r3, [r7, #9]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdb9 	bl	8000520 <xtime>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	7a7b      	ldrb	r3, [r7, #9]
 80009b4:	4053      	eors	r3, r2
 80009b6:	b2dd      	uxtb	r5, r3
 80009b8:	7a7b      	ldrb	r3, [r7, #9]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fdb0 	bl	8000520 <xtime>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fdac 	bl	8000520 <xtime>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fda8 	bl	8000520 <xtime>
 80009d0:	4603      	mov	r3, r0
 80009d2:	406b      	eors	r3, r5
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4063      	eors	r3, r4
 80009d8:	b2dc      	uxtb	r4, r3
 80009da:	7a3b      	ldrb	r3, [r7, #8]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd9f 	bl	8000520 <xtime>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fd9b 	bl	8000520 <xtime>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	7a3b      	ldrb	r3, [r7, #8]
 80009f0:	4053      	eors	r3, r2
 80009f2:	b2dd      	uxtb	r5, r3
 80009f4:	7a3b      	ldrb	r3, [r7, #8]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fd92 	bl	8000520 <xtime>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd8e 	bl	8000520 <xtime>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fd8a 	bl	8000520 <xtime>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	406b      	eors	r3, r5
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4063      	eors	r3, r4
 8000a14:	b2d9      	uxtb	r1, r3
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4413      	add	r3, r2
 8000a1e:	460a      	mov	r2, r1
 8000a20:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000a22:	7afb      	ldrb	r3, [r7, #11]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fd7b 	bl	8000520 <xtime>
 8000a2a:	7afb      	ldrb	r3, [r7, #11]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fd77 	bl	8000520 <xtime>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fd73 	bl	8000520 <xtime>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fd6f 	bl	8000520 <xtime>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fd6b 	bl	8000520 <xtime>
 8000a4a:	7abb      	ldrb	r3, [r7, #10]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fd67 	bl	8000520 <xtime>
 8000a52:	7abb      	ldrb	r3, [r7, #10]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fd63 	bl	8000520 <xtime>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fd5f 	bl	8000520 <xtime>
 8000a62:	7abb      	ldrb	r3, [r7, #10]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fd5b 	bl	8000520 <xtime>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fd57 	bl	8000520 <xtime>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fd53 	bl	8000520 <xtime>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fd4f 	bl	8000520 <xtime>
 8000a82:	7a7b      	ldrb	r3, [r7, #9]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fd4b 	bl	8000520 <xtime>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd47 	bl	8000520 <xtime>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fd43 	bl	8000520 <xtime>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd3f 	bl	8000520 <xtime>
 8000aa2:	7a3b      	ldrb	r3, [r7, #8]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd3b 	bl	8000520 <xtime>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd37 	bl	8000520 <xtime>
 8000ab2:	7a3b      	ldrb	r3, [r7, #8]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fd33 	bl	8000520 <xtime>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fd2f 	bl	8000520 <xtime>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fd2b 	bl	8000520 <xtime>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fd27 	bl	8000520 <xtime>
 8000ad2:	7afb      	ldrb	r3, [r7, #11]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fd23 	bl	8000520 <xtime>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd1f 	bl	8000520 <xtime>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	7afb      	ldrb	r3, [r7, #11]
 8000ae8:	4053      	eors	r3, r2
 8000aea:	b2dc      	uxtb	r4, r3
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd16 	bl	8000520 <xtime>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fd12 	bl	8000520 <xtime>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fd0e 	bl	8000520 <xtime>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4063      	eors	r3, r4
 8000b08:	b2dc      	uxtb	r4, r3
 8000b0a:	7abb      	ldrb	r3, [r7, #10]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fd07 	bl	8000520 <xtime>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fd03 	bl	8000520 <xtime>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fcff 	bl	8000520 <xtime>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	7abb      	ldrb	r3, [r7, #10]
 8000b28:	4053      	eors	r3, r2
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4063      	eors	r3, r4
 8000b2e:	b2dc      	uxtb	r4, r3
 8000b30:	7a7b      	ldrb	r3, [r7, #9]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fcf4 	bl	8000520 <xtime>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461d      	mov	r5, r3
 8000b3c:	7a7b      	ldrb	r3, [r7, #9]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fcee 	bl	8000520 <xtime>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fcea 	bl	8000520 <xtime>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	406b      	eors	r3, r5
 8000b50:	b2dd      	uxtb	r5, r3
 8000b52:	7a7b      	ldrb	r3, [r7, #9]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fce3 	bl	8000520 <xtime>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fcdf 	bl	8000520 <xtime>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fcdb 	bl	8000520 <xtime>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	406b      	eors	r3, r5
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	4063      	eors	r3, r4
 8000b72:	b2dc      	uxtb	r4, r3
 8000b74:	7a3b      	ldrb	r3, [r7, #8]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fcd2 	bl	8000520 <xtime>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	7a3b      	ldrb	r3, [r7, #8]
 8000b82:	4053      	eors	r3, r2
 8000b84:	b2dd      	uxtb	r5, r3
 8000b86:	7a3b      	ldrb	r3, [r7, #8]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fcc9 	bl	8000520 <xtime>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fcc5 	bl	8000520 <xtime>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fcc1 	bl	8000520 <xtime>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	406b      	eors	r3, r5
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4063      	eors	r3, r4
 8000ba6:	b2d9      	uxtb	r1, r3
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000bb4:	7afb      	ldrb	r3, [r7, #11]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fcb2 	bl	8000520 <xtime>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fcae 	bl	8000520 <xtime>
 8000bc4:	7afb      	ldrb	r3, [r7, #11]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fcaa 	bl	8000520 <xtime>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fca6 	bl	8000520 <xtime>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fca2 	bl	8000520 <xtime>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fc9e 	bl	8000520 <xtime>
 8000be4:	7abb      	ldrb	r3, [r7, #10]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fc9a 	bl	8000520 <xtime>
 8000bec:	7abb      	ldrb	r3, [r7, #10]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc96 	bl	8000520 <xtime>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fc92 	bl	8000520 <xtime>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fc8e 	bl	8000520 <xtime>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fc8a 	bl	8000520 <xtime>
 8000c0c:	7a7b      	ldrb	r3, [r7, #9]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fc86 	bl	8000520 <xtime>
 8000c14:	7a7b      	ldrb	r3, [r7, #9]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fc82 	bl	8000520 <xtime>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fc7e 	bl	8000520 <xtime>
 8000c24:	7a7b      	ldrb	r3, [r7, #9]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc7a 	bl	8000520 <xtime>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fc76 	bl	8000520 <xtime>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc72 	bl	8000520 <xtime>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fc6e 	bl	8000520 <xtime>
 8000c44:	7a3b      	ldrb	r3, [r7, #8]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fc6a 	bl	8000520 <xtime>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fc66 	bl	8000520 <xtime>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fc62 	bl	8000520 <xtime>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc5e 	bl	8000520 <xtime>
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fc5a 	bl	8000520 <xtime>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	7afb      	ldrb	r3, [r7, #11]
 8000c72:	4053      	eors	r3, r2
 8000c74:	b2dc      	uxtb	r4, r3
 8000c76:	7afb      	ldrb	r3, [r7, #11]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fc51 	bl	8000520 <xtime>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc4d 	bl	8000520 <xtime>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc49 	bl	8000520 <xtime>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4063      	eors	r3, r4
 8000c92:	b2dc      	uxtb	r4, r3
 8000c94:	7abb      	ldrb	r3, [r7, #10]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fc42 	bl	8000520 <xtime>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fc3e 	bl	8000520 <xtime>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	7abb      	ldrb	r3, [r7, #10]
 8000caa:	4053      	eors	r3, r2
 8000cac:	b2dd      	uxtb	r5, r3
 8000cae:	7abb      	ldrb	r3, [r7, #10]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fc35 	bl	8000520 <xtime>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fc31 	bl	8000520 <xtime>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc2d 	bl	8000520 <xtime>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	406b      	eors	r3, r5
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4063      	eors	r3, r4
 8000cce:	b2dc      	uxtb	r4, r3
 8000cd0:	7a7b      	ldrb	r3, [r7, #9]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fc24 	bl	8000520 <xtime>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fc20 	bl	8000520 <xtime>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc1c 	bl	8000520 <xtime>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	7a7b      	ldrb	r3, [r7, #9]
 8000cee:	4053      	eors	r3, r2
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4063      	eors	r3, r4
 8000cf4:	b2dc      	uxtb	r4, r3
 8000cf6:	7a3b      	ldrb	r3, [r7, #8]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fc11 	bl	8000520 <xtime>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461d      	mov	r5, r3
 8000d02:	7a3b      	ldrb	r3, [r7, #8]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fc0b 	bl	8000520 <xtime>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc07 	bl	8000520 <xtime>
 8000d12:	4603      	mov	r3, r0
 8000d14:	406b      	eors	r3, r5
 8000d16:	b2dd      	uxtb	r5, r3
 8000d18:	7a3b      	ldrb	r3, [r7, #8]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fc00 	bl	8000520 <xtime>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fbfc 	bl	8000520 <xtime>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fbf8 	bl	8000520 <xtime>
 8000d30:	4603      	mov	r3, r0
 8000d32:	406b      	eors	r3, r5
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4063      	eors	r3, r4
 8000d38:	b2d9      	uxtb	r1, r3
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	460a      	mov	r2, r1
 8000d44:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	f77f acc0 	ble.w	80006d4 <InvMixColumns+0xe>
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d60 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e01d      	b.n	8000daa <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]
 8000d72:	e014      	b.n	8000d9e <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8000d74:	7bba      	ldrb	r2, [r7, #14]
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	440a      	add	r2, r1
 8000d7e:	4413      	add	r3, r2
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	7bba      	ldrb	r2, [r7, #14]
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <InvSubBytes+0x60>)
 8000d8a:	5c08      	ldrb	r0, [r1, r0]
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	440a      	add	r2, r1
 8000d92:	4413      	add	r3, r2
 8000d94:	4602      	mov	r2, r0
 8000d96:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	73bb      	strb	r3, [r7, #14]
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d9e7      	bls.n	8000d74 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	3301      	adds	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d9de      	bls.n	8000d6e <InvSubBytes+0xe>
    }
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	080069a8 	.word	0x080069a8

08000dc4 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7b5b      	ldrb	r3, [r3, #13]
 8000dd0:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7a5a      	ldrb	r2, [r3, #9]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	795a      	ldrb	r2, [r3, #5]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	785a      	ldrb	r2, [r3, #1]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7bfa      	ldrb	r2, [r7, #15]
 8000dee:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	789b      	ldrb	r3, [r3, #2]
 8000df4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7a9a      	ldrb	r2, [r3, #10]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	799b      	ldrb	r3, [r3, #6]
 8000e08:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7b9a      	ldrb	r2, [r3, #14]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	78db      	ldrb	r3, [r3, #3]
 8000e1c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	79da      	ldrb	r2, [r3, #7]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7ada      	ldrb	r2, [r3, #11]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7bda      	ldrb	r2, [r3, #15]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	73da      	strb	r2, [r3, #15]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fab0 	bl	80003c0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fae7 	bl	8000438 <SubBytes>
    ShiftRows(state);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fb16 	bl	800049c <ShiftRows>
    if (round == Nr) {
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b0a      	cmp	r3, #10
 8000e74:	d00c      	beq.n	8000e90 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fb70 	bl	800055c <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fa9c 	bl	80003c0 <AddRoundKey>
  for (round = 1; ; ++round)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8000e8e:	e7e9      	b.n	8000e64 <Cipher+0x1c>
      break;
 8000e90:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	200a      	movs	r0, #10
 8000e98:	f7ff fa92 	bl	80003c0 <AddRoundKey>
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	200a      	movs	r0, #10
 8000eb8:	f7ff fa82 	bl	80003c0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff7f 	bl	8000dc4 <InvShiftRows>
    InvSubBytes(state);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff4a 	bl	8000d60 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fa74 	bl	80003c0 <AddRoundKey>
    if (round == 0) {
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fbf1 	bl	80006c6 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8000eea:	e7e9      	b.n	8000ec0 <InvCipher+0x1c>
      break;
 8000eec:	bf00      	nop
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e010      	b.n	8000f28 <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	7819      	ldrb	r1, [r3, #0]
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	4403      	add	r3, r0
 8000f1c:	404a      	eors	r2, r1
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	3301      	adds	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	d9eb      	bls.n	8000f06 <XorWithIv+0x10>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <AES_CBC_encrypt_buffer>:

void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, size_t length)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t *Iv = ctx->Iv;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	33b0      	adds	r3, #176	; 0xb0
 8000f4c:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e010      	b.n	8000f76 <AES_CBC_encrypt_buffer+0x3a>
  {
    XorWithIv(buf, Iv);
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f7ff ffcd 	bl	8000ef6 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68b8      	ldr	r0, [r7, #8]
 8000f62:	f7ff ff71 	bl	8000e48 <Cipher>
    Iv = buf;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	3310      	adds	r3, #16
 8000f6e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3310      	adds	r3, #16
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3ea      	bcc.n	8000f54 <AES_CBC_encrypt_buffer+0x18>
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	33b0      	adds	r3, #176	; 0xb0
 8000f82:	2210      	movs	r2, #16
 8000f84:	6939      	ldr	r1, [r7, #16]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 faa4 	bl	80064d4 <memcpy>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <AES_CBC_decrypt_buffer>:

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8000f94:	b5b0      	push	{r4, r5, r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa4:	e022      	b.n	8000fec <AES_CBC_decrypt_buffer+0x58>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	f107 0414 	add.w	r4, r7, #20
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	6859      	ldr	r1, [r3, #4]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    InvCipher((state_t*)buf, ctx->RoundKey);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	68b8      	ldr	r0, [r7, #8]
 8000fbc:	f7ff ff72 	bl	8000ea4 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	33b0      	adds	r3, #176	; 0xb0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	68b8      	ldr	r0, [r7, #8]
 8000fc8:	f7ff ff95 	bl	8000ef6 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	33b0      	adds	r3, #176	; 0xb0
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	f107 0414 	add.w	r4, r7, #20
 8000fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd8:	6028      	str	r0, [r5, #0]
 8000fda:	6069      	str	r1, [r5, #4]
 8000fdc:	60aa      	str	r2, [r5, #8]
 8000fde:	60eb      	str	r3, [r5, #12]
    buf += AES_BLOCKLEN;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3310      	adds	r3, #16
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
 8000fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3d8      	bcc.n	8000fa6 <AES_CBC_decrypt_buffer+0x12>
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001000 <print_timeout_errors>:
#include "deca_regs.h"
#include "dw_config.h"
#include "stdio_d.h"

void print_timeout_errors(uint32_t statusRegister)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if ((statusRegister & SYS_STATUS_RXRFTO) != 0) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <print_timeout_errors+0x18>
		stdio_write("RX frame wait timeout event detected.\r\n");
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <print_timeout_errors+0x30>)
 8001014:	f002 f9d6 	bl	80033c4 <stdio_write>
	}
	if ((statusRegister & SYS_STATUS_RXPTO) != 0) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <print_timeout_errors+0x28>
		stdio_write("RX preamble detection timeout event detected.\r\n");
 8001022:	4804      	ldr	r0, [pc, #16]	; (8001034 <print_timeout_errors+0x34>)
 8001024:	f002 f9ce 	bl	80033c4 <stdio_write>
	}
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	08006518 	.word	0x08006518
 8001034:	08006540 	.word	0x08006540

08001038 <print_status_errors>:

void print_status_errors(uint32_t statusRegister)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	if (statusRegister & SYS_STATUS_RXPHE) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <print_status_errors+0x18>
		stdio_write("RX PHY header error event detected.\r\n");
 800104a:	4817      	ldr	r0, [pc, #92]	; (80010a8 <print_status_errors+0x70>)
 800104c:	f002 f9ba 	bl	80033c4 <stdio_write>
	}
	if (statusRegister & SYS_STATUS_RXFCE){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <print_status_errors+0x28>
		stdio_write("RX FCS error event detected.\r\n");
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <print_status_errors+0x74>)
 800105c:	f002 f9b2 	bl	80033c4 <stdio_write>
	}
	if (statusRegister & SYS_STATUS_RXRFSL) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <print_status_errors+0x38>
		stdio_write("RX Reed-Solomon frame sync loss event detected.\r\n");
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <print_status_errors+0x78>)
 800106c:	f002 f9aa 	bl	80033c4 <stdio_write>
	}
	if (statusRegister & SYS_STATUS_RXSFDTO) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <print_status_errors+0x48>
		stdio_write("RX SFD timeout event detected.\r\n");
 800107a:	480e      	ldr	r0, [pc, #56]	; (80010b4 <print_status_errors+0x7c>)
 800107c:	f002 f9a2 	bl	80033c4 <stdio_write>
	}
	if (statusRegister & SYS_STATUS_AFFREJ) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <print_status_errors+0x58>
		stdio_write("RX automatic frame filtering rejection event detected.\r\n");
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <print_status_errors+0x80>)
 800108c:	f002 f99a 	bl	80033c4 <stdio_write>
	}
	if (statusRegister & SYS_STATUS_LDEERR) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <print_status_errors+0x68>
		stdio_write("RX LDE error event detected.\r\n");
 800109a:	4808      	ldr	r0, [pc, #32]	; (80010bc <print_status_errors+0x84>)
 800109c:	f002 f992 	bl	80033c4 <stdio_write>
	}
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	08006570 	.word	0x08006570
 80010ac:	08006598 	.word	0x08006598
 80010b0:	080065b8 	.word	0x080065b8
 80010b4:	080065ec 	.word	0x080065ec
 80010b8:	08006610 	.word	0x08006610
 80010bc:	0800664c 	.word	0x0800664c

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f002 f9c6 	bl	8003454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f810 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f000 f8da 	bl	8001284 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010d0:	f000 f86a 	bl	80011a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010d4:	f000 f8a6 	bl	8001224 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  stdio_init(&huart1);
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <main+0x28>)
 80010da:	f002 f963 	bl	80033a4 <stdio_init>
  rid_main();
 80010de:	f000 fb95 	bl	800180c <rid_main>
  //  dw_main();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e2:	bf00      	nop
 80010e4:	e7fd      	b.n	80010e2 <main+0x22>
 80010e6:	bf00      	nop
 80010e8:	20000190 	.word	0x20000190

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0a6      	sub	sp, #152	; 0x98
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010f6:	2228      	movs	r2, #40	; 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 f9f8 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2258      	movs	r2, #88	; 0x58
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f005 f9ea 	bl	80064f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111c:	2302      	movs	r3, #2
 800111e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	2301      	movs	r3, #1
 8001122:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001124:	2310      	movs	r3, #16
 8001126:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001138:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800113c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fcf2 	bl	8003b34 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001156:	f000 f905 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001170:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001174:	2102      	movs	r1, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fd30 	bl	8004bdc <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001182:	f000 f8ef 	bl	8001364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001186:	2301      	movs	r3, #1
 8001188:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f003 ff59 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800119c:	f000 f8e2 	bl	8001364 <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3798      	adds	r7, #152	; 0x98
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_SPI1_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <MX_SPI1_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_SPI1_Init+0x74>)
 80011b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_SPI1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_SPI1_Init+0x74>)
 80011c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_SPI1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_SPI1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_SPI1_Init+0x74>)
 80011d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_SPI1_Init+0x74>)
 80011de:	2210      	movs	r2, #16
 80011e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_SPI1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_SPI1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_SPI1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_SPI1_Init+0x74>)
 80011f6:	2207      	movs	r2, #7
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_SPI1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_SPI1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_SPI1_Init+0x74>)
 8001208:	f004 f93c 	bl	8005484 <HAL_SPI_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 f8a7 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000012c 	.word	0x2000012c
 8001220:	40013000 	.word	0x40013000

08001224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_USART1_UART_Init+0x58>)
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <MX_USART1_UART_Init+0x5c>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_USART1_UART_Init+0x58>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART1_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_USART1_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USART1_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USART1_UART_Init+0x58>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART1_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART1_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USART1_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART1_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART1_UART_Init+0x58>)
 8001268:	f004 fc98 	bl	8005b9c <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001272:	f000 f877 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000190 	.word	0x20000190
 8001280:	40013800 	.word	0x40013800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <MX_GPIO_Init+0xd4>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a28      	ldr	r2, [pc, #160]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012bc:	6153      	str	r3, [r2, #20]
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	4a22      	ldr	r2, [pc, #136]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6153      	str	r3, [r2, #20]
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f002 fc0a 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <MX_GPIO_Init+0xd8>)
 80012f6:	f002 fc05 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001304:	2302      	movs	r3, #2
 8001306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	4814      	ldr	r0, [pc, #80]	; (8001360 <MX_GPIO_Init+0xdc>)
 8001310:	f002 fa6e 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f002 fa5e 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001334:	2340      	movs	r3, #64	; 0x40
 8001336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4619      	mov	r1, r3
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_GPIO_Init+0xd8>)
 800134c:	f002 fa50 	bl	80037f0 <HAL_GPIO_Init>

}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	48000400 	.word	0x48000400
 8001360:	48000800 	.word	0x48000800

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <Error_Handler+0x8>

08001370 <is_ranging_init_msg>:
static uint64 get_tx_timestamp_u64(void);
static uint64 get_rx_timestamp_u64(void);
static void final_msg_set_ts(uint8 *ts_field, uint64 ts);

bool is_ranging_init_msg(uint8_t* buffer)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	buffer[ALL_MSG_SN_IDX] = 0;	// Make received frame count 0 to compare
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3302      	adds	r3, #2
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
	return (memcmp(buffer, ranging_init_msg, RANGING_INIT_MSG_COMMON_LEN) == 0);
 8001380:	2210      	movs	r2, #16
 8001382:	4907      	ldr	r1, [pc, #28]	; (80013a0 <is_ranging_init_msg+0x30>)
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f005 f895 	bl	80064b4 <memcmp>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf0c      	ite	eq
 8001390:	2301      	moveq	r3, #1
 8001392:	2300      	movne	r3, #0
 8001394:	b2db      	uxtb	r3, r3
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000030 	.word	0x20000030

080013a4 <receive_ranging_init_msg>:
}

uint8_t numTimeouts = 0;

receive_status_t receive_ranging_init_msg(uint8_t buffer[RX_BUF_LEN])
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	uint32_t statusReg = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
	uint32_t msgReceivedFlags = SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <receive_ranging_init_msg+0xc4>)
 80013b2:	613b      	str	r3, [r7, #16]
	char statusRegData[4];
	while (!((statusReg = dwt_read32bitreg(SYS_STATUS_ID)) & msgReceivedFlags));
 80013b4:	bf00      	nop
 80013b6:	2100      	movs	r1, #0
 80013b8:	200f      	movs	r0, #15
 80013ba:	f001 fa76 	bl	80028aa <dwt_read32bitoffsetreg>
 80013be:	6178      	str	r0, [r7, #20]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f5      	beq.n	80013b6 <receive_ranging_init_msg+0x12>

	if ((statusReg & SYS_STATUS_ALL_RX_TO) != 0) {
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f403 1308 	and.w	r3, r3, #2228224	; 0x220000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d018      	beq.n	8001406 <receive_ranging_init_msg+0x62>
		print_timeout_errors(statusReg);
 80013d4:	6978      	ldr	r0, [r7, #20]
 80013d6:	f7ff fe13 	bl	8001000 <print_timeout_errors>

        dwt_write32bitreg(SYS_STATUS_ID, msgReceivedFlags);
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	2100      	movs	r1, #0
 80013de:	200f      	movs	r0, #15
 80013e0:	f001 fae7 	bl	80029b2 <dwt_write32bitoffsetreg>

        ++numTimeouts;
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <receive_ranging_init_msg+0xc8>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <receive_ranging_init_msg+0xc8>)
 80013ee:	701a      	strb	r2, [r3, #0]
        if (numTimeouts >= 3) {
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <receive_ranging_init_msg+0xc8>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d904      	bls.n	8001402 <receive_ranging_init_msg+0x5e>
        	numTimeouts = 0;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <receive_ranging_init_msg+0xc8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
        	return STATUS_RECEIVE_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e02e      	b.n	8001460 <receive_ranging_init_msg+0xbc>
        }

		return STATUS_RECEIVE_TIMEOUT;
 8001402:	2302      	movs	r3, #2
 8001404:	e02c      	b.n	8001460 <receive_ranging_init_msg+0xbc>
	}
	else if ((statusReg & SYS_STATUS_ALL_RX_ERR) != 0) {
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <receive_ranging_init_msg+0xcc>)
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <receive_ranging_init_msg+0x80>
		print_status_errors(statusReg);
 8001410:	6978      	ldr	r0, [r7, #20]
 8001412:	f7ff fe11 	bl	8001038 <print_status_errors>
        dwt_write32bitreg(SYS_STATUS_ID, msgReceivedFlags);
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	2100      	movs	r1, #0
 800141a:	200f      	movs	r0, #15
 800141c:	f001 fac9 	bl	80029b2 <dwt_write32bitoffsetreg>
		return STATUS_RECEIVE_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e01d      	b.n	8001460 <receive_ranging_init_msg+0xbc>
	}

	/* Clear good RX frame event in the DW1000 status register. */
	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8001424:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001428:	2100      	movs	r1, #0
 800142a:	200f      	movs	r0, #15
 800142c:	f001 fac1 	bl	80029b2 <dwt_write32bitoffsetreg>

	memset(buffer, 0, RX_BUF_LEN);
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f005 f85b 	bl	80064f0 <memset>

	uint32_t frameLen = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 800143a:	2100      	movs	r1, #0
 800143c:	2010      	movs	r0, #16
 800143e:	f001 fa34 	bl	80028aa <dwt_read32bitoffsetreg>
 8001442:	4603      	mov	r3, r0
 8001444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001448:	60fb      	str	r3, [r7, #12]
	if (frameLen <= RX_BUF_LEN) {
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b80      	cmp	r3, #128	; 0x80
 800144e:	d806      	bhi.n	800145e <receive_ranging_init_msg+0xba>
		dwt_readrxdata(buffer, frameLen, 0);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	b29b      	uxth	r3, r3
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f001 f94d 	bl	80026f8 <dwt_readrxdata>
	}

    return STATUS_RECEIVE_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2427d000 	.word	0x2427d000
 800146c:	20000230 	.word	0x20000230
 8001470:	24059000 	.word	0x24059000

08001474 <send_poll_msg>:

send_status_t send_poll_msg()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	/* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
	tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <send_poll_msg+0x68>)
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <send_poll_msg+0x6c>)
 800147e:	709a      	strb	r2, [r3, #2]
	dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8001480:	2200      	movs	r2, #0
 8001482:	4917      	ldr	r1, [pc, #92]	; (80014e0 <send_poll_msg+0x6c>)
 8001484:	200c      	movs	r0, #12
 8001486:	f001 f8f8 	bl	800267a <dwt_writetxdata>
	dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 800148a:	2201      	movs	r2, #1
 800148c:	2100      	movs	r1, #0
 800148e:	200c      	movs	r0, #12
 8001490:	f001 f912 	bl	80026b8 <dwt_writetxfctrl>

	/* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
	 * set by dwt_setrxaftertxdelay() has elapsed. */
	if (dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED) != DWT_SUCCESS) {
 8001494:	2002      	movs	r0, #2
 8001496:	f001 fc41 	bl	8002d1c <dwt_starttx>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <send_poll_msg+0x36>
		stdio_write("Poll message rx error.\n\r");
 80014a0:	4810      	ldr	r0, [pc, #64]	; (80014e4 <send_poll_msg+0x70>)
 80014a2:	f001 ff8f 	bl	80033c4 <stdio_write>
		return STATUS_SEND_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e015      	b.n	80014d6 <send_poll_msg+0x62>
	}

	/* Poll DW1000 until TX frame sent event set. */
	while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 80014aa:	bf00      	nop
 80014ac:	2100      	movs	r1, #0
 80014ae:	200f      	movs	r0, #15
 80014b0:	f001 f9fb 	bl	80028aa <dwt_read32bitoffsetreg>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f6      	beq.n	80014ac <send_poll_msg+0x38>
	{ };

	/* Clear good TX frame sent in the DW1000 status register. */
	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	2100      	movs	r1, #0
 80014c2:	200f      	movs	r0, #15
 80014c4:	f001 fa75 	bl	80029b2 <dwt_write32bitoffsetreg>

	/* Increment frame sequence number after transmission of the poll message (modulo 256). */
	frame_seq_nb++;
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <send_poll_msg+0x68>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <send_poll_msg+0x68>)
 80014d2:	701a      	strb	r2, [r3, #0]

	return STATUS_SEND_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000214 	.word	0x20000214
 80014e0:	2000000c 	.word	0x2000000c
 80014e4:	0800668c 	.word	0x0800668c

080014e8 <receive_response_msg>:

receive_status_t receive_response_msg(uint8_t buffer[RX_BUF_LEN])
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	uint32_t statusReg = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
	uint32_t msgReceivedFlags = SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <receive_response_msg+0xa4>)
 80014f6:	613b      	str	r3, [r7, #16]

	while (!((statusReg = dwt_read32bitreg(SYS_STATUS_ID)) & msgReceivedFlags));
 80014f8:	bf00      	nop
 80014fa:	2100      	movs	r1, #0
 80014fc:	200f      	movs	r0, #15
 80014fe:	f001 f9d4 	bl	80028aa <dwt_read32bitoffsetreg>
 8001502:	6178      	str	r0, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f5      	beq.n	80014fa <receive_response_msg+0x12>

	if ((statusReg & SYS_STATUS_ALL_RX_TO) != 0) {
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f403 1308 	and.w	r3, r3, #2228224	; 0x220000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00b      	beq.n	8001530 <receive_response_msg+0x48>
		print_timeout_errors(statusReg);
 8001518:	6978      	ldr	r0, [r7, #20]
 800151a:	f7ff fd71 	bl	8001000 <print_timeout_errors>

        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <receive_response_msg+0xa8>)
 8001520:	2100      	movs	r1, #0
 8001522:	200f      	movs	r0, #15
 8001524:	f001 fa45 	bl	80029b2 <dwt_write32bitoffsetreg>
		dwt_rxreset();
 8001528:	f001 fd21 	bl	8002f6e <dwt_rxreset>

		return STATUS_RECEIVE_TIMEOUT;
 800152c:	2302      	movs	r3, #2
 800152e:	e029      	b.n	8001584 <receive_response_msg+0x9c>
	}
	else if ((statusReg & SYS_STATUS_ALL_RX_ERR) != 0) {
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <receive_response_msg+0xac>)
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <receive_response_msg+0x6a>
		print_status_errors(statusReg);
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff fd7c 	bl	8001038 <print_status_errors>

        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <receive_response_msg+0xa8>)
 8001542:	2100      	movs	r1, #0
 8001544:	200f      	movs	r0, #15
 8001546:	f001 fa34 	bl	80029b2 <dwt_write32bitoffsetreg>
		dwt_rxreset();
 800154a:	f001 fd10 	bl	8002f6e <dwt_rxreset>
		return STATUS_RECEIVE_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e018      	b.n	8001584 <receive_response_msg+0x9c>
	}

	/* Clear good RX frame event in the DW1000 status register. */
	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8001552:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001556:	2100      	movs	r1, #0
 8001558:	200f      	movs	r0, #15
 800155a:	f001 fa2a 	bl	80029b2 <dwt_write32bitoffsetreg>

	uint32 frame_len;

	/* A frame has been received, read it into the local buffer. */
	frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 800155e:	2100      	movs	r1, #0
 8001560:	2010      	movs	r0, #16
 8001562:	f001 f9a2 	bl	80028aa <dwt_read32bitoffsetreg>
 8001566:	4603      	mov	r3, r0
 8001568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800156c:	60fb      	str	r3, [r7, #12]
	if (frame_len <= RX_BUF_LEN) {
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b80      	cmp	r3, #128	; 0x80
 8001572:	d806      	bhi.n	8001582 <receive_response_msg+0x9a>
		dwt_readrxdata(buffer, frame_len, 0);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	b29b      	uxth	r3, r3
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f001 f8bb 	bl	80026f8 <dwt_readrxdata>
	}

	return STATUS_RECEIVE_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2427d000 	.word	0x2427d000
 8001590:	24279000 	.word	0x24279000
 8001594:	24059000 	.word	0x24059000

08001598 <send_final_msg>:

send_status_t send_final_msg()
{
 8001598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
	/* Retrieve poll transmission and response reception timestamp. */
	poll_tx_ts = get_tx_timestamp_u64();
 80015a0:	f000 f896 	bl	80016d0 <get_tx_timestamp_u64>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4940      	ldr	r1, [pc, #256]	; (80016ac <send_final_msg+0x114>)
 80015aa:	e9c1 2300 	strd	r2, r3, [r1]
	resp_rx_ts = get_rx_timestamp_u64();
 80015ae:	f000 f8ca 	bl	8001746 <get_rx_timestamp_u64>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	493e      	ldr	r1, [pc, #248]	; (80016b0 <send_final_msg+0x118>)
 80015b8:	e9c1 2300 	strd	r2, r3, [r1]

	/* Compute final message transmission time. See NOTE 10 below. */
	uint32_t final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80015bc:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <send_final_msg+0x118>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	493c      	ldr	r1, [pc, #240]	; (80016b4 <send_final_msg+0x11c>)
 80015c4:	eb12 0801 	adds.w	r8, r2, r1
 80015c8:	f143 0900 	adc.w	r9, r3, #0
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80015d8:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 80015dc:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80015e0:	4613      	mov	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
	dwt_setdelayedtrxtime(final_tx_time);
 80015e4:	6978      	ldr	r0, [r7, #20]
 80015e6:	f001 fb8b 	bl	8002d00 <dwt_setdelayedtrxtime>

	/* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
	final_tx_ts = (((uint64)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2200      	movs	r2, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	60fa      	str	r2, [r7, #12]
 80015f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015f6:	460b      	mov	r3, r1
 80015f8:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 80015fc:	460b      	mov	r3, r1
 80015fe:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8001602:	f42a 74ff 	bic.w	r4, sl, #510	; 0x1fe
 8001606:	f024 0401 	bic.w	r4, r4, #1
 800160a:	f00b 05ff 	and.w	r5, fp, #255	; 0xff
 800160e:	f244 0379 	movw	r3, #16505	; 0x4079
 8001612:	18e3      	adds	r3, r4, r3
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	f145 0300 	adc.w	r3, r5, #0
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <send_final_msg+0x120>)
 800161e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001622:	e9c3 1200 	strd	r1, r2, [r3]

	/* Write all timestamps in the final message. See NOTE 11 below. */
	final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <send_final_msg+0x114>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	4823      	ldr	r0, [pc, #140]	; (80016bc <send_final_msg+0x124>)
 800162e:	f000 f8c5 	bl	80017bc <final_msg_set_ts>
	final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <send_final_msg+0x118>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	4821      	ldr	r0, [pc, #132]	; (80016c0 <send_final_msg+0x128>)
 800163a:	f000 f8bf 	bl	80017bc <final_msg_set_ts>
	final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <send_final_msg+0x120>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <send_final_msg+0x12c>)
 8001646:	f000 f8b9 	bl	80017bc <final_msg_set_ts>

	/* Write and send final message. See NOTE 8 below. */
	tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <send_final_msg+0x130>)
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <send_final_msg+0x134>)
 8001650:	709a      	strb	r2, [r3, #2]
	dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 8001652:	2200      	movs	r2, #0
 8001654:	491d      	ldr	r1, [pc, #116]	; (80016cc <send_final_msg+0x134>)
 8001656:	2018      	movs	r0, #24
 8001658:	f001 f80f 	bl	800267a <dwt_writetxdata>
	dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 800165c:	2201      	movs	r2, #1
 800165e:	2100      	movs	r1, #0
 8001660:	2018      	movs	r0, #24
 8001662:	f001 f829 	bl	80026b8 <dwt_writetxfctrl>

	if (dwt_starttx(DWT_START_TX_DELAYED) != DWT_SUCCESS) {
 8001666:	2001      	movs	r0, #1
 8001668:	f001 fb58 	bl	8002d1c <dwt_starttx>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <send_final_msg+0xde>
		return STATUS_SEND_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e015      	b.n	80016a2 <send_final_msg+0x10a>
	}

	/* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
	while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8001676:	bf00      	nop
 8001678:	2100      	movs	r1, #0
 800167a:	200f      	movs	r0, #15
 800167c:	f001 f915 	bl	80028aa <dwt_read32bitoffsetreg>
 8001680:	4603      	mov	r3, r0
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f6      	beq.n	8001678 <send_final_msg+0xe0>
	{ };

	/* Clear good TX frame sent in the DW1000 status register. */
	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	2100      	movs	r1, #0
 800168e:	200f      	movs	r0, #15
 8001690:	f001 f98f 	bl	80029b2 <dwt_write32bitoffsetreg>

	/* Increment frame sequence number after transmission of the final message (modulo 256). */
	frame_seq_nb++;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <send_final_msg+0x130>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <send_final_msg+0x130>)
 800169e:	701a      	strb	r2, [r3, #0]

	return STATUS_SEND_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ac:	20000218 	.word	0x20000218
 80016b0:	20000220 	.word	0x20000220
 80016b4:	27100000 	.word	0x27100000
 80016b8:	20000228 	.word	0x20000228
 80016bc:	20000022 	.word	0x20000022
 80016c0:	20000026 	.word	0x20000026
 80016c4:	2000002a 	.word	0x2000002a
 80016c8:	20000214 	.word	0x20000214
 80016cc:	20000018 	.word	0x20000018

080016d0 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 80016d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f001 f818 	bl	800271c <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 80016ec:	2304      	movs	r3, #4
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e01e      	b.n	8001730 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 80016f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	020b      	lsls	r3, r1, #8
 8001700:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001704:	0202      	lsls	r2, r0, #8
 8001706:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 800170a:	1d3a      	adds	r2, r7, #4
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2200      	movs	r2, #0
 8001716:	461c      	mov	r4, r3
 8001718:	4615      	mov	r5, r2
 800171a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800171e:	ea42 0804 	orr.w	r8, r2, r4
 8001722:	ea43 0905 	orr.w	r9, r3, r5
 8001726:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3b01      	subs	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dadd      	bge.n	80016f2 <get_tx_timestamp_u64+0x22>
    }
    return ts;
 8001736:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001746 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 8001746:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4618      	mov	r0, r3
 800175e:	f000 ffeb 	bl	8002738 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8001762:	2304      	movs	r3, #4
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e01e      	b.n	80017a6 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8001768:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	020b      	lsls	r3, r1, #8
 8001776:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800177a:	0202      	lsls	r2, r0, #8
 800177c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8001780:	1d3a      	adds	r2, r7, #4
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2200      	movs	r2, #0
 800178c:	461c      	mov	r4, r3
 800178e:	4615      	mov	r5, r2
 8001790:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001794:	ea42 0804 	orr.w	r8, r2, r4
 8001798:	ea43 0905 	orr.w	r9, r3, r5
 800179c:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dadd      	bge.n	8001768 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 80017ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080017bc <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_set_ts(uint8 *ts_field, uint64 ts)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	e9c7 2300 	strd	r2, r3, [r7]
    int i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e013      	b.n	80017f6 <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8) ts;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	783a      	ldrb	r2, [r7, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
        ts >>= 8;
 80017d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	0a02      	lsrs	r2, r0, #8
 80017e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80017ea:	0a0b      	lsrs	r3, r1, #8
 80017ec:	e9c7 2300 	strd	r2, r3, [r7]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	dde8      	ble.n	80017ce <final_msg_set_ts+0x12>
    }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <rid_main>:
rid_state_t perform_blink();
rid_state_t perform_ranging();
rid_state_t perform_authentication();

void rid_main()
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	stdio_write("\r\nstarting RID\r\n");
 8001810:	482b      	ldr	r0, [pc, #172]	; (80018c0 <rid_main+0xb4>)
 8001812:	f001 fdd7 	bl	80033c4 <stdio_write>

	AES_init_ctx(&aes_context, &symmetric_key[0]);
 8001816:	492b      	ldr	r1, [pc, #172]	; (80018c4 <rid_main+0xb8>)
 8001818:	482b      	ldr	r0, [pc, #172]	; (80018c8 <rid_main+0xbc>)
 800181a:	f7fe fdb3 	bl	8000384 <AES_init_ctx>

	if (init_dw1000() != DWT_SUCCESS) {
 800181e:	f000 f88d 	bl	800193c <init_dw1000>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <rid_main+0x26>
		stdio_write("initializing dw1000 failed; spinlocking.\r\n");
 8001828:	4828      	ldr	r0, [pc, #160]	; (80018cc <rid_main+0xc0>)
 800182a:	f001 fdcb 	bl	80033c4 <stdio_write>
		while (1);
 800182e:	bf00      	nop
 8001830:	e7fd      	b.n	800182e <rid_main+0x22>
	}

	state.hasChanged = true;
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <rid_main+0xc4>)
 8001834:	2201      	movs	r2, #1
 8001836:	705a      	strb	r2, [r3, #1]

	while (1) {
		switch (state.value) {
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <rid_main+0xc4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d030      	beq.n	80018a2 <rid_main+0x96>
 8001840:	2b02      	cmp	r3, #2
 8001842:	dcf9      	bgt.n	8001838 <rid_main+0x2c>
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <rid_main+0x42>
 8001848:	2b01      	cmp	r3, #1
 800184a:	d01e      	beq.n	800188a <rid_main+0x7e>
 800184c:	e7f4      	b.n	8001838 <rid_main+0x2c>
			case STATE_DISCOVERY:
				print_state_if_changed(&state, "\r\nIn DISCOVERY\r\n");
 800184e:	4921      	ldr	r1, [pc, #132]	; (80018d4 <rid_main+0xc8>)
 8001850:	481f      	ldr	r0, [pc, #124]	; (80018d0 <rid_main+0xc4>)
 8001852:	f000 f85f 	bl	8001914 <print_state_if_changed>
//				clear_and_set_led(LD1_Pin);

				dwt_setrxaftertxdelay(800);
 8001856:	f44f 7048 	mov.w	r0, #800	; 0x320
 800185a:	f001 f98f 	bl	8002b7c <dwt_setrxaftertxdelay>
				dwt_setrxtimeout(0);
 800185e:	2000      	movs	r0, #0
 8001860:	f001 fb36 	bl	8002ed0 <dwt_setrxtimeout>
				dwt_setpreambledetecttimeout(0x1000);
 8001864:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001868:	f001 fb72 	bl	8002f50 <dwt_setpreambledetecttimeout>

				update_state(&state, perform_blink());
 800186c:	f000 f8b0 	bl	80019d0 <perform_blink>
 8001870:	4603      	mov	r3, r0
 8001872:	4619      	mov	r1, r3
 8001874:	4816      	ldr	r0, [pc, #88]	; (80018d0 <rid_main+0xc4>)
 8001876:	f000 f833 	bl	80018e0 <update_state>

				if (state.value == STATE_DISCOVERY) {
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <rid_main+0xc4>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11b      	bne.n	80018ba <rid_main+0xae>
					HAL_Delay(100);
 8001882:	2064      	movs	r0, #100	; 0x64
 8001884:	f001 fe4c 	bl	8003520 <HAL_Delay>
				}
				break;
 8001888:	e017      	b.n	80018ba <rid_main+0xae>

			case STATE_RANGING:
				print_state_if_changed(&state, "\r\nIn RANGING\r\n");
 800188a:	4913      	ldr	r1, [pc, #76]	; (80018d8 <rid_main+0xcc>)
 800188c:	4810      	ldr	r0, [pc, #64]	; (80018d0 <rid_main+0xc4>)
 800188e:	f000 f841 	bl	8001914 <print_state_if_changed>
//				clear_and_set_led(LD2_Pin);

				update_state(&state, perform_ranging());
 8001892:	f000 f8db 	bl	8001a4c <perform_ranging>
 8001896:	4603      	mov	r3, r0
 8001898:	4619      	mov	r1, r3
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <rid_main+0xc4>)
 800189c:	f000 f820 	bl	80018e0 <update_state>
				break;
 80018a0:	e00c      	b.n	80018bc <rid_main+0xb0>

			case STATE_AUTHENTICATION:
				print_state_if_changed(&state, "\r\nIn AUTHENTICATION\r\n");
 80018a2:	490e      	ldr	r1, [pc, #56]	; (80018dc <rid_main+0xd0>)
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <rid_main+0xc4>)
 80018a6:	f000 f835 	bl	8001914 <print_state_if_changed>
//				clear_and_set_led(LD3_Pin);

				update_state(&state, perform_authentication());
 80018aa:	f000 f94f 	bl	8001b4c <perform_authentication>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <rid_main+0xc4>)
 80018b4:	f000 f814 	bl	80018e0 <update_state>
				break;
 80018b8:	e000      	b.n	80018bc <rid_main+0xb0>
				break;
 80018ba:	bf00      	nop
		switch (state.value) {
 80018bc:	e7bc      	b.n	8001838 <rid_main+0x2c>
 80018be:	bf00      	nop
 80018c0:	080066a8 	.word	0x080066a8
 80018c4:	20000044 	.word	0x20000044
 80018c8:	200002b8 	.word	0x200002b8
 80018cc:	080066bc 	.word	0x080066bc
 80018d0:	20000234 	.word	0x20000234
 80018d4:	080066e8 	.word	0x080066e8
 80018d8:	080066fc 	.word	0x080066fc
 80018dc:	0800670c 	.word	0x0800670c

080018e0 <update_state>:
		}
	}
}

void update_state(state_t* state, const rid_state_t value)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
	if (state->value == value) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d103      	bne.n	80018fe <update_state+0x1e>
		state->hasChanged = 0;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	705a      	strb	r2, [r3, #1]
		return;
 80018fc:	e005      	b.n	800190a <update_state+0x2a>
	}

	state->value = value;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	701a      	strb	r2, [r3, #0]
	state->hasChanged = true;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
}
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <print_state_if_changed>:

void print_state_if_changed(const state_t* state, const char* str)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	// if state is unchanged, don't print a new state value
	if (state->hasChanged == false) {
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	785b      	ldrb	r3, [r3, #1]
 8001922:	f083 0301 	eor.w	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d103      	bne.n	8001934 <print_state_if_changed+0x20>
		return;
	}

	stdio_write(str);
 800192c:	6838      	ldr	r0, [r7, #0]
 800192e:	f001 fd49 	bl	80033c4 <stdio_write>
 8001932:	e000      	b.n	8001936 <print_state_if_changed+0x22>
		return;
 8001934:	bf00      	nop
}
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <init_dw1000>:
//
//	HAL_GPIO_WritePin(GPIOB, gpioPin, GPIO_PIN_SET);
}

int init_dw1000()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	setup_DW1000RSTnIRQ(0);
 8001940:	2000      	movs	r0, #0
 8001942:	f001 fcc3 	bl	80032cc <setup_DW1000RSTnIRQ>

	reset_DW1000();
 8001946:	f001 fc9d 	bl	8003284 <reset_DW1000>
	port_set_dw1000_slowrate();
 800194a:	f001 fcfd 	bl	8003348 <port_set_dw1000_slowrate>

    if (dwt_initialise(DWT_LOADUCODE) != DWT_SUCCESS) {
 800194e:	2001      	movs	r0, #1
 8001950:	f000 fbb0 	bl	80020b4 <dwt_initialise>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <init_dw1000+0x24>
    	return DWT_ERROR;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195e:	e00f      	b.n	8001980 <init_dw1000+0x44>
    }

    port_set_dw1000_fastrate();
 8001960:	f001 fcfe 	bl	8003360 <port_set_dw1000_fastrate>

    dwt_configure(&dw1000_config);
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <init_dw1000+0x48>)
 8001966:	f000 fcff 	bl	8002368 <dwt_configure>

    dwt_setrxantennadelay(RX_ANT_DLY);
 800196a:	f244 0079 	movw	r0, #16505	; 0x4079
 800196e:	f000 fe65 	bl	800263c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8001972:	f244 0079 	movw	r0, #16505	; 0x4079
 8001976:	f000 fe71 	bl	800265c <dwt_settxantennadelay>

	setup_frame_filtering();
 800197a:	f000 f805 	bl	8001988 <setup_frame_filtering>

    return DWT_SUCCESS;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000000 	.word	0x20000000

08001988 <setup_frame_filtering>:

void setup_frame_filtering()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
	uint16 pan_id = 0xDECA;
 800198e:	f64d 63ca 	movw	r3, #57034	; 0xdeca
 8001992:	81fb      	strh	r3, [r7, #14]
	uint16 short_addr = 0x3152; // 'R', '1' (little-endian)
 8001994:	f243 1352 	movw	r3, #12626	; 0x3152
 8001998:	81bb      	strh	r3, [r7, #12]
	uint8 extended_addr[] = {'R', 'I', 'D', '0', '0', '0', '0', '1'};
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <setup_frame_filtering+0x44>)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a2:	e883 0003 	stmia.w	r3, {r0, r1}

    dwt_setpanid(pan_id);
 80019a6:	89fb      	ldrh	r3, [r7, #14]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 f85b 	bl	8002a64 <dwt_setpanid>
    dwt_setaddress16(short_addr);
 80019ae:	89bb      	ldrh	r3, [r7, #12]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 f866 	bl	8002a82 <dwt_setaddress16>
    dwt_seteui(extended_addr);
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 f871 	bl	8002aa0 <dwt_seteui>

	dwt_enableframefilter(DWT_FF_BEACON_EN | DWT_FF_DATA_EN);
 80019be:	200c      	movs	r0, #12
 80019c0:	f001 f81e 	bl	8002a00 <dwt_enableframefilter>
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	08006724 	.word	0x08006724

080019d0 <perform_blink>:

rid_state_t perform_blink()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    dwt_writetxdata(sizeof(blink_msg), blink_msg, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	4919      	ldr	r1, [pc, #100]	; (8001a3c <perform_blink+0x6c>)
 80019d8:	2018      	movs	r0, #24
 80019da:	f000 fe4e 	bl	800267a <dwt_writetxdata>
    dwt_writetxfctrl(sizeof(blink_msg), 0, 1);
 80019de:	2201      	movs	r2, #1
 80019e0:	2100      	movs	r1, #0
 80019e2:	2018      	movs	r0, #24
 80019e4:	f000 fe68 	bl	80026b8 <dwt_writetxfctrl>

    if (dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED) != DWT_SUCCESS) {
 80019e8:	2002      	movs	r0, #2
 80019ea:	f001 f997 	bl	8002d1c <dwt_starttx>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <perform_blink+0x2e>
    	stdio_write("error: tx blink message failed.\r\n");
 80019f4:	4812      	ldr	r0, [pc, #72]	; (8001a40 <perform_blink+0x70>)
 80019f6:	f001 fce5 	bl	80033c4 <stdio_write>
    	return STATE_DISCOVERY;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e01b      	b.n	8001a36 <perform_blink+0x66>
    }

	/* Clear good TX frame sent in the DW1000 status register. */
	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	2100      	movs	r1, #0
 8001a02:	200f      	movs	r0, #15
 8001a04:	f000 ffd5 	bl	80029b2 <dwt_write32bitoffsetreg>

    if (receive_ranging_init_msg(rid_rx_buffer) != STATUS_RECEIVE_OK) {
 8001a08:	480e      	ldr	r0, [pc, #56]	; (8001a44 <perform_blink+0x74>)
 8001a0a:	f7ff fccb 	bl	80013a4 <receive_ranging_init_msg>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <perform_blink+0x48>
    	return STATE_DISCOVERY;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e00e      	b.n	8001a36 <perform_blink+0x66>
    }

    if (is_ranging_init_msg(rid_rx_buffer) == false) {
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <perform_blink+0x74>)
 8001a1a:	f7ff fca9 	bl	8001370 <is_ranging_init_msg>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <perform_blink+0x64>
		stdio_write("received non-ranging-init message\r\n");
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <perform_blink+0x78>)
 8001a2c:	f001 fcca 	bl	80033c4 <stdio_write>
		return STATE_DISCOVERY;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e000      	b.n	8001a36 <perform_blink+0x66>
    }

    return STATE_RANGING;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000060 	.word	0x20000060
 8001a40:	0800672c 	.word	0x0800672c
 8001a44:	20000238 	.word	0x20000238
 8001a48:	08006750 	.word	0x08006750

08001a4c <perform_ranging>:
	rng_init_rx_retry_counter = 0;
	return false;
}

rid_state_t perform_ranging()
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	dwt_setrxtimeout(0);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f001 fa3c 	bl	8002ed0 <dwt_setrxtimeout>
	dwt_setpreambledetecttimeout(0xf000);
 8001a58:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001a5c:	f001 fa78 	bl	8002f50 <dwt_setpreambledetecttimeout>
	dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f001 f9f3 	bl	8002e4c <dwt_rxenable>

    receive_status_t rangingInitStatus = receive_ranging_init_msg(rid_rx_buffer);
 8001a66:	4834      	ldr	r0, [pc, #208]	; (8001b38 <perform_ranging+0xec>)
 8001a68:	f7ff fc9c 	bl	80013a4 <receive_ranging_init_msg>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]

    if (rangingInitStatus == STATUS_RECEIVE_ERROR) {
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <perform_ranging+0x2e>
    	return STATE_DISCOVERY;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e059      	b.n	8001b2e <perform_ranging+0xe2>
    }
    else if (rangingInitStatus == STATUS_RECEIVE_TIMEOUT) {
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d101      	bne.n	8001a84 <perform_ranging+0x38>
    	return STATE_RANGING;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e054      	b.n	8001b2e <perform_ranging+0xe2>
    }

	if (is_auth_request_msg(rid_rx_buffer)) {
 8001a84:	482c      	ldr	r0, [pc, #176]	; (8001b38 <perform_ranging+0xec>)
 8001a86:	f000 f903 	bl	8001c90 <is_auth_request_msg>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <perform_ranging+0x4e>
		stdio_write("received auth request message\r\n");
 8001a90:	482a      	ldr	r0, [pc, #168]	; (8001b3c <perform_ranging+0xf0>)
 8001a92:	f001 fc97 	bl	80033c4 <stdio_write>
		return STATE_AUTHENTICATION;
 8001a96:	2302      	movs	r3, #2
 8001a98:	e049      	b.n	8001b2e <perform_ranging+0xe2>
	}
	else if (!is_ranging_init_msg(rid_rx_buffer)) {
 8001a9a:	4827      	ldr	r0, [pc, #156]	; (8001b38 <perform_ranging+0xec>)
 8001a9c:	f7ff fc68 	bl	8001370 <is_ranging_init_msg>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f083 0301 	eor.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <perform_ranging+0x6a>
		stdio_write("received non-ranging-init message\r\n");
 8001aac:	4824      	ldr	r0, [pc, #144]	; (8001b40 <perform_ranging+0xf4>)
 8001aae:	f001 fc89 	bl	80033c4 <stdio_write>
		return STATE_RANGING;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e03b      	b.n	8001b2e <perform_ranging+0xe2>
	}

	// manually force back to idle mode so the rest of ranging works
	dwt_forcetrxoff();
 8001ab6:	f001 f97f 	bl	8002db8 <dwt_forcetrxoff>

	dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8001aba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001abe:	f001 f85d 	bl	8002b7c <dwt_setrxaftertxdelay>
	dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 8001ac2:	f242 7010 	movw	r0, #10000	; 0x2710
 8001ac6:	f001 fa03 	bl	8002ed0 <dwt_setrxtimeout>

	if (send_poll_msg() != STATUS_SEND_OK) {
 8001aca:	f7ff fcd3 	bl	8001474 <send_poll_msg>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <perform_ranging+0x8c>
		return STATE_RANGING;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e02a      	b.n	8001b2e <perform_ranging+0xe2>
	}

	receive_status_t recResult = receive_response_msg(rid_rx_buffer);
 8001ad8:	4817      	ldr	r0, [pc, #92]	; (8001b38 <perform_ranging+0xec>)
 8001ada:	f7ff fd05 	bl	80014e8 <receive_response_msg>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71bb      	strb	r3, [r7, #6]
	if (recResult != STATUS_RECEIVE_OK) {
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <perform_ranging+0xa0>
		return STATE_RANGING;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e020      	b.n	8001b2e <perform_ranging+0xe2>
	}

	if (is_ranging_init_msg(rid_rx_buffer)) {
 8001aec:	4812      	ldr	r0, [pc, #72]	; (8001b38 <perform_ranging+0xec>)
 8001aee:	f7ff fc3f 	bl	8001370 <is_ranging_init_msg>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <perform_ranging+0xb6>
		stdio_write("received ranging init message\r\n");
 8001af8:	4812      	ldr	r0, [pc, #72]	; (8001b44 <perform_ranging+0xf8>)
 8001afa:	f001 fc63 	bl	80033c4 <stdio_write>
		return STATE_RANGING;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e015      	b.n	8001b2e <perform_ranging+0xe2>
	}
	else if (is_auth_request_msg(rid_rx_buffer)) {
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <perform_ranging+0xec>)
 8001b04:	f000 f8c4 	bl	8001c90 <is_auth_request_msg>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <perform_ranging+0xcc>
		stdio_write("received auth request message\r\n");
 8001b0e:	480b      	ldr	r0, [pc, #44]	; (8001b3c <perform_ranging+0xf0>)
 8001b10:	f001 fc58 	bl	80033c4 <stdio_write>
		return STATE_AUTHENTICATION;
 8001b14:	2302      	movs	r3, #2
 8001b16:	e00a      	b.n	8001b2e <perform_ranging+0xe2>
	}

	if (send_final_msg() != STATUS_SEND_OK) {
 8001b18:	f7ff fd3e 	bl	8001598 <send_final_msg>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <perform_ranging+0xe0>
		stdio_write("failed to send ranging final message\r\n");
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <perform_ranging+0xfc>)
 8001b24:	f001 fc4e 	bl	80033c4 <stdio_write>
		return STATE_RANGING;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <perform_ranging+0xe2>
	}

	return STATE_RANGING;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000238 	.word	0x20000238
 8001b3c:	08006774 	.word	0x08006774
 8001b40:	08006750 	.word	0x08006750
 8001b44:	08006794 	.word	0x08006794
 8001b48:	080067b4 	.word	0x080067b4

08001b4c <perform_authentication>:

rid_state_t perform_authentication()
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
	dwt_setpreambledetecttimeout(5000);
 8001b52:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b56:	f001 f9fb 	bl	8002f50 <dwt_setpreambledetecttimeout>
	dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f001 f976 	bl	8002e4c <dwt_rxenable>

	if (receive_auth_request(rid_rx_buffer) != STATUS_RECEIVE_OK) {
 8001b60:	4841      	ldr	r0, [pc, #260]	; (8001c68 <perform_authentication+0x11c>)
 8001b62:	f000 f8cd 	bl	8001d00 <receive_auth_request>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <perform_authentication+0x24>
		return STATE_AUTHENTICATION;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e077      	b.n	8001c60 <perform_authentication+0x114>
	}

	if (is_auth_request_msg(rid_rx_buffer) == false) {
 8001b70:	483d      	ldr	r0, [pc, #244]	; (8001c68 <perform_authentication+0x11c>)
 8001b72:	f000 f88d 	bl	8001c90 <is_auth_request_msg>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <perform_authentication+0x40>
		stdio_write("received non-auth-request message\r\n");
 8001b82:	483a      	ldr	r0, [pc, #232]	; (8001c6c <perform_authentication+0x120>)
 8001b84:	f001 fc1e 	bl	80033c4 <stdio_write>
		return STATE_AUTHENTICATION;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e069      	b.n	8001c60 <perform_authentication+0x114>
	}

	// seed initial vector for AES128 CBC encryption
	for (int index = 0; index < 4; ++index) {
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	e002      	b.n	8001b98 <perform_authentication+0x4c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3301      	adds	r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	ddf9      	ble.n	8001b92 <perform_authentication+0x46>
//		HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t*) &iv[4*index]);
	}

	// set lower 8 bytes to the rolling code to encrypt, and also
	// zero out the upper 8 bytes
	memcpy(&data[0], (uint8_t*) &rolling_code, sizeof(uint64_t));
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <perform_authentication+0x124>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	4933      	ldr	r1, [pc, #204]	; (8001c74 <perform_authentication+0x128>)
 8001ba6:	600a      	str	r2, [r1, #0]
 8001ba8:	604b      	str	r3, [r1, #4]
	memset(&data[8], 0, 8);
 8001baa:	2208      	movs	r2, #8
 8001bac:	2100      	movs	r1, #0
 8001bae:	4832      	ldr	r0, [pc, #200]	; (8001c78 <perform_authentication+0x12c>)
 8001bb0:	f004 fc9e 	bl	80064f0 <memset>

	// set initial vector for AES128 CBC encryption, then encrypt the data
	AES_ctx_set_iv(&aes_context, &iv[0]);
 8001bb4:	4931      	ldr	r1, [pc, #196]	; (8001c7c <perform_authentication+0x130>)
 8001bb6:	4832      	ldr	r0, [pc, #200]	; (8001c80 <perform_authentication+0x134>)
 8001bb8:	f7fe fbf2 	bl	80003a0 <AES_ctx_set_iv>
	AES_CBC_encrypt_buffer(&aes_context, &data[0], 16);
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	492d      	ldr	r1, [pc, #180]	; (8001c74 <perform_authentication+0x128>)
 8001bc0:	482f      	ldr	r0, [pc, #188]	; (8001c80 <perform_authentication+0x134>)
 8001bc2:	f7ff f9bb 	bl	8000f3c <AES_CBC_encrypt_buffer>

	if (send_auth_reply(data, iv) != STATUS_SEND_OK) {
 8001bc6:	492d      	ldr	r1, [pc, #180]	; (8001c7c <perform_authentication+0x130>)
 8001bc8:	482a      	ldr	r0, [pc, #168]	; (8001c74 <perform_authentication+0x128>)
 8001bca:	f000 f8f1 	bl	8001db0 <send_auth_reply>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <perform_authentication+0x8c>
		return STATE_AUTHENTICATION;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e043      	b.n	8001c60 <perform_authentication+0x114>
	}

	dwt_setpreambledetecttimeout(0x4000);
 8001bd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bdc:	f001 f9b8 	bl	8002f50 <dwt_setpreambledetecttimeout>
	dwt_setrxtimeout(0);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f001 f975 	bl	8002ed0 <dwt_setrxtimeout>
	dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f001 f930 	bl	8002e4c <dwt_rxenable>

	if (receive_auth_ack(rid_rx_buffer) != STATUS_RECEIVE_OK) {
 8001bec:	481e      	ldr	r0, [pc, #120]	; (8001c68 <perform_authentication+0x11c>)
 8001bee:	f000 f91d 	bl	8001e2c <receive_auth_ack>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <perform_authentication+0xb0>
		return STATE_AUTHENTICATION;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e031      	b.n	8001c60 <perform_authentication+0x114>
	}

	if (is_auth_ack_msg(rid_rx_buffer) == false) {
 8001bfc:	481a      	ldr	r0, [pc, #104]	; (8001c68 <perform_authentication+0x11c>)
 8001bfe:	f000 f863 	bl	8001cc8 <is_auth_ack_msg>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f083 0301 	eor.w	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <perform_authentication+0xcc>
		stdio_write("received non-auth-ack msg\r\n");
 8001c0e:	481d      	ldr	r0, [pc, #116]	; (8001c84 <perform_authentication+0x138>)
 8001c10:	f001 fbd8 	bl	80033c4 <stdio_write>
		return STATE_AUTHENTICATION;
 8001c14:	2302      	movs	r3, #2
 8001c16:	e023      	b.n	8001c60 <perform_authentication+0x114>
	}

	// copy out the data and initial vector, then decrypt the data
	memcpy(&data[0], &rid_rx_buffer[AUTH_FRAME_COMMON_LEN], 16);
 8001c18:	2210      	movs	r2, #16
 8001c1a:	491b      	ldr	r1, [pc, #108]	; (8001c88 <perform_authentication+0x13c>)
 8001c1c:	4815      	ldr	r0, [pc, #84]	; (8001c74 <perform_authentication+0x128>)
 8001c1e:	f004 fc59 	bl	80064d4 <memcpy>
	memcpy(&iv[0], &rid_rx_buffer[AUTH_FRAME_COMMON_LEN+16], 16);
 8001c22:	2210      	movs	r2, #16
 8001c24:	4919      	ldr	r1, [pc, #100]	; (8001c8c <perform_authentication+0x140>)
 8001c26:	4815      	ldr	r0, [pc, #84]	; (8001c7c <perform_authentication+0x130>)
 8001c28:	f004 fc54 	bl	80064d4 <memcpy>
	AES_ctx_set_iv(&aes_context, &iv[0]);
 8001c2c:	4913      	ldr	r1, [pc, #76]	; (8001c7c <perform_authentication+0x130>)
 8001c2e:	4814      	ldr	r0, [pc, #80]	; (8001c80 <perform_authentication+0x134>)
 8001c30:	f7fe fbb6 	bl	80003a0 <AES_ctx_set_iv>
	AES_CBC_decrypt_buffer(&aes_context, &data[0], 16);
 8001c34:	2210      	movs	r2, #16
 8001c36:	490f      	ldr	r1, [pc, #60]	; (8001c74 <perform_authentication+0x128>)
 8001c38:	4811      	ldr	r0, [pc, #68]	; (8001c80 <perform_authentication+0x134>)
 8001c3a:	f7ff f9ab 	bl	8000f94 <AES_CBC_decrypt_buffer>

	uint8_t action = data[0];
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <perform_authentication+0x128>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	70fb      	strb	r3, [r7, #3]

	// if decrypted action is not a no-op, party time
	if (action != 0) {
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d000      	beq.n	8001c4c <perform_authentication+0x100>
		asm("nop");
 8001c4a:	bf00      	nop
	}

	++rolling_code;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <perform_authentication+0x124>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	1c54      	adds	r4, r2, #1
 8001c54:	f143 0500 	adc.w	r5, r3, #0
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <perform_authentication+0x124>)
 8001c5a:	e9c3 4500 	strd	r4, r5, [r3]
	return STATE_DISCOVERY;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	20000238 	.word	0x20000238
 8001c6c:	080067dc 	.word	0x080067dc
 8001c70:	20000058 	.word	0x20000058
 8001c74:	20000378 	.word	0x20000378
 8001c78:	20000380 	.word	0x20000380
 8001c7c:	20000388 	.word	0x20000388
 8001c80:	200002b8 	.word	0x200002b8
 8001c84:	08006800 	.word	0x08006800
 8001c88:	2000024e 	.word	0x2000024e
 8001c8c:	2000025e 	.word	0x2000025e

08001c90 <is_auth_request_msg>:
};

static uint8_t frame_seq_nb = 0;

bool is_auth_request_msg(uint8_t* rx_buffer)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	rx_buffer[ALL_MSG_SN_IDX] = 0;	// Make received frame count 0 to compare
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
	auth_request_msg[ALL_MSG_SN_IDX] = 0;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <is_auth_request_msg+0x34>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	709a      	strb	r2, [r3, #2]
	return (memcmp(rx_buffer, auth_request_msg, AUTH_FRAME_COMMON_LEN) == 0);
 8001ca6:	2216      	movs	r2, #22
 8001ca8:	4906      	ldr	r1, [pc, #24]	; (8001cc4 <is_auth_request_msg+0x34>)
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f004 fc02 	bl	80064b4 <memcmp>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000078 	.word	0x20000078

08001cc8 <is_auth_ack_msg>:

bool is_auth_ack_msg(uint8_t buffer[RX_BUF_LEN])
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	buffer[ALL_MSG_SN_IDX] = 0;	// Make received frame count 0 to compare
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
	auth_ack_msg[ALL_MSG_SN_IDX] = 0;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <is_auth_ack_msg+0x34>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	709a      	strb	r2, [r3, #2]
	return memcmp(buffer, auth_ack_msg, AUTH_FRAME_COMMON_LEN) == 0;
 8001cde:	2216      	movs	r2, #22
 8001ce0:	4906      	ldr	r1, [pc, #24]	; (8001cfc <is_auth_ack_msg+0x34>)
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f004 fbe6 	bl	80064b4 <memcmp>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200000c8 	.word	0x200000c8

08001d00 <receive_auth_request>:

receive_status_t receive_auth_request(uint8_t buffer[RX_BUF_LEN])
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	uint32_t statusReg = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
	uint32_t msgReceivedFlags = SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <receive_auth_request+0xa4>)
 8001d0e:	613b      	str	r3, [r7, #16]

	while (!((statusReg = dwt_read32bitreg(SYS_STATUS_ID)) & msgReceivedFlags));
 8001d10:	bf00      	nop
 8001d12:	2100      	movs	r1, #0
 8001d14:	200f      	movs	r0, #15
 8001d16:	f000 fdc8 	bl	80028aa <dwt_read32bitoffsetreg>
 8001d1a:	6178      	str	r0, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f5      	beq.n	8001d12 <receive_auth_request+0x12>

	if ((statusReg & SYS_STATUS_ALL_RX_TO) != 0) {
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f403 1308 	and.w	r3, r3, #2228224	; 0x220000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00b      	beq.n	8001d48 <receive_auth_request+0x48>
		print_timeout_errors(statusReg);
 8001d30:	6978      	ldr	r0, [r7, #20]
 8001d32:	f7ff f965 	bl	8001000 <print_timeout_errors>

		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <receive_auth_request+0xa8>)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 fe39 	bl	80029b2 <dwt_write32bitoffsetreg>
		dwt_rxreset();
 8001d40:	f001 f915 	bl	8002f6e <dwt_rxreset>
		return STATUS_RECEIVE_TIMEOUT;
 8001d44:	2302      	movs	r3, #2
 8001d46:	e029      	b.n	8001d9c <receive_auth_request+0x9c>
	}
	else if ((statusReg & SYS_STATUS_ALL_RX_ERR) != 0) {
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <receive_auth_request+0xac>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <receive_auth_request+0x6a>
		print_status_errors(statusReg);
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff f970 	bl	8001038 <print_status_errors>

		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8001d58:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <receive_auth_request+0xa8>)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	200f      	movs	r0, #15
 8001d5e:	f000 fe28 	bl	80029b2 <dwt_write32bitoffsetreg>
		dwt_rxreset();
 8001d62:	f001 f904 	bl	8002f6e <dwt_rxreset>
		return STATUS_RECEIVE_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e018      	b.n	8001d9c <receive_auth_request+0x9c>
	}

	uint32 frame_len;

	/* Clear good RX frame event and TX frame sent in the DW1000 status register. */
	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8001d6a:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8001d6e:	2100      	movs	r1, #0
 8001d70:	200f      	movs	r0, #15
 8001d72:	f000 fe1e 	bl	80029b2 <dwt_write32bitoffsetreg>

	/* A frame has been received, read it into the local buffer. */
	frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8001d76:	2100      	movs	r1, #0
 8001d78:	2010      	movs	r0, #16
 8001d7a:	f000 fd96 	bl	80028aa <dwt_read32bitoffsetreg>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d84:	60fb      	str	r3, [r7, #12]
	if (frame_len <= RX_BUF_LEN) {
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d806      	bhi.n	8001d9a <receive_auth_request+0x9a>
		dwt_readrxdata(buffer, frame_len, 0);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fcaf 	bl	80026f8 <dwt_readrxdata>
	}

	return STATUS_RECEIVE_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2427d000 	.word	0x2427d000
 8001da8:	24279000 	.word	0x24279000
 8001dac:	24059000 	.word	0x24059000

08001db0 <send_auth_reply>:

send_status_t send_auth_reply(uint8_t data[16], uint8_t iv[16])
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	memcpy(&auth_reply_msg[AUTH_REPLY_MSG_PAYLOAD_INDEX], &data[0], 16);
 8001dba:	2210      	movs	r2, #16
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4816      	ldr	r0, [pc, #88]	; (8001e18 <send_auth_reply+0x68>)
 8001dc0:	f004 fb88 	bl	80064d4 <memcpy>
	memcpy(&auth_reply_msg[AUTH_REPLY_MSG_PAYLOAD_INDEX + 16], &iv[0], 16);
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	6839      	ldr	r1, [r7, #0]
 8001dc8:	4814      	ldr	r0, [pc, #80]	; (8001e1c <send_auth_reply+0x6c>)
 8001dca:	f004 fb83 	bl	80064d4 <memcpy>

	auth_reply_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <send_auth_reply+0x70>)
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <send_auth_reply+0x74>)
 8001dd4:	709a      	strb	r2, [r3, #2]
	dwt_writetxdata(sizeof(auth_reply_msg), auth_reply_msg, 0); /* Zero offset in TX buffer. */
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4912      	ldr	r1, [pc, #72]	; (8001e24 <send_auth_reply+0x74>)
 8001dda:	2038      	movs	r0, #56	; 0x38
 8001ddc:	f000 fc4d 	bl	800267a <dwt_writetxdata>
	dwt_writetxfctrl(sizeof(auth_reply_msg), 0, 0); /* Zero offset in TX buffer, ranging. */
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2038      	movs	r0, #56	; 0x38
 8001de6:	f000 fc67 	bl	80026b8 <dwt_writetxfctrl>

	if (dwt_starttx(DWT_START_TX_IMMEDIATE) != DWT_SUCCESS) {
 8001dea:	2000      	movs	r0, #0
 8001dec:	f000 ff96 	bl	8002d1c <dwt_starttx>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <send_auth_reply+0x50>
		stdio_write("tx auth reply failed\r\n");
 8001df6:	480c      	ldr	r0, [pc, #48]	; (8001e28 <send_auth_reply+0x78>)
 8001df8:	f001 fae4 	bl	80033c4 <stdio_write>
		return STATUS_SEND_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e006      	b.n	8001e0e <send_auth_reply+0x5e>
	}

	++frame_seq_nb;
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <send_auth_reply+0x70>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <send_auth_reply+0x70>)
 8001e0a:	701a      	strb	r2, [r3, #0]

	return STATUS_SEND_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200000a6 	.word	0x200000a6
 8001e1c:	200000b6 	.word	0x200000b6
 8001e20:	20000398 	.word	0x20000398
 8001e24:	20000090 	.word	0x20000090
 8001e28:	0800681c 	.word	0x0800681c

08001e2c <receive_auth_ack>:

receive_status_t receive_auth_ack(uint8_t buffer[RX_BUF_LEN])
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	uint32_t statusReg = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
	uint32_t msgReceivedFlags = SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR;
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <receive_auth_ack+0xa4>)
 8001e3a:	613b      	str	r3, [r7, #16]

	while (!((statusReg = dwt_read32bitreg(SYS_STATUS_ID)) & msgReceivedFlags));
 8001e3c:	bf00      	nop
 8001e3e:	2100      	movs	r1, #0
 8001e40:	200f      	movs	r0, #15
 8001e42:	f000 fd32 	bl	80028aa <dwt_read32bitoffsetreg>
 8001e46:	6178      	str	r0, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f5      	beq.n	8001e3e <receive_auth_ack+0x12>

	if ((statusReg & SYS_STATUS_ALL_RX_TO) != 0) {
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f403 1308 	and.w	r3, r3, #2228224	; 0x220000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00b      	beq.n	8001e74 <receive_auth_ack+0x48>
		print_timeout_errors(statusReg);
 8001e5c:	6978      	ldr	r0, [r7, #20]
 8001e5e:	f7ff f8cf 	bl	8001000 <print_timeout_errors>

		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8001e62:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <receive_auth_ack+0xa8>)
 8001e64:	2100      	movs	r1, #0
 8001e66:	200f      	movs	r0, #15
 8001e68:	f000 fda3 	bl	80029b2 <dwt_write32bitoffsetreg>
		dwt_rxreset();
 8001e6c:	f001 f87f 	bl	8002f6e <dwt_rxreset>
		return STATUS_RECEIVE_TIMEOUT;
 8001e70:	2302      	movs	r3, #2
 8001e72:	e029      	b.n	8001ec8 <receive_auth_ack+0x9c>
	}
	else if ((statusReg & SYS_STATUS_ALL_RX_ERR) != 0) {
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <receive_auth_ack+0xac>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <receive_auth_ack+0x6a>
		print_status_errors(statusReg);
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff f8da 	bl	8001038 <print_status_errors>

		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8001e84:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <receive_auth_ack+0xa8>)
 8001e86:	2100      	movs	r1, #0
 8001e88:	200f      	movs	r0, #15
 8001e8a:	f000 fd92 	bl	80029b2 <dwt_write32bitoffsetreg>
		dwt_rxreset();
 8001e8e:	f001 f86e 	bl	8002f6e <dwt_rxreset>
		return STATUS_RECEIVE_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e018      	b.n	8001ec8 <receive_auth_ack+0x9c>
	}

	uint32 frame_len;

	/* Clear good RX frame event and TX frame sent in the DW1000 status register. */
	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8001e96:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	200f      	movs	r0, #15
 8001e9e:	f000 fd88 	bl	80029b2 <dwt_write32bitoffsetreg>

	/* A frame has been received, read it into the local buffer. */
	frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2010      	movs	r0, #16
 8001ea6:	f000 fd00 	bl	80028aa <dwt_read32bitoffsetreg>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eb0:	60fb      	str	r3, [r7, #12]
	if (frame_len <= RX_BUF_LEN) {
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b80      	cmp	r3, #128	; 0x80
 8001eb6:	d806      	bhi.n	8001ec6 <receive_auth_ack+0x9a>
		dwt_readrxdata(buffer, frame_len, 0);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fc19 	bl	80026f8 <dwt_readrxdata>
	}

	return STATUS_RECEIVE_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2427d000 	.word	0x2427d000
 8001ed4:	24279000 	.word	0x24279000
 8001ed8:	24059000 	.word	0x24059000

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_MspInit+0x44>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_MspInit+0x44>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6193      	str	r3, [r2, #24]
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_MspInit+0x44>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x44>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x44>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x44>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_SPI_MspInit+0x7c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d128      	bne.n	8001f98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f50:	6193      	str	r3, [r2, #24]
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f68:	6153      	str	r3, [r2, #20]
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f76:	23e0      	movs	r3, #224	; 0xe0
 8001f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f86:	2305      	movs	r3, #5
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f94:	f001 fc2c 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40013000 	.word	0x40013000
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_UART_MspInit+0x7c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d127      	bne.n	800201a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_UART_MspInit+0x80>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_UART_MspInit+0x80>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6193      	str	r3, [r2, #24]
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_UART_MspInit+0x80>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_UART_MspInit+0x80>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_UART_MspInit+0x80>)
 8001fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fec:	6153      	str	r3, [r2, #20]
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_UART_MspInit+0x80>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ffa:	2330      	movs	r3, #48	; 0x30
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800200a:	2307      	movs	r3, #7
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <HAL_UART_MspInit+0x84>)
 8002016:	f001 fbeb 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	; 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40013800 	.word	0x40013800
 8002028:	40021000 	.word	0x40021000
 800202c:	48000800 	.word	0x48000800

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <NMI_Handler+0x4>

08002038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <MemManage_Handler+0x4>

08002048 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <UsageFault_Handler+0x4>

08002058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002086:	f001 fa2b 	bl	80034e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <SystemInit+0x20>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <SystemInit+0x20>)
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80020c4:	4ba1      	ldr	r3, [pc, #644]	; (800234c <dwt_initialise+0x298>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80020cc:	4b9f      	ldr	r3, [pc, #636]	; (800234c <dwt_initialise+0x298>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2200      	movs	r2, #0
 80020d2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80020d4:	4b9d      	ldr	r3, [pc, #628]	; (800234c <dwt_initialise+0x298>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80020dc:	4b9b      	ldr	r3, [pc, #620]	; (800234c <dwt_initialise+0x298>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80020e4:	4b99      	ldr	r3, [pc, #612]	; (800234c <dwt_initialise+0x298>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80020ec:	4b97      	ldr	r3, [pc, #604]	; (800234c <dwt_initialise+0x298>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80020f4:	4b95      	ldr	r3, [pc, #596]	; (800234c <dwt_initialise+0x298>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    uint32 devid = dwt_readdevid();
 80020fc:	f000 f92a 	bl	8002354 <dwt_readdevid>
 8002100:	60f8      	str	r0, [r7, #12]
    if (DWT_DEVICE_ID != devid) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4a92      	ldr	r2, [pc, #584]	; (8002350 <dwt_initialise+0x29c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d002      	beq.n	8002110 <dwt_initialise+0x5c>
    {
        return DWT_ERROR ;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800210e:	e118      	b.n	8002342 <dwt_initialise+0x28e>
    }
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800211a:	f000 ff37 	bl	8002f8c <dwt_softreset>
    }

    devid = dwt_readdevid();
 800211e:	f000 f919 	bl	8002354 <dwt_readdevid>
 8002122:	60f8      	str	r0, [r7, #12]

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <dwt_initialise+0x84>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <dwt_initialise+0x8a>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8002138:	2000      	movs	r0, #0
 800213a:	f000 fd3b 	bl	8002bb4 <_dwt_enableclocks>
    }                                     // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800213e:	2204      	movs	r2, #4
 8002140:	2100      	movs	r1, #0
 8002142:	2024      	movs	r0, #36	; 0x24
 8002144:	f000 fc06 	bl	8002954 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <dwt_initialise+0xcc>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8002152:	2004      	movs	r0, #4
 8002154:	f000 fcb2 	bl	8002abc <_dwt_otpread>
 8002158:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01f      	beq.n	80021a2 <dwt_initialise+0xee>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8002162:	2202      	movs	r2, #2
 8002164:	2112      	movs	r1, #18
 8002166:	202d      	movs	r0, #45	; 0x2d
 8002168:	f000 fbf4 	bl	8002954 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800216c:	4b77      	ldr	r3, [pc, #476]	; (800234c <dwt_initialise+0x298>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	8ada      	ldrh	r2, [r3, #22]
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <dwt_initialise+0x298>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800217a:	b292      	uxth	r2, r2
 800217c:	82da      	strh	r2, [r3, #22]
 800217e:	e010      	b.n	80021a2 <dwt_initialise+0xee>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8002180:	2130      	movs	r1, #48	; 0x30
 8002182:	2028      	movs	r0, #40	; 0x28
 8002184:	f000 fb91 	bl	80028aa <dwt_read32bitoffsetreg>
 8002188:	4603      	mov	r3, r0
 800218a:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800218e:	d008      	beq.n	80021a2 <dwt_initialise+0xee>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8002190:	4b6e      	ldr	r3, [pc, #440]	; (800234c <dwt_initialise+0x298>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	8ada      	ldrh	r2, [r3, #22]
 8002196:	4b6d      	ldr	r3, [pc, #436]	; (800234c <dwt_initialise+0x298>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800219e:	b292      	uxth	r2, r2
 80021a0:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <dwt_initialise+0x10c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d011      	beq.n	80021da <dwt_initialise+0x126>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00c      	beq.n	80021da <dwt_initialise+0x126>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80021c0:	201e      	movs	r0, #30
 80021c2:	f000 fc7b 	bl	8002abc <_dwt_otpread>
 80021c6:	4603      	mov	r3, r0
 80021c8:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80021ca:	8afb      	ldrh	r3, [r7, #22]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b5e      	ldr	r3, [pc, #376]	; (800234c <dwt_initialise+0x298>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	72da      	strb	r2, [r3, #11]
 80021d8:	e003      	b.n	80021e2 <dwt_initialise+0x12e>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80021da:	4b5c      	ldr	r3, [pc, #368]	; (800234c <dwt_initialise+0x298>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2200      	movs	r2, #0
 80021e0:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80021ec:	8afb      	ldrh	r3, [r7, #22]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <dwt_initialise+0x146>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80021f6:	2310      	movs	r3, #16
 80021f8:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80021fa:	8afb      	ldrh	r3, [r7, #22]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 feea 	bl	8002fd8 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <dwt_initialise+0x16a>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800220e:	4b4f      	ldr	r3, [pc, #316]	; (800234c <dwt_initialise+0x298>)
 8002210:	681c      	ldr	r4, [r3, #0]
 8002212:	2006      	movs	r0, #6
 8002214:	f000 fc52 	bl	8002abc <_dwt_otpread>
 8002218:	4603      	mov	r3, r0
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	e003      	b.n	8002226 <dwt_initialise+0x172>
    }
    else
    {
        pdw1000local->partID = 0;
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <dwt_initialise+0x298>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <dwt_initialise+0x18c>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8002230:	4b46      	ldr	r3, [pc, #280]	; (800234c <dwt_initialise+0x298>)
 8002232:	681c      	ldr	r4, [r3, #0]
 8002234:	2007      	movs	r0, #7
 8002236:	f000 fc41 	bl	8002abc <_dwt_otpread>
 800223a:	4603      	mov	r3, r0
 800223c:	6063      	str	r3, [r4, #4]
 800223e:	e003      	b.n	8002248 <dwt_initialise+0x194>
    }
    else
    {
        pdw1000local->lotID = 0;
 8002240:	4b42      	ldr	r3, [pc, #264]	; (800234c <dwt_initialise+0x298>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <dwt_initialise+0x1b0>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8002252:	2008      	movs	r0, #8
 8002254:	f000 fc32 	bl	8002abc <_dwt_otpread>
 8002258:	4602      	mov	r2, r0
 800225a:	4b3c      	ldr	r3, [pc, #240]	; (800234c <dwt_initialise+0x298>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	721a      	strb	r2, [r3, #8]
 8002262:	e003      	b.n	800226c <dwt_initialise+0x1b8>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8002264:	4b39      	ldr	r3, [pc, #228]	; (800234c <dwt_initialise+0x298>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <dwt_initialise+0x1d4>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8002276:	2009      	movs	r0, #9
 8002278:	f000 fc20 	bl	8002abc <_dwt_otpread>
 800227c:	4602      	mov	r2, r0
 800227e:	4b33      	ldr	r3, [pc, #204]	; (800234c <dwt_initialise+0x298>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	725a      	strb	r2, [r3, #9]
 8002286:	e003      	b.n	8002290 <dwt_initialise+0x1dc>
    }
    else
    {
        pdw1000local->tempP = 0;
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <dwt_initialise+0x298>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d121      	bne.n	80022de <dwt_initialise+0x22a>
    {
        if(DWT_LOADUCODE & config)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <dwt_initialise+0x208>
        {
            _dwt_loaducodefromrom();
 80022a4:	f000 fc57 	bl	8002b56 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <dwt_initialise+0x298>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	8ada      	ldrh	r2, [r3, #22]
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <dwt_initialise+0x298>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b6:	b292      	uxth	r2, r2
 80022b8:	82da      	strh	r2, [r3, #22]
 80022ba:	e01e      	b.n	80022fa <dwt_initialise+0x246>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80022bc:	2105      	movs	r1, #5
 80022be:	2036      	movs	r0, #54	; 0x36
 80022c0:	f000 fb1a 	bl	80028f8 <dwt_read16bitoffsetreg>
 80022c4:	4603      	mov	r3, r0
 80022c6:	817b      	strh	r3, [r7, #10]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80022c8:	897b      	ldrh	r3, [r7, #10]
 80022ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022ce:	817b      	strh	r3, [r7, #10]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80022d0:	897b      	ldrh	r3, [r7, #10]
 80022d2:	461a      	mov	r2, r3
 80022d4:	2105      	movs	r1, #5
 80022d6:	2036      	movs	r0, #54	; 0x36
 80022d8:	f000 fb4f 	bl	800297a <dwt_write16bitoffsetreg>
 80022dc:	e00d      	b.n	80022fa <dwt_initialise+0x246>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d108      	bne.n	80022fa <dwt_initialise+0x246>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <dwt_initialise+0x298>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	8ada      	ldrh	r2, [r3, #22]
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <dwt_initialise+0x298>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f6:	b292      	uxth	r2, r2
 80022f8:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80022fa:	2001      	movs	r0, #1
 80022fc:	f000 fc5a 	bl	8002bb4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8002300:	2200      	movs	r2, #0
 8002302:	210a      	movs	r1, #10
 8002304:	202c      	movs	r0, #44	; 0x2c
 8002306:	f000 fb25 	bl	8002954 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <dwt_initialise+0x298>)
 800230c:	681c      	ldr	r4, [r3, #0]
 800230e:	2100      	movs	r1, #0
 8002310:	2004      	movs	r0, #4
 8002312:	f000 faca 	bl	80028aa <dwt_read32bitoffsetreg>
 8002316:	4603      	mov	r3, r0
 8002318:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <dwt_initialise+0x298>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <dwt_initialise+0x298>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f002 0203 	and.w	r2, r2, #3
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <dwt_initialise+0x298>)
 8002332:	681c      	ldr	r4, [r3, #0]
 8002334:	2100      	movs	r1, #0
 8002336:	2008      	movs	r0, #8
 8002338:	f000 fab7 	bl	80028aa <dwt_read32bitoffsetreg>
 800233c:	4603      	mov	r3, r0
 800233e:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8002340:	2300      	movs	r3, #0

} // end dwt_initialise()
 8002342:	4618      	mov	r0, r3
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	20000104 	.word	0x20000104
 8002350:	deca0130 	.word	0xdeca0130

08002354 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8002358:	2100      	movs	r1, #0
 800235a:	2000      	movs	r0, #0
 800235c:	f000 faa5 	bl	80028aa <dwt_read32bitoffsetreg>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	795b      	ldrb	r3, [r3, #5]
 8002382:	461a      	mov	r2, r3
 8002384:	4ba1      	ldr	r3, [pc, #644]	; (800260c <dwt_configure+0x2a4>)
 8002386:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800238a:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	3b01      	subs	r3, #1
 8002392:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	2b04      	cmp	r3, #4
 8002398:	d002      	beq.n	80023a0 <dwt_configure+0x38>
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b07      	cmp	r3, #7
 800239e:	d101      	bne.n	80023a4 <dwt_configure+0x3c>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <dwt_configure+0x3e>
 80023a4:	2300      	movs	r3, #0
 80023a6:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	79db      	ldrb	r3, [r3, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10b      	bne.n	80023c8 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80023b0:	4b97      	ldr	r3, [pc, #604]	; (8002610 <dwt_configure+0x2a8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	4b96      	ldr	r3, [pc, #600]	; (8002610 <dwt_configure+0x2a8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80023be:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80023c0:	8abb      	ldrh	r3, [r7, #20]
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	82bb      	strh	r3, [r7, #20]
 80023c6:	e007      	b.n	80023d8 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80023c8:	4b91      	ldr	r3, [pc, #580]	; (8002610 <dwt_configure+0x2a8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	4b90      	ldr	r3, [pc, #576]	; (8002610 <dwt_configure+0x2a8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80023d6:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80023d8:	4b8d      	ldr	r3, [pc, #564]	; (8002610 <dwt_configure+0x2a8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	7a12      	ldrb	r2, [r2, #8]
 80023e0:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80023e2:	4b8b      	ldr	r3, [pc, #556]	; (8002610 <dwt_configure+0x2a8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	4b89      	ldr	r3, [pc, #548]	; (8002610 <dwt_configure+0x2a8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80023f0:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80023f2:	4b87      	ldr	r3, [pc, #540]	; (8002610 <dwt_configure+0x2a8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6919      	ldr	r1, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7a1b      	ldrb	r3, [r3, #8]
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002402:	4b83      	ldr	r3, [pc, #524]	; (8002610 <dwt_configure+0x2a8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800240a:	4b81      	ldr	r3, [pc, #516]	; (8002610 <dwt_configure+0x2a8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	461a      	mov	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	2004      	movs	r0, #4
 8002416:	f000 facc 	bl	80029b2 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800241a:	8abb      	ldrh	r3, [r7, #20]
 800241c:	461a      	mov	r2, r3
 800241e:	f642 0104 	movw	r1, #10244	; 0x2804
 8002422:	202e      	movs	r0, #46	; 0x2e
 8002424:	f000 faa9 	bl	800297a <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8002428:	7cbb      	ldrb	r3, [r7, #18]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fb73 	bl	8002b16 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	4a78      	ldr	r2, [pc, #480]	; (8002614 <dwt_configure+0x2ac>)
 8002434:	5cd3      	ldrb	r3, [r2, r3]
 8002436:	461a      	mov	r2, r3
 8002438:	4b77      	ldr	r3, [pc, #476]	; (8002618 <dwt_configure+0x2b0>)
 800243a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243e:	461a      	mov	r2, r3
 8002440:	2107      	movs	r1, #7
 8002442:	202b      	movs	r0, #43	; 0x2b
 8002444:	f000 fab5 	bl	80029b2 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	4a72      	ldr	r2, [pc, #456]	; (8002614 <dwt_configure+0x2ac>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	461a      	mov	r2, r3
 8002450:	4b72      	ldr	r3, [pc, #456]	; (800261c <dwt_configure+0x2b4>)
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	461a      	mov	r2, r3
 8002456:	210b      	movs	r1, #11
 8002458:	202b      	movs	r0, #43	; 0x2b
 800245a:	f000 fa7b 	bl	8002954 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800245e:	7c7b      	ldrb	r3, [r7, #17]
 8002460:	4a6f      	ldr	r2, [pc, #444]	; (8002620 <dwt_configure+0x2b8>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	461a      	mov	r2, r3
 8002466:	210b      	movs	r1, #11
 8002468:	2028      	movs	r0, #40	; 0x28
 800246a:	f000 fa73 	bl	8002954 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	4a68      	ldr	r2, [pc, #416]	; (8002614 <dwt_configure+0x2ac>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	461a      	mov	r2, r3
 8002476:	4b6b      	ldr	r3, [pc, #428]	; (8002624 <dwt_configure+0x2bc>)
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	461a      	mov	r2, r3
 800247e:	210c      	movs	r1, #12
 8002480:	2028      	movs	r0, #40	; 0x28
 8002482:	f000 fa96 	bl	80029b2 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	79db      	ldrb	r3, [r3, #7]
 800248a:	4618      	mov	r0, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	799b      	ldrb	r3, [r3, #6]
 8002490:	4619      	mov	r1, r3
 8002492:	4a65      	ldr	r2, [pc, #404]	; (8002628 <dwt_configure+0x2c0>)
 8002494:	0043      	lsls	r3, r0, #1
 8002496:	440b      	add	r3, r1
 8002498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800249c:	461a      	mov	r2, r3
 800249e:	2102      	movs	r1, #2
 80024a0:	2027      	movs	r0, #39	; 0x27
 80024a2:	f000 fa6a 	bl	800297a <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80024a6:	7cbb      	ldrb	r3, [r7, #18]
 80024a8:	4a60      	ldr	r2, [pc, #384]	; (800262c <dwt_configure+0x2c4>)
 80024aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ae:	461a      	mov	r2, r3
 80024b0:	2104      	movs	r1, #4
 80024b2:	2027      	movs	r0, #39	; 0x27
 80024b4:	f000 fa61 	bl	800297a <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	79db      	ldrb	r3, [r3, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80024c0:	2264      	movs	r2, #100	; 0x64
 80024c2:	2106      	movs	r1, #6
 80024c4:	2027      	movs	r0, #39	; 0x27
 80024c6:	f000 fa58 	bl	800297a <dwt_write16bitoffsetreg>
 80024ca:	e018      	b.n	80024fe <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	789b      	ldrb	r3, [r3, #2]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d10a      	bne.n	80024ea <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80024d4:	2210      	movs	r2, #16
 80024d6:	2106      	movs	r1, #6
 80024d8:	2027      	movs	r0, #39	; 0x27
 80024da:	f000 fa4e 	bl	800297a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80024de:	2210      	movs	r2, #16
 80024e0:	2126      	movs	r1, #38	; 0x26
 80024e2:	2027      	movs	r0, #39	; 0x27
 80024e4:	f000 fa36 	bl	8002954 <dwt_write8bitoffsetreg>
 80024e8:	e009      	b.n	80024fe <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80024ea:	2220      	movs	r2, #32
 80024ec:	2106      	movs	r1, #6
 80024ee:	2027      	movs	r0, #39	; 0x27
 80024f0:	f000 fa43 	bl	800297a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80024f4:	2228      	movs	r2, #40	; 0x28
 80024f6:	2126      	movs	r1, #38	; 0x26
 80024f8:	2027      	movs	r0, #39	; 0x27
 80024fa:	f000 fa2b 	bl	8002954 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80024fe:	7cbb      	ldrb	r3, [r7, #18]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	78d2      	ldrb	r2, [r2, #3]
 8002504:	4611      	mov	r1, r2
 8002506:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <dwt_configure+0x2c8>)
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002510:	461a      	mov	r2, r3
 8002512:	2108      	movs	r1, #8
 8002514:	2027      	movs	r0, #39	; 0x27
 8002516:	f000 fa4c 	bl	80029b2 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	895b      	ldrh	r3, [r3, #10]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f241 0241 	movw	r2, #4161	; 0x1041
 8002528:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	895b      	ldrh	r3, [r3, #10]
 800252e:	461a      	mov	r2, r3
 8002530:	2120      	movs	r1, #32
 8002532:	2027      	movs	r0, #39	; 0x27
 8002534:	f000 fa21 	bl	800297a <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8002538:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <dwt_configure+0x2cc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	210c      	movs	r1, #12
 8002540:	2023      	movs	r0, #35	; 0x23
 8002542:	f000 fa36 	bl	80029b2 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8002546:	7cbb      	ldrb	r3, [r7, #18]
 8002548:	4a3a      	ldr	r2, [pc, #232]	; (8002634 <dwt_configure+0x2cc>)
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	889b      	ldrh	r3, [r3, #4]
 8002550:	461a      	mov	r2, r3
 8002552:	2104      	movs	r1, #4
 8002554:	2023      	movs	r0, #35	; 0x23
 8002556:	f000 fa10 	bl	800297a <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	799b      	ldrb	r3, [r3, #6]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00d      	beq.n	800257e <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	79db      	ldrb	r3, [r3, #7]
 8002566:	461a      	mov	r2, r3
 8002568:	4b33      	ldr	r3, [pc, #204]	; (8002638 <dwt_configure+0x2d0>)
 800256a:	5c9b      	ldrb	r3, [r3, r2]
 800256c:	461a      	mov	r2, r3
 800256e:	2100      	movs	r1, #0
 8002570:	2021      	movs	r0, #33	; 0x21
 8002572:	f000 f9ef 	bl	8002954 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8002576:	2303      	movs	r3, #3
 8002578:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 800257a:	2301      	movs	r3, #1
 800257c:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800258a:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	049b      	lsls	r3, r3, #18
 8002592:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002596:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	051b      	lsls	r3, r3, #20
 800259c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80025a0:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80025a2:	7dbb      	ldrb	r3, [r7, #22]
 80025a4:	045b      	lsls	r3, r3, #17
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80025aa:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	791b      	ldrb	r3, [r3, #4]
 80025b0:	059b      	lsls	r3, r3, #22
 80025b2:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80025b6:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	795b      	ldrb	r3, [r3, #5]
 80025bc:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	2100      	movs	r1, #0
 80025c6:	201f      	movs	r0, #31
 80025c8:	f000 f9f3 	bl	80029b2 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	789a      	ldrb	r2, [r3, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	0419      	lsls	r1, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	79db      	ldrb	r3, [r3, #7]
 80025de:	035a      	lsls	r2, r3, #13
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <dwt_configure+0x2a8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <dwt_configure+0x2a8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	461a      	mov	r2, r3
 80025f0:	2100      	movs	r1, #0
 80025f2:	2008      	movs	r0, #8
 80025f4:	f000 f9dd 	bl	80029b2 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80025f8:	2242      	movs	r2, #66	; 0x42
 80025fa:	2100      	movs	r1, #0
 80025fc:	200d      	movs	r0, #13
 80025fe:	f000 f9a9 	bl	8002954 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	08006b4c 	.word	0x08006b4c
 8002610:	20000104 	.word	0x20000104
 8002614:	08006acc 	.word	0x08006acc
 8002618:	08006aec 	.word	0x08006aec
 800261c:	08006b04 	.word	0x08006b04
 8002620:	08006b0c 	.word	0x08006b0c
 8002624:	08006ad4 	.word	0x08006ad4
 8002628:	08006b1c 	.word	0x08006b1c
 800262c:	08006b28 	.word	0x08006b28
 8002630:	08006b2c 	.word	0x08006b2c
 8002634:	08006b10 	.word	0x08006b10
 8002638:	08006b18 	.word	0x08006b18

0800263c <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	461a      	mov	r2, r3
 800264a:	f641 0104 	movw	r1, #6148	; 0x1804
 800264e:	202e      	movs	r0, #46	; 0x2e
 8002650:	f000 f993 	bl	800297a <dwt_write16bitoffsetreg>
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	461a      	mov	r2, r3
 800266a:	2100      	movs	r1, #0
 800266c:	2018      	movs	r0, #24
 800266e:	f000 f984 	bl	800297a <dwt_write16bitoffsetreg>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	6039      	str	r1, [r7, #0]
 8002684:	80fb      	strh	r3, [r7, #6]
 8002686:	4613      	mov	r3, r2
 8002688:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800268a:	88ba      	ldrh	r2, [r7, #4]
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	4413      	add	r3, r2
 8002690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002694:	dc09      	bgt.n	80026aa <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	3b02      	subs	r3, #2
 800269a:	461a      	mov	r2, r3
 800269c:	88b9      	ldrh	r1, [r7, #4]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2009      	movs	r0, #9
 80026a2:	f000 f857 	bl	8002754 <dwt_writetodevice>
        return DWT_SUCCESS;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e001      	b.n	80026ae <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
} // end dwt_writetxdata()
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	603a      	str	r2, [r7, #0]
 80026c2:	80fb      	strh	r3, [r7, #6]
 80026c4:	460b      	mov	r3, r1
 80026c6:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <dwt_writetxfctrl+0x3c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	88bb      	ldrh	r3, [r7, #4]
 80026d4:	059b      	lsls	r3, r3, #22
 80026d6:	431a      	orrs	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	03db      	lsls	r3, r3, #15
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	2100      	movs	r1, #0
 80026e4:	2008      	movs	r0, #8
 80026e6:	f000 f964 	bl	80029b2 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000104 	.word	0x20000104

080026f8 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8002708:	887a      	ldrh	r2, [r7, #2]
 800270a:	8839      	ldrh	r1, [r7, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2011      	movs	r0, #17
 8002710:	f000 f877 	bl	8002802 <dwt_readfromdevice>
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2205      	movs	r2, #5
 8002728:	2100      	movs	r1, #0
 800272a:	2017      	movs	r0, #23
 800272c:	f000 f869 	bl	8002802 <dwt_readfromdevice>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2205      	movs	r2, #5
 8002744:	2100      	movs	r1, #0
 8002746:	2015      	movs	r0, #21
 8002748:	f000 f85b 	bl	8002802 <dwt_readfromdevice>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60ba      	str	r2, [r7, #8]
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4603      	mov	r3, r0
 8002760:	81fb      	strh	r3, [r7, #14]
 8002762:	460b      	mov	r3, r1
 8002764:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800276a:	89bb      	ldrh	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10c      	bne.n	800278a <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002770:	89fb      	ldrh	r3, [r7, #14]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	1c59      	adds	r1, r3, #1
 8002778:	6179      	str	r1, [r7, #20]
 800277a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	3318      	adds	r3, #24
 8002782:	443b      	add	r3, r7
 8002784:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002788:	e02f      	b.n	80027ea <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	1c59      	adds	r1, r3, #1
 8002792:	6179      	str	r1, [r7, #20]
 8002794:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	3318      	adds	r3, #24
 800279c:	443b      	add	r3, r7
 800279e:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80027a2:	89bb      	ldrh	r3, [r7, #12]
 80027a4:	2b7f      	cmp	r3, #127	; 0x7f
 80027a6:	d809      	bhi.n	80027bc <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	617a      	str	r2, [r7, #20]
 80027ae:	89ba      	ldrh	r2, [r7, #12]
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	3318      	adds	r3, #24
 80027b4:	443b      	add	r3, r7
 80027b6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80027ba:	e016      	b.n	80027ea <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80027bc:	89bb      	ldrh	r3, [r7, #12]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	6179      	str	r1, [r7, #20]
 80027c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	3318      	adds	r3, #24
 80027ce:	443b      	add	r3, r7
 80027d0:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80027d4:	89bb      	ldrh	r3, [r7, #12]
 80027d6:	09db      	lsrs	r3, r3, #7
 80027d8:	b299      	uxth	r1, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	617a      	str	r2, [r7, #20]
 80027e0:	b2ca      	uxtb	r2, r1
 80027e2:	3318      	adds	r3, #24
 80027e4:	443b      	add	r3, r7
 80027e6:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	b298      	uxth	r0, r3
 80027ee:	f107 0110 	add.w	r1, r7, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	f000 fc31 	bl	800305c <writetospi>
} // end dwt_writetodevice()
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60ba      	str	r2, [r7, #8]
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	4603      	mov	r3, r0
 800280e:	81fb      	strh	r3, [r7, #14]
 8002810:	460b      	mov	r3, r1
 8002812:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002818:	89bb      	ldrh	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	617a      	str	r2, [r7, #20]
 8002824:	89fa      	ldrh	r2, [r7, #14]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	3318      	adds	r3, #24
 800282a:	443b      	add	r3, r7
 800282c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002830:	e02f      	b.n	8002892 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002832:	89fb      	ldrh	r3, [r7, #14]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	1c59      	adds	r1, r3, #1
 800283a:	6179      	str	r1, [r7, #20]
 800283c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	3318      	adds	r3, #24
 8002844:	443b      	add	r3, r7
 8002846:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800284a:	89bb      	ldrh	r3, [r7, #12]
 800284c:	2b7f      	cmp	r3, #127	; 0x7f
 800284e:	d809      	bhi.n	8002864 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	617a      	str	r2, [r7, #20]
 8002856:	89ba      	ldrh	r2, [r7, #12]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	3318      	adds	r3, #24
 800285c:	443b      	add	r3, r7
 800285e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002862:	e016      	b.n	8002892 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002864:	89bb      	ldrh	r3, [r7, #12]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	1c59      	adds	r1, r3, #1
 800286c:	6179      	str	r1, [r7, #20]
 800286e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	3318      	adds	r3, #24
 8002876:	443b      	add	r3, r7
 8002878:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800287c:	89bb      	ldrh	r3, [r7, #12]
 800287e:	09db      	lsrs	r3, r3, #7
 8002880:	b299      	uxth	r1, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	617a      	str	r2, [r7, #20]
 8002888:	b2ca      	uxtb	r2, r1
 800288a:	3318      	adds	r3, #24
 800288c:	443b      	add	r3, r7
 800288e:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	b298      	uxth	r0, r3
 8002896:	f107 0110 	add.w	r1, r7, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	f000 fc11 	bl	80030c4 <readfromspi>
} // end dwt_readfromdevice()
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	b298      	uxth	r0, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b299      	uxth	r1, r3
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	2204      	movs	r2, #4
 80028c6:	f7ff ff9c 	bl	8002802 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 80028ca:	2303      	movs	r3, #3
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e00b      	b.n	80028e8 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	f107 010c 	add.w	r1, r7, #12
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	440a      	add	r2, r1
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	daf0      	bge.n	80028d0 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 80028ee:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8002902:	2300      	movs	r3, #0
 8002904:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	b298      	uxth	r0, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b299      	uxth	r1, r3
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	2202      	movs	r2, #2
 8002914:	f7ff ff75 	bl	8002802 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8002918:	7b7b      	ldrb	r3, [r7, #13]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	b29b      	uxth	r3, r3
 800291e:	7b3a      	ldrb	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8002924:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	b298      	uxth	r0, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	b299      	uxth	r1, r3
 8002940:	f107 030f 	add.w	r3, r7, #15
 8002944:	2201      	movs	r2, #1
 8002946:	f7ff ff5c 	bl	8002802 <dwt_readfromdevice>

    return regval ;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	4613      	mov	r3, r2
 8002960:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	b298      	uxth	r0, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	b299      	uxth	r1, r3
 800296a:	1dfb      	adds	r3, r7, #7
 800296c:	2201      	movs	r2, #1
 800296e:	f7ff fef1 	bl	8002754 <dwt_writetodevice>
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	4613      	mov	r3, r2
 8002986:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	b29b      	uxth	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	b298      	uxth	r0, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	b299      	uxth	r1, r3
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2202      	movs	r2, #2
 80029a6:	f7ff fed5 	bl	8002754 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e00d      	b.n	80029e0 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	b2d9      	uxtb	r1, r3
 80029c8:	f107 0210 	add.w	r2, r7, #16
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4413      	add	r3, r2
 80029d0:	460a      	mov	r2, r1
 80029d2:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3301      	adds	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	ddee      	ble.n	80029c4 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	b298      	uxth	r0, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	b299      	uxth	r1, r3
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	2204      	movs	r2, #4
 80029f4:	f7ff feae 	bl	8002754 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80029f8:	bf00      	nop
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <dwt_enableframefilter>:
 * output parameters
 *
 * no return value
 */
void dwt_enableframefilter(uint16 enable)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
    uint32 sysconfig = SYS_CFG_MASK & dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	2004      	movs	r0, #4
 8002a0e:	f7ff ff4c 	bl	80028aa <dwt_read32bitoffsetreg>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f023 637b 	bic.w	r3, r3, #263192576	; 0xfb00000
 8002a18:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002a1c:	60fb      	str	r3, [r7, #12]

    if(enable)
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00c      	beq.n	8002a3e <dwt_enableframefilter+0x3e>
    {
        // Enable frame filtering and configure frame types
        sysconfig &= ~(SYS_CFG_FF_ALL_EN); // Clear all
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002a2a:	60fb      	str	r3, [r7, #12]
        sysconfig |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e003      	b.n	8002a46 <dwt_enableframefilter+0x46>
    }
    else
    {
        sysconfig &= ~(SYS_CFG_FFE);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
    }

    pdw1000local->sysCFGreg = sysconfig ;
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <dwt_enableframefilter+0x60>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	611a      	str	r2, [r3, #16]
    dwt_write32bitreg(SYS_CFG_ID,sysconfig) ;
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	2100      	movs	r1, #0
 8002a52:	2004      	movs	r0, #4
 8002a54:	f7ff ffad 	bl	80029b2 <dwt_write32bitoffsetreg>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000104 	.word	0x20000104

08002a64 <dwt_setpanid>:
 * output parameters
 *
 * no return value
 */
void dwt_setpanid(uint16 panID)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80fb      	strh	r3, [r7, #6]
    // PAN ID is high 16 bits of register
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_PAN_ID_OFFSET, panID);
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	461a      	mov	r2, r3
 8002a72:	2102      	movs	r1, #2
 8002a74:	2003      	movs	r0, #3
 8002a76:	f7ff ff80 	bl	800297a <dwt_write16bitoffsetreg>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <dwt_setaddress16>:
 * output parameters
 *
 * no return value
 */
void dwt_setaddress16(uint16 shortAddress)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	80fb      	strh	r3, [r7, #6]
    // Short address into low 16 bits
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_SHORT_ADDR_OFFSET, shortAddress);
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2100      	movs	r1, #0
 8002a92:	2003      	movs	r0, #3
 8002a94:	f7ff ff71 	bl	800297a <dwt_write16bitoffsetreg>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <dwt_seteui>:
 * output parameters
 *
 * no return value
 */
void dwt_seteui(uint8 *eui64)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    dwt_writetodevice(EUI_64_ID, EUI_64_OFFSET, EUI_64_LEN, eui64);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2208      	movs	r2, #8
 8002aac:	2100      	movs	r1, #0
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f7ff fe50 	bl	8002754 <dwt_writetodevice>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2104      	movs	r1, #4
 8002acc:	202d      	movs	r0, #45	; 0x2d
 8002ace:	f7ff ff54 	bl	800297a <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	2106      	movs	r1, #6
 8002ad6:	202d      	movs	r0, #45	; 0x2d
 8002ad8:	f7ff ff3c 	bl	8002954 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8002adc:	2200      	movs	r2, #0
 8002ade:	2106      	movs	r1, #6
 8002ae0:	202d      	movs	r0, #45	; 0x2d
 8002ae2:	f7ff ff37 	bl	8002954 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8002ae6:	210a      	movs	r1, #10
 8002ae8:	202d      	movs	r0, #45	; 0x2d
 8002aea:	f7ff fede 	bl	80028aa <dwt_read32bitoffsetreg>
 8002aee:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8002af0:	68fb      	ldr	r3, [r7, #12]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8002afe:	2200      	movs	r2, #0
 8002b00:	2102      	movs	r1, #2
 8002b02:	202c      	movs	r0, #44	; 0x2c
 8002b04:	f7ff ff26 	bl	8002954 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8002b08:	2202      	movs	r2, #2
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	202c      	movs	r0, #44	; 0x2c
 8002b0e:	f7ff ff21 	bl	8002954 <dwt_write8bitoffsetreg>
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8002b1e:	226d      	movs	r2, #109	; 0x6d
 8002b20:	f640 0106 	movw	r1, #2054	; 0x806
 8002b24:	202e      	movs	r0, #46	; 0x2e
 8002b26:	f7ff ff15 	bl	8002954 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8002b30:	f240 6207 	movw	r2, #1543	; 0x607
 8002b34:	f641 0106 	movw	r1, #6150	; 0x1806
 8002b38:	202e      	movs	r0, #46	; 0x2e
 8002b3a:	f7ff ff1e 	bl	800297a <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8002b3e:	e006      	b.n	8002b4e <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8002b40:	f241 6207 	movw	r2, #5639	; 0x1607
 8002b44:	f641 0106 	movw	r1, #6150	; 0x1806
 8002b48:	202e      	movs	r0, #46	; 0x2e
 8002b4a:	f7ff ff16 	bl	800297a <dwt_write16bitoffsetreg>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8002b5a:	200e      	movs	r0, #14
 8002b5c:	f000 f82a 	bl	8002bb4 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8002b60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b64:	2106      	movs	r1, #6
 8002b66:	202d      	movs	r0, #45	; 0x2d
 8002b68:	f7ff ff07 	bl	800297a <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f000 fa69 	bl	8003044 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002b72:	2001      	movs	r0, #1
 8002b74:	f000 f81e 	bl	8002bb4 <_dwt_enableclocks>
}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8002b84:	2100      	movs	r1, #0
 8002b86:	201a      	movs	r0, #26
 8002b88:	f7ff fe8f 	bl	80028aa <dwt_read32bitoffsetreg>
 8002b8c:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0d1b      	lsrs	r3, r3, #20
 8002b92:	051b      	lsls	r3, r3, #20
 8002b94:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	201a      	movs	r0, #26
 8002ba8:	f7ff ff03 	bl	80029b2 <dwt_write32bitoffsetreg>
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2036      	movs	r0, #54	; 0x36
 8002bc6:	f7ff fe1c 	bl	8002802 <dwt_readfromdevice>
    switch(clocks)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0e      	cmp	r3, #14
 8002bce:	d876      	bhi.n	8002cbe <_dwt_enableclocks+0x10a>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <_dwt_enableclocks+0x24>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002c25 	.word	0x08002c25
 8002bdc:	08002c15 	.word	0x08002c15
 8002be0:	08002c3b 	.word	0x08002c3b
 8002be4:	08002cbf 	.word	0x08002cbf
 8002be8:	08002cbf 	.word	0x08002cbf
 8002bec:	08002cbf 	.word	0x08002cbf
 8002bf0:	08002cbf 	.word	0x08002cbf
 8002bf4:	08002c51 	.word	0x08002c51
 8002bf8:	08002c71 	.word	0x08002c71
 8002bfc:	08002cbf 	.word	0x08002cbf
 8002c00:	08002cbf 	.word	0x08002cbf
 8002c04:	08002c87 	.word	0x08002c87
 8002c08:	08002c93 	.word	0x08002c93
 8002c0c:	08002c9f 	.word	0x08002c9f
 8002c10:	08002cb5 	.word	0x08002cb5
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8002c14:	2300      	movs	r3, #0
 8002c16:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8002c18:	7b7b      	ldrb	r3, [r7, #13]
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002c22:	e04d      	b.n	8002cc0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8002c24:	7b3b      	ldrb	r3, [r7, #12]
 8002c26:	b25b      	sxtb	r3, r3
 8002c28:	f023 0303 	bic.w	r3, r3, #3
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	b25b      	sxtb	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	733b      	strb	r3, [r7, #12]
        }
        break;
 8002c38:	e042      	b.n	8002cc0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8002c3a:	7b3b      	ldrb	r3, [r7, #12]
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	b25b      	sxtb	r3, r3
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	733b      	strb	r3, [r7, #12]
        }
        break;
 8002c4e:	e037      	b.n	8002cc0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002c50:	7b3b      	ldrb	r3, [r7, #12]
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8002c64:	7b7b      	ldrb	r3, [r7, #13]
 8002c66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002c6e:	e027      	b.n	8002cc0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8002c70:	7b3b      	ldrb	r3, [r7, #12]
 8002c72:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8002c7a:	7b7b      	ldrb	r3, [r7, #13]
 8002c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002c84:	e01c      	b.n	8002cc0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8002c86:	7b7b      	ldrb	r3, [r7, #13]
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002c90:	e016      	b.n	8002cc0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8002c92:	7b7b      	ldrb	r3, [r7, #13]
 8002c94:	f023 0302 	bic.w	r3, r3, #2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002c9c:	e010      	b.n	8002cc0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002c9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	f043 0320 	orr.w	r3, r3, #32
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8002cb2:	e005      	b.n	8002cc0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002cbc:	e000      	b.n	8002cc0 <_dwt_enableclocks+0x10c>
        default:
        break;
 8002cbe:	bf00      	nop
    // NEEDED - attempting to read from PMSC_ID then write to PMSC_ID
    //          causes the write to fail
//    HAL_Delay(100);

    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2036      	movs	r0, #54	; 0x36
 8002cca:	f7ff fd43 	bl	8002754 <dwt_writetodevice>

    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2036      	movs	r0, #54	; 0x36
 8002cda:	f7ff fd3b 	bl	8002754 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop

08002ce8 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7ff ff61 	bl	8002bb4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	2036      	movs	r0, #54	; 0x36
 8002cf8:	f7ff fe3f 	bl	800297a <dwt_write16bitoffsetreg>
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	200a      	movs	r0, #10
 8002d0e:	f7ff fe50 	bl	80029b2 <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <dwt_starttx+0x98>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d020      	beq.n	8002d94 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8002d52:	7afb      	ldrb	r3, [r7, #11]
 8002d54:	f043 0306 	orr.w	r3, r3, #6
 8002d58:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002d5a:	7afb      	ldrb	r3, [r7, #11]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2100      	movs	r1, #0
 8002d60:	200d      	movs	r0, #13
 8002d62:	f7ff fdf7 	bl	8002954 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8002d66:	2103      	movs	r1, #3
 8002d68:	200f      	movs	r0, #15
 8002d6a:	f7ff fdc5 	bl	80028f8 <dwt_read16bitoffsetreg>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8002d72:	893b      	ldrh	r3, [r7, #8]
 8002d74:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e012      	b.n	8002da8 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8002d82:	2240      	movs	r2, #64	; 0x40
 8002d84:	2100      	movs	r1, #0
 8002d86:	200d      	movs	r0, #13
 8002d88:	f7ff fde4 	bl	8002954 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e009      	b.n	8002da8 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8002d94:	7afb      	ldrb	r3, [r7, #11]
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2100      	movs	r1, #0
 8002da2:	200d      	movs	r0, #13
 8002da4:	f7ff fdd6 	bl	8002954 <dwt_write8bitoffsetreg>
    }

    return retval;
 8002da8:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000104 	.word	0x20000104

08002db8 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	200e      	movs	r0, #14
 8002dc2:	f7ff fd72 	bl	80028aa <dwt_read32bitoffsetreg>
 8002dc6:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8002dc8:	f000 f91e 	bl	8003008 <decamutexon>
 8002dcc:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	200e      	movs	r0, #14
 8002dd4:	f7ff fded 	bl	80029b2 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8002dd8:	2240      	movs	r2, #64	; 0x40
 8002dda:	2100      	movs	r1, #0
 8002ddc:	200d      	movs	r0, #13
 8002dde:	f7ff fdb9 	bl	8002954 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8002de2:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <dwt_forcetrxoff+0x58>)
 8002de4:	2100      	movs	r1, #0
 8002de6:	200f      	movs	r0, #15
 8002de8:	f7ff fde3 	bl	80029b2 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8002dec:	f000 f814 	bl	8002e18 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	2100      	movs	r1, #0
 8002df4:	200e      	movs	r0, #14
 8002df6:	f7ff fddc 	bl	80029b2 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8002dfa:	6838      	ldr	r0, [r7, #0]
 8002dfc:	f000 f915 	bl	800302a <decamutexoff>
    pdw1000local->wait4resp = 0;
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <dwt_forcetrxoff+0x5c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2427fff8 	.word	0x2427fff8
 8002e14:	20000104 	.word	0x20000104

08002e18 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002e1e:	2103      	movs	r1, #3
 8002e20:	200f      	movs	r0, #15
 8002e22:	f7ff fd84 	bl	800292e <dwt_read8bitoffsetreg>
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002e2a:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002e30:	4053      	eors	r3, r2
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	2103      	movs	r1, #3
 8002e3e:	200d      	movs	r0, #13
 8002e40:	f7ff fd88 	bl	8002954 <dwt_write8bitoffsetreg>
    }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8002e5e:	f7ff ffdb 	bl	8002e18 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8002e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e66:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8002e72:	89fb      	ldrh	r3, [r7, #14]
 8002e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e78:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002e7a:	89fb      	ldrh	r3, [r7, #14]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2100      	movs	r1, #0
 8002e80:	200d      	movs	r0, #13
 8002e82:	f7ff fd7a 	bl	800297a <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01a      	beq.n	8002ec6 <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002e90:	2103      	movs	r1, #3
 8002e92:	200f      	movs	r0, #15
 8002e94:	f7ff fd4b 	bl	800292e <dwt_read8bitoffsetreg>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8002e9c:	7b7b      	ldrb	r3, [r7, #13]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00f      	beq.n	8002ec6 <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8002ea6:	f7ff ff87 	bl	8002db8 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8002eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb8:	2100      	movs	r1, #0
 8002eba:	200d      	movs	r0, #13
 8002ebc:	f7ff fd5d 	bl	800297a <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec4:	e000      	b.n	8002ec8 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8002ec6:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8002eda:	2103      	movs	r1, #3
 8002edc:	2004      	movs	r0, #4
 8002ede:	f7ff fd26 	bl	800292e <dwt_read8bitoffsetreg>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d018      	beq.n	8002f1e <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	200c      	movs	r0, #12
 8002ef4:	f7ff fd41 	bl	800297a <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	f043 0310 	orr.w	r3, r3, #16
 8002efe:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <dwt_setrxtimeout+0x7c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <dwt_setrxtimeout+0x7c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f0e:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	461a      	mov	r2, r3
 8002f14:	2103      	movs	r1, #3
 8002f16:	2004      	movs	r0, #4
 8002f18:	f7ff fd1c 	bl	8002954 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8002f1c:	e011      	b.n	8002f42 <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	f023 0310 	bic.w	r3, r3, #16
 8002f24:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <dwt_setrxtimeout+0x7c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <dwt_setrxtimeout+0x7c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002f34:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2103      	movs	r1, #3
 8002f3c:	2004      	movs	r0, #4
 8002f3e:	f7ff fd09 	bl	8002954 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000104 	.word	0x20000104

08002f50 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2124      	movs	r1, #36	; 0x24
 8002f60:	2027      	movs	r0, #39	; 0x27
 8002f62:	f7ff fd0a 	bl	800297a <dwt_write16bitoffsetreg>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8002f72:	22e0      	movs	r2, #224	; 0xe0
 8002f74:	2103      	movs	r1, #3
 8002f76:	2036      	movs	r0, #54	; 0x36
 8002f78:	f7ff fcec 	bl	8002954 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8002f7c:	22f0      	movs	r2, #240	; 0xf0
 8002f7e:	2103      	movs	r1, #3
 8002f80:	2036      	movs	r0, #54	; 0x36
 8002f82:	f7ff fce7 	bl	8002954 <dwt_write8bitoffsetreg>
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8002f90:	f7ff feaa 	bl	8002ce8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2100      	movs	r1, #0
 8002f98:	202c      	movs	r0, #44	; 0x2c
 8002f9a:	f7ff fcee 	bl	800297a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2106      	movs	r1, #6
 8002fa2:	202c      	movs	r0, #44	; 0x2c
 8002fa4:	f7ff fcd6 	bl	8002954 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8002fa8:	f7ff fda7 	bl	8002afa <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2103      	movs	r1, #3
 8002fb0:	2036      	movs	r0, #54	; 0x36
 8002fb2:	f7ff fccf 	bl	8002954 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f000 f844 	bl	8003044 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8002fbc:	22f0      	movs	r2, #240	; 0xf0
 8002fbe:	2103      	movs	r1, #3
 8002fc0:	2036      	movs	r0, #54	; 0x36
 8002fc2:	f7ff fcc7 	bl	8002954 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8002fc6:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <dwt_softreset+0x48>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	755a      	strb	r2, [r3, #21]
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000104 	.word	0x20000104

08002fd8 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	b25b      	sxtb	r3, r3
 8002fec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	210e      	movs	r1, #14
 8002ffa:	202b      	movs	r0, #43	; 0x2b
 8002ffc:	f7ff fcaa 	bl	8002954 <dwt_write8bitoffsetreg>
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800300e:	f000 f9c1 	bl	8003394 <port_GetEXT_IRQStatus>
 8003012:	4603      	mov	r3, r0
 8003014:	607b      	str	r3, [r7, #4]

	if(s) {
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800301c:	f000 f9ac 	bl	8003378 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8003020:	687b      	ldr	r3, [r7, #4]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8003038:	f000 f9a5 	bl	8003386 <port_EnableEXT_IRQ>
	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f8ef 	bl	8003230 <Sleep>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800305c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003060:	4683      	mov	fp, r0
 8003062:	468a      	mov	sl, r1
 8003064:	4690      	mov	r8, r2
 8003066:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8003068:	f7ff ffce 	bl	8003008 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800306c:	4d13      	ldr	r5, [pc, #76]	; (80030bc <writetospi+0x60>)
    stat = decamutexon() ;
 800306e:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003070:	4628      	mov	r0, r5
 8003072:	f002 fc20 	bl	80058b6 <HAL_SPI_GetState>
 8003076:	2801      	cmp	r0, #1
 8003078:	4604      	mov	r4, r0
 800307a:	d1f9      	bne.n	8003070 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800307c:	4810      	ldr	r0, [pc, #64]	; (80030c0 <writetospi+0x64>)
 800307e:	2200      	movs	r2, #0
 8003080:	2140      	movs	r1, #64	; 0x40
 8003082:	f000 fd3f 	bl	8003b04 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8003086:	465a      	mov	r2, fp
 8003088:	4651      	mov	r1, sl
 800308a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800308e:	480b      	ldr	r0, [pc, #44]	; (80030bc <writetospi+0x60>)
 8003090:	f002 faa3 	bl	80055da <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8003094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003098:	4649      	mov	r1, r9
 800309a:	fa1f f288 	uxth.w	r2, r8
 800309e:	4807      	ldr	r0, [pc, #28]	; (80030bc <writetospi+0x60>)
 80030a0:	f002 fa9b 	bl	80055da <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80030a4:	4622      	mov	r2, r4
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	4805      	ldr	r0, [pc, #20]	; (80030c0 <writetospi+0x64>)
 80030aa:	f000 fd2b 	bl	8003b04 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80030ae:	4630      	mov	r0, r6
 80030b0:	f7ff ffbb 	bl	800302a <decamutexoff>

    return 0;
} // end writetospi()
 80030b4:	2000      	movs	r0, #0
 80030b6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	2000012c 	.word	0x2000012c
 80030c0:	48000400 	.word	0x48000400

080030c4 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 80030c4:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 80030c8:	4681      	mov	r9, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	4690      	mov	r8, r2
 80030ce:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80030d0:	f7ff ff9a 	bl	8003008 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80030d4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8003154 <readfromspi+0x90>
    stat = decamutexon() ;
 80030d8:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80030da:	4650      	mov	r0, sl
 80030dc:	f002 fbeb 	bl	80058b6 <HAL_SPI_GetState>
 80030e0:	2801      	cmp	r0, #1
 80030e2:	d1fa      	bne.n	80030da <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80030e4:	481a      	ldr	r0, [pc, #104]	; (8003150 <readfromspi+0x8c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	2140      	movs	r1, #64	; 0x40
 80030ea:	f000 fd0b 	bl	8003b04 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 80030ee:	f1b9 0f00 	cmp.w	r9, #0
 80030f2:	d00c      	beq.n	800310e <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80030f4:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8003154 <readfromspi+0x90>
 80030f8:	44a1      	add	r9, r4
 80030fa:	2201      	movs	r2, #1
 80030fc:	4621      	mov	r1, r4
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    for(i=0; i<headerLength; i++)
 8003102:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8003104:	4650      	mov	r0, sl
 8003106:	f002 fa68 	bl	80055da <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800310a:	45a1      	cmp	r9, r4
 800310c:	d1f5      	bne.n	80030fa <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800310e:	f1b8 0f00 	cmp.w	r8, #0
 8003112:	d012      	beq.n	800313a <readfromspi+0x76>
 8003114:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8003154 <readfromspi+0x90>
 8003118:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        // what it was: hspi1.Instance->DR = 0;
        *(volatile uint8_t *) &hspi1.Instance->DR = (uint8_t) 0; /* set output to 0 (MOSI), this is necessary for
 800311c:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800311e:	f8dc 1000 	ldr.w	r1, [ip]
 8003122:	688a      	ldr	r2, [r1, #8]
 8003124:	0792      	lsls	r2, r2, #30
 8003126:	d5fc      	bpl.n	8003122 <readfromspi+0x5e>
        *(volatile uint8_t *) &hspi1.Instance->DR = (uint8_t) 0; /* set output to 0 (MOSI), this is necessary for
 8003128:	730c      	strb	r4, [r1, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800312a:	688a      	ldr	r2, [r1, #8]
 800312c:	07d3      	lsls	r3, r2, #31
 800312e:	d5fc      	bpl.n	800312a <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8003130:	68cb      	ldr	r3, [r1, #12]
 8003132:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8003136:	4285      	cmp	r5, r0
 8003138:	d1f1      	bne.n	800311e <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800313a:	2201      	movs	r2, #1
 800313c:	2140      	movs	r1, #64	; 0x40
 800313e:	4804      	ldr	r0, [pc, #16]	; (8003150 <readfromspi+0x8c>)
 8003140:	f000 fce0 	bl	8003b04 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8003144:	4630      	mov	r0, r6
 8003146:	f7ff ff70 	bl	800302a <decamutexoff>

    return 0;
} // end readfromspi()
 800314a:	2000      	movs	r0, #0
 800314c:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8003150:	48000400 	.word	0x48000400
 8003154:	2000012c 	.word	0x2000012c

08003158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db0b      	blt.n	8003182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <__NVIC_EnableIRQ+0x38>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f202 	lsl.w	r2, r0, r2
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e100 	.word	0xe000e100

08003194 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db12      	blt.n	80031cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	490a      	ldr	r1, [pc, #40]	; (80031d8 <__NVIC_DisableIRQ+0x44>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	3320      	adds	r3, #32
 80031bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031c0:	f3bf 8f4f 	dsb	sy
}
 80031c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031c6:	f3bf 8f6f 	isb	sy
}
 80031ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100

080031dc <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep(useconds_t usec)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e012      	b.n	8003210 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	e004      	b.n	80031fa <usleep+0x1e>
        {
            __NOP();
 80031f0:	bf00      	nop
            __NOP();
 80031f2:	bf00      	nop
        for(j=0;j<2;j++)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	3301      	adds	r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	bfd4      	ite	le
 8003200:	2301      	movle	r3, #1
 8003202:	2300      	movgt	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f2      	bne.n	80031f0 <usleep+0x14>
    for(i=0;i<usec;i++)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3301      	adds	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	bf8c      	ite	hi
 8003218:	2301      	movhi	r3, #1
 800321a:	2300      	movls	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e3      	bne.n	80031ea <usleep+0xe>
        }
    }
}
 8003222:	bf00      	nop
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f971 	bl	8003520 <HAL_Delay>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8003250:	4a0b      	ldr	r2, [pc, #44]	; (8003280 <EXTI_GetITEnStatus+0x38>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 800328a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800328e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003290:	2311      	movs	r3, #17
 8003292:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	4619      	mov	r1, r3
 800329c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a0:	f000 faa6 	bl	80037f0 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ae:	f000 fc29 	bl	8003b04 <HAL_GPIO_WritePin>

    usleep(1);
 80032b2:	2001      	movs	r0, #1
 80032b4:	f7ff ff92 	bl	80031dc <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f000 f807 	bl	80032cc <setup_DW1000RSTnIRQ>



    Sleep(2);
 80032be:	2002      	movs	r0, #2
 80032c0:	f7ff ffb6 	bl	8003230 <Sleep>
}
 80032c4:	bf00      	nop
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d017      	beq.n	800330a <setup_DW1000RSTnIRQ+0x3e>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 80032da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032de:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032e4:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80032ea:	f107 030c 	add.w	r3, r7, #12
 80032ee:	4619      	mov	r1, r3
 80032f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f4:	f000 fa7c 	bl	80037f0 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 80032f8:	2006      	movs	r0, #6
 80032fa:	f000 fa50 	bl	800379e <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80032fe:	2200      	movs	r2, #0
 8003300:	2105      	movs	r1, #5
 8003302:	2006      	movs	r0, #6
 8003304:	f000 fa2f 	bl	8003766 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8003308:	e019      	b.n	800333e <setup_DW1000RSTnIRQ+0x72>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800330a:	2006      	movs	r0, #6
 800330c:	f000 fa55 	bl	80037ba <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8003310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003314:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003316:	2311      	movs	r3, #17
 8003318:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800331e:	2303      	movs	r3, #3
 8003320:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003322:	f107 030c 	add.w	r3, r7, #12
 8003326:	4619      	mov	r1, r3
 8003328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332c:	f000 fa60 	bl	80037f0 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8003330:	2201      	movs	r2, #1
 8003332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800333a:	f000 fbe3 	bl	8003b04 <HAL_GPIO_WritePin>
}
 800333e:	bf00      	nop
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <port_set_dw1000_slowrate+0x14>)
 800334e:	2220      	movs	r2, #32
 8003350:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8003352:	4802      	ldr	r0, [pc, #8]	; (800335c <port_set_dw1000_slowrate+0x14>)
 8003354:	f002 f896 	bl	8005484 <HAL_SPI_Init>
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}
 800335c:	2000012c 	.word	0x2000012c

08003360 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <port_set_dw1000_fastrate+0x14>)
 8003366:	2208      	movs	r2, #8
 8003368:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800336a:	4802      	ldr	r0, [pc, #8]	; (8003374 <port_set_dw1000_fastrate+0x14>)
 800336c:	f002 f88a 	bl	8005484 <HAL_SPI_Init>
}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}
 8003374:	2000012c 	.word	0x2000012c

08003378 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800337c:	2017      	movs	r0, #23
 800337e:	f7ff ff09 	bl	8003194 <__NVIC_DisableIRQ>
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}

08003386 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800338a:	2017      	movs	r0, #23
 800338c:	f7ff fee4 	bl	8003158 <__NVIC_EnableIRQ>
}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}

08003394 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8003398:	2017      	movs	r0, #23
 800339a:	f7ff ff55 	bl	8003248 <EXTI_GetITEnStatus>
 800339e:	4603      	mov	r3, r0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <stdio_init>:
 * @fn port_stdio_init
 * @brief Initialize stdio on the given UART
 *
 * @param[in] huart Pointer to the STM32 HAL UART peripheral instance
 */
void stdio_init(UART_HandleTypeDef* huart) {
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    uart = huart;
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <stdio_init+0x1c>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6013      	str	r3, [r2, #0]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	200003d4 	.word	0x200003d4

080033c4 <stdio_write>:
 *
 * @param[in] data Pointer to null terminated string
 * @return Number of bytes transmitted or -1 if an error occurred
 */
inline int stdio_write(const char *data)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(data);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7fc fee1 	bl	8000194 <strlen>
 80033d2:	4603      	mov	r3, r0
 80033d4:	81fb      	strh	r3, [r7, #14]
    if (HAL_UART_Transmit(uart, (uint8_t*) data, len, HAL_MAX_DELAY) == HAL_OK) {
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <stdio_write+0x38>)
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	89fa      	ldrh	r2, [r7, #14]
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	f002 fc29 	bl	8005c38 <HAL_UART_Transmit>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <stdio_write+0x2c>
        return len;
 80033ec:	89fb      	ldrh	r3, [r7, #14]
 80033ee:	e001      	b.n	80033f4 <stdio_write+0x30>
    }
    return -1;
 80033f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200003d4 	.word	0x200003d4

08003400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003438 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003404:	480d      	ldr	r0, [pc, #52]	; (800343c <LoopForever+0x6>)
  ldr r1, =_edata
 8003406:	490e      	ldr	r1, [pc, #56]	; (8003440 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003408:	4a0e      	ldr	r2, [pc, #56]	; (8003444 <LoopForever+0xe>)
  movs r3, #0
 800340a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800340c:	e002      	b.n	8003414 <LoopCopyDataInit>

0800340e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800340e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003412:	3304      	adds	r3, #4

08003414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003418:	d3f9      	bcc.n	800340e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800341a:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <LoopForever+0x12>)
  ldr r4, =_ebss
 800341c:	4c0b      	ldr	r4, [pc, #44]	; (800344c <LoopForever+0x16>)
  movs r3, #0
 800341e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003420:	e001      	b.n	8003426 <LoopFillZerobss>

08003422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003424:	3204      	adds	r2, #4

08003426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003428:	d3fb      	bcc.n	8003422 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800342a:	f7fe fe31 	bl	8002090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800342e:	f003 f81d 	bl	800646c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003432:	f7fd fe45 	bl	80010c0 <main>

08003436 <LoopForever>:

LoopForever:
    b LoopForever
 8003436:	e7fe      	b.n	8003436 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800343c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003440:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8003444:	08006ba8 	.word	0x08006ba8
  ldr r2, =_sbss
 8003448:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800344c:	200003dc 	.word	0x200003dc

08003450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003450:	e7fe      	b.n	8003450 <ADC1_2_IRQHandler>
	...

08003454 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_Init+0x28>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_Init+0x28>)
 800345e:	f043 0310 	orr.w	r3, r3, #16
 8003462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003464:	2003      	movs	r0, #3
 8003466:	f000 f973 	bl	8003750 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800346a:	200f      	movs	r0, #15
 800346c:	f000 f808 	bl	8003480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003470:	f7fe fd34 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40022000 	.word	0x40022000

08003480 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_InitTick+0x54>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_InitTick+0x58>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003496:	fbb3 f3f1 	udiv	r3, r3, r1
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f999 	bl	80037d6 <HAL_SYSTICK_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00e      	b.n	80034cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b0f      	cmp	r3, #15
 80034b2:	d80a      	bhi.n	80034ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b4:	2200      	movs	r2, #0
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034bc:	f000 f953 	bl	8003766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c0:	4a06      	ldr	r2, [pc, #24]	; (80034dc <HAL_InitTick+0x5c>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000100 	.word	0x20000100
 80034d8:	2000010c 	.word	0x2000010c
 80034dc:	20000108 	.word	0x20000108

080034e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_IncTick+0x20>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_IncTick+0x24>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_IncTick+0x24>)
 80034f2:	6013      	str	r3, [r2, #0]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	2000010c 	.word	0x2000010c
 8003504:	200003d8 	.word	0x200003d8

08003508 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return uwTick;  
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <HAL_GetTick+0x14>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	200003d8 	.word	0x200003d8

08003520 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7ff ffee 	bl	8003508 <HAL_GetTick>
 800352c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003538:	d005      	beq.n	8003546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_Delay+0x44>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003546:	bf00      	nop
 8003548:	f7ff ffde 	bl	8003508 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	429a      	cmp	r2, r3
 8003556:	d8f7      	bhi.n	8003548 <HAL_Delay+0x28>
  {
  }
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	2000010c 	.word	0x2000010c

08003568 <__NVIC_SetPriorityGrouping>:
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	; (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_DisableIRQ>:
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	2b00      	cmp	r3, #0
 8003618:	db12      	blt.n	8003640 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	490a      	ldr	r1, [pc, #40]	; (800364c <__NVIC_DisableIRQ+0x44>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2001      	movs	r0, #1
 800362a:	fa00 f202 	lsl.w	r2, r0, r2
 800362e:	3320      	adds	r3, #32
 8003630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003634:	f3bf 8f4f 	dsb	sy
}
 8003638:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800363a:	f3bf 8f6f 	isb	sy
}
 800363e:	bf00      	nop
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000e100 	.word	0xe000e100

08003650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	6039      	str	r1, [r7, #0]
 800365a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	db0a      	blt.n	800367a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	490c      	ldr	r1, [pc, #48]	; (800369c <__NVIC_SetPriority+0x4c>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	440b      	add	r3, r1
 8003674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003678:	e00a      	b.n	8003690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4908      	ldr	r1, [pc, #32]	; (80036a0 <__NVIC_SetPriority+0x50>)
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	3b04      	subs	r3, #4
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	440b      	add	r3, r1
 800368e:	761a      	strb	r2, [r3, #24]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000e100 	.word	0xe000e100
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b089      	sub	sp, #36	; 0x24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f1c3 0307 	rsb	r3, r3, #7
 80036be:	2b04      	cmp	r3, #4
 80036c0:	bf28      	it	cs
 80036c2:	2304      	movcs	r3, #4
 80036c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d902      	bls.n	80036d4 <NVIC_EncodePriority+0x30>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3b03      	subs	r3, #3
 80036d2:	e000      	b.n	80036d6 <NVIC_EncodePriority+0x32>
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43da      	mvns	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	401a      	ands	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	43d9      	mvns	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	4313      	orrs	r3, r2
         );
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800371c:	d301      	bcc.n	8003722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800371e:	2301      	movs	r3, #1
 8003720:	e00f      	b.n	8003742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <SysTick_Config+0x40>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800372a:	210f      	movs	r1, #15
 800372c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003730:	f7ff ff8e 	bl	8003650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <SysTick_Config+0x40>)
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <SysTick_Config+0x40>)
 800373c:	2207      	movs	r2, #7
 800373e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	e000e010 	.word	0xe000e010

08003750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff05 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003778:	f7ff ff1a 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 800377c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7ff ff8e 	bl	80036a4 <NVIC_EncodePriority>
 8003788:	4602      	mov	r2, r0
 800378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff5d 	bl	8003650 <__NVIC_SetPriority>
}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4603      	mov	r3, r0
 80037a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff0d 	bl	80035cc <__NVIC_EnableIRQ>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff1d 	bl	8003608 <__NVIC_DisableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ff94 	bl	800370c <SysTick_Config>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fe:	e160      	b.n	8003ac2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	2101      	movs	r1, #1
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8152 	beq.w	8003abc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d005      	beq.n	8003830 <HAL_GPIO_Init+0x40>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d130      	bne.n	8003892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4013      	ands	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003866:	2201      	movs	r2, #1
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4013      	ands	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 0201 	and.w	r2, r3, #1
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b03      	cmp	r3, #3
 800389c:	d017      	beq.n	80038ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d123      	bne.n	8003922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	08da      	lsrs	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3208      	adds	r2, #8
 80038e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	220f      	movs	r2, #15
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	08da      	lsrs	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3208      	adds	r2, #8
 800391c:	6939      	ldr	r1, [r7, #16]
 800391e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	2203      	movs	r2, #3
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0203 	and.w	r2, r3, #3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80ac 	beq.w	8003abc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003964:	4b5e      	ldr	r3, [pc, #376]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	4a5d      	ldr	r2, [pc, #372]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6193      	str	r3, [r2, #24]
 8003970:	4b5b      	ldr	r3, [pc, #364]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800397c:	4a59      	ldr	r2, [pc, #356]	; (8003ae4 <HAL_GPIO_Init+0x2f4>)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	3302      	adds	r3, #2
 8003984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	220f      	movs	r2, #15
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039a6:	d025      	beq.n	80039f4 <HAL_GPIO_Init+0x204>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a4f      	ldr	r2, [pc, #316]	; (8003ae8 <HAL_GPIO_Init+0x2f8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d01f      	beq.n	80039f0 <HAL_GPIO_Init+0x200>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a4e      	ldr	r2, [pc, #312]	; (8003aec <HAL_GPIO_Init+0x2fc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d019      	beq.n	80039ec <HAL_GPIO_Init+0x1fc>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a4d      	ldr	r2, [pc, #308]	; (8003af0 <HAL_GPIO_Init+0x300>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <HAL_GPIO_Init+0x1f8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a4c      	ldr	r2, [pc, #304]	; (8003af4 <HAL_GPIO_Init+0x304>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00d      	beq.n	80039e4 <HAL_GPIO_Init+0x1f4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a4b      	ldr	r2, [pc, #300]	; (8003af8 <HAL_GPIO_Init+0x308>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d007      	beq.n	80039e0 <HAL_GPIO_Init+0x1f0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <HAL_GPIO_Init+0x30c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d101      	bne.n	80039dc <HAL_GPIO_Init+0x1ec>
 80039d8:	2306      	movs	r3, #6
 80039da:	e00c      	b.n	80039f6 <HAL_GPIO_Init+0x206>
 80039dc:	2307      	movs	r3, #7
 80039de:	e00a      	b.n	80039f6 <HAL_GPIO_Init+0x206>
 80039e0:	2305      	movs	r3, #5
 80039e2:	e008      	b.n	80039f6 <HAL_GPIO_Init+0x206>
 80039e4:	2304      	movs	r3, #4
 80039e6:	e006      	b.n	80039f6 <HAL_GPIO_Init+0x206>
 80039e8:	2303      	movs	r3, #3
 80039ea:	e004      	b.n	80039f6 <HAL_GPIO_Init+0x206>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e002      	b.n	80039f6 <HAL_GPIO_Init+0x206>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_GPIO_Init+0x206>
 80039f4:	2300      	movs	r3, #0
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	f002 0203 	and.w	r2, r2, #3
 80039fc:	0092      	lsls	r2, r2, #2
 80039fe:	4093      	lsls	r3, r2
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a06:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <HAL_GPIO_Init+0x2f4>)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a14:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a38:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a3e:	4b30      	ldr	r3, [pc, #192]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a62:	4a27      	ldr	r2, [pc, #156]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a68:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a8c:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f47f ae97 	bne.w	8003800 <HAL_GPIO_Init+0x10>
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	48000400 	.word	0x48000400
 8003aec:	48000800 	.word	0x48000800
 8003af0:	48000c00 	.word	0x48000c00
 8003af4:	48001000 	.word	0x48001000
 8003af8:	48001400 	.word	0x48001400
 8003afc:	48001800 	.word	0x48001800
 8003b00:	40010400 	.word	0x40010400

08003b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
 8003b10:	4613      	mov	r3, r2
 8003b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f001 b83a 	b.w	8004bce <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 816f 	beq.w	8003e4e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b70:	4bb5      	ldr	r3, [pc, #724]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d00c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b7c:	4bb2      	ldr	r3, [pc, #712]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 030c 	and.w	r3, r3, #12
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d15c      	bne.n	8003c42 <HAL_RCC_OscConfig+0x10e>
 8003b88:	4baf      	ldr	r3, [pc, #700]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d155      	bne.n	8003c42 <HAL_RCC_OscConfig+0x10e>
 8003b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003baa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x94>
 8003bc2:	4ba1      	ldr	r3, [pc, #644]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	e015      	b.n	8003bf4 <HAL_RCC_OscConfig+0xc0>
 8003bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bcc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003be4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003bf0:	4b95      	ldr	r3, [pc, #596]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bf8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003bfc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003c00:	fa92 f2a2 	rbit	r2, r2
 8003c04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003c08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c0c:	fab2 f282 	clz	r2, r2
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	f042 0220 	orr.w	r2, r2, #32
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	f002 021f 	and.w	r2, r2, #31
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8111 	beq.w	8003e4c <HAL_RCC_OscConfig+0x318>
 8003c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 8108 	bne.w	8003e4c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f000 bfc6 	b.w	8004bce <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x12e>
 8003c54:	4b7c      	ldr	r3, [pc, #496]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a7b      	ldr	r2, [pc, #492]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e036      	b.n	8003cd0 <HAL_RCC_OscConfig+0x19c>
 8003c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x158>
 8003c72:	4b75      	ldr	r3, [pc, #468]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a74      	ldr	r2, [pc, #464]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b72      	ldr	r3, [pc, #456]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a71      	ldr	r2, [pc, #452]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e021      	b.n	8003cd0 <HAL_RCC_OscConfig+0x19c>
 8003c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x184>
 8003c9e:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a69      	ldr	r2, [pc, #420]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	4b67      	ldr	r3, [pc, #412]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a66      	ldr	r2, [pc, #408]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e00b      	b.n	8003cd0 <HAL_RCC_OscConfig+0x19c>
 8003cb8:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a62      	ldr	r2, [pc, #392]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b60      	ldr	r3, [pc, #384]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a5f      	ldr	r2, [pc, #380]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cce:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d059      	beq.n	8003d94 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7ff fc12 	bl	8003508 <HAL_GetTick>
 8003ce4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cea:	f7ff fc0d 	bl	8003508 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d902      	bls.n	8003d00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	f000 bf67 	b.w	8004bce <HAL_RCC_OscConfig+0x109a>
 8003d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d04:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003d14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d102      	bne.n	8003d32 <HAL_RCC_OscConfig+0x1fe>
 8003d2c:	4b46      	ldr	r3, [pc, #280]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	e015      	b.n	8003d5e <HAL_RCC_OscConfig+0x22a>
 8003d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003d4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d62:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003d66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003d6a:	fa92 f2a2 	rbit	r2, r2
 8003d6e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003d72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003d76:	fab2 f282 	clz	r2, r2
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	f042 0220 	orr.w	r2, r2, #32
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	f002 021f 	and.w	r2, r2, #31
 8003d86:	2101      	movs	r1, #1
 8003d88:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ab      	beq.n	8003cea <HAL_RCC_OscConfig+0x1b6>
 8003d92:	e05c      	b.n	8003e4e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7ff fbb8 	bl	8003508 <HAL_GetTick>
 8003d98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9e:	f7ff fbb3 	bl	8003508 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d902      	bls.n	8003db4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	f000 bf0d 	b.w	8004bce <HAL_RCC_OscConfig+0x109a>
 8003db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003db8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003dc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d102      	bne.n	8003de6 <HAL_RCC_OscConfig+0x2b2>
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	e015      	b.n	8003e12 <HAL_RCC_OscConfig+0x2de>
 8003de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dfe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e06:	fa93 f3a3 	rbit	r3, r3
 8003e0a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <HAL_RCC_OscConfig+0x314>)
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e16:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003e1a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003e1e:	fa92 f2a2 	rbit	r2, r2
 8003e22:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003e26:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003e2a:	fab2 f282 	clz	r2, r2
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	f042 0220 	orr.w	r2, r2, #32
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	f002 021f 	and.w	r2, r2, #31
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1ab      	bne.n	8003d9e <HAL_RCC_OscConfig+0x26a>
 8003e46:	e002      	b.n	8003e4e <HAL_RCC_OscConfig+0x31a>
 8003e48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 817f 	beq.w	8004162 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e64:	4ba7      	ldr	r3, [pc, #668]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 030c 	and.w	r3, r3, #12
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00c      	beq.n	8003e8a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e70:	4ba4      	ldr	r3, [pc, #656]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 030c 	and.w	r3, r3, #12
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d173      	bne.n	8003f64 <HAL_RCC_OscConfig+0x430>
 8003e7c:	4ba1      	ldr	r3, [pc, #644]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e88:	d16c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x430>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003e9c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d102      	bne.n	8003eba <HAL_RCC_OscConfig+0x386>
 8003eb4:	4b93      	ldr	r3, [pc, #588]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	e013      	b.n	8003ee2 <HAL_RCC_OscConfig+0x3ae>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003ed2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003ed6:	fa93 f3a3 	rbit	r3, r3
 8003eda:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ede:	4b89      	ldr	r3, [pc, #548]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003ee8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003eec:	fa92 f2a2 	rbit	r2, r2
 8003ef0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003ef4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003ef8:	fab2 f282 	clz	r2, r2
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	f042 0220 	orr.w	r2, r2, #32
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	f002 021f 	and.w	r2, r2, #31
 8003f08:	2101      	movs	r1, #1
 8003f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCC_OscConfig+0x3f6>
 8003f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d002      	beq.n	8003f2a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f000 be52 	b.w	8004bce <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2a:	4b76      	ldr	r3, [pc, #472]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	21f8      	movs	r1, #248	; 0xf8
 8003f40:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003f48:	fa91 f1a1 	rbit	r1, r1
 8003f4c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003f50:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003f54:	fab1 f181 	clz	r1, r1
 8003f58:	b2c9      	uxtb	r1, r1
 8003f5a:	408b      	lsls	r3, r1
 8003f5c:	4969      	ldr	r1, [pc, #420]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f62:	e0fe      	b.n	8004162 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8088 	beq.w	8004086 <HAL_RCC_OscConfig+0x552>
 8003f76:	2301      	movs	r3, #1
 8003f78:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003f88:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f8c:	fab3 f383 	clz	r3, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7ff fab1 	bl	8003508 <HAL_GetTick>
 8003fa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fac:	f7ff faac 	bl	8003508 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d902      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	f000 be06 	b.w	8004bce <HAL_RCC_OscConfig+0x109a>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003fd4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd8:	fab3 f383 	clz	r3, r3
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d102      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x4be>
 8003fec:	4b45      	ldr	r3, [pc, #276]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	e013      	b.n	800401a <HAL_RCC_OscConfig+0x4e6>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004004:	2302      	movs	r3, #2
 8004006:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800400a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800400e:	fa93 f3a3 	rbit	r3, r3
 8004012:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004016:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2202      	movs	r2, #2
 800401c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004020:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004024:	fa92 f2a2 	rbit	r2, r2
 8004028:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800402c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004030:	fab2 f282 	clz	r2, r2
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	f042 0220 	orr.w	r2, r2, #32
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	f002 021f 	and.w	r2, r2, #31
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f202 	lsl.w	r2, r1, r2
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0af      	beq.n	8003fac <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404c:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004058:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	21f8      	movs	r1, #248	; 0xf8
 8004062:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800406a:	fa91 f1a1 	rbit	r1, r1
 800406e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004072:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004076:	fab1 f181 	clz	r1, r1
 800407a:	b2c9      	uxtb	r1, r1
 800407c:	408b      	lsls	r3, r1
 800407e:	4921      	ldr	r1, [pc, #132]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	600b      	str	r3, [r1, #0]
 8004084:	e06d      	b.n	8004162 <HAL_RCC_OscConfig+0x62e>
 8004086:	2301      	movs	r3, #1
 8004088:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004098:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	461a      	mov	r2, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b2:	f7ff fa29 	bl	8003508 <HAL_GetTick>
 80040b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040bc:	f7ff fa24 	bl	8003508 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d902      	bls.n	80040d2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	f000 bd7e 	b.w	8004bce <HAL_RCC_OscConfig+0x109a>
 80040d2:	2302      	movs	r3, #2
 80040d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80040e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d105      	bne.n	8004108 <HAL_RCC_OscConfig+0x5d4>
 80040fc:	4b01      	ldr	r3, [pc, #4]	; (8004104 <HAL_RCC_OscConfig+0x5d0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	e016      	b.n	8004130 <HAL_RCC_OscConfig+0x5fc>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	2302      	movs	r3, #2
 800410a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800411a:	2302      	movs	r3, #2
 800411c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004120:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800412c:	4bbf      	ldr	r3, [pc, #764]	; (800442c <HAL_RCC_OscConfig+0x8f8>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2202      	movs	r2, #2
 8004132:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004136:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800413a:	fa92 f2a2 	rbit	r2, r2
 800413e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004142:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004146:	fab2 f282 	clz	r2, r2
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	f042 0220 	orr.w	r2, r2, #32
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	f002 021f 	and.w	r2, r2, #31
 8004156:	2101      	movs	r1, #1
 8004158:	fa01 f202 	lsl.w	r2, r1, r2
 800415c:	4013      	ands	r3, r2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ac      	bne.n	80040bc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8113 	beq.w	800439e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800417c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d07c      	beq.n	8004282 <HAL_RCC_OscConfig+0x74e>
 8004188:	2301      	movs	r3, #1
 800418a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800419a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419e:	fab3 f383 	clz	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	4ba2      	ldr	r3, [pc, #648]	; (8004430 <HAL_RCC_OscConfig+0x8fc>)
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	461a      	mov	r2, r3
 80041ae:	2301      	movs	r3, #1
 80041b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b2:	f7ff f9a9 	bl	8003508 <HAL_GetTick>
 80041b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041bc:	f7ff f9a4 	bl	8003508 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d902      	bls.n	80041d2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	f000 bcfe 	b.w	8004bce <HAL_RCC_OscConfig+0x109a>
 80041d2:	2302      	movs	r3, #2
 80041d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041dc:	fa93 f2a3 	rbit	r2, r3
 80041e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041f2:	2202      	movs	r2, #2
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	fa93 f2a3 	rbit	r2, r3
 8004204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004212:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004216:	2202      	movs	r2, #2
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800421e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	fa93 f2a3 	rbit	r2, r3
 8004228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800422c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004230:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004232:	4b7e      	ldr	r3, [pc, #504]	; (800442c <HAL_RCC_OscConfig+0x8f8>)
 8004234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800423a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800423e:	2102      	movs	r1, #2
 8004240:	6019      	str	r1, [r3, #0]
 8004242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004246:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	fa93 f1a3 	rbit	r1, r3
 8004250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004254:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004258:	6019      	str	r1, [r3, #0]
  return result;
 800425a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800425e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	fab3 f383 	clz	r3, r3
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	2101      	movs	r1, #1
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d09d      	beq.n	80041bc <HAL_RCC_OscConfig+0x688>
 8004280:	e08d      	b.n	800439e <HAL_RCC_OscConfig+0x86a>
 8004282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004286:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004292:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	fa93 f2a3 	rbit	r2, r3
 800429c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80042a4:	601a      	str	r2, [r3, #0]
  return result;
 80042a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80042ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b0:	fab3 f383 	clz	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	4b5d      	ldr	r3, [pc, #372]	; (8004430 <HAL_RCC_OscConfig+0x8fc>)
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c4:	f7ff f920 	bl	8003508 <HAL_GetTick>
 80042c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ce:	f7ff f91b 	bl	8003508 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d902      	bls.n	80042e4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	f000 bc75 	b.w	8004bce <HAL_RCC_OscConfig+0x109a>
 80042e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80042ec:	2202      	movs	r2, #2
 80042ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	fa93 f2a3 	rbit	r2, r3
 80042fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004302:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800430c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004310:	2202      	movs	r2, #2
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004318:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	fa93 f2a3 	rbit	r2, r3
 8004322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004330:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004334:	2202      	movs	r2, #2
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	fa93 f2a3 	rbit	r2, r3
 8004346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800434a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800434e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004350:	4b36      	ldr	r3, [pc, #216]	; (800442c <HAL_RCC_OscConfig+0x8f8>)
 8004352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004358:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800435c:	2102      	movs	r1, #2
 800435e:	6019      	str	r1, [r3, #0]
 8004360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004364:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	fa93 f1a3 	rbit	r1, r3
 800436e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004372:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004376:	6019      	str	r1, [r3, #0]
  return result;
 8004378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800437c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f303 	lsl.w	r3, r1, r3
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d197      	bne.n	80042ce <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800439e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 81a5 	beq.w	80046fe <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ba:	4b1c      	ldr	r3, [pc, #112]	; (800442c <HAL_RCC_OscConfig+0x8f8>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCC_OscConfig+0x8f8>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_RCC_OscConfig+0x8f8>)
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d0:	61d3      	str	r3, [r2, #28]
 80043d2:	4b16      	ldr	r3, [pc, #88]	; (800442c <HAL_RCC_OscConfig+0x8f8>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80043da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_RCC_OscConfig+0x900>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d121      	bne.n	8004444 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <HAL_RCC_OscConfig+0x900>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <HAL_RCC_OscConfig+0x900>)
 8004406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440c:	f7ff f87c 	bl	8003508 <HAL_GetTick>
 8004410:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004414:	e010      	b.n	8004438 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004416:	f7ff f877 	bl	8003508 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d908      	bls.n	8004438 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e3d1      	b.n	8004bce <HAL_RCC_OscConfig+0x109a>
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	10908120 	.word	0x10908120
 8004434:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	4b8d      	ldr	r3, [pc, #564]	; (8004670 <HAL_RCC_OscConfig+0xb3c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0e8      	beq.n	8004416 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004448:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d106      	bne.n	8004462 <HAL_RCC_OscConfig+0x92e>
 8004454:	4b87      	ldr	r3, [pc, #540]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	4a86      	ldr	r2, [pc, #536]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6213      	str	r3, [r2, #32]
 8004460:	e035      	b.n	80044ce <HAL_RCC_OscConfig+0x99a>
 8004462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004466:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x958>
 8004472:	4b80      	ldr	r3, [pc, #512]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	4a7f      	ldr	r2, [pc, #508]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	6213      	str	r3, [r2, #32]
 800447e:	4b7d      	ldr	r3, [pc, #500]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	4a7c      	ldr	r2, [pc, #496]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	6213      	str	r3, [r2, #32]
 800448a:	e020      	b.n	80044ce <HAL_RCC_OscConfig+0x99a>
 800448c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004490:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b05      	cmp	r3, #5
 800449a:	d10c      	bne.n	80044b6 <HAL_RCC_OscConfig+0x982>
 800449c:	4b75      	ldr	r3, [pc, #468]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	4a74      	ldr	r2, [pc, #464]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 80044a2:	f043 0304 	orr.w	r3, r3, #4
 80044a6:	6213      	str	r3, [r2, #32]
 80044a8:	4b72      	ldr	r3, [pc, #456]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	4a71      	ldr	r2, [pc, #452]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6213      	str	r3, [r2, #32]
 80044b4:	e00b      	b.n	80044ce <HAL_RCC_OscConfig+0x99a>
 80044b6:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	4b6c      	ldr	r3, [pc, #432]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a6b      	ldr	r2, [pc, #428]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8081 	beq.w	80045e2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e0:	f7ff f812 	bl	8003508 <HAL_GetTick>
 80044e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7ff f80d 	bl	8003508 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e365      	b.n	8004bce <HAL_RCC_OscConfig+0x109a>
 8004502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004506:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800450a:	2202      	movs	r2, #2
 800450c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004512:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	fa93 f2a3 	rbit	r2, r3
 800451c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004520:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800452a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800452e:	2202      	movs	r2, #2
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004536:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	fa93 f2a3 	rbit	r2, r3
 8004540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004544:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004548:	601a      	str	r2, [r3, #0]
  return result;
 800454a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800454e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004552:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	fab3 f383 	clz	r3, r3
 8004558:	b2db      	uxtb	r3, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d102      	bne.n	800456e <HAL_RCC_OscConfig+0xa3a>
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	e013      	b.n	8004596 <HAL_RCC_OscConfig+0xa62>
 800456e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004572:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004576:	2202      	movs	r2, #2
 8004578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	fa93 f2a3 	rbit	r2, r3
 8004588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800458c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	4b38      	ldr	r3, [pc, #224]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800459a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800459e:	2102      	movs	r1, #2
 80045a0:	6011      	str	r1, [r2, #0]
 80045a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80045a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	fa92 f1a2 	rbit	r1, r2
 80045b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80045b4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80045b8:	6011      	str	r1, [r2, #0]
  return result;
 80045ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80045be:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	fab2 f282 	clz	r2, r2
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	f002 021f 	and.w	r2, r2, #31
 80045d4:	2101      	movs	r1, #1
 80045d6:	fa01 f202 	lsl.w	r2, r1, r2
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d084      	beq.n	80044ea <HAL_RCC_OscConfig+0x9b6>
 80045e0:	e083      	b.n	80046ea <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e2:	f7fe ff91 	bl	8003508 <HAL_GetTick>
 80045e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fe ff8c 	bl	8003508 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e2e4      	b.n	8004bce <HAL_RCC_OscConfig+0x109a>
 8004604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004608:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800460c:	2202      	movs	r2, #2
 800460e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004614:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	fa93 f2a3 	rbit	r2, r3
 800461e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004622:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800462c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004630:	2202      	movs	r2, #2
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004638:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	fa93 f2a3 	rbit	r2, r3
 8004642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004646:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800464a:	601a      	str	r2, [r3, #0]
  return result;
 800464c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004650:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004654:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f043 0302 	orr.w	r3, r3, #2
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0xb44>
 800466a:	4b02      	ldr	r3, [pc, #8]	; (8004674 <HAL_RCC_OscConfig+0xb40>)
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	e017      	b.n	80046a0 <HAL_RCC_OscConfig+0xb6c>
 8004670:	40007000 	.word	0x40007000
 8004674:	40021000 	.word	0x40021000
 8004678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800467c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004680:	2202      	movs	r2, #2
 8004682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004688:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	fa93 f2a3 	rbit	r2, r3
 8004692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004696:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	4bb3      	ldr	r3, [pc, #716]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80046a8:	2102      	movs	r1, #2
 80046aa:	6011      	str	r1, [r2, #0]
 80046ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	fa92 f1a2 	rbit	r1, r2
 80046ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046be:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80046c2:	6011      	str	r1, [r2, #0]
  return result;
 80046c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046c8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	fab2 f282 	clz	r2, r2
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	f002 021f 	and.w	r2, r2, #31
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d180      	bne.n	80045ec <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046ea:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f2:	4b9e      	ldr	r3, [pc, #632]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	4a9d      	ldr	r2, [pc, #628]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 80046f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004702:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 825e 	beq.w	8004bcc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004710:	4b96      	ldr	r3, [pc, #600]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b08      	cmp	r3, #8
 800471a:	f000 821f 	beq.w	8004b5c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004722:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b02      	cmp	r3, #2
 800472c:	f040 8170 	bne.w	8004a10 <HAL_RCC_OscConfig+0xedc>
 8004730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004734:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800473c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004742:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	fa93 f2a3 	rbit	r2, r3
 800474c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004750:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004754:	601a      	str	r2, [r3, #0]
  return result;
 8004756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800475a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800475e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800476a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	461a      	mov	r2, r3
 8004772:	2300      	movs	r3, #0
 8004774:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004776:	f7fe fec7 	bl	8003508 <HAL_GetTick>
 800477a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800477e:	e009      	b.n	8004794 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004780:	f7fe fec2 	bl	8003508 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e21c      	b.n	8004bce <HAL_RCC_OscConfig+0x109a>
 8004794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004798:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800479c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	fa93 f2a3 	rbit	r2, r3
 80047b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80047b8:	601a      	str	r2, [r3, #0]
  return result;
 80047ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80047c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c4:	fab3 f383 	clz	r3, r3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d102      	bne.n	80047de <HAL_RCC_OscConfig+0xcaa>
 80047d8:	4b64      	ldr	r3, [pc, #400]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	e027      	b.n	800482e <HAL_RCC_OscConfig+0xcfa>
 80047de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80047e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	fa93 f2a3 	rbit	r2, r3
 80047fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004808:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800480c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004816:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	fa93 f2a3 	rbit	r2, r3
 8004820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004824:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004832:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004836:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800483a:	6011      	str	r1, [r2, #0]
 800483c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004840:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	fa92 f1a2 	rbit	r1, r2
 800484a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800484e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004852:	6011      	str	r1, [r2, #0]
  return result;
 8004854:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004858:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	fab2 f282 	clz	r2, r2
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	f042 0220 	orr.w	r2, r2, #32
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	f002 021f 	and.w	r2, r2, #31
 800486e:	2101      	movs	r1, #1
 8004870:	fa01 f202 	lsl.w	r2, r1, r2
 8004874:	4013      	ands	r3, r2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d182      	bne.n	8004780 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800487a:	4b3c      	ldr	r3, [pc, #240]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	f023 020f 	bic.w	r2, r3, #15
 8004882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004886:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	4937      	ldr	r1, [pc, #220]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 8004890:	4313      	orrs	r3, r2
 8004892:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004894:	4b35      	ldr	r3, [pc, #212]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800489c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6a19      	ldr	r1, [r3, #32]
 80048a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	430b      	orrs	r3, r1
 80048b6:	492d      	ldr	r1, [pc, #180]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80048c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	fa93 f2a3 	rbit	r2, r3
 80048d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80048e0:	601a      	str	r2, [r3, #0]
  return result;
 80048e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80048ea:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ec:	fab3 f383 	clz	r3, r3
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	461a      	mov	r2, r3
 80048fe:	2301      	movs	r3, #1
 8004900:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004902:	f7fe fe01 	bl	8003508 <HAL_GetTick>
 8004906:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800490a:	e009      	b.n	8004920 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fe fdfc 	bl	8003508 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e156      	b.n	8004bce <HAL_RCC_OscConfig+0x109a>
 8004920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004924:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800492c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004932:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	fa93 f2a3 	rbit	r2, r3
 800493c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004940:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004944:	601a      	str	r2, [r3, #0]
  return result;
 8004946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800494a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800494e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d105      	bne.n	8004970 <HAL_RCC_OscConfig+0xe3c>
 8004964:	4b01      	ldr	r3, [pc, #4]	; (800496c <HAL_RCC_OscConfig+0xe38>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	e02a      	b.n	80049c0 <HAL_RCC_OscConfig+0xe8c>
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
 8004970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004974:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800497c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004982:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	fa93 f2a3 	rbit	r2, r3
 800498c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004990:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800499a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800499e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	fa93 f2a3 	rbit	r2, r3
 80049b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	4b86      	ldr	r3, [pc, #536]	; (8004bd8 <HAL_RCC_OscConfig+0x10a4>)
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80049c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049cc:	6011      	str	r1, [r2, #0]
 80049ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	fa92 f1a2 	rbit	r1, r2
 80049dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049e0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80049e4:	6011      	str	r1, [r2, #0]
  return result;
 80049e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049ea:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	fab2 f282 	clz	r2, r2
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	f042 0220 	orr.w	r2, r2, #32
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	f002 021f 	and.w	r2, r2, #31
 8004a00:	2101      	movs	r1, #1
 8004a02:	fa01 f202 	lsl.w	r2, r1, r2
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f43f af7f 	beq.w	800490c <HAL_RCC_OscConfig+0xdd8>
 8004a0e:	e0dd      	b.n	8004bcc <HAL_RCC_OscConfig+0x1098>
 8004a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	fa93 f2a3 	rbit	r2, r3
 8004a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004a34:	601a      	str	r2, [r3, #0]
  return result;
 8004a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a3a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004a3e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a40:	fab3 f383 	clz	r3, r3
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	461a      	mov	r2, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fe fd57 	bl	8003508 <HAL_GetTick>
 8004a5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5e:	e009      	b.n	8004a74 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fe fd52 	bl	8003508 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e0ac      	b.n	8004bce <HAL_RCC_OscConfig+0x109a>
 8004a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	fa93 f2a3 	rbit	r2, r3
 8004a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a94:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004a98:	601a      	str	r2, [r3, #0]
  return result;
 8004a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004aa2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa4:	fab3 f383 	clz	r3, r3
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d102      	bne.n	8004abe <HAL_RCC_OscConfig+0xf8a>
 8004ab8:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <HAL_RCC_OscConfig+0x10a4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	e027      	b.n	8004b0e <HAL_RCC_OscConfig+0xfda>
 8004abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	fa93 f2a3 	rbit	r2, r3
 8004ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ade:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	fa93 f2a3 	rbit	r2, r3
 8004b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b04:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	4b33      	ldr	r3, [pc, #204]	; (8004bd8 <HAL_RCC_OscConfig+0x10a4>)
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b12:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b1a:	6011      	str	r1, [r2, #0]
 8004b1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	fa92 f1a2 	rbit	r1, r2
 8004b2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b2e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004b32:	6011      	str	r1, [r2, #0]
  return result;
 8004b34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b38:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	fab2 f282 	clz	r2, r2
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	f042 0220 	orr.w	r2, r2, #32
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	f002 021f 	and.w	r2, r2, #31
 8004b4e:	2101      	movs	r1, #1
 8004b50:	fa01 f202 	lsl.w	r2, r1, r2
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d182      	bne.n	8004a60 <HAL_RCC_OscConfig+0xf2c>
 8004b5a:	e037      	b.n	8004bcc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e02e      	b.n	8004bce <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_RCC_OscConfig+0x10a4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004b78:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <HAL_RCC_OscConfig+0x10a4>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b84:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d117      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004b98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b9c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d10b      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000

08004bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b09e      	sub	sp, #120	; 0x78
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e162      	b.n	8004eba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf4:	4b90      	ldr	r3, [pc, #576]	; (8004e38 <HAL_RCC_ClockConfig+0x25c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d910      	bls.n	8004c24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	4b8d      	ldr	r3, [pc, #564]	; (8004e38 <HAL_RCC_ClockConfig+0x25c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 0207 	bic.w	r2, r3, #7
 8004c0a:	498b      	ldr	r1, [pc, #556]	; (8004e38 <HAL_RCC_ClockConfig+0x25c>)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c12:	4b89      	ldr	r3, [pc, #548]	; (8004e38 <HAL_RCC_ClockConfig+0x25c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e14a      	b.n	8004eba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c30:	4b82      	ldr	r3, [pc, #520]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	497f      	ldr	r1, [pc, #508]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80dc 	beq.w	8004e08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d13c      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xf6>
 8004c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c60:	fa93 f3a3 	rbit	r3, r3
 8004c64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c68:	fab3 f383 	clz	r3, r3
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d102      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xa6>
 8004c7c:	4b6f      	ldr	r3, [pc, #444]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	e00f      	b.n	8004ca2 <HAL_RCC_ClockConfig+0xc6>
 8004c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c8a:	fa93 f3a3 	rbit	r3, r3
 8004c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8004c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c94:	663b      	str	r3, [r7, #96]	; 0x60
 8004c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c98:	fa93 f3a3 	rbit	r3, r3
 8004c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c9e:	4b67      	ldr	r3, [pc, #412]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ca6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004caa:	fa92 f2a2 	rbit	r2, r2
 8004cae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004cb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cb2:	fab2 f282 	clz	r2, r2
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	f042 0220 	orr.w	r2, r2, #32
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	f002 021f 	and.w	r2, r2, #31
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d17b      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0f3      	b.n	8004eba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d13c      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x178>
 8004cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d102      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x128>
 8004cfe:	4b4f      	ldr	r3, [pc, #316]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	e00f      	b.n	8004d24 <HAL_RCC_ClockConfig+0x148>
 8004d04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0c:	fa93 f3a3 	rbit	r3, r3
 8004d10:	647b      	str	r3, [r7, #68]	; 0x44
 8004d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d16:	643b      	str	r3, [r7, #64]	; 0x40
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d20:	4b46      	ldr	r3, [pc, #280]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d28:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d2c:	fa92 f2a2 	rbit	r2, r2
 8004d30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d34:	fab2 f282 	clz	r2, r2
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	f042 0220 	orr.w	r2, r2, #32
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	f002 021f 	and.w	r2, r2, #31
 8004d44:	2101      	movs	r1, #1
 8004d46:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d13a      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0b2      	b.n	8004eba <HAL_RCC_ClockConfig+0x2de>
 8004d54:	2302      	movs	r3, #2
 8004d56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	fa93 f3a3 	rbit	r3, r3
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d62:	fab3 f383 	clz	r3, r3
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d102      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x1a0>
 8004d76:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	e00d      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1bc>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	fa93 f3a3 	rbit	r3, r3
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	2302      	movs	r3, #2
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2202      	movs	r2, #2
 8004d9a:	61ba      	str	r2, [r7, #24]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	fa92 f2a2 	rbit	r2, r2
 8004da2:	617a      	str	r2, [r7, #20]
  return result;
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	fab2 f282 	clz	r2, r2
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	f042 0220 	orr.w	r2, r2, #32
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	f002 021f 	and.w	r2, r2, #31
 8004db6:	2101      	movs	r1, #1
 8004db8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e079      	b.n	8004eba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f023 0203 	bic.w	r2, r3, #3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	491a      	ldr	r1, [pc, #104]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd8:	f7fe fb96 	bl	8003508 <HAL_GetTick>
 8004ddc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dde:	e00a      	b.n	8004df6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de0:	f7fe fb92 	bl	8003508 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e061      	b.n	8004eba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <HAL_RCC_ClockConfig+0x260>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 020c 	and.w	r2, r3, #12
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d1eb      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <HAL_RCC_ClockConfig+0x25c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d214      	bcs.n	8004e40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <HAL_RCC_ClockConfig+0x25c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 0207 	bic.w	r2, r3, #7
 8004e1e:	4906      	ldr	r1, [pc, #24]	; (8004e38 <HAL_RCC_ClockConfig+0x25c>)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e26:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <HAL_RCC_ClockConfig+0x25c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e040      	b.n	8004eba <HAL_RCC_ClockConfig+0x2de>
 8004e38:	40022000 	.word	0x40022000
 8004e3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	491a      	ldr	r1, [pc, #104]	; (8004ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6a:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4912      	ldr	r1, [pc, #72]	; (8004ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e7e:	f000 f829 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8004e82:	4601      	mov	r1, r0
 8004e84:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e8c:	22f0      	movs	r2, #240	; 0xf0
 8004e8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	fa92 f2a2 	rbit	r2, r2
 8004e96:	60fa      	str	r2, [r7, #12]
  return result;
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	fab2 f282 	clz	r2, r2
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	40d3      	lsrs	r3, r2
 8004ea2:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <HAL_RCC_ClockConfig+0x2ec>)
 8004ea4:	5cd3      	ldrb	r3, [r2, r3]
 8004ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8004eaa:	4a08      	ldr	r2, [pc, #32]	; (8004ecc <HAL_RCC_ClockConfig+0x2f0>)
 8004eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004eae:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <HAL_RCC_ClockConfig+0x2f4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fae4 	bl	8003480 <HAL_InitTick>
  
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3778      	adds	r7, #120	; 0x78
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	08006ab4 	.word	0x08006ab4
 8004ecc:	20000100 	.word	0x20000100
 8004ed0:	20000108 	.word	0x20000108

08004ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b08b      	sub	sp, #44	; 0x2c
 8004ed8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004eee:	4b2a      	ldr	r3, [pc, #168]	; (8004f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d002      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0x30>
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d003      	beq.n	8004f0a <HAL_RCC_GetSysClockFreq+0x36>
 8004f02:	e03f      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f04:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f06:	623b      	str	r3, [r7, #32]
      break;
 8004f08:	e03f      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004f14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	fa92 f2a2 	rbit	r2, r2
 8004f1c:	607a      	str	r2, [r7, #4]
  return result;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	fab2 f282 	clz	r2, r2
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	40d3      	lsrs	r3, r2
 8004f28:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f2a:	5cd3      	ldrb	r3, [r2, r3]
 8004f2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004f2e:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	220f      	movs	r2, #15
 8004f38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	fa92 f2a2 	rbit	r2, r2
 8004f40:	60fa      	str	r2, [r7, #12]
  return result;
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	fab2 f282 	clz	r2, r2
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	40d3      	lsrs	r3, r2
 8004f4c:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f4e:	5cd3      	ldrb	r3, [r2, r3]
 8004f50:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f5c:	4a0f      	ldr	r2, [pc, #60]	; (8004f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6c:	e007      	b.n	8004f7e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f6e:	4a0b      	ldr	r2, [pc, #44]	; (8004f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	623b      	str	r3, [r7, #32]
      break;
 8004f82:	e002      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f86:	623b      	str	r3, [r7, #32]
      break;
 8004f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	372c      	adds	r7, #44	; 0x2c
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	007a1200 	.word	0x007a1200
 8004fa0:	08006b80 	.word	0x08006b80
 8004fa4:	08006b90 	.word	0x08006b90

08004fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000100 	.word	0x20000100

08004fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004fc6:	f7ff ffef 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004fca:	4601      	mov	r1, r0
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fd4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004fd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	fa92 f2a2 	rbit	r2, r2
 8004fe0:	603a      	str	r2, [r7, #0]
  return result;
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	fab2 f282 	clz	r2, r2
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	40d3      	lsrs	r3, r2
 8004fec:	4a04      	ldr	r2, [pc, #16]	; (8005000 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004fee:	5cd3      	ldrb	r3, [r2, r3]
 8004ff0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	08006ac4 	.word	0x08006ac4

08005004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800500a:	f7ff ffcd 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 800500e:	4601      	mov	r1, r0
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005018:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800501c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	fa92 f2a2 	rbit	r2, r2
 8005024:	603a      	str	r2, [r7, #0]
  return result;
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	fab2 f282 	clz	r2, r2
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	40d3      	lsrs	r3, r2
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005032:	5cd3      	ldrb	r3, [r2, r3]
 8005034:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40021000 	.word	0x40021000
 8005044:	08006ac4 	.word	0x08006ac4

08005048 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b092      	sub	sp, #72	; 0x48
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005058:	2300      	movs	r3, #0
 800505a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80d4 	beq.w	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506c:	4b4e      	ldr	r3, [pc, #312]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10e      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005078:	4b4b      	ldr	r3, [pc, #300]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	4a4a      	ldr	r2, [pc, #296]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005082:	61d3      	str	r3, [r2, #28]
 8005084:	4b48      	ldr	r3, [pc, #288]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005096:	4b45      	ldr	r3, [pc, #276]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d118      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050a2:	4b42      	ldr	r3, [pc, #264]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a41      	ldr	r2, [pc, #260]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ae:	f7fe fa2b 	bl	8003508 <HAL_GetTick>
 80050b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b4:	e008      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b6:	f7fe fa27 	bl	8003508 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b64      	cmp	r3, #100	; 0x64
 80050c2:	d901      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e1d6      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c8:	4b38      	ldr	r3, [pc, #224]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f0      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050d4:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8084 	beq.w	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d07c      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050f4:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005102:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	fa93 f3a3 	rbit	r3, r3
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800510e:	fab3 f383 	clz	r3, r3
 8005112:	b2db      	uxtb	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	461a      	mov	r2, r3
 800511e:	2301      	movs	r3, #1
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	fa93 f3a3 	rbit	r3, r3
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005132:	fab3 f383 	clz	r3, r3
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	461a      	mov	r2, r3
 8005142:	2300      	movs	r3, #0
 8005144:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005146:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800514c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d04b      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fe f9d7 	bl	8003508 <HAL_GetTick>
 800515a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515c:	e00a      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800515e:	f7fe f9d3 	bl	8003508 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e180      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005174:	2302      	movs	r3, #2
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	2302      	movs	r3, #2
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	61fb      	str	r3, [r7, #28]
  return result;
 800518c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518e:	fab3 f383 	clz	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f043 0302 	orr.w	r3, r3, #2
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d108      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80051a2:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	e00d      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40007000 	.word	0x40007000
 80051b0:	10908100 	.word	0x10908100
 80051b4:	2302      	movs	r3, #2
 80051b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	4b9a      	ldr	r3, [pc, #616]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	2202      	movs	r2, #2
 80051c6:	613a      	str	r2, [r7, #16]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	fa92 f2a2 	rbit	r2, r2
 80051ce:	60fa      	str	r2, [r7, #12]
  return result;
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	fab2 f282 	clz	r2, r2
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	f002 021f 	and.w	r2, r2, #31
 80051e2:	2101      	movs	r1, #1
 80051e4:	fa01 f202 	lsl.w	r2, r1, r2
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0b7      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80051ee:	4b8f      	ldr	r3, [pc, #572]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	498c      	ldr	r1, [pc, #560]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005200:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005204:	2b01      	cmp	r3, #1
 8005206:	d105      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005208:	4b88      	ldr	r3, [pc, #544]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	4a87      	ldr	r2, [pc, #540]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800520e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005212:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005220:	4b82      	ldr	r3, [pc, #520]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	f023 0203 	bic.w	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	497f      	ldr	r1, [pc, #508]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800522e:	4313      	orrs	r3, r2
 8005230:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800523e:	4b7b      	ldr	r3, [pc, #492]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	4978      	ldr	r1, [pc, #480]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800524c:	4313      	orrs	r3, r2
 800524e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800525c:	4b73      	ldr	r3, [pc, #460]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	4970      	ldr	r1, [pc, #448]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800526a:	4313      	orrs	r3, r2
 800526c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800527a:	4b6c      	ldr	r3, [pc, #432]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f023 0210 	bic.w	r2, r3, #16
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	4969      	ldr	r1, [pc, #420]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005288:	4313      	orrs	r3, r2
 800528a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005298:	4b64      	ldr	r3, [pc, #400]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	4961      	ldr	r1, [pc, #388]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052b6:	4b5d      	ldr	r3, [pc, #372]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	f023 0220 	bic.w	r2, r3, #32
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	495a      	ldr	r1, [pc, #360]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052d4:	4b55      	ldr	r3, [pc, #340]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	4952      	ldr	r1, [pc, #328]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052f2:	4b4e      	ldr	r3, [pc, #312]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	494b      	ldr	r1, [pc, #300]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005300:	4313      	orrs	r3, r2
 8005302:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005310:	4b46      	ldr	r3, [pc, #280]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	4943      	ldr	r1, [pc, #268]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800531e:	4313      	orrs	r3, r2
 8005320:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800532e:	4b3f      	ldr	r3, [pc, #252]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	493c      	ldr	r1, [pc, #240]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800533c:	4313      	orrs	r3, r2
 800533e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800534c:	4b37      	ldr	r3, [pc, #220]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	4934      	ldr	r1, [pc, #208]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800535a:	4313      	orrs	r3, r2
 800535c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800536a:	4b30      	ldr	r3, [pc, #192]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	492d      	ldr	r1, [pc, #180]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005378:	4313      	orrs	r3, r2
 800537a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005388:	4b28      	ldr	r3, [pc, #160]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	4925      	ldr	r1, [pc, #148]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	491e      	ldr	r1, [pc, #120]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80053c4:	4b19      	ldr	r3, [pc, #100]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	4916      	ldr	r1, [pc, #88]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	490f      	ldr	r1, [pc, #60]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	4907      	ldr	r1, [pc, #28]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800541e:	4b03      	ldr	r3, [pc, #12]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	e002      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000
 8005430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005432:	4913      	ldr	r1, [pc, #76]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005434:	4313      	orrs	r3, r2
 8005436:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005444:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005450:	490b      	ldr	r1, [pc, #44]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005452:	4313      	orrs	r3, r2
 8005454:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546e:	4904      	ldr	r1, [pc, #16]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005470:	4313      	orrs	r3, r2
 8005472:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3748      	adds	r7, #72	; 0x48
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40021000 	.word	0x40021000

08005484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e09d      	b.n	80055d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	d108      	bne.n	80054b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a6:	d009      	beq.n	80054bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	61da      	str	r2, [r3, #28]
 80054ae:	e005      	b.n	80054bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fc fd24 	bl	8001f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054fc:	d902      	bls.n	8005504 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e002      	b.n	800550a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005508:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005512:	d007      	beq.n	8005524 <HAL_SPI_Init+0xa0>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800551c:	d002      	beq.n	8005524 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	ea42 0103 	orr.w	r1, r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	f003 0204 	and.w	r2, r3, #4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055a0:	ea42 0103 	orr.w	r1, r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b088      	sub	sp, #32
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_SPI_Transmit+0x22>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e158      	b.n	80058ae <HAL_SPI_Transmit+0x2d4>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005604:	f7fd ff80 	bl	8003508 <HAL_GetTick>
 8005608:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d002      	beq.n	8005620 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800561a:	2302      	movs	r3, #2
 800561c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800561e:	e13d      	b.n	800589c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_SPI_Transmit+0x52>
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005630:	e134      	b.n	800589c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2203      	movs	r2, #3
 8005636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567c:	d10f      	bne.n	800569e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800568c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800569c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d007      	beq.n	80056bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056c4:	d94b      	bls.n	800575e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0xfa>
 80056ce:	8afb      	ldrh	r3, [r7, #22]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d13e      	bne.n	8005752 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	881a      	ldrh	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	1c9a      	adds	r2, r3, #2
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056f8:	e02b      	b.n	8005752 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d112      	bne.n	800572e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	1c9a      	adds	r2, r3, #2
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800572c:	e011      	b.n	8005752 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572e:	f7fd feeb 	bl	8003508 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d803      	bhi.n	8005746 <HAL_SPI_Transmit+0x16c>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005744:	d102      	bne.n	800574c <HAL_SPI_Transmit+0x172>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005750:	e0a4      	b.n	800589c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ce      	bne.n	80056fa <HAL_SPI_Transmit+0x120>
 800575c:	e07c      	b.n	8005858 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_SPI_Transmit+0x192>
 8005766:	8afb      	ldrh	r3, [r7, #22]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d170      	bne.n	800584e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b01      	cmp	r3, #1
 8005774:	d912      	bls.n	800579c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	881a      	ldrh	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	1c9a      	adds	r2, r3, #2
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b02      	subs	r3, #2
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	87da      	strh	r2, [r3, #62]	; 0x3e
 800579a:	e058      	b.n	800584e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	7812      	ldrb	r2, [r2, #0]
 80057a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80057c2:	e044      	b.n	800584e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d12b      	bne.n	800582a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d912      	bls.n	8005802 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	881a      	ldrh	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	1c9a      	adds	r2, r3, #2
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b02      	subs	r3, #2
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005800:	e025      	b.n	800584e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	7812      	ldrb	r2, [r2, #0]
 800580e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005828:	e011      	b.n	800584e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800582a:	f7fd fe6d 	bl	8003508 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d803      	bhi.n	8005842 <HAL_SPI_Transmit+0x268>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005840:	d102      	bne.n	8005848 <HAL_SPI_Transmit+0x26e>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800584c:	e026      	b.n	800589c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1b5      	bne.n	80057c4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f957 	bl	8005b10 <SPI_EndRxTxTransaction>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e000      	b.n	800589c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800589a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058c4:	b2db      	uxtb	r3, r3
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058e4:	f7fd fe10 	bl	8003508 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	4413      	add	r3, r2
 80058f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058f4:	f7fd fe08 	bl	8003508 <HAL_GetTick>
 80058f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058fa:	4b39      	ldr	r3, [pc, #228]	; (80059e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	015b      	lsls	r3, r3, #5
 8005900:	0d1b      	lsrs	r3, r3, #20
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	fb02 f303 	mul.w	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800590a:	e054      	b.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005912:	d050      	beq.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005914:	f7fd fdf8 	bl	8003508 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	429a      	cmp	r2, r3
 8005922:	d902      	bls.n	800592a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d13d      	bne.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005938:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005942:	d111      	bne.n	8005968 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594c:	d004      	beq.n	8005958 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005956:	d107      	bne.n	8005968 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005966:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005970:	d10f      	bne.n	8005992 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005990:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e017      	b.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4013      	ands	r3, r2
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	bf0c      	ite	eq
 80059c6:	2301      	moveq	r3, #1
 80059c8:	2300      	movne	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d19b      	bne.n	800590c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3720      	adds	r7, #32
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000100 	.word	0x20000100

080059e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059f6:	f7fd fd87 	bl	8003508 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	4413      	add	r3, r2
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a06:	f7fd fd7f 	bl	8003508 <HAL_GetTick>
 8005a0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a14:	4b3d      	ldr	r3, [pc, #244]	; (8005b0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00da      	lsls	r2, r3, #3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	0d1b      	lsrs	r3, r3, #20
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a2c:	e060      	b.n	8005af0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a34:	d107      	bne.n	8005a46 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4c:	d050      	beq.n	8005af0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a4e:	f7fd fd5b 	bl	8003508 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d902      	bls.n	8005a64 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d13d      	bne.n	8005ae0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7c:	d111      	bne.n	8005aa2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a86:	d004      	beq.n	8005a92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a90:	d107      	bne.n	8005aa2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aaa:	d10f      	bne.n	8005acc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e010      	b.n	8005b02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4013      	ands	r3, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d196      	bne.n	8005a2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3728      	adds	r7, #40	; 0x28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000100 	.word	0x20000100

08005b10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ff5b 	bl	80059e4 <SPI_WaitFifoStateUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e027      	b.n	8005b94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff fec0 	bl	80058d4 <SPI_WaitFlagStateUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e014      	b.n	8005b94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff ff34 	bl	80059e4 <SPI_WaitFifoStateUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b86:	f043 0220 	orr.w	r2, r3, #32
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e000      	b.n	8005b94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e040      	b.n	8005c30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc f9f2 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	; 0x24
 8005bc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8c0 	bl	8005d60 <UART_SetConfig>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e022      	b.n	8005c30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa8a 	bl	800610c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fb11 	bl	8006250 <UART_CheckIdleState>
 8005c2e:	4603      	mov	r3, r0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	4613      	mov	r3, r2
 8005c46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	f040 8081 	bne.w	8005d54 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_UART_Transmit+0x26>
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e079      	b.n	8005d56 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_UART_Transmit+0x38>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e072      	b.n	8005d56 <HAL_UART_Transmit+0x11e>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2221      	movs	r2, #33	; 0x21
 8005c84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c86:	f7fd fc3f 	bl	8003508 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	88fa      	ldrh	r2, [r7, #6]
 8005c90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	88fa      	ldrh	r2, [r7, #6]
 8005c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca4:	d108      	bne.n	8005cb8 <HAL_UART_Transmit+0x80>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	e003      	b.n	8005cc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005cc8:	e02c      	b.n	8005d24 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fb04 	bl	80062e2 <UART_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e038      	b.n	8005d56 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cf6:	b292      	uxth	r2, r2
 8005cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	e007      	b.n	8005d12 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1cc      	bne.n	8005cca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2200      	movs	r2, #0
 8005d38:	2140      	movs	r1, #64	; 0x40
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fad1 	bl	80062e2 <UART_WaitOnFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e005      	b.n	8005d56 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e000      	b.n	8005d56 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3720      	adds	r7, #32
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b92      	ldr	r3, [pc, #584]	; (8005fd4 <UART_SetConfig+0x274>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	6979      	ldr	r1, [r7, #20]
 8005d94:	430b      	orrs	r3, r1
 8005d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a80      	ldr	r2, [pc, #512]	; (8005fd8 <UART_SetConfig+0x278>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d120      	bne.n	8005e1e <UART_SetConfig+0xbe>
 8005ddc:	4b7f      	ldr	r3, [pc, #508]	; (8005fdc <UART_SetConfig+0x27c>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d817      	bhi.n	8005e18 <UART_SetConfig+0xb8>
 8005de8:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0x90>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e01 	.word	0x08005e01
 8005df4:	08005e0d 	.word	0x08005e0d
 8005df8:	08005e13 	.word	0x08005e13
 8005dfc:	08005e07 	.word	0x08005e07
 8005e00:	2301      	movs	r3, #1
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e0b5      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e06:	2302      	movs	r3, #2
 8005e08:	77fb      	strb	r3, [r7, #31]
 8005e0a:	e0b2      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e0af      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e12:	2308      	movs	r3, #8
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e0ac      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e0a9      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a6f      	ldr	r2, [pc, #444]	; (8005fe0 <UART_SetConfig+0x280>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d124      	bne.n	8005e72 <UART_SetConfig+0x112>
 8005e28:	4b6c      	ldr	r3, [pc, #432]	; (8005fdc <UART_SetConfig+0x27c>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e34:	d011      	beq.n	8005e5a <UART_SetConfig+0xfa>
 8005e36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e3a:	d817      	bhi.n	8005e6c <UART_SetConfig+0x10c>
 8005e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e40:	d011      	beq.n	8005e66 <UART_SetConfig+0x106>
 8005e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e46:	d811      	bhi.n	8005e6c <UART_SetConfig+0x10c>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <UART_SetConfig+0xf4>
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e50:	d006      	beq.n	8005e60 <UART_SetConfig+0x100>
 8005e52:	e00b      	b.n	8005e6c <UART_SetConfig+0x10c>
 8005e54:	2300      	movs	r3, #0
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	e08b      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	77fb      	strb	r3, [r7, #31]
 8005e5e:	e088      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e60:	2304      	movs	r3, #4
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e085      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e66:	2308      	movs	r3, #8
 8005e68:	77fb      	strb	r3, [r7, #31]
 8005e6a:	e082      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e07f      	b.n	8005f72 <UART_SetConfig+0x212>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a5b      	ldr	r2, [pc, #364]	; (8005fe4 <UART_SetConfig+0x284>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d124      	bne.n	8005ec6 <UART_SetConfig+0x166>
 8005e7c:	4b57      	ldr	r3, [pc, #348]	; (8005fdc <UART_SetConfig+0x27c>)
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e88:	d011      	beq.n	8005eae <UART_SetConfig+0x14e>
 8005e8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e8e:	d817      	bhi.n	8005ec0 <UART_SetConfig+0x160>
 8005e90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e94:	d011      	beq.n	8005eba <UART_SetConfig+0x15a>
 8005e96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e9a:	d811      	bhi.n	8005ec0 <UART_SetConfig+0x160>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <UART_SetConfig+0x148>
 8005ea0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ea4:	d006      	beq.n	8005eb4 <UART_SetConfig+0x154>
 8005ea6:	e00b      	b.n	8005ec0 <UART_SetConfig+0x160>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e061      	b.n	8005f72 <UART_SetConfig+0x212>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e05e      	b.n	8005f72 <UART_SetConfig+0x212>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e05b      	b.n	8005f72 <UART_SetConfig+0x212>
 8005eba:	2308      	movs	r3, #8
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e058      	b.n	8005f72 <UART_SetConfig+0x212>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e055      	b.n	8005f72 <UART_SetConfig+0x212>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a47      	ldr	r2, [pc, #284]	; (8005fe8 <UART_SetConfig+0x288>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d124      	bne.n	8005f1a <UART_SetConfig+0x1ba>
 8005ed0:	4b42      	ldr	r3, [pc, #264]	; (8005fdc <UART_SetConfig+0x27c>)
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ed8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005edc:	d011      	beq.n	8005f02 <UART_SetConfig+0x1a2>
 8005ede:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ee2:	d817      	bhi.n	8005f14 <UART_SetConfig+0x1b4>
 8005ee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ee8:	d011      	beq.n	8005f0e <UART_SetConfig+0x1ae>
 8005eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eee:	d811      	bhi.n	8005f14 <UART_SetConfig+0x1b4>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <UART_SetConfig+0x19c>
 8005ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef8:	d006      	beq.n	8005f08 <UART_SetConfig+0x1a8>
 8005efa:	e00b      	b.n	8005f14 <UART_SetConfig+0x1b4>
 8005efc:	2300      	movs	r3, #0
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e037      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f02:	2302      	movs	r3, #2
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e034      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e031      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f0e:	2308      	movs	r3, #8
 8005f10:	77fb      	strb	r3, [r7, #31]
 8005f12:	e02e      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f14:	2310      	movs	r3, #16
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e02b      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a33      	ldr	r2, [pc, #204]	; (8005fec <UART_SetConfig+0x28c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d124      	bne.n	8005f6e <UART_SetConfig+0x20e>
 8005f24:	4b2d      	ldr	r3, [pc, #180]	; (8005fdc <UART_SetConfig+0x27c>)
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005f2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f30:	d011      	beq.n	8005f56 <UART_SetConfig+0x1f6>
 8005f32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f36:	d817      	bhi.n	8005f68 <UART_SetConfig+0x208>
 8005f38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f3c:	d011      	beq.n	8005f62 <UART_SetConfig+0x202>
 8005f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f42:	d811      	bhi.n	8005f68 <UART_SetConfig+0x208>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <UART_SetConfig+0x1f0>
 8005f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f4c:	d006      	beq.n	8005f5c <UART_SetConfig+0x1fc>
 8005f4e:	e00b      	b.n	8005f68 <UART_SetConfig+0x208>
 8005f50:	2300      	movs	r3, #0
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e00d      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f56:	2302      	movs	r3, #2
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e00a      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e007      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f62:	2308      	movs	r3, #8
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e004      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e001      	b.n	8005f72 <UART_SetConfig+0x212>
 8005f6e:	2310      	movs	r3, #16
 8005f70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7a:	d16c      	bne.n	8006056 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005f7c:	7ffb      	ldrb	r3, [r7, #31]
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d838      	bhi.n	8005ff4 <UART_SetConfig+0x294>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <UART_SetConfig+0x228>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	08005ff5 	.word	0x08005ff5
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005ff5 	.word	0x08005ff5
 8005fa0:	08005ff5 	.word	0x08005ff5
 8005fa4:	08005ff5 	.word	0x08005ff5
 8005fa8:	08005fcb 	.word	0x08005fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fac:	f7ff f808 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8005fb0:	61b8      	str	r0, [r7, #24]
        break;
 8005fb2:	e024      	b.n	8005ffe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb4:	f7ff f826 	bl	8005004 <HAL_RCC_GetPCLK2Freq>
 8005fb8:	61b8      	str	r0, [r7, #24]
        break;
 8005fba:	e020      	b.n	8005ffe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <UART_SetConfig+0x290>)
 8005fbe:	61bb      	str	r3, [r7, #24]
        break;
 8005fc0:	e01d      	b.n	8005ffe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fc2:	f7fe ff87 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8005fc6:	61b8      	str	r0, [r7, #24]
        break;
 8005fc8:	e019      	b.n	8005ffe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fce:	61bb      	str	r3, [r7, #24]
        break;
 8005fd0:	e015      	b.n	8005ffe <UART_SetConfig+0x29e>
 8005fd2:	bf00      	nop
 8005fd4:	efff69f3 	.word	0xefff69f3
 8005fd8:	40013800 	.word	0x40013800
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40004400 	.word	0x40004400
 8005fe4:	40004800 	.word	0x40004800
 8005fe8:	40004c00 	.word	0x40004c00
 8005fec:	40005000 	.word	0x40005000
 8005ff0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	77bb      	strb	r3, [r7, #30]
        break;
 8005ffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d075      	beq.n	80060f0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	005a      	lsls	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	441a      	add	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	b29b      	uxth	r3, r3
 800601a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b0f      	cmp	r3, #15
 8006020:	d916      	bls.n	8006050 <UART_SetConfig+0x2f0>
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006028:	d212      	bcs.n	8006050 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f023 030f 	bic.w	r3, r3, #15
 8006032:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	b29b      	uxth	r3, r3
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	b29a      	uxth	r2, r3
 8006040:	89fb      	ldrh	r3, [r7, #14]
 8006042:	4313      	orrs	r3, r2
 8006044:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	89fa      	ldrh	r2, [r7, #14]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	e04f      	b.n	80060f0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	77bb      	strb	r3, [r7, #30]
 8006054:	e04c      	b.n	80060f0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006056:	7ffb      	ldrb	r3, [r7, #31]
 8006058:	2b08      	cmp	r3, #8
 800605a:	d828      	bhi.n	80060ae <UART_SetConfig+0x34e>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <UART_SetConfig+0x304>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006089 	.word	0x08006089
 8006068:	08006091 	.word	0x08006091
 800606c:	08006099 	.word	0x08006099
 8006070:	080060af 	.word	0x080060af
 8006074:	0800609f 	.word	0x0800609f
 8006078:	080060af 	.word	0x080060af
 800607c:	080060af 	.word	0x080060af
 8006080:	080060af 	.word	0x080060af
 8006084:	080060a7 	.word	0x080060a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7fe ff9a 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 800608c:	61b8      	str	r0, [r7, #24]
        break;
 800608e:	e013      	b.n	80060b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006090:	f7fe ffb8 	bl	8005004 <HAL_RCC_GetPCLK2Freq>
 8006094:	61b8      	str	r0, [r7, #24]
        break;
 8006096:	e00f      	b.n	80060b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006098:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <UART_SetConfig+0x3a8>)
 800609a:	61bb      	str	r3, [r7, #24]
        break;
 800609c:	e00c      	b.n	80060b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609e:	f7fe ff19 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 80060a2:	61b8      	str	r0, [r7, #24]
        break;
 80060a4:	e008      	b.n	80060b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060aa:	61bb      	str	r3, [r7, #24]
        break;
 80060ac:	e004      	b.n	80060b8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	77bb      	strb	r3, [r7, #30]
        break;
 80060b6:	bf00      	nop
    }

    if (pclk != 0U)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d018      	beq.n	80060f0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	085a      	lsrs	r2, r3, #1
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	441a      	add	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d908      	bls.n	80060ec <UART_SetConfig+0x38c>
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e0:	d204      	bcs.n	80060ec <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	e001      	b.n	80060f0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3720      	adds	r7, #32
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	007a1200 	.word	0x007a1200

0800610c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01a      	beq.n	8006222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800620a:	d10a      	bne.n	8006222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	605a      	str	r2, [r3, #4]
  }
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af02      	add	r7, sp, #8
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006260:	f7fd f952 	bl	8003508 <HAL_GetTick>
 8006264:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b08      	cmp	r3, #8
 8006272:	d10e      	bne.n	8006292 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f82d 	bl	80062e2 <UART_WaitOnFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e023      	b.n	80062da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b04      	cmp	r3, #4
 800629e:	d10e      	bne.n	80062be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f817 	bl	80062e2 <UART_WaitOnFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e00d      	b.n	80062da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b09c      	sub	sp, #112	; 0x70
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	4613      	mov	r3, r2
 80062f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f2:	e0a5      	b.n	8006440 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062fa:	f000 80a1 	beq.w	8006440 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fe:	f7fd f903 	bl	8003508 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <UART_WaitOnFlagUntilTimeout+0x32>
 800630e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006310:	2b00      	cmp	r3, #0
 8006312:	d13e      	bne.n	8006392 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006328:	667b      	str	r3, [r7, #100]	; 0x64
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006334:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e6      	bne.n	8006314 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	663b      	str	r3, [r7, #96]	; 0x60
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006366:	64ba      	str	r2, [r7, #72]	; 0x48
 8006368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800636c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e5      	bne.n	8006346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e067      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d04f      	beq.n	8006440 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ae:	d147      	bne.n	8006440 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d8:	637b      	str	r3, [r7, #52]	; 0x34
 80063da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	613b      	str	r3, [r7, #16]
   return(result);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	66bb      	str	r3, [r7, #104]	; 0x68
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800640c:	623a      	str	r2, [r7, #32]
 800640e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	69f9      	ldr	r1, [r7, #28]
 8006412:	6a3a      	ldr	r2, [r7, #32]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	61bb      	str	r3, [r7, #24]
   return(result);
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2220      	movs	r2, #32
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e010      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69da      	ldr	r2, [r3, #28]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4013      	ands	r3, r2
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	429a      	cmp	r2, r3
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	429a      	cmp	r2, r3
 800645c:	f43f af4a 	beq.w	80062f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3770      	adds	r7, #112	; 0x70
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <__libc_init_array>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4d0d      	ldr	r5, [pc, #52]	; (80064a4 <__libc_init_array+0x38>)
 8006470:	4c0d      	ldr	r4, [pc, #52]	; (80064a8 <__libc_init_array+0x3c>)
 8006472:	1b64      	subs	r4, r4, r5
 8006474:	10a4      	asrs	r4, r4, #2
 8006476:	2600      	movs	r6, #0
 8006478:	42a6      	cmp	r6, r4
 800647a:	d109      	bne.n	8006490 <__libc_init_array+0x24>
 800647c:	4d0b      	ldr	r5, [pc, #44]	; (80064ac <__libc_init_array+0x40>)
 800647e:	4c0c      	ldr	r4, [pc, #48]	; (80064b0 <__libc_init_array+0x44>)
 8006480:	f000 f83e 	bl	8006500 <_init>
 8006484:	1b64      	subs	r4, r4, r5
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	2600      	movs	r6, #0
 800648a:	42a6      	cmp	r6, r4
 800648c:	d105      	bne.n	800649a <__libc_init_array+0x2e>
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	f855 3b04 	ldr.w	r3, [r5], #4
 8006494:	4798      	blx	r3
 8006496:	3601      	adds	r6, #1
 8006498:	e7ee      	b.n	8006478 <__libc_init_array+0xc>
 800649a:	f855 3b04 	ldr.w	r3, [r5], #4
 800649e:	4798      	blx	r3
 80064a0:	3601      	adds	r6, #1
 80064a2:	e7f2      	b.n	800648a <__libc_init_array+0x1e>
 80064a4:	08006ba0 	.word	0x08006ba0
 80064a8:	08006ba0 	.word	0x08006ba0
 80064ac:	08006ba0 	.word	0x08006ba0
 80064b0:	08006ba4 	.word	0x08006ba4

080064b4 <memcmp>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	3901      	subs	r1, #1
 80064b8:	4402      	add	r2, r0
 80064ba:	4290      	cmp	r0, r2
 80064bc:	d101      	bne.n	80064c2 <memcmp+0xe>
 80064be:	2000      	movs	r0, #0
 80064c0:	e005      	b.n	80064ce <memcmp+0x1a>
 80064c2:	7803      	ldrb	r3, [r0, #0]
 80064c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	d001      	beq.n	80064d0 <memcmp+0x1c>
 80064cc:	1b18      	subs	r0, r3, r4
 80064ce:	bd10      	pop	{r4, pc}
 80064d0:	3001      	adds	r0, #1
 80064d2:	e7f2      	b.n	80064ba <memcmp+0x6>

080064d4 <memcpy>:
 80064d4:	440a      	add	r2, r1
 80064d6:	4291      	cmp	r1, r2
 80064d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80064dc:	d100      	bne.n	80064e0 <memcpy+0xc>
 80064de:	4770      	bx	lr
 80064e0:	b510      	push	{r4, lr}
 80064e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ea:	4291      	cmp	r1, r2
 80064ec:	d1f9      	bne.n	80064e2 <memcpy+0xe>
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <_init>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr

0800650c <_fini>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	bf00      	nop
 8006510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006512:	bc08      	pop	{r3}
 8006514:	469e      	mov	lr, r3
 8006516:	4770      	bx	lr
