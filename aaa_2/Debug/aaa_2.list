
aaa_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08004ea8  08004ea8  00014ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005048  08005048  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005050  08005050  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000008c  080050e4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080050e4  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180e3  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f7e  00000000  00000000  0003819f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0003b120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  0003c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a42  00000000  00000000  0003cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cb9  00000000  00000000  00061942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbd6e  00000000  00000000  000745fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  001403bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e90 	.word	0x08004e90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08004e90 	.word	0x08004e90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000588:	4b9f      	ldr	r3, [pc, #636]	; (8000808 <dwt_initialise+0x290>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8000590:	4b9d      	ldr	r3, [pc, #628]	; (8000808 <dwt_initialise+0x290>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2200      	movs	r2, #0
 8000596:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8000598:	4b9b      	ldr	r3, [pc, #620]	; (8000808 <dwt_initialise+0x290>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2200      	movs	r2, #0
 800059e:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80005a0:	4b99      	ldr	r3, [pc, #612]	; (8000808 <dwt_initialise+0x290>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80005a8:	4b97      	ldr	r3, [pc, #604]	; (8000808 <dwt_initialise+0x290>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80005b0:	4b95      	ldr	r3, [pc, #596]	; (8000808 <dwt_initialise+0x290>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80005b8:	4b93      	ldr	r3, [pc, #588]	; (8000808 <dwt_initialise+0x290>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	635a      	str	r2, [r3, #52]	; 0x34
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif


    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80005c0:	f000 f926 	bl	8000810 <dwt_readdevid>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a91      	ldr	r2, [pc, #580]	; (800080c <dwt_initialise+0x294>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d002      	beq.n	80005d2 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	e115      	b.n	80007fe <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f003 0302 	and.w	r3, r3, #2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80005dc:	f000 fd6e 	bl	80010bc <dwt_softreset>

    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d004      	beq.n	80005f4 <dwt_initialise+0x7c>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fc6d 	bl	8000ed4 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 80005fa:	2204      	movs	r2, #4
 80005fc:	2100      	movs	r1, #0
 80005fe:	2024      	movs	r0, #36	; 0x24
 8000600:	f000 fbb1 	bl	8000d66 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	2b00      	cmp	r3, #0
 800060c:	d116      	bne.n	800063c <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800060e:	2004      	movs	r0, #4
 8000610:	f000 fbff 	bl	8000e12 <_dwt_otpread>
 8000614:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d01f      	beq.n	800065e <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800061e:	2202      	movs	r2, #2
 8000620:	2112      	movs	r1, #18
 8000622:	202d      	movs	r0, #45	; 0x2d
 8000624:	f000 fb9f 	bl	8000d66 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000628:	4b77      	ldr	r3, [pc, #476]	; (8000808 <dwt_initialise+0x290>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	8ada      	ldrh	r2, [r3, #22]
 800062e:	4b76      	ldr	r3, [pc, #472]	; (8000808 <dwt_initialise+0x290>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000636:	b292      	uxth	r2, r2
 8000638:	82da      	strh	r2, [r3, #22]
 800063a:	e010      	b.n	800065e <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800063c:	2130      	movs	r1, #48	; 0x30
 800063e:	2028      	movs	r0, #40	; 0x28
 8000640:	f000 fb4d 	bl	8000cde <dwt_read32bitoffsetreg>
 8000644:	4603      	mov	r3, r0
 8000646:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800064a:	d008      	beq.n	800065e <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800064c:	4b6e      	ldr	r3, [pc, #440]	; (8000808 <dwt_initialise+0x290>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	8ada      	ldrh	r2, [r3, #22]
 8000652:	4b6d      	ldr	r3, [pc, #436]	; (8000808 <dwt_initialise+0x290>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800065a:	b292      	uxth	r2, r2
 800065c:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f003 0302 	and.w	r3, r3, #2
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <dwt_initialise+0x104>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	2b00      	cmp	r3, #0
 8000670:	d011      	beq.n	8000696 <dwt_initialise+0x11e>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00c      	beq.n	8000696 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800067c:	201e      	movs	r0, #30
 800067e:	f000 fbc8 	bl	8000e12 <_dwt_otpread>
 8000682:	4603      	mov	r3, r0
 8000684:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000686:	8afb      	ldrh	r3, [r7, #22]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29a      	uxth	r2, r3
 800068c:	4b5e      	ldr	r3, [pc, #376]	; (8000808 <dwt_initialise+0x290>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	72da      	strb	r2, [r3, #11]
 8000694:	e003      	b.n	800069e <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8000696:	4b5c      	ldr	r3, [pc, #368]	; (8000808 <dwt_initialise+0x290>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2200      	movs	r2, #0
 800069c:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f003 0302 	and.w	r3, r3, #2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10b      	bne.n	80006c0 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80006a8:	8afb      	ldrh	r3, [r7, #22]
 80006aa:	f003 031f 	and.w	r3, r3, #31
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80006b2:	2310      	movs	r3, #16
 80006b4:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80006b6:	8afb      	ldrh	r3, [r7, #22]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fd24 	bl	8001108 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d007      	beq.n	80006da <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80006ca:	4b4f      	ldr	r3, [pc, #316]	; (8000808 <dwt_initialise+0x290>)
 80006cc:	681c      	ldr	r4, [r3, #0]
 80006ce:	2006      	movs	r0, #6
 80006d0:	f000 fb9f 	bl	8000e12 <_dwt_otpread>
 80006d4:	4603      	mov	r3, r0
 80006d6:	6023      	str	r3, [r4, #0]
 80006d8:	e003      	b.n	80006e2 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80006da:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <dwt_initialise+0x290>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f003 0320 	and.w	r3, r3, #32
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d007      	beq.n	80006fc <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <dwt_initialise+0x290>)
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	2007      	movs	r0, #7
 80006f2:	f000 fb8e 	bl	8000e12 <_dwt_otpread>
 80006f6:	4603      	mov	r3, r0
 80006f8:	6063      	str	r3, [r4, #4]
 80006fa:	e003      	b.n	8000704 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <dwt_initialise+0x290>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	2b00      	cmp	r3, #0
 800070c:	d008      	beq.n	8000720 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800070e:	2008      	movs	r0, #8
 8000710:	f000 fb7f 	bl	8000e12 <_dwt_otpread>
 8000714:	4602      	mov	r2, r0
 8000716:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <dwt_initialise+0x290>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	721a      	strb	r2, [r3, #8]
 800071e:	e003      	b.n	8000728 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <dwt_initialise+0x290>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2200      	movs	r2, #0
 8000726:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	2b00      	cmp	r3, #0
 8000730:	d008      	beq.n	8000744 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000732:	2009      	movs	r0, #9
 8000734:	f000 fb6d 	bl	8000e12 <_dwt_otpread>
 8000738:	4602      	mov	r2, r0
 800073a:	4b33      	ldr	r3, [pc, #204]	; (8000808 <dwt_initialise+0x290>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	725a      	strb	r2, [r3, #9]
 8000742:	e003      	b.n	800074c <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <dwt_initialise+0x290>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2200      	movs	r2, #0
 800074a:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	2b00      	cmp	r3, #0
 8000754:	d121      	bne.n	800079a <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00b      	beq.n	8000778 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8000760:	f000 fba4 	bl	8000eac <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <dwt_initialise+0x290>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	8ada      	ldrh	r2, [r3, #22]
 800076a:	4b27      	ldr	r3, [pc, #156]	; (8000808 <dwt_initialise+0x290>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000772:	b292      	uxth	r2, r2
 8000774:	82da      	strh	r2, [r3, #22]
 8000776:	e01e      	b.n	80007b6 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000778:	2105      	movs	r1, #5
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f000 fad6 	bl	8000d2c <dwt_read16bitoffsetreg>
 8000780:	4603      	mov	r3, r0
 8000782:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800078a:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	461a      	mov	r2, r3
 8000790:	2105      	movs	r1, #5
 8000792:	2036      	movs	r0, #54	; 0x36
 8000794:	f000 fafa 	bl	8000d8c <dwt_write16bitoffsetreg>
 8000798:	e00d      	b.n	80007b6 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <dwt_initialise+0x290>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	8ada      	ldrh	r2, [r3, #22]
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <dwt_initialise+0x290>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007b2:	b292      	uxth	r2, r2
 80007b4:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 fb8c 	bl	8000ed4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80007bc:	2200      	movs	r2, #0
 80007be:	210a      	movs	r1, #10
 80007c0:	202c      	movs	r0, #44	; 0x2c
 80007c2:	f000 fad0 	bl	8000d66 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <dwt_initialise+0x290>)
 80007c8:	681c      	ldr	r4, [r3, #0]
 80007ca:	2100      	movs	r1, #0
 80007cc:	2004      	movs	r0, #4
 80007ce:	f000 fa86 	bl	8000cde <dwt_read32bitoffsetreg>
 80007d2:	4603      	mov	r3, r0
 80007d4:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <dwt_initialise+0x290>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <dwt_initialise+0x290>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f002 0203 	and.w	r2, r2, #3
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <dwt_initialise+0x290>)
 80007ee:	681c      	ldr	r4, [r3, #0]
 80007f0:	2100      	movs	r1, #0
 80007f2:	2008      	movs	r0, #8
 80007f4:	f000 fa73 	bl	8000cde <dwt_read32bitoffsetreg>
 80007f8:	4603      	mov	r3, r0
 80007fa:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 80007fc:	2300      	movs	r3, #0

} // end dwt_initialise()
 80007fe:	4618      	mov	r0, r3
 8000800:	371c      	adds	r7, #28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	bf00      	nop
 8000808:	20000000 	.word	0x20000000
 800080c:	deca0130 	.word	0xdeca0130

08000810 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000814:	2100      	movs	r1, #0
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fa61 	bl	8000cde <dwt_read32bitoffsetreg>
 800081c:	4603      	mov	r3, r0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	795b      	ldrb	r3, [r3, #5]
 800083e:	461a      	mov	r2, r3
 8000840:	4ba1      	ldr	r3, [pc, #644]	; (8000ac8 <dwt_configure+0x2a4>)
 8000842:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000846:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	3b01      	subs	r3, #1
 800084e:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8000850:	7cfb      	ldrb	r3, [r7, #19]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d002      	beq.n	800085c <dwt_configure+0x38>
 8000856:	7cfb      	ldrb	r3, [r7, #19]
 8000858:	2b07      	cmp	r3, #7
 800085a:	d101      	bne.n	8000860 <dwt_configure+0x3c>
 800085c:	2301      	movs	r3, #1
 800085e:	e000      	b.n	8000862 <dwt_configure+0x3e>
 8000860:	2300      	movs	r3, #0
 8000862:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	79db      	ldrb	r3, [r3, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10b      	bne.n	8000884 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800086c:	4b97      	ldr	r3, [pc, #604]	; (8000acc <dwt_configure+0x2a8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	691a      	ldr	r2, [r3, #16]
 8000872:	4b96      	ldr	r3, [pc, #600]	; (8000acc <dwt_configure+0x2a8>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800087a:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800087c:	8abb      	ldrh	r3, [r7, #20]
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	82bb      	strh	r3, [r7, #20]
 8000882:	e007      	b.n	8000894 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000884:	4b91      	ldr	r3, [pc, #580]	; (8000acc <dwt_configure+0x2a8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	691a      	ldr	r2, [r3, #16]
 800088a:	4b90      	ldr	r3, [pc, #576]	; (8000acc <dwt_configure+0x2a8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000892:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000894:	4b8d      	ldr	r3, [pc, #564]	; (8000acc <dwt_configure+0x2a8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	7a12      	ldrb	r2, [r2, #8]
 800089c:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800089e:	4b8b      	ldr	r3, [pc, #556]	; (8000acc <dwt_configure+0x2a8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	691a      	ldr	r2, [r3, #16]
 80008a4:	4b89      	ldr	r3, [pc, #548]	; (8000acc <dwt_configure+0x2a8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80008ac:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80008ae:	4b87      	ldr	r3, [pc, #540]	; (8000acc <dwt_configure+0x2a8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6919      	ldr	r1, [r3, #16]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7a1b      	ldrb	r3, [r3, #8]
 80008b8:	041b      	lsls	r3, r3, #16
 80008ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80008be:	4b83      	ldr	r3, [pc, #524]	; (8000acc <dwt_configure+0x2a8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80008c6:	4b81      	ldr	r3, [pc, #516]	; (8000acc <dwt_configure+0x2a8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	461a      	mov	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	2004      	movs	r0, #4
 80008d2:	f000 fa77 	bl	8000dc4 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80008d6:	8abb      	ldrh	r3, [r7, #20]
 80008d8:	461a      	mov	r2, r3
 80008da:	f642 0104 	movw	r1, #10244	; 0x2804
 80008de:	202e      	movs	r0, #46	; 0x2e
 80008e0:	f000 fa54 	bl	8000d8c <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80008e4:	7cbb      	ldrb	r3, [r7, #18]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fac0 	bl	8000e6c <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80008ec:	7cfb      	ldrb	r3, [r7, #19]
 80008ee:	4a78      	ldr	r2, [pc, #480]	; (8000ad0 <dwt_configure+0x2ac>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b77      	ldr	r3, [pc, #476]	; (8000ad4 <dwt_configure+0x2b0>)
 80008f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fa:	461a      	mov	r2, r3
 80008fc:	2107      	movs	r1, #7
 80008fe:	202b      	movs	r0, #43	; 0x2b
 8000900:	f000 fa60 	bl	8000dc4 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000904:	7cfb      	ldrb	r3, [r7, #19]
 8000906:	4a72      	ldr	r2, [pc, #456]	; (8000ad0 <dwt_configure+0x2ac>)
 8000908:	5cd3      	ldrb	r3, [r2, r3]
 800090a:	461a      	mov	r2, r3
 800090c:	4b72      	ldr	r3, [pc, #456]	; (8000ad8 <dwt_configure+0x2b4>)
 800090e:	5c9b      	ldrb	r3, [r3, r2]
 8000910:	461a      	mov	r2, r3
 8000912:	210b      	movs	r1, #11
 8000914:	202b      	movs	r0, #43	; 0x2b
 8000916:	f000 fa26 	bl	8000d66 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800091a:	7c7b      	ldrb	r3, [r7, #17]
 800091c:	4a6f      	ldr	r2, [pc, #444]	; (8000adc <dwt_configure+0x2b8>)
 800091e:	5cd3      	ldrb	r3, [r2, r3]
 8000920:	461a      	mov	r2, r3
 8000922:	210b      	movs	r1, #11
 8000924:	2028      	movs	r0, #40	; 0x28
 8000926:	f000 fa1e 	bl	8000d66 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	4a68      	ldr	r2, [pc, #416]	; (8000ad0 <dwt_configure+0x2ac>)
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	461a      	mov	r2, r3
 8000932:	4b6b      	ldr	r3, [pc, #428]	; (8000ae0 <dwt_configure+0x2bc>)
 8000934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000938:	461a      	mov	r2, r3
 800093a:	210c      	movs	r1, #12
 800093c:	2028      	movs	r0, #40	; 0x28
 800093e:	f000 fa41 	bl	8000dc4 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	79db      	ldrb	r3, [r3, #7]
 8000946:	4618      	mov	r0, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	799b      	ldrb	r3, [r3, #6]
 800094c:	4619      	mov	r1, r3
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <dwt_configure+0x2c0>)
 8000950:	0043      	lsls	r3, r0, #1
 8000952:	440b      	add	r3, r1
 8000954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000958:	461a      	mov	r2, r3
 800095a:	2102      	movs	r1, #2
 800095c:	2027      	movs	r0, #39	; 0x27
 800095e:	f000 fa15 	bl	8000d8c <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000962:	7cbb      	ldrb	r3, [r7, #18]
 8000964:	4a60      	ldr	r2, [pc, #384]	; (8000ae8 <dwt_configure+0x2c4>)
 8000966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096a:	461a      	mov	r2, r3
 800096c:	2104      	movs	r1, #4
 800096e:	2027      	movs	r0, #39	; 0x27
 8000970:	f000 fa0c 	bl	8000d8c <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	79db      	ldrb	r3, [r3, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d105      	bne.n	8000988 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800097c:	2264      	movs	r2, #100	; 0x64
 800097e:	2106      	movs	r1, #6
 8000980:	2027      	movs	r0, #39	; 0x27
 8000982:	f000 fa03 	bl	8000d8c <dwt_write16bitoffsetreg>
 8000986:	e018      	b.n	80009ba <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	789b      	ldrb	r3, [r3, #2]
 800098c:	2b04      	cmp	r3, #4
 800098e:	d10a      	bne.n	80009a6 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000990:	2210      	movs	r2, #16
 8000992:	2106      	movs	r1, #6
 8000994:	2027      	movs	r0, #39	; 0x27
 8000996:	f000 f9f9 	bl	8000d8c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800099a:	2210      	movs	r2, #16
 800099c:	2126      	movs	r1, #38	; 0x26
 800099e:	2027      	movs	r0, #39	; 0x27
 80009a0:	f000 f9e1 	bl	8000d66 <dwt_write8bitoffsetreg>
 80009a4:	e009      	b.n	80009ba <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80009a6:	2220      	movs	r2, #32
 80009a8:	2106      	movs	r1, #6
 80009aa:	2027      	movs	r0, #39	; 0x27
 80009ac:	f000 f9ee 	bl	8000d8c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80009b0:	2228      	movs	r2, #40	; 0x28
 80009b2:	2126      	movs	r1, #38	; 0x26
 80009b4:	2027      	movs	r0, #39	; 0x27
 80009b6:	f000 f9d6 	bl	8000d66 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80009ba:	7cbb      	ldrb	r3, [r7, #18]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	78d2      	ldrb	r2, [r2, #3]
 80009c0:	4611      	mov	r1, r2
 80009c2:	4a4a      	ldr	r2, [pc, #296]	; (8000aec <dwt_configure+0x2c8>)
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2108      	movs	r1, #8
 80009d0:	2027      	movs	r0, #39	; 0x27
 80009d2:	f000 f9f7 	bl	8000dc4 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	895b      	ldrh	r3, [r3, #10]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f241 0241 	movw	r2, #4161	; 0x1041
 80009e4:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	895b      	ldrh	r3, [r3, #10]
 80009ea:	461a      	mov	r2, r3
 80009ec:	2120      	movs	r1, #32
 80009ee:	2027      	movs	r0, #39	; 0x27
 80009f0:	f000 f9cc 	bl	8000d8c <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <dwt_configure+0x2cc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	210c      	movs	r1, #12
 80009fc:	2023      	movs	r0, #35	; 0x23
 80009fe:	f000 f9e1 	bl	8000dc4 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000a02:	7cbb      	ldrb	r3, [r7, #18]
 8000a04:	4a3a      	ldr	r2, [pc, #232]	; (8000af0 <dwt_configure+0x2cc>)
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	889b      	ldrh	r3, [r3, #4]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	2104      	movs	r1, #4
 8000a10:	2023      	movs	r0, #35	; 0x23
 8000a12:	f000 f9bb 	bl	8000d8c <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	799b      	ldrb	r3, [r3, #6]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00d      	beq.n	8000a3a <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	79db      	ldrb	r3, [r3, #7]
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <dwt_configure+0x2d0>)
 8000a26:	5c9b      	ldrb	r3, [r3, r2]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2021      	movs	r0, #33	; 0x21
 8000a2e:	f000 f99a 	bl	8000d66 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000a32:	2303      	movs	r3, #3
 8000a34:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000a36:	2301      	movs	r3, #1
 8000a38:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a3a:	7cfb      	ldrb	r3, [r7, #19]
 8000a3c:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a40:	7cfb      	ldrb	r3, [r7, #19]
 8000a42:	011b      	lsls	r3, r3, #4
 8000a44:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a46:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	785b      	ldrb	r3, [r3, #1]
 8000a4c:	049b      	lsls	r3, r3, #18
 8000a4e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a52:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	051b      	lsls	r3, r3, #20
 8000a58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a5c:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a5e:	7dbb      	ldrb	r3, [r7, #22]
 8000a60:	045b      	lsls	r3, r3, #17
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a66:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	059b      	lsls	r3, r3, #22
 8000a6e:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a72:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	795b      	ldrb	r3, [r3, #5]
 8000a78:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	2100      	movs	r1, #0
 8000a82:	201f      	movs	r0, #31
 8000a84:	f000 f99e 	bl	8000dc4 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	789a      	ldrb	r2, [r3, #2]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	785b      	ldrb	r3, [r3, #1]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	0419      	lsls	r1, r3, #16
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	79db      	ldrb	r3, [r3, #7]
 8000a9a:	035a      	lsls	r2, r3, #13
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <dwt_configure+0x2a8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <dwt_configure+0x2a8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	2008      	movs	r0, #8
 8000ab0:	f000 f988 	bl	8000dc4 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000ab4:	2242      	movs	r2, #66	; 0x42
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	200d      	movs	r0, #13
 8000aba:	f000 f954 	bl	8000d66 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08004f98 	.word	0x08004f98
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	08004f18 	.word	0x08004f18
 8000ad4:	08004f38 	.word	0x08004f38
 8000ad8:	08004f50 	.word	0x08004f50
 8000adc:	08004f58 	.word	0x08004f58
 8000ae0:	08004f20 	.word	0x08004f20
 8000ae4:	08004f68 	.word	0x08004f68
 8000ae8:	08004f74 	.word	0x08004f74
 8000aec:	08004f78 	.word	0x08004f78
 8000af0:	08004f5c 	.word	0x08004f5c
 8000af4:	08004f64 	.word	0x08004f64

08000af8 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	80fb      	strh	r3, [r7, #6]
 8000b04:	4613      	mov	r3, r2
 8000b06:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000b08:	88ba      	ldrh	r2, [r7, #4]
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b12:	dc09      	bgt.n	8000b28 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	3b02      	subs	r3, #2
 8000b18:	461a      	mov	r2, r3
 8000b1a:	88b9      	ldrh	r1, [r7, #4]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2009      	movs	r0, #9
 8000b20:	f000 f828 	bl	8000b74 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000b24:	2300      	movs	r3, #0
 8000b26:	e001      	b.n	8000b2c <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	603a      	str	r2, [r7, #0]
 8000b3e:	80fb      	strh	r3, [r7, #6]
 8000b40:	460b      	mov	r3, r1
 8000b42:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <dwt_writetxfctrl+0x3c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	059b      	lsls	r3, r3, #22
 8000b52:	431a      	orrs	r2, r3
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	03db      	lsls	r3, r3, #15
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2008      	movs	r0, #8
 8000b62:	f000 f92f 	bl	8000dc4 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000

08000b74 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60ba      	str	r2, [r7, #8]
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4603      	mov	r3, r0
 8000b80:	81fb      	strh	r3, [r7, #14]
 8000b82:	460b      	mov	r3, r1
 8000b84:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b8a:	89bb      	ldrh	r3, [r7, #12]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10d      	bne.n	8000bac <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	1c59      	adds	r1, r3, #1
 8000b98:	6179      	str	r1, [r7, #20]
 8000b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	f107 0118 	add.w	r1, r7, #24
 8000ba4:	440b      	add	r3, r1
 8000ba6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000baa:	e033      	b.n	8000c14 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000bac:	89fb      	ldrh	r3, [r7, #14]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	1c59      	adds	r1, r3, #1
 8000bb4:	6179      	str	r1, [r7, #20]
 8000bb6:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	f107 0118 	add.w	r1, r7, #24
 8000bc0:	440b      	add	r3, r1
 8000bc2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000bc6:	89bb      	ldrh	r3, [r7, #12]
 8000bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bca:	d80a      	bhi.n	8000be2 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	617a      	str	r2, [r7, #20]
 8000bd2:	89ba      	ldrh	r2, [r7, #12]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	f107 0118 	add.w	r1, r7, #24
 8000bda:	440b      	add	r3, r1
 8000bdc:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000be0:	e018      	b.n	8000c14 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000be2:	89bb      	ldrh	r3, [r7, #12]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	1c59      	adds	r1, r3, #1
 8000bea:	6179      	str	r1, [r7, #20]
 8000bec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	f107 0118 	add.w	r1, r7, #24
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bfc:	89bb      	ldrh	r3, [r7, #12]
 8000bfe:	09db      	lsrs	r3, r3, #7
 8000c00:	b299      	uxth	r1, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	617a      	str	r2, [r7, #20]
 8000c08:	b2ca      	uxtb	r2, r1
 8000c0a:	f107 0118 	add.w	r1, r7, #24
 8000c0e:	440b      	add	r3, r1
 8000c10:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	b298      	uxth	r0, r3
 8000c18:	f107 0110 	add.w	r1, r7, #16
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f000 fde2 	bl	80017e8 <writetospi>
} // end dwt_writetodevice()
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60ba      	str	r2, [r7, #8]
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4603      	mov	r3, r0
 8000c38:	81fb      	strh	r3, [r7, #14]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10a      	bne.n	8000c5e <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	617a      	str	r2, [r7, #20]
 8000c4e:	89fa      	ldrh	r2, [r7, #14]
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	f107 0118 	add.w	r1, r7, #24
 8000c56:	440b      	add	r3, r1
 8000c58:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c5c:	e033      	b.n	8000cc6 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	1c59      	adds	r1, r3, #1
 8000c66:	6179      	str	r1, [r7, #20]
 8000c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	f107 0118 	add.w	r1, r7, #24
 8000c72:	440b      	add	r3, r1
 8000c74:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c78:	89bb      	ldrh	r3, [r7, #12]
 8000c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c7c:	d80a      	bhi.n	8000c94 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	617a      	str	r2, [r7, #20]
 8000c84:	89ba      	ldrh	r2, [r7, #12]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	f107 0118 	add.w	r1, r7, #24
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c92:	e018      	b.n	8000cc6 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c94:	89bb      	ldrh	r3, [r7, #12]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	1c59      	adds	r1, r3, #1
 8000c9c:	6179      	str	r1, [r7, #20]
 8000c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	f107 0118 	add.w	r1, r7, #24
 8000ca8:	440b      	add	r3, r1
 8000caa:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000cae:	89bb      	ldrh	r3, [r7, #12]
 8000cb0:	09db      	lsrs	r3, r3, #7
 8000cb2:	b299      	uxth	r1, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	617a      	str	r2, [r7, #20]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	f107 0118 	add.w	r1, r7, #24
 8000cc0:	440b      	add	r3, r1
 8000cc2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	b298      	uxth	r0, r3
 8000cca:	f107 0110 	add.w	r1, r7, #16
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	f000 fdbd 	bl	8001850 <readfromspi>
} // end dwt_readfromdevice()
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	b298      	uxth	r0, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b299      	uxth	r1, r3
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	f7ff ff97 	bl	8000c2c <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000cfe:	2303      	movs	r3, #3
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	e00b      	b.n	8000d1c <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	f107 010c 	add.w	r1, r7, #12
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	440a      	add	r2, r1
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	daf0      	bge.n	8000d04 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000d22:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d36:	2300      	movs	r3, #0
 8000d38:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	b298      	uxth	r0, r3
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b299      	uxth	r1, r3
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2202      	movs	r2, #2
 8000d48:	f7ff ff70 	bl	8000c2c <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d4c:	7b7b      	ldrb	r3, [r7, #13]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	7b3b      	ldrb	r3, [r7, #12]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d5c:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	4613      	mov	r3, r2
 8000d72:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	b298      	uxth	r0, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	b299      	uxth	r1, r3
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f7ff fef8 	bl	8000b74 <dwt_writetodevice>
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	b298      	uxth	r0, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	b299      	uxth	r1, r3
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	2202      	movs	r2, #2
 8000db8:	f7ff fedc 	bl	8000b74 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00d      	b.n	8000df2 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2d9      	uxtb	r1, r3
 8000dda:	f107 0210 	add.w	r2, r7, #16
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4413      	add	r3, r2
 8000de2:	460a      	mov	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	ddee      	ble.n	8000dd6 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	b298      	uxth	r0, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	b299      	uxth	r1, r3
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2204      	movs	r2, #4
 8000e06:	f7ff feb5 	bl	8000b74 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	2104      	movs	r1, #4
 8000e22:	202d      	movs	r0, #45	; 0x2d
 8000e24:	f7ff ffb2 	bl	8000d8c <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000e28:	2203      	movs	r2, #3
 8000e2a:	2106      	movs	r1, #6
 8000e2c:	202d      	movs	r0, #45	; 0x2d
 8000e2e:	f7ff ff9a 	bl	8000d66 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e32:	2200      	movs	r2, #0
 8000e34:	2106      	movs	r1, #6
 8000e36:	202d      	movs	r0, #45	; 0x2d
 8000e38:	f7ff ff95 	bl	8000d66 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e3c:	210a      	movs	r1, #10
 8000e3e:	202d      	movs	r0, #45	; 0x2d
 8000e40:	f7ff ff4d 	bl	8000cde <dwt_read32bitoffsetreg>
 8000e44:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000e54:	2200      	movs	r2, #0
 8000e56:	2102      	movs	r1, #2
 8000e58:	202c      	movs	r0, #44	; 0x2c
 8000e5a:	f7ff ff84 	bl	8000d66 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e5e:	2202      	movs	r2, #2
 8000e60:	2102      	movs	r1, #2
 8000e62:	202c      	movs	r0, #44	; 0x2c
 8000e64:	f7ff ff7f 	bl	8000d66 <dwt_write8bitoffsetreg>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000e74:	226d      	movs	r2, #109	; 0x6d
 8000e76:	f640 0106 	movw	r1, #2054	; 0x806
 8000e7a:	202e      	movs	r0, #46	; 0x2e
 8000e7c:	f7ff ff73 	bl	8000d66 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000e86:	f240 6207 	movw	r2, #1543	; 0x607
 8000e8a:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e8e:	202e      	movs	r0, #46	; 0x2e
 8000e90:	f7ff ff7c 	bl	8000d8c <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000e94:	e006      	b.n	8000ea4 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000e96:	f241 6207 	movw	r2, #5639	; 0x1607
 8000e9a:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e9e:	202e      	movs	r0, #46	; 0x2e
 8000ea0:	f7ff ff74 	bl	8000d8c <dwt_write16bitoffsetreg>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000eb0:	200e      	movs	r0, #14
 8000eb2:	f000 f80f 	bl	8000ed4 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000eb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eba:	2106      	movs	r1, #6
 8000ebc:	202d      	movs	r0, #45	; 0x2d
 8000ebe:	f7ff ff65 	bl	8000d8c <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 fc84 	bl	80017d0 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f000 f803 	bl	8000ed4 <_dwt_enableclocks>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2036      	movs	r0, #54	; 0x36
 8000ee6:	f7ff fea1 	bl	8000c2c <dwt_readfromdevice>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0e      	cmp	r3, #14
 8000eee:	d876      	bhi.n	8000fde <_dwt_enableclocks+0x10a>
 8000ef0:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <_dwt_enableclocks+0x24>)
 8000ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef6:	bf00      	nop
 8000ef8:	08000f45 	.word	0x08000f45
 8000efc:	08000f35 	.word	0x08000f35
 8000f00:	08000f5b 	.word	0x08000f5b
 8000f04:	08000fdf 	.word	0x08000fdf
 8000f08:	08000fdf 	.word	0x08000fdf
 8000f0c:	08000fdf 	.word	0x08000fdf
 8000f10:	08000fdf 	.word	0x08000fdf
 8000f14:	08000f71 	.word	0x08000f71
 8000f18:	08000f91 	.word	0x08000f91
 8000f1c:	08000fdf 	.word	0x08000fdf
 8000f20:	08000fdf 	.word	0x08000fdf
 8000f24:	08000fa7 	.word	0x08000fa7
 8000f28:	08000fb3 	.word	0x08000fb3
 8000f2c:	08000fbf 	.word	0x08000fbf
 8000f30:	08000fd5 	.word	0x08000fd5
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f34:	2300      	movs	r3, #0
 8000f36:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	f023 0301 	bic.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f42:	e04d      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f44:	7b3b      	ldrb	r3, [r7, #12]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	f023 0303 	bic.w	r3, r3, #3
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f58:	e042      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000f5a:	7b3b      	ldrb	r3, [r7, #12]
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f023 0303 	bic.w	r3, r3, #3
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f6e:	e037      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000f70:	7b3b      	ldrb	r3, [r7, #12]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f8e:	e027      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fa4:	e01c      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fb0:	e016      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
 8000fb4:	f023 0302 	bic.w	r3, r3, #2
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fbc:	e010      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	f043 0320 	orr.w	r3, r3, #32
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fd2:	e005      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fdc:	e000      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000fde:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2036      	movs	r0, #54	; 0x36
 8000fea:	f7ff fdc3 	bl	8000b74 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2036      	movs	r0, #54	; 0x36
 8000ffa:	f7ff fdbb 	bl	8000b74 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop

08001008 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ff61 	bl	8000ed4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001012:	2200      	movs	r2, #0
 8001014:	2104      	movs	r1, #4
 8001016:	2036      	movs	r0, #54	; 0x36
 8001018:	f7ff feb8 	bl	8000d8c <dwt_write16bitoffsetreg>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001032:	2300      	movs	r3, #0
 8001034:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <dwt_starttx+0x98>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2201      	movs	r2, #1
 800104a:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d020      	beq.n	8001098 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001056:	7afb      	ldrb	r3, [r7, #11]
 8001058:	f043 0306 	orr.w	r3, r3, #6
 800105c:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	461a      	mov	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	200d      	movs	r0, #13
 8001066:	f7ff fe7e 	bl	8000d66 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800106a:	2103      	movs	r1, #3
 800106c:	200f      	movs	r0, #15
 800106e:	f7ff fe5d 	bl	8000d2c <dwt_read16bitoffsetreg>
 8001072:	4603      	mov	r3, r0
 8001074:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001076:	893b      	ldrh	r3, [r7, #8]
 8001078:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e012      	b.n	80010ac <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001086:	2240      	movs	r2, #64	; 0x40
 8001088:	2100      	movs	r1, #0
 800108a:	200d      	movs	r0, #13
 800108c:	f7ff fe6b 	bl	8000d66 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e009      	b.n	80010ac <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010a0:	7afb      	ldrb	r3, [r7, #11]
 80010a2:	461a      	mov	r2, r3
 80010a4:	2100      	movs	r1, #0
 80010a6:	200d      	movs	r0, #13
 80010a8:	f7ff fe5d 	bl	8000d66 <dwt_write8bitoffsetreg>
    }

    return retval;
 80010ac:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000

080010bc <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80010c0:	f7ff ffa2 	bl	8001008 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	202c      	movs	r0, #44	; 0x2c
 80010ca:	f7ff fe5f 	bl	8000d8c <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2106      	movs	r1, #6
 80010d2:	202c      	movs	r0, #44	; 0x2c
 80010d4:	f7ff fe47 	bl	8000d66 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 80010d8:	f7ff feba 	bl	8000e50 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 80010dc:	2200      	movs	r2, #0
 80010de:	2103      	movs	r1, #3
 80010e0:	2036      	movs	r0, #54	; 0x36
 80010e2:	f7ff fe40 	bl	8000d66 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 fb72 	bl	80017d0 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80010ec:	22f0      	movs	r2, #240	; 0xf0
 80010ee:	2103      	movs	r1, #3
 80010f0:	2036      	movs	r0, #54	; 0x36
 80010f2:	f7ff fe38 	bl	8000d66 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <dwt_softreset+0x48>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	755a      	strb	r2, [r3, #21]
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000

08001108 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	b25b      	sxtb	r3, r3
 800111c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001120:	b25b      	sxtb	r3, r3
 8001122:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	461a      	mov	r2, r3
 8001128:	210e      	movs	r1, #14
 800112a:	202b      	movs	r0, #43	; 0x2b
 800112c:	f7ff fe1b 	bl	8000d66 <dwt_write8bitoffsetreg>
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0
    /* Display application name. */
    stdio_write(APP_NAME);
 800113e:	4835      	ldr	r0, [pc, #212]	; (8001214 <dw_main+0xdc>)
 8001140:	f000 fd00 	bl	8001b44 <stdio_write>
   uint32_t ac;

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001144:	f000 fc64 	bl	8001a10 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001148:	f000 fcbe 	bl	8001ac8 <port_set_dw1000_slowrate>

    ac = dwt_readdevid();
 800114c:	f7ff fb60 	bl	8000810 <dwt_readdevid>
 8001150:	6378      	str	r0, [r7, #52]	; 0x34
   sprintf(buffer, "device id is 0x%8x\r\n", (unsigned int)ac);
 8001152:	463b      	mov	r3, r7
 8001154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001156:	4930      	ldr	r1, [pc, #192]	; (8001218 <dw_main+0xe0>)
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fa6b 	bl	8004634 <siprintf>
   stdio_write(buffer);
 800115e:	463b      	mov	r3, r7
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fcef 	bl	8001b44 <stdio_write>

    if (dwt_initialise(DWT_LOADNONE | DWT_DW_WAKE_UP) == DWT_ERROR)
 8001166:	2002      	movs	r0, #2
 8001168:	f7ff fa06 	bl	8000578 <dwt_initialise>
 800116c:	4603      	mov	r3, r0
 800116e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001172:	d103      	bne.n	800117c <dw_main+0x44>
    {
        stdio_write("INIT FAILED");
 8001174:	4829      	ldr	r0, [pc, #164]	; (800121c <dw_main+0xe4>)
 8001176:	f000 fce5 	bl	8001b44 <stdio_write>
        while (1)
 800117a:	e7fe      	b.n	800117a <dw_main+0x42>
        { };
    }

    ac = dwt_readdevid();
 800117c:	f7ff fb48 	bl	8000810 <dwt_readdevid>
 8001180:	6378      	str	r0, [r7, #52]	; 0x34
   sprintf(buffer, "device id is 0x%8x\r\n", (unsigned int)ac);
 8001182:	463b      	mov	r3, r7
 8001184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001186:	4924      	ldr	r1, [pc, #144]	; (8001218 <dw_main+0xe0>)
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fa53 	bl	8004634 <siprintf>
   stdio_write(buffer);
 800118e:	463b      	mov	r3, r7
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fcd7 	bl	8001b44 <stdio_write>

    port_set_dw1000_fastrate();
 8001196:	f000 fca3 	bl	8001ae0 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 800119a:	4821      	ldr	r0, [pc, #132]	; (8001220 <dw_main+0xe8>)
 800119c:	f7ff fb42 	bl	8000824 <dwt_configure>

    /* Loop forever sending frames periodically. */
    while(1)
    {
        /* Write frame data to DW1000 and prepare transmission. See NOTE 4 below.*/
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 80011a0:	2200      	movs	r2, #0
 80011a2:	4920      	ldr	r1, [pc, #128]	; (8001224 <dw_main+0xec>)
 80011a4:	200c      	movs	r0, #12
 80011a6:	f7ff fca7 	bl	8000af8 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	200c      	movs	r0, #12
 80011b0:	f7ff fcc0 	bl	8000b34 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff ff33 	bl	8001020 <dwt_starttx>

        /* Poll DW1000 until TX frame sent event set. See NOTE 5 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it.*/
        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 80011ba:	e002      	b.n	80011c2 <dw_main+0x8a>
        {
        	stdio_write("Polling for TX frame event is set\n");
 80011bc:	481a      	ldr	r0, [pc, #104]	; (8001228 <dw_main+0xf0>)
 80011be:	f000 fcc1 	bl	8001b44 <stdio_write>
        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 80011c2:	2100      	movs	r1, #0
 80011c4:	200f      	movs	r0, #15
 80011c6:	f7ff fd8a 	bl	8000cde <dwt_read32bitoffsetreg>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f3      	beq.n	80011bc <dw_main+0x84>
        };

        /* Clear TX frame sent event. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	2100      	movs	r1, #0
 80011d8:	200f      	movs	r0, #15
 80011da:	f7ff fdf3 	bl	8000dc4 <dwt_write32bitoffsetreg>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 80011de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e2:	f000 fbeb 	bl	80019bc <Sleep>

        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <dw_main+0xec>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <dw_main+0xec>)
 80011f0:	705a      	strb	r2, [r3, #1]
    	stdio_write("NEXT\n");
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <dw_main+0xf4>)
 80011f4:	f000 fca6 	bl	8001b44 <stdio_write>


        ac = dwt_readdevid();
 80011f8:	f7ff fb0a 	bl	8000810 <dwt_readdevid>
 80011fc:	6378      	str	r0, [r7, #52]	; 0x34
       sprintf(buffer, "device id is 0x%8x\r\n", (unsigned int)ac);
 80011fe:	463b      	mov	r3, r7
 8001200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001202:	4905      	ldr	r1, [pc, #20]	; (8001218 <dw_main+0xe0>)
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fa15 	bl	8004634 <siprintf>
       stdio_write(buffer);
 800120a:	463b      	mov	r3, r7
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fc99 	bl	8001b44 <stdio_write>
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001212:	e7c5      	b.n	80011a0 <dw_main+0x68>
 8001214:	08004ea8 	.word	0x08004ea8
 8001218:	08004eb8 	.word	0x08004eb8
 800121c:	08004ed0 	.word	0x08004ed0
 8001220:	20000004 	.word	0x20000004
 8001224:	20000010 	.word	0x20000010
 8001228:	08004edc 	.word	0x08004edc
 800122c:	08004f00 	.word	0x08004f00

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001234:	f000 fccd 	bl	8001bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001238:	f000 f816 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123c:	f000 f8d4 	bl	80013e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001240:	f000 f864 	bl	800130c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001244:	f000 f8a0 	bl	8001388 <MX_USART1_UART_Init>

  /*
   * DW_RESET_Pin has been configured by CubeMx as Exti0 line
   * Reconfigure the line as Input
   */
  stdio_init(&huart1);
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <main+0x30>)
 800124a:	f000 fc6b 	bl	8001b24 <stdio_init>
  stdio_write("before dw_main");
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <main+0x34>)
 8001250:	f000 fc78 	bl	8001b44 <stdio_write>
  setup_DW1000RSTnIRQ(0);
 8001254:	2000      	movs	r0, #0
 8001256:	f000 fbfd 	bl	8001a54 <setup_DW1000RSTnIRQ>



  dw_main();
 800125a:	f7ff ff6d 	bl	8001138 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800125e:	e7fe      	b.n	800125e <main+0x2e>
 8001260:	200000f0 	.word	0x200000f0
 8001264:	08004f08 	.word	0x08004f08

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b096      	sub	sp, #88	; 0x58
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	2244      	movs	r2, #68	; 0x44
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f003 f9d4 	bl	8004624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800128a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800128e:	f001 f80d 	bl	80022ac <HAL_PWREx_ControlVoltageScaling>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001298:	f000 f946 	bl	8001528 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800129c:	2302      	movs	r3, #2
 800129e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a6:	2310      	movs	r3, #16
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ae:	2302      	movs	r3, #2
 80012b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 80012b6:	2309      	movs	r3, #9
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012ba:	2307      	movs	r3, #7
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012be:	2302      	movs	r3, #2
 80012c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 f844 	bl	8002358 <HAL_RCC_OscConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012d6:	f000 f927 	bl	8001528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2303      	movs	r3, #3
 80012e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	2104      	movs	r1, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 fc41 	bl	8002b7c <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001300:	f000 f912 	bl	8001528 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	3758      	adds	r7, #88	; 0x58
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_SPI1_Init+0x74>)
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <MX_SPI1_Init+0x78>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_SPI1_Init+0x74>)
 8001318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800131c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_SPI1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_SPI1_Init+0x74>)
 8001326:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800132a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_SPI1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_SPI1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_SPI1_Init+0x74>)
 800133a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_SPI1_Init+0x74>)
 8001342:	2210      	movs	r2, #16
 8001344:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_SPI1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_SPI1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_SPI1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_SPI1_Init+0x74>)
 800135a:	2207      	movs	r2, #7
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_SPI1_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_SPI1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_SPI1_Init+0x74>)
 800136c:	f002 f910 	bl	8003590 <HAL_SPI_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001376:	f000 f8d7 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000174 	.word	0x20000174
 8001384:	40013000 	.word	0x40013000

08001388 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <MX_USART1_UART_Init+0x5c>)
 8001390:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART1_UART_Init+0x58>)
 80013cc:	f002 fc64 	bl	8003c98 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013d6:	f000 f8a7 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200000f0 	.word	0x200000f0
 80013e4:	40013800 	.word	0x40013800

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <MX_GPIO_Init+0x138>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a47      	ldr	r2, [pc, #284]	; (8001520 <MX_GPIO_Init+0x138>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b45      	ldr	r3, [pc, #276]	; (8001520 <MX_GPIO_Init+0x138>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <MX_GPIO_Init+0x138>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a41      	ldr	r2, [pc, #260]	; (8001520 <MX_GPIO_Init+0x138>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <MX_GPIO_Init+0x138>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <MX_GPIO_Init+0x138>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a3b      	ldr	r2, [pc, #236]	; (8001520 <MX_GPIO_Init+0x138>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b39      	ldr	r3, [pc, #228]	; (8001520 <MX_GPIO_Init+0x138>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2120      	movs	r1, #32
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f000 ff07 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|DW_RESET_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2128      	movs	r1, #40	; 0x28
 8001456:	4833      	ldr	r0, [pc, #204]	; (8001524 <MX_GPIO_Init+0x13c>)
 8001458:	f000 ff02 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 800145c:	2304      	movs	r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800146c:	2307      	movs	r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f000 fd87 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 800147e:	2320      	movs	r3, #32
 8001480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001498:	f000 fd78 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 800149c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014a8:	2302      	movs	r3, #2
 80014aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b6:	f000 fd69 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80014cc:	2303      	movs	r3, #3
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f000 fd57 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80014de:	2308      	movs	r3, #8
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <MX_GPIO_Init+0x13c>)
 80014f6:	f000 fd49 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 80014fa:	2320      	movs	r3, #32
 80014fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014fe:	2311      	movs	r3, #17
 8001500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4619      	mov	r1, r3
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_GPIO_Init+0x13c>)
 8001512:	f000 fd3b 	bl	8001f8c <HAL_GPIO_Init>

}
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_MspInit+0x44>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_MspInit+0x44>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6613      	str	r3, [r2, #96]	; 0x60
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_MspInit+0x44>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_MspInit+0x44>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_MspInit+0x44>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6593      	str	r3, [r2, #88]	; 0x58
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_MspInit+0x44>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_SPI_MspInit+0x7c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d128      	bne.n	80015f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_SPI_MspInit+0x80>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	4a16      	ldr	r2, [pc, #88]	; (80015fc <HAL_SPI_MspInit+0x80>)
 80015a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a8:	6613      	str	r3, [r2, #96]	; 0x60
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_SPI_MspInit+0x80>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_SPI_MspInit+0x80>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_SPI_MspInit+0x80>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_SPI_MspInit+0x80>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80015ce:	23c2      	movs	r3, #194	; 0xc2
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015de:	2305      	movs	r3, #5
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f000 fcce 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40013000 	.word	0x40013000
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09e      	sub	sp, #120	; 0x78
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2254      	movs	r2, #84	; 0x54
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f002 ffff 	bl	8004624 <memset>
  if(huart->Instance==USART1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_UART_MspInit+0xa8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d137      	bne.n	80016a0 <HAL_UART_MspInit+0xa0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001630:	2301      	movs	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4618      	mov	r0, r3
 800163e:	f001 fcc1 	bl	8002fc4 <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001648:	f7ff ff6e 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_UART_MspInit+0xac>)
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <HAL_UART_MspInit+0xac>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001656:	6613      	str	r3, [r2, #96]	; 0x60
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_UART_MspInit+0xac>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_UART_MspInit+0xac>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_UART_MspInit+0xac>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_UART_MspInit+0xac>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001680:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800168e:	2307      	movs	r3, #7
 8001690:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f000 fc76 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016a0:	bf00      	nop
 80016a2:	3778      	adds	r7, #120	; 0x78
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40021000 	.word	0x40021000

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f000 fabe 	bl	8001c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f002 ff4c 	bl	80045d0 <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20010000 	.word	0x20010000
 8001764:	00000400 	.word	0x00000400
 8001768:	200000e0 	.word	0x200000e0
 800176c:	200002b0 	.word	0x200002b0

08001770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <SystemInit+0x20>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <SystemInit+0x20>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800179a:	f000 f9bb 	bl	8001b14 <port_GetEXT_IRQStatus>
 800179e:	4603      	mov	r3, r0
 80017a0:	607b      	str	r3, [r7, #4]

	if(s) {
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80017a8:	f000 f9a6 	bl	8001af8 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80017c4:	f000 f99f 	bl	8001b06 <port_EnableEXT_IRQ>
	}
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8ef 	bl	80019bc <Sleep>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80017e8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80017ec:	4683      	mov	fp, r0
 80017ee:	468a      	mov	sl, r1
 80017f0:	4691      	mov	r9, r2
 80017f2:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80017f4:	f7ff ffce 	bl	8001794 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80017f8:	4d14      	ldr	r5, [pc, #80]	; (800184c <writetospi+0x64>)
    stat = decamutexon() ;
 80017fa:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80017fc:	4628      	mov	r0, r5
 80017fe:	f002 f8d8 	bl	80039b2 <HAL_SPI_GetState>
 8001802:	2801      	cmp	r0, #1
 8001804:	4604      	mov	r4, r0
 8001806:	d1f9      	bne.n	80017fc <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001808:	2200      	movs	r2, #0
 800180a:	2120      	movs	r1, #32
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f000 fd26 	bl	8002260 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001814:	465a      	mov	r2, fp
 8001816:	4651      	mov	r1, sl
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	480b      	ldr	r0, [pc, #44]	; (800184c <writetospi+0x64>)
 800181e:	f001 ff5a 	bl	80036d6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	fa1f f289 	uxth.w	r2, r9
 800182a:	4641      	mov	r1, r8
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <writetospi+0x64>)
 800182e:	f001 ff52 	bl	80036d6 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001832:	4622      	mov	r2, r4
 8001834:	2120      	movs	r1, #32
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f000 fd11 	bl	8002260 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800183e:	4630      	mov	r0, r6
 8001840:	f7ff ffb9 	bl	80017b6 <decamutexoff>

    return 0;
} // end writetospi()
 8001844:	2000      	movs	r0, #0
 8001846:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800184a:	bf00      	nop
 800184c:	20000174 	.word	0x20000174

08001850 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001850:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001854:	4681      	mov	r9, r0
 8001856:	460c      	mov	r4, r1
 8001858:	4690      	mov	r8, r2
 800185a:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800185c:	f7ff ff9a 	bl	8001794 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001860:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80018e0 <readfromspi+0x90>
    stat = decamutexon() ;
 8001864:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001866:	4650      	mov	r0, sl
 8001868:	f002 f8a3 	bl	80039b2 <HAL_SPI_GetState>
 800186c:	2801      	cmp	r0, #1
 800186e:	d1fa      	bne.n	8001866 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001870:	2200      	movs	r2, #0
 8001872:	2120      	movs	r1, #32
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001878:	f000 fcf2 	bl	8002260 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800187c:	f1b9 0f00 	cmp.w	r9, #0
 8001880:	d00c      	beq.n	800189c <readfromspi+0x4c>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001882:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80018e0 <readfromspi+0x90>
 8001886:	44a1      	add	r9, r4
 8001888:	2201      	movs	r2, #1
 800188a:	4621      	mov	r1, r4
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	4414      	add	r4, r2
 8001892:	4650      	mov	r0, sl
 8001894:	f001 ff1f 	bl	80036d6 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001898:	454c      	cmp	r4, r9
 800189a:	d1f5      	bne.n	8001888 <readfromspi+0x38>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800189c:	f1b8 0f00 	cmp.w	r8, #0
 80018a0:	d012      	beq.n	80018c8 <readfromspi+0x78>
 80018a2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80018e0 <readfromspi+0x90>
 80018a6:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80018aa:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 80018ac:	f8dc 2000 	ldr.w	r2, [ip]
 80018b0:	6891      	ldr	r1, [r2, #8]
 80018b2:	0789      	lsls	r1, r1, #30
 80018b4:	d5fc      	bpl.n	80018b0 <readfromspi+0x60>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80018b6:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80018b8:	6891      	ldr	r1, [r2, #8]
 80018ba:	07cb      	lsls	r3, r1, #31
 80018bc:	d5fc      	bpl.n	80018b8 <readfromspi+0x68>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80018be:	68d3      	ldr	r3, [r2, #12]
 80018c0:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80018c4:	4285      	cmp	r5, r0
 80018c6:	d1f1      	bne.n	80018ac <readfromspi+0x5c>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80018c8:	2201      	movs	r2, #1
 80018ca:	2120      	movs	r1, #32
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f000 fcc6 	bl	8002260 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80018d4:	4630      	mov	r0, r6
 80018d6:	f7ff ff6e 	bl	80017b6 <decamutexoff>

    return 0;
} // end readfromspi()
 80018da:	2000      	movs	r0, #0
 80018dc:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80018e0:	20000174 	.word	0x20000174

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db12      	blt.n	8001958 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	490a      	ldr	r1, [pc, #40]	; (8001964 <__NVIC_DisableIRQ+0x44>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	3320      	adds	r3, #32
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800194c:	f3bf 8f4f 	dsb	sy
}
 8001950:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001952:	f3bf 8f6f 	isb	sy
}
 8001956:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100

08001968 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep(useconds_t usec)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e012      	b.n	800199c <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	e004      	b.n	8001986 <usleep+0x1e>
        {
            __NOP();
 800197c:	bf00      	nop
            __NOP();
 800197e:	bf00      	nop
        for(j=0;j<2;j++)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	3301      	adds	r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b01      	cmp	r3, #1
 800198a:	bfd4      	ite	le
 800198c:	2301      	movle	r3, #1
 800198e:	2300      	movgt	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f2      	bne.n	800197c <usleep+0x14>
    for(i=0;i<usec;i++)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3301      	adds	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	bf8c      	ite	hi
 80019a4:	2301      	movhi	r3, #1
 80019a6:	2300      	movls	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e3      	bne.n	8001976 <usleep+0xe>
        }
    }
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f979 	bl	8001cbc <HAL_Delay>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80019dc:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <EXTI_GetITEnStatus+0x38>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf14      	ite	ne
 80019f8:	2301      	movne	r3, #1
 80019fa:	2300      	moveq	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001a16:	2320      	movs	r3, #32
 8001a18:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a1a:	2311      	movs	r3, #17
 8001a1c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	480a      	ldr	r0, [pc, #40]	; (8001a50 <reset_DW1000+0x40>)
 8001a28:	f000 fab0 	bl	8001f8c <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2120      	movs	r1, #32
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <reset_DW1000+0x40>)
 8001a32:	f000 fc15 	bl	8002260 <HAL_GPIO_WritePin>

    usleep(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7ff ff96 	bl	8001968 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 f809 	bl	8001a54 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001a42:	2002      	movs	r0, #2
 8001a44:	f7ff ffba 	bl	80019bc <Sleep>
}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	48000400 	.word	0x48000400

08001a54 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001a62:	2320      	movs	r3, #32
 8001a64:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <setup_DW1000RSTnIRQ+0x70>)
 8001a78:	f000 fa88 	bl	8001f8c <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001a7c:	2006      	movs	r0, #6
 8001a7e:	f000 fa5c 	bl	8001f3a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2105      	movs	r1, #5
 8001a86:	2006      	movs	r0, #6
 8001a88:	f000 fa3b 	bl	8001f02 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8001a8c:	e015      	b.n	8001aba <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001a8e:	2006      	movs	r0, #6
 8001a90:	f000 fa61 	bl	8001f56 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001a94:	2320      	movs	r3, #32
 8001a96:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a98:	2311      	movs	r3, #17
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <setup_DW1000RSTnIRQ+0x70>)
 8001aac:	f000 fa6e 	bl	8001f8c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <setup_DW1000RSTnIRQ+0x70>)
 8001ab6:	f000 fbd3 	bl	8002260 <HAL_GPIO_WritePin>
}
 8001aba:	bf00      	nop
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	48000400 	.word	0x48000400

08001ac8 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <port_set_dw1000_slowrate+0x14>)
 8001ace:	2220      	movs	r2, #32
 8001ad0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001ad2:	4802      	ldr	r0, [pc, #8]	; (8001adc <port_set_dw1000_slowrate+0x14>)
 8001ad4:	f001 fd5c 	bl	8003590 <HAL_SPI_Init>
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000174 	.word	0x20000174

08001ae0 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <port_set_dw1000_fastrate+0x14>)
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001aea:	4802      	ldr	r0, [pc, #8]	; (8001af4 <port_set_dw1000_fastrate+0x14>)
 8001aec:	f001 fd50 	bl	8003590 <HAL_SPI_Init>
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000174 	.word	0x20000174

08001af8 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001afc:	2017      	movs	r0, #23
 8001afe:	f7ff ff0f 	bl	8001920 <__NVIC_DisableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001b0a:	2017      	movs	r0, #23
 8001b0c:	f7ff feea 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001b18:	2017      	movs	r0, #23
 8001b1a:	f7ff ff5b 	bl	80019d4 <EXTI_GetITEnStatus>
 8001b1e:	4603      	mov	r3, r0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <stdio_init>:
 * @fn port_stdio_init
 * @brief Initialize stdio on the given UART
 *
 * @param[in] huart Pointer to the STM32 HAL UART peripheral instance
 */
void stdio_init(UART_HandleTypeDef* huart) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    uart = huart;
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <stdio_init+0x1c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	200000e4 	.word	0x200000e4

08001b44 <stdio_write>:
 *
 * @param[in] data Pointer to null terminated string
 * @return Number of bytes transmitted or -1 if an error occurred
 */
inline int stdio_write(const char *data)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(data);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7fe fb3f 	bl	80001d0 <strlen>
 8001b52:	4603      	mov	r3, r0
 8001b54:	81fb      	strh	r3, [r7, #14]
    if (HAL_UART_Transmit(uart, (uint8_t*) data, len, HAL_MAX_DELAY) == HAL_OK) {
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <stdio_write+0x38>)
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	89fa      	ldrh	r2, [r7, #14]
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	f002 f8e7 	bl	8003d34 <HAL_UART_Transmit>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <stdio_write+0x2c>
        return len;
 8001b6c:	89fb      	ldrh	r3, [r7, #14]
 8001b6e:	e001      	b.n	8001b74 <stdio_write+0x30>
    }
    return -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200000e4 	.word	0x200000e4

08001b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b84:	f7ff fdf4 	bl	8001770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8a:	490d      	ldr	r1, [pc, #52]	; (8001bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <LoopForever+0xe>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba0:	4c0a      	ldr	r4, [pc, #40]	; (8001bcc <LoopForever+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bae:	f002 fd15 	bl	80045dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bb2:	f7ff fb3d 	bl	8001230 <main>

08001bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb6:	e7fe      	b.n	8001bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001bc4:	08005058 	.word	0x08005058
  ldr r2, =_sbss
 8001bc8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001bcc:	200002b0 	.word	0x200002b0

08001bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_IRQHandler>

08001bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 f985 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 f80e 	bl	8001c04 <HAL_InitTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	71fb      	strb	r3, [r7, #7]
 8001bf2:	e001      	b.n	8001bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bf4:	f7ff fc9e 	bl	8001534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_InitTick+0x6c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_InitTick+0x70>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <HAL_InitTick+0x6c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f99f 	bl	8001f72 <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d809      	bhi.n	8001c54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 f95b 	bl	8001f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_InitTick+0x74>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e007      	b.n	8001c64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e004      	b.n	8001c64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e001      	b.n	8001c64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000024 	.word	0x20000024
 8001c74:	2000001c 	.word	0x2000001c
 8001c78:	20000020 	.word	0x20000020

08001c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x20>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000024 	.word	0x20000024
 8001ca0:	2000029c 	.word	0x2000029c

08001ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_GetTick+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	2000029c 	.word	0x2000029c

08001cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff ffee 	bl	8001ca4 <HAL_GetTick>
 8001cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d005      	beq.n	8001ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_Delay+0x44>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce2:	bf00      	nop
 8001ce4:	f7ff ffde 	bl	8001ca4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d8f7      	bhi.n	8001ce4 <HAL_Delay+0x28>
  {
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000024 	.word	0x20000024

08001d04 <__NVIC_SetPriorityGrouping>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_DisableIRQ>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db12      	blt.n	8001ddc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	490a      	ldr	r1, [pc, #40]	; (8001de8 <__NVIC_DisableIRQ+0x44>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	3320      	adds	r3, #32
 8001dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd0:	f3bf 8f4f 	dsb	sy
}
 8001dd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dd6:	f3bf 8f6f 	isb	sy
}
 8001dda:	bf00      	nop
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff05 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff1a 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff0d 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff1d 	bl	8001da4 <__NVIC_DisableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff94 	bl	8001ea8 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9a:	e148      	b.n	800222e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 813a 	beq.w	8002228 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d005      	beq.n	8001fcc <HAL_GPIO_Init+0x40>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d130      	bne.n	800202e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002002:	2201      	movs	r2, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 0201 	and.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b03      	cmp	r3, #3
 8002038:	d017      	beq.n	800206a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d123      	bne.n	80020be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	6939      	ldr	r1, [r7, #16]
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0203 	and.w	r2, r3, #3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8094 	beq.w	8002228 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002100:	4b52      	ldr	r3, [pc, #328]	; (800224c <HAL_GPIO_Init+0x2c0>)
 8002102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002104:	4a51      	ldr	r2, [pc, #324]	; (800224c <HAL_GPIO_Init+0x2c0>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6613      	str	r3, [r2, #96]	; 0x60
 800210c:	4b4f      	ldr	r3, [pc, #316]	; (800224c <HAL_GPIO_Init+0x2c0>)
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002118:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_GPIO_Init+0x2c4>)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002142:	d00d      	beq.n	8002160 <HAL_GPIO_Init+0x1d4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a43      	ldr	r2, [pc, #268]	; (8002254 <HAL_GPIO_Init+0x2c8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <HAL_GPIO_Init+0x1d0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a42      	ldr	r2, [pc, #264]	; (8002258 <HAL_GPIO_Init+0x2cc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_GPIO_Init+0x1cc>
 8002154:	2302      	movs	r3, #2
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x1d6>
 8002158:	2307      	movs	r3, #7
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x1d6>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x1d6>
 8002160:	2300      	movs	r3, #0
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002172:	4937      	ldr	r1, [pc, #220]	; (8002250 <HAL_GPIO_Init+0x2c4>)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002180:	4b36      	ldr	r3, [pc, #216]	; (800225c <HAL_GPIO_Init+0x2d0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a4:	4a2d      	ldr	r2, [pc, #180]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ce:	4a23      	ldr	r2, [pc, #140]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_GPIO_Init+0x2d0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_GPIO_Init+0x2d0>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	f47f aeaf 	bne.w	8001f9c <HAL_GPIO_Init+0x10>
  }
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40021000 	.word	0x40021000
 8002250:	40010000 	.word	0x40010000
 8002254:	48000400 	.word	0x48000400
 8002258:	48000800 	.word	0x48000800
 800225c:	40010400 	.word	0x40010400

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800227c:	e002      	b.n	8002284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007000 	.word	0x40007000

080022ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ba:	d130      	bne.n	800231e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c8:	d038      	beq.n	800233c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2232      	movs	r2, #50	; 0x32
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9b      	lsrs	r3, r3, #18
 80022ec:	3301      	adds	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f0:	e002      	b.n	80022f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002304:	d102      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f2      	bne.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002318:	d110      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e00f      	b.n	800233e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232a:	d007      	beq.n	800233c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002334:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40007000 	.word	0x40007000
 8002350:	2000001c 	.word	0x2000001c
 8002354:	431bde83 	.word	0x431bde83

08002358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e3fe      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4ba1      	ldr	r3, [pc, #644]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002374:	4b9e      	ldr	r3, [pc, #632]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80e4 	beq.w	8002554 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_RCC_OscConfig+0x4a>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	f040 808b 	bne.w	80024b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b01      	cmp	r3, #1
 800239e:	f040 8087 	bne.w	80024b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a2:	4b93      	ldr	r3, [pc, #588]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e3d6      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	4b8c      	ldr	r3, [pc, #560]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_RCC_OscConfig+0x7c>
 80023ca:	4b89      	ldr	r3, [pc, #548]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d2:	e005      	b.n	80023e0 <HAL_RCC_OscConfig+0x88>
 80023d4:	4b86      	ldr	r3, [pc, #536]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d223      	bcs.n	800242c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fd8b 	bl	8002f04 <RCC_SetFlashLatencyFromMSIRange>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e3b7      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f8:	4b7d      	ldr	r3, [pc, #500]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a7c      	ldr	r2, [pc, #496]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b7a      	ldr	r3, [pc, #488]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4977      	ldr	r1, [pc, #476]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002416:	4b76      	ldr	r3, [pc, #472]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	4972      	ldr	r1, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
 800242a:	e025      	b.n	8002478 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242c:	4b70      	ldr	r3, [pc, #448]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6f      	ldr	r2, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b6d      	ldr	r3, [pc, #436]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	496a      	ldr	r1, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244a:	4b69      	ldr	r3, [pc, #420]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	4965      	ldr	r1, [pc, #404]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fd4b 	bl	8002f04 <RCC_SetFlashLatencyFromMSIRange>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e377      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002478:	f000 fc80 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b5c      	ldr	r3, [pc, #368]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	495a      	ldr	r1, [pc, #360]	; (80025f4 <HAL_RCC_OscConfig+0x29c>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_RCC_OscConfig+0x2a0>)
 8002496:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002498:	4b58      	ldr	r3, [pc, #352]	; (80025fc <HAL_RCC_OscConfig+0x2a4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fbb1 	bl	8001c04 <HAL_InitTick>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d052      	beq.n	8002552 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	e35b      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d032      	beq.n	800251e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024b8:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a4c      	ldr	r2, [pc, #304]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c4:	f7ff fbee 	bl	8001ca4 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024cc:	f7ff fbea 	bl	8001ca4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e344      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024de:	4b44      	ldr	r3, [pc, #272]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a40      	ldr	r2, [pc, #256]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	493b      	ldr	r1, [pc, #236]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002508:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	4936      	ldr	r1, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
 800251c:	e01a      	b.n	8002554 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800251e:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a33      	ldr	r2, [pc, #204]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252a:	f7ff fbbb 	bl	8001ca4 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002532:	f7ff fbb7 	bl	8001ca4 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e311      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002544:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x1da>
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002552:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d074      	beq.n	800264a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b08      	cmp	r3, #8
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x21a>
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d10e      	bne.n	800258a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d10b      	bne.n	800258a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002572:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d064      	beq.n	8002648 <HAL_RCC_OscConfig+0x2f0>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d160      	bne.n	8002648 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e2ee      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x24a>
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e01d      	b.n	80025de <HAL_RCC_OscConfig+0x286>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x26e>
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	e00b      	b.n	80025de <HAL_RCC_OscConfig+0x286>
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01c      	beq.n	8002620 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7ff fb5d 	bl	8001ca4 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ec:	e011      	b.n	8002612 <HAL_RCC_OscConfig+0x2ba>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08004fcc 	.word	0x08004fcc
 80025f8:	2000001c 	.word	0x2000001c
 80025fc:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7ff fb50 	bl	8001ca4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e2aa      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	4baf      	ldr	r3, [pc, #700]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x2a8>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7ff fb40 	bl	8001ca4 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7ff fb3c 	bl	8001ca4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e296      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	4ba5      	ldr	r3, [pc, #660]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x2d0>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d060      	beq.n	8002718 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x310>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d119      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d116      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	4b99      	ldr	r3, [pc, #612]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x328>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e273      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b93      	ldr	r3, [pc, #588]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	4990      	ldr	r1, [pc, #576]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002694:	e040      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d023      	beq.n	80026e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269e:	4b8c      	ldr	r3, [pc, #560]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a8b      	ldr	r2, [pc, #556]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7ff fafb 	bl	8001ca4 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7ff faf7 	bl	8001ca4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e251      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c4:	4b82      	ldr	r3, [pc, #520]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	497c      	ldr	r1, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
 80026e4:	e018      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	4b7a      	ldr	r3, [pc, #488]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a79      	ldr	r2, [pc, #484]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7ff fad7 	bl	8001ca4 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7ff fad3 	bl	8001ca4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e22d      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270c:	4b70      	ldr	r3, [pc, #448]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d03c      	beq.n	800279e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01c      	beq.n	8002766 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272c:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002732:	4a67      	ldr	r2, [pc, #412]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7ff fab2 	bl	8001ca4 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff faae 	bl	8001ca4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e208      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002756:	4b5e      	ldr	r3, [pc, #376]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <HAL_RCC_OscConfig+0x3ec>
 8002764:	e01b      	b.n	800279e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002766:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7ff fa95 	bl	8001ca4 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277e:	f7ff fa91 	bl	8001ca4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1eb      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002790:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ef      	bne.n	800277e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80a6 	beq.w	80028f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027b0:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	4a43      	ldr	r2, [pc, #268]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	; 0x58
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d4:	2301      	movs	r3, #1
 80027d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d8:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCC_OscConfig+0x57c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d118      	bne.n	8002816 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCC_OscConfig+0x57c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a3a      	ldr	r2, [pc, #232]	; (80028d4 <HAL_RCC_OscConfig+0x57c>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f0:	f7ff fa58 	bl	8001ca4 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7ff fa54 	bl	8001ca4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e1ae      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_RCC_OscConfig+0x57c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <HAL_RCC_OscConfig+0x4d8>
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800282e:	e024      	b.n	800287a <HAL_RCC_OscConfig+0x522>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d110      	bne.n	800285a <HAL_RCC_OscConfig+0x502>
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002858:	e00f      	b.n	800287a <HAL_RCC_OscConfig+0x522>
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7ff fa0f 	bl	8001ca4 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7ff fa0b 	bl	8001ca4 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e163      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ed      	beq.n	800288a <HAL_RCC_OscConfig+0x532>
 80028ae:	e01a      	b.n	80028e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff f9f8 	bl	8001ca4 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b6:	e00f      	b.n	80028d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7ff f9f4 	bl	8001ca4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d906      	bls.n	80028d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e14c      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	4ba5      	ldr	r3, [pc, #660]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e8      	bne.n	80028b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	7ffb      	ldrb	r3, [r7, #31]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4ba0      	ldr	r3, [pc, #640]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	4a9f      	ldr	r2, [pc, #636]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d03c      	beq.n	800297e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01c      	beq.n	8002946 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800290c:	4b98      	ldr	r3, [pc, #608]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 800290e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002912:	4a97      	ldr	r2, [pc, #604]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff f9c2 	bl	8001ca4 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002924:	f7ff f9be 	bl	8001ca4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e118      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002936:	4b8e      	ldr	r3, [pc, #568]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ef      	beq.n	8002924 <HAL_RCC_OscConfig+0x5cc>
 8002944:	e01b      	b.n	800297e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002946:	4b8a      	ldr	r3, [pc, #552]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002948:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800294c:	4a88      	ldr	r2, [pc, #544]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7ff f9a5 	bl	8001ca4 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295e:	f7ff f9a1 	bl	8001ca4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0fb      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002970:	4b7f      	ldr	r3, [pc, #508]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ef      	bne.n	800295e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80ef 	beq.w	8002b66 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	2b02      	cmp	r3, #2
 800298e:	f040 80c5 	bne.w	8002b1c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002992:	4b77      	ldr	r3, [pc, #476]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d12c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	3b01      	subs	r3, #1
 80029b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d123      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d11b      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d113      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d109      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d067      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d062      	beq.n	8002acc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a06:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0a8      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a16:	4b56      	ldr	r3, [pc, #344]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a55      	ldr	r2, [pc, #340]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a22:	f7ff f93f 	bl	8001ca4 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7ff f93b 	bl	8001ca4 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e095      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3c:	4b4c      	ldr	r3, [pc, #304]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <HAL_RCC_OscConfig+0x81c>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a58:	3a01      	subs	r2, #1
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a62:	0212      	lsls	r2, r2, #8
 8002a64:	4311      	orrs	r1, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a6a:	0852      	lsrs	r2, r2, #1
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	0552      	lsls	r2, r2, #21
 8002a70:	4311      	orrs	r1, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a76:	0852      	lsrs	r2, r2, #1
 8002a78:	3a01      	subs	r2, #1
 8002a7a:	0652      	lsls	r2, r2, #25
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a82:	06d2      	lsls	r2, r2, #27
 8002a84:	430a      	orrs	r2, r1
 8002a86:	493a      	ldr	r1, [pc, #232]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a37      	ldr	r2, [pc, #220]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a98:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a34      	ldr	r2, [pc, #208]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa4:	f7ff f8fe 	bl	8001ca4 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7ff f8fa 	bl	8001ca4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e054      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aca:	e04c      	b.n	8002b66 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e04b      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d144      	bne.n	8002b66 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a23      	ldr	r2, [pc, #140]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a20      	ldr	r2, [pc, #128]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002af4:	f7ff f8d6 	bl	8001ca4 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7ff f8d2 	bl	8001ca4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e02c      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x7a4>
 8002b1a:	e024      	b.n	8002b66 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d01f      	beq.n	8002b62 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7ff f8b9 	bl	8001ca4 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7ff f8b5 	bl	8001ca4 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e00f      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4905      	ldr	r1, [pc, #20]	; (8002b70 <HAL_RCC_OscConfig+0x818>)
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
 8002b60:	e001      	b.n	8002b66 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	019d808c 	.word	0x019d808c
 8002b78:	feeefffc 	.word	0xfeeefffc

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0e7      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b75      	ldr	r3, [pc, #468]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d910      	bls.n	8002bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b72      	ldr	r3, [pc, #456]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 0207 	bic.w	r2, r3, #7
 8002ba6:	4970      	ldr	r1, [pc, #448]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b6e      	ldr	r3, [pc, #440]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0cf      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d010      	beq.n	8002bee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d908      	bls.n	8002bee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4960      	ldr	r1, [pc, #384]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d04c      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d121      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0a6      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d115      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e09a      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c32:	4b4e      	ldr	r3, [pc, #312]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e08e      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c42:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e086      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c52:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4943      	ldr	r1, [pc, #268]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c64:	f7ff f81e 	bl	8001ca4 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7ff f81a 	bl	8001ca4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e06e      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	4b3a      	ldr	r3, [pc, #232]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d208      	bcs.n	8002cc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	492b      	ldr	r1, [pc, #172]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d210      	bcs.n	8002cf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 0207 	bic.w	r2, r3, #7
 8002cd8:	4923      	ldr	r1, [pc, #140]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e036      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4918      	ldr	r1, [pc, #96]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4910      	ldr	r1, [pc, #64]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d30:	f000 f824 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	490b      	ldr	r1, [pc, #44]	; (8002d70 <HAL_RCC_ClockConfig+0x1f4>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4c:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1fc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe ff55 	bl	8001c04 <HAL_InitTick>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40022000 	.word	0x40022000
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	08004fcc 	.word	0x08004fcc
 8002d74:	2000001c 	.word	0x2000001c
 8002d78:	20000020 	.word	0x20000020

08002d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d94:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x34>
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d121      	bne.n	8002dee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d11e      	bne.n	8002dee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	e005      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dd8:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10d      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d102      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	e004      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d134      	bne.n	8002e74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d003      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0xac>
 8002e20:	e005      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e24:	617b      	str	r3, [r7, #20]
      break;
 8002e26:	e005      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e2a:	617b      	str	r3, [r7, #20]
      break;
 8002e2c:	e002      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	617b      	str	r3, [r7, #20]
      break;
 8002e32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	3301      	adds	r3, #1
 8002e40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	fb02 f203 	mul.w	r2, r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	0e5b      	lsrs	r3, r3, #25
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	3301      	adds	r3, #1
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e74:	69bb      	ldr	r3, [r7, #24]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3724      	adds	r7, #36	; 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	08004fe4 	.word	0x08004fe4
 8002e8c:	00f42400 	.word	0x00f42400
 8002e90:	007a1200 	.word	0x007a1200

08002e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	2000001c 	.word	0x2000001c

08002eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eb0:	f7ff fff0 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	08004fdc 	.word	0x08004fdc

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002edc:	f7ff ffda 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0adb      	lsrs	r3, r3, #11
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4904      	ldr	r1, [pc, #16]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08004fdc 	.word	0x08004fdc

08002f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f10:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f1c:	f7ff f9b8 	bl	8002290 <HAL_PWREx_GetVoltageRange>
 8002f20:	6178      	str	r0, [r7, #20]
 8002f22:	e014      	b.n	8002f4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f30:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f3c:	f7ff f9a8 	bl	8002290 <HAL_PWREx_GetVoltageRange>
 8002f40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f54:	d10b      	bne.n	8002f6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d919      	bls.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f60:	d902      	bls.n	8002f68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f62:	2302      	movs	r3, #2
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e013      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f68:	2301      	movs	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e010      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d902      	bls.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f74:	2303      	movs	r3, #3
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	e00a      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d102      	bne.n	8002f86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f80:	2302      	movs	r3, #2
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e004      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b70      	cmp	r3, #112	; 0x70
 8002f8a:	d101      	bne.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 0207 	bic.w	r2, r3, #7
 8002f98:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d001      	beq.n	8002fb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40022000 	.word	0x40022000

08002fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fcc:	2300      	movs	r3, #0
 8002fce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d031      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe8:	d01a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002fea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fee:	d814      	bhi.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ff4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff8:	d10f      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ffa:	4bac      	ldr	r3, [pc, #688]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4aab      	ldr	r2, [pc, #684]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003006:	e00c      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	2100      	movs	r1, #0
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f9cc 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003018:	e003      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	74fb      	strb	r3, [r7, #19]
      break;
 800301e:	e000      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003028:	4ba0      	ldr	r3, [pc, #640]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	499d      	ldr	r1, [pc, #628]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800303e:	e001      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8099 	beq.w	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003056:	4b95      	ldr	r3, [pc, #596]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003066:	2300      	movs	r3, #0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306c:	4b8f      	ldr	r3, [pc, #572]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	4a8e      	ldr	r2, [pc, #568]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003076:	6593      	str	r3, [r2, #88]	; 0x58
 8003078:	4b8c      	ldr	r3, [pc, #560]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003084:	2301      	movs	r3, #1
 8003086:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003088:	4b89      	ldr	r3, [pc, #548]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a88      	ldr	r2, [pc, #544]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800308e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003092:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003094:	f7fe fe06 	bl	8001ca4 <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800309a:	e009      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309c:	f7fe fe02 	bl	8001ca4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d902      	bls.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	74fb      	strb	r3, [r7, #19]
        break;
 80030ae:	e005      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b0:	4b7f      	ldr	r3, [pc, #508]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ef      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d155      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030c2:	4b7a      	ldr	r3, [pc, #488]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01e      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d019      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030de:	4b73      	ldr	r3, [pc, #460]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ea:	4b70      	ldr	r3, [pc, #448]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030fa:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	4a6a      	ldr	r2, [pc, #424]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800310a:	4a68      	ldr	r2, [pc, #416]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d016      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe fdc2 	bl	8001ca4 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003122:	e00b      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7fe fdbe 	bl	8001ca4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d902      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	74fb      	strb	r3, [r7, #19]
            break;
 800313a:	e006      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313c:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ec      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003150:	4b56      	ldr	r3, [pc, #344]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315e:	4953      	ldr	r1, [pc, #332]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003166:	e004      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
 800316c:	e001      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316e:	7cfb      	ldrb	r3, [r7, #19]
 8003170:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003172:	7c7b      	ldrb	r3, [r7, #17]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	4a4b      	ldr	r2, [pc, #300]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800317e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003182:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003190:	4b46      	ldr	r3, [pc, #280]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f023 0203 	bic.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4943      	ldr	r1, [pc, #268]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f023 020c 	bic.w	r2, r3, #12
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	493a      	ldr	r1, [pc, #232]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031d4:	4b35      	ldr	r3, [pc, #212]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	4932      	ldr	r1, [pc, #200]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	4929      	ldr	r1, [pc, #164]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	4921      	ldr	r1, [pc, #132]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	4918      	ldr	r1, [pc, #96]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4910      	ldr	r1, [pc, #64]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02c      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	4907      	ldr	r1, [pc, #28]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800329c:	d10a      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800329e:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	4a02      	ldr	r2, [pc, #8]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a8:	60d3      	str	r3, [r2, #12]
 80032aa:	e015      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f871 	bl	80033ac <RCCEx_PLLSAI1_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d028      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032e4:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	492d      	ldr	r1, [pc, #180]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003302:	d106      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800330e:	60d3      	str	r3, [r2, #12]
 8003310:	e011      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800331a:	d10c      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	2101      	movs	r1, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f842 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800332c:	7cfb      	ldrb	r3, [r7, #19]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01c      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003350:	4915      	ldr	r1, [pc, #84]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f81f 	bl	80033ac <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003388:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	4904      	ldr	r1, [pc, #16]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800339e:	7cbb      	ldrb	r3, [r7, #18]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000

080033ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ba:	4b74      	ldr	r3, [pc, #464]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d018      	beq.n	80033f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033c6:	4b71      	ldr	r3, [pc, #452]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10d      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
       ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033de:	4b6b      	ldr	r3, [pc, #428]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
       ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d047      	beq.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e044      	b.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d018      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x86>
 8003400:	2b03      	cmp	r3, #3
 8003402:	d825      	bhi.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d002      	beq.n	800340e <RCCEx_PLLSAI1_Config+0x62>
 8003408:	2b02      	cmp	r3, #2
 800340a:	d009      	beq.n	8003420 <RCCEx_PLLSAI1_Config+0x74>
 800340c:	e020      	b.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800340e:	4b5f      	ldr	r3, [pc, #380]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11d      	bne.n	8003456 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341e:	e01a      	b.n	8003456 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003420:	4b5a      	ldr	r3, [pc, #360]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d116      	bne.n	800345a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e013      	b.n	800345a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003432:	4b56      	ldr	r3, [pc, #344]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800343e:	4b53      	ldr	r3, [pc, #332]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800344e:	e006      	b.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e004      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003456:	bf00      	nop
 8003458:	e002      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003466:	4b49      	ldr	r3, [pc, #292]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	430b      	orrs	r3, r1
 800347c:	4943      	ldr	r1, [pc, #268]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d17c      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003488:	4b40      	ldr	r3, [pc, #256]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3f      	ldr	r2, [pc, #252]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800348e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fe fc06 	bl	8001ca4 <HAL_GetTick>
 8003498:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800349a:	e009      	b.n	80034b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800349c:	f7fe fc02 	bl	8001ca4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	73fb      	strb	r3, [r7, #15]
        break;
 80034ae:	e005      	b.n	80034bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b0:	4b36      	ldr	r3, [pc, #216]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ef      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d15f      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d110      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c8:	4b30      	ldr	r3, [pc, #192]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80034d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6892      	ldr	r2, [r2, #8]
 80034d8:	0211      	lsls	r1, r2, #8
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68d2      	ldr	r2, [r2, #12]
 80034de:	06d2      	lsls	r2, r2, #27
 80034e0:	430a      	orrs	r2, r1
 80034e2:	492a      	ldr	r1, [pc, #168]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	610b      	str	r3, [r1, #16]
 80034e8:	e027      	b.n	800353a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d112      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034f0:	4b26      	ldr	r3, [pc, #152]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6892      	ldr	r2, [r2, #8]
 8003500:	0211      	lsls	r1, r2, #8
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6912      	ldr	r2, [r2, #16]
 8003506:	0852      	lsrs	r2, r2, #1
 8003508:	3a01      	subs	r2, #1
 800350a:	0552      	lsls	r2, r2, #21
 800350c:	430a      	orrs	r2, r1
 800350e:	491f      	ldr	r1, [pc, #124]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	610b      	str	r3, [r1, #16]
 8003514:	e011      	b.n	800353a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800351e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6892      	ldr	r2, [r2, #8]
 8003526:	0211      	lsls	r1, r2, #8
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6952      	ldr	r2, [r2, #20]
 800352c:	0852      	lsrs	r2, r2, #1
 800352e:	3a01      	subs	r2, #1
 8003530:	0652      	lsls	r2, r2, #25
 8003532:	430a      	orrs	r2, r1
 8003534:	4915      	ldr	r1, [pc, #84]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a13      	ldr	r2, [pc, #76]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003544:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe fbad 	bl	8001ca4 <HAL_GetTick>
 800354a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800354c:	e009      	b.n	8003562 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800354e:	f7fe fba9 	bl	8001ca4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d902      	bls.n	8003562 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	73fb      	strb	r3, [r7, #15]
          break;
 8003560:	e005      	b.n	800356e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ef      	beq.n	800354e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	4903      	ldr	r1, [pc, #12]	; (800358c <RCCEx_PLLSAI1_Config+0x1e0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000

08003590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e095      	b.n	80036ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d108      	bne.n	80035bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b2:	d009      	beq.n	80035c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	61da      	str	r2, [r3, #28]
 80035ba:	e005      	b.n	80035c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd ffca 	bl	800157c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003608:	d902      	bls.n	8003610 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e002      	b.n	8003616 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003614:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800361e:	d007      	beq.n	8003630 <HAL_SPI_Init+0xa0>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	ea42 0103 	orr.w	r1, r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	f003 0204 	and.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036ac:	ea42 0103 	orr.w	r1, r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b088      	sub	sp, #32
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_SPI_Transmit+0x22>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e158      	b.n	80039aa <HAL_SPI_Transmit+0x2d4>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003700:	f7fe fad0 	bl	8001ca4 <HAL_GetTick>
 8003704:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d002      	beq.n	800371c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003716:	2302      	movs	r3, #2
 8003718:	77fb      	strb	r3, [r7, #31]
    goto error;
 800371a:	e13d      	b.n	8003998 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Transmit+0x52>
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800372c:	e134      	b.n	8003998 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2203      	movs	r2, #3
 8003732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	88fa      	ldrh	r2, [r7, #6]
 8003746:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003778:	d10f      	bne.n	800379a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003798:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d007      	beq.n	80037b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037c0:	d94b      	bls.n	800385a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_SPI_Transmit+0xfa>
 80037ca:	8afb      	ldrh	r3, [r7, #22]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d13e      	bne.n	800384e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037f4:	e02b      	b.n	800384e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d112      	bne.n	800382a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003828:	e011      	b.n	800384e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800382a:	f7fe fa3b 	bl	8001ca4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d803      	bhi.n	8003842 <HAL_SPI_Transmit+0x16c>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d102      	bne.n	8003848 <HAL_SPI_Transmit+0x172>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800384c:	e0a4      	b.n	8003998 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ce      	bne.n	80037f6 <HAL_SPI_Transmit+0x120>
 8003858:	e07c      	b.n	8003954 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_SPI_Transmit+0x192>
 8003862:	8afb      	ldrh	r3, [r7, #22]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d170      	bne.n	800394a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d912      	bls.n	8003898 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	881a      	ldrh	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	1c9a      	adds	r2, r3, #2
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b02      	subs	r3, #2
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003896:	e058      	b.n	800394a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038be:	e044      	b.n	800394a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d12b      	bne.n	8003926 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d912      	bls.n	80038fe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	881a      	ldrh	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	1c9a      	adds	r2, r3, #2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b02      	subs	r3, #2
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038fc:	e025      	b.n	800394a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003924:	e011      	b.n	800394a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003926:	f7fe f9bd 	bl	8001ca4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d803      	bhi.n	800393e <HAL_SPI_Transmit+0x268>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d102      	bne.n	8003944 <HAL_SPI_Transmit+0x26e>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003948:	e026      	b.n	8003998 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1b5      	bne.n	80038c0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	6839      	ldr	r1, [r7, #0]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f957 	bl	8003c0c <SPI_EndRxTxTransaction>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e000      	b.n	8003998 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003996:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039c0:	b2db      	uxtb	r3, r3
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039e0:	f7fe f960 	bl	8001ca4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039f0:	f7fe f958 	bl	8001ca4 <HAL_GetTick>
 80039f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039f6:	4b39      	ldr	r3, [pc, #228]	; (8003adc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	0d1b      	lsrs	r3, r3, #20
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a06:	e054      	b.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d050      	beq.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a10:	f7fe f948 	bl	8001ca4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d902      	bls.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d13d      	bne.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3e:	d111      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a48:	d004      	beq.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a52:	d107      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6c:	d10f      	bne.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e017      	b.n	8003ad2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d19b      	bne.n	8003a08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	2000001c 	.word	0x2000001c

08003ae0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003af2:	f7fe f8d7 	bl	8001ca4 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b02:	f7fe f8cf 	bl	8001ca4 <HAL_GetTick>
 8003b06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b10:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00da      	lsls	r2, r3, #3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	0d1b      	lsrs	r3, r3, #20
 8003b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b28:	e060      	b.n	8003bec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b30:	d107      	bne.n	8003b42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d050      	beq.n	8003bec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b4a:	f7fe f8ab 	bl	8001ca4 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d902      	bls.n	8003b60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d13d      	bne.n	8003bdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b78:	d111      	bne.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	d004      	beq.n	8003b8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	d107      	bne.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba6:	d10f      	bne.n	8003bc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e010      	b.n	8003bfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d196      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3728      	adds	r7, #40	; 0x28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2000001c 	.word	0x2000001c

08003c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff ff5b 	bl	8003ae0 <SPI_WaitFifoStateUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e027      	b.n	8003c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff fec0 	bl	80039d0 <SPI_WaitFlagStateUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e014      	b.n	8003c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff ff34 	bl	8003ae0 <SPI_WaitFifoStateUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c82:	f043 0220 	orr.w	r2, r3, #32
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e000      	b.n	8003c90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e040      	b.n	8003d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fca0 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8c0 	bl	8003e5c <UART_SetConfig>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e022      	b.n	8003d2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fabe 	bl	8004270 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fb45 	bl	80043b4 <UART_CheckIdleState>
 8003d2a:	4603      	mov	r3, r0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	f040 8082 	bne.w	8003e52 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_UART_Transmit+0x26>
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07a      	b.n	8003e54 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Transmit+0x38>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e073      	b.n	8003e54 <HAL_UART_Transmit+0x120>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2221      	movs	r2, #33	; 0x21
 8003d80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d82:	f7fd ff8f 	bl	8001ca4 <HAL_GetTick>
 8003d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d108      	bne.n	8003db4 <HAL_UART_Transmit+0x80>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e003      	b.n	8003dbc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003dc4:	e02d      	b.n	8003e22 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fb38 	bl	8004446 <UART_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e039      	b.n	8003e54 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df2:	b292      	uxth	r2, r2
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	3302      	adds	r3, #2
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	e008      	b.n	8003e10 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	b292      	uxth	r2, r2
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1cb      	bne.n	8003dc6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2140      	movs	r1, #64	; 0x40
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fb04 	bl	8004446 <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e005      	b.n	8003e54 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	b5b0      	push	{r4, r5, r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4baf      	ldr	r3, [pc, #700]	; (8004144 <UART_SetConfig+0x2e8>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	69f9      	ldr	r1, [r7, #28]
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4aa4      	ldr	r2, [pc, #656]	; (8004148 <UART_SetConfig+0x2ec>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a9b      	ldr	r2, [pc, #620]	; (800414c <UART_SetConfig+0x2f0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d121      	bne.n	8003f26 <UART_SetConfig+0xca>
 8003ee2:	4b9b      	ldr	r3, [pc, #620]	; (8004150 <UART_SetConfig+0x2f4>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d817      	bhi.n	8003f20 <UART_SetConfig+0xc4>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x9c>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f15 	.word	0x08003f15
 8003f00:	08003f0f 	.word	0x08003f0f
 8003f04:	08003f1b 	.word	0x08003f1b
 8003f08:	2301      	movs	r3, #1
 8003f0a:	76fb      	strb	r3, [r7, #27]
 8003f0c:	e070      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	76fb      	strb	r3, [r7, #27]
 8003f12:	e06d      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f14:	2304      	movs	r3, #4
 8003f16:	76fb      	strb	r3, [r7, #27]
 8003f18:	e06a      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	76fb      	strb	r3, [r7, #27]
 8003f1e:	e067      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f20:	2310      	movs	r3, #16
 8003f22:	76fb      	strb	r3, [r7, #27]
 8003f24:	e064      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a8a      	ldr	r2, [pc, #552]	; (8004154 <UART_SetConfig+0x2f8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d132      	bne.n	8003f96 <UART_SetConfig+0x13a>
 8003f30:	4b87      	ldr	r3, [pc, #540]	; (8004150 <UART_SetConfig+0x2f4>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d828      	bhi.n	8003f90 <UART_SetConfig+0x134>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <UART_SetConfig+0xe8>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f79 	.word	0x08003f79
 8003f48:	08003f91 	.word	0x08003f91
 8003f4c:	08003f91 	.word	0x08003f91
 8003f50:	08003f91 	.word	0x08003f91
 8003f54:	08003f85 	.word	0x08003f85
 8003f58:	08003f91 	.word	0x08003f91
 8003f5c:	08003f91 	.word	0x08003f91
 8003f60:	08003f91 	.word	0x08003f91
 8003f64:	08003f7f 	.word	0x08003f7f
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003f91 	.word	0x08003f91
 8003f74:	08003f8b 	.word	0x08003f8b
 8003f78:	2300      	movs	r3, #0
 8003f7a:	76fb      	strb	r3, [r7, #27]
 8003f7c:	e038      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	76fb      	strb	r3, [r7, #27]
 8003f82:	e035      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f84:	2304      	movs	r3, #4
 8003f86:	76fb      	strb	r3, [r7, #27]
 8003f88:	e032      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	76fb      	strb	r3, [r7, #27]
 8003f8e:	e02f      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f90:	2310      	movs	r3, #16
 8003f92:	76fb      	strb	r3, [r7, #27]
 8003f94:	e02c      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6b      	ldr	r2, [pc, #428]	; (8004148 <UART_SetConfig+0x2ec>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d125      	bne.n	8003fec <UART_SetConfig+0x190>
 8003fa0:	4b6b      	ldr	r3, [pc, #428]	; (8004150 <UART_SetConfig+0x2f4>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fae:	d017      	beq.n	8003fe0 <UART_SetConfig+0x184>
 8003fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fb4:	d817      	bhi.n	8003fe6 <UART_SetConfig+0x18a>
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d00b      	beq.n	8003fd4 <UART_SetConfig+0x178>
 8003fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc0:	d811      	bhi.n	8003fe6 <UART_SetConfig+0x18a>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <UART_SetConfig+0x172>
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d006      	beq.n	8003fda <UART_SetConfig+0x17e>
 8003fcc:	e00b      	b.n	8003fe6 <UART_SetConfig+0x18a>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	76fb      	strb	r3, [r7, #27]
 8003fd2:	e00d      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	e00a      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003fda:	2304      	movs	r3, #4
 8003fdc:	76fb      	strb	r3, [r7, #27]
 8003fde:	e007      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	e004      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003fe6:	2310      	movs	r3, #16
 8003fe8:	76fb      	strb	r3, [r7, #27]
 8003fea:	e001      	b.n	8003ff0 <UART_SetConfig+0x194>
 8003fec:	2310      	movs	r3, #16
 8003fee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a54      	ldr	r2, [pc, #336]	; (8004148 <UART_SetConfig+0x2ec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d173      	bne.n	80040e2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ffa:	7efb      	ldrb	r3, [r7, #27]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d824      	bhi.n	800404a <UART_SetConfig+0x1ee>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <UART_SetConfig+0x1ac>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	0800402d 	.word	0x0800402d
 800400c:	0800404b 	.word	0x0800404b
 8004010:	08004035 	.word	0x08004035
 8004014:	0800404b 	.word	0x0800404b
 8004018:	0800403b 	.word	0x0800403b
 800401c:	0800404b 	.word	0x0800404b
 8004020:	0800404b 	.word	0x0800404b
 8004024:	0800404b 	.word	0x0800404b
 8004028:	08004043 	.word	0x08004043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7fe ff3e 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 8004030:	6178      	str	r0, [r7, #20]
        break;
 8004032:	e00f      	b.n	8004054 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004034:	4b48      	ldr	r3, [pc, #288]	; (8004158 <UART_SetConfig+0x2fc>)
 8004036:	617b      	str	r3, [r7, #20]
        break;
 8004038:	e00c      	b.n	8004054 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7fe fe9f 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 800403e:	6178      	str	r0, [r7, #20]
        break;
 8004040:	e008      	b.n	8004054 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	617b      	str	r3, [r7, #20]
        break;
 8004048:	e004      	b.n	8004054 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	76bb      	strb	r3, [r7, #26]
        break;
 8004052:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80fc 	beq.w	8004254 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	429a      	cmp	r2, r3
 800406a:	d305      	bcc.n	8004078 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d902      	bls.n	800407e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	76bb      	strb	r3, [r7, #26]
 800407c:	e0ea      	b.n	8004254 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	4618      	mov	r0, r3
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	020b      	lsls	r3, r1, #8
 8004090:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004094:	0202      	lsls	r2, r0, #8
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	6849      	ldr	r1, [r1, #4]
 800409a:	0849      	lsrs	r1, r1, #1
 800409c:	4608      	mov	r0, r1
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	1814      	adds	r4, r2, r0
 80040a4:	eb43 0501 	adc.w	r5, r3, r1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	461a      	mov	r2, r3
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	4620      	mov	r0, r4
 80040b4:	4629      	mov	r1, r5
 80040b6:	f7fc f8e3 	bl	8000280 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4613      	mov	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c8:	d308      	bcc.n	80040dc <UART_SetConfig+0x280>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d0:	d204      	bcs.n	80040dc <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	e0bb      	b.n	8004254 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	76bb      	strb	r3, [r7, #26]
 80040e0:	e0b8      	b.n	8004254 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d167      	bne.n	80041bc <UART_SetConfig+0x360>
  {
    switch (clocksource)
 80040ec:	7efb      	ldrb	r3, [r7, #27]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d834      	bhi.n	800415c <UART_SetConfig+0x300>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0x29c>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800412d 	.word	0x0800412d
 8004104:	0800415d 	.word	0x0800415d
 8004108:	08004133 	.word	0x08004133
 800410c:	0800415d 	.word	0x0800415d
 8004110:	0800415d 	.word	0x0800415d
 8004114:	0800415d 	.word	0x0800415d
 8004118:	0800413b 	.word	0x0800413b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7fe fec6 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 8004120:	6178      	str	r0, [r7, #20]
        break;
 8004122:	e020      	b.n	8004166 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7fe fed8 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8004128:	6178      	str	r0, [r7, #20]
        break;
 800412a:	e01c      	b.n	8004166 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <UART_SetConfig+0x2fc>)
 800412e:	617b      	str	r3, [r7, #20]
        break;
 8004130:	e019      	b.n	8004166 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7fe fe23 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8004136:	6178      	str	r0, [r7, #20]
        break;
 8004138:	e015      	b.n	8004166 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413e:	617b      	str	r3, [r7, #20]
        break;
 8004140:	e011      	b.n	8004166 <UART_SetConfig+0x30a>
 8004142:	bf00      	nop
 8004144:	efff69f3 	.word	0xefff69f3
 8004148:	40008000 	.word	0x40008000
 800414c:	40013800 	.word	0x40013800
 8004150:	40021000 	.word	0x40021000
 8004154:	40004400 	.word	0x40004400
 8004158:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	76bb      	strb	r3, [r7, #26]
        break;
 8004164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d073      	beq.n	8004254 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	005a      	lsls	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	441a      	add	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b0f      	cmp	r3, #15
 8004186:	d916      	bls.n	80041b6 <UART_SetConfig+0x35a>
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418e:	d212      	bcs.n	80041b6 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f023 030f 	bic.w	r3, r3, #15
 8004198:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	89fb      	ldrh	r3, [r7, #14]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	89fa      	ldrh	r2, [r7, #14]
 80041b2:	60da      	str	r2, [r3, #12]
 80041b4:	e04e      	b.n	8004254 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	76bb      	strb	r3, [r7, #26]
 80041ba:	e04b      	b.n	8004254 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041bc:	7efb      	ldrb	r3, [r7, #27]
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d827      	bhi.n	8004212 <UART_SetConfig+0x3b6>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <UART_SetConfig+0x36c>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	08004213 	.word	0x08004213
 80041d8:	08004203 	.word	0x08004203
 80041dc:	08004213 	.word	0x08004213
 80041e0:	08004213 	.word	0x08004213
 80041e4:	08004213 	.word	0x08004213
 80041e8:	0800420b 	.word	0x0800420b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe fe5e 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 80041f0:	6178      	str	r0, [r7, #20]
        break;
 80041f2:	e013      	b.n	800421c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f4:	f7fe fe70 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 80041f8:	6178      	str	r0, [r7, #20]
        break;
 80041fa:	e00f      	b.n	800421c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041fc:	4b1b      	ldr	r3, [pc, #108]	; (800426c <UART_SetConfig+0x410>)
 80041fe:	617b      	str	r3, [r7, #20]
        break;
 8004200:	e00c      	b.n	800421c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004202:	f7fe fdbb 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8004206:	6178      	str	r0, [r7, #20]
        break;
 8004208:	e008      	b.n	800421c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420e:	617b      	str	r3, [r7, #20]
        break;
 8004210:	e004      	b.n	800421c <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	76bb      	strb	r3, [r7, #26]
        break;
 800421a:	bf00      	nop
    }

    if (pclk != 0U)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d018      	beq.n	8004254 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	085a      	lsrs	r2, r3, #1
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	441a      	add	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b0f      	cmp	r3, #15
 800423a:	d909      	bls.n	8004250 <UART_SetConfig+0x3f4>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004242:	d205      	bcs.n	8004250 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	e001      	b.n	8004254 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004260:	7ebb      	ldrb	r3, [r7, #26]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bdb0      	pop	{r4, r5, r7, pc}
 800426a:	bf00      	nop
 800426c:	00f42400 	.word	0x00f42400

08004270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01a      	beq.n	8004386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436e:	d10a      	bne.n	8004386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c4:	f7fd fc6e 	bl	8001ca4 <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d10e      	bne.n	80043f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f82d 	bl	8004446 <UART_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e023      	b.n	800443e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b04      	cmp	r3, #4
 8004402:	d10e      	bne.n	8004422 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f817 	bl	8004446 <UART_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e00d      	b.n	800443e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b09c      	sub	sp, #112	; 0x70
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	e0a5      	b.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	f000 80a1 	beq.w	80045a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fd fc1f 	bl	8001ca4 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <UART_WaitOnFlagUntilTimeout+0x32>
 8004472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004474:	2b00      	cmp	r3, #0
 8004476:	d13e      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004488:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800448c:	667b      	str	r3, [r7, #100]	; 0x64
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004498:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800449c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e6      	bne.n	8004478 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3308      	adds	r3, #8
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	663b      	str	r3, [r7, #96]	; 0x60
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3308      	adds	r3, #8
 80044c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80044cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e5      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e067      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d04f      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004512:	d147      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800451c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
 800453e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e6      	bne.n	800451e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	613b      	str	r3, [r7, #16]
   return(result);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	66bb      	str	r3, [r7, #104]	; 0x68
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004570:	623a      	str	r2, [r7, #32]
 8004572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	69f9      	ldr	r1, [r7, #28]
 8004576:	6a3a      	ldr	r2, [r7, #32]
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	61bb      	str	r3, [r7, #24]
   return(result);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e5      	bne.n	8004550 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e010      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	429a      	cmp	r2, r3
 80045c0:	f43f af4a 	beq.w	8004458 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3770      	adds	r7, #112	; 0x70
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <__errno>:
 80045d0:	4b01      	ldr	r3, [pc, #4]	; (80045d8 <__errno+0x8>)
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000028 	.word	0x20000028

080045dc <__libc_init_array>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	4d0d      	ldr	r5, [pc, #52]	; (8004614 <__libc_init_array+0x38>)
 80045e0:	4c0d      	ldr	r4, [pc, #52]	; (8004618 <__libc_init_array+0x3c>)
 80045e2:	1b64      	subs	r4, r4, r5
 80045e4:	10a4      	asrs	r4, r4, #2
 80045e6:	2600      	movs	r6, #0
 80045e8:	42a6      	cmp	r6, r4
 80045ea:	d109      	bne.n	8004600 <__libc_init_array+0x24>
 80045ec:	4d0b      	ldr	r5, [pc, #44]	; (800461c <__libc_init_array+0x40>)
 80045ee:	4c0c      	ldr	r4, [pc, #48]	; (8004620 <__libc_init_array+0x44>)
 80045f0:	f000 fc4e 	bl	8004e90 <_init>
 80045f4:	1b64      	subs	r4, r4, r5
 80045f6:	10a4      	asrs	r4, r4, #2
 80045f8:	2600      	movs	r6, #0
 80045fa:	42a6      	cmp	r6, r4
 80045fc:	d105      	bne.n	800460a <__libc_init_array+0x2e>
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	f855 3b04 	ldr.w	r3, [r5], #4
 8004604:	4798      	blx	r3
 8004606:	3601      	adds	r6, #1
 8004608:	e7ee      	b.n	80045e8 <__libc_init_array+0xc>
 800460a:	f855 3b04 	ldr.w	r3, [r5], #4
 800460e:	4798      	blx	r3
 8004610:	3601      	adds	r6, #1
 8004612:	e7f2      	b.n	80045fa <__libc_init_array+0x1e>
 8004614:	08005050 	.word	0x08005050
 8004618:	08005050 	.word	0x08005050
 800461c:	08005050 	.word	0x08005050
 8004620:	08005054 	.word	0x08005054

08004624 <memset>:
 8004624:	4402      	add	r2, r0
 8004626:	4603      	mov	r3, r0
 8004628:	4293      	cmp	r3, r2
 800462a:	d100      	bne.n	800462e <memset+0xa>
 800462c:	4770      	bx	lr
 800462e:	f803 1b01 	strb.w	r1, [r3], #1
 8004632:	e7f9      	b.n	8004628 <memset+0x4>

08004634 <siprintf>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	b500      	push	{lr}
 8004638:	b09c      	sub	sp, #112	; 0x70
 800463a:	ab1d      	add	r3, sp, #116	; 0x74
 800463c:	9002      	str	r0, [sp, #8]
 800463e:	9006      	str	r0, [sp, #24]
 8004640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004644:	4809      	ldr	r0, [pc, #36]	; (800466c <siprintf+0x38>)
 8004646:	9107      	str	r1, [sp, #28]
 8004648:	9104      	str	r1, [sp, #16]
 800464a:	4909      	ldr	r1, [pc, #36]	; (8004670 <siprintf+0x3c>)
 800464c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	a902      	add	r1, sp, #8
 8004658:	f000 f868 	bl	800472c <_svfiprintf_r>
 800465c:	9b02      	ldr	r3, [sp, #8]
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	b01c      	add	sp, #112	; 0x70
 8004664:	f85d eb04 	ldr.w	lr, [sp], #4
 8004668:	b003      	add	sp, #12
 800466a:	4770      	bx	lr
 800466c:	20000028 	.word	0x20000028
 8004670:	ffff0208 	.word	0xffff0208

08004674 <__ssputs_r>:
 8004674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	688e      	ldr	r6, [r1, #8]
 800467a:	429e      	cmp	r6, r3
 800467c:	4682      	mov	sl, r0
 800467e:	460c      	mov	r4, r1
 8004680:	4690      	mov	r8, r2
 8004682:	461f      	mov	r7, r3
 8004684:	d838      	bhi.n	80046f8 <__ssputs_r+0x84>
 8004686:	898a      	ldrh	r2, [r1, #12]
 8004688:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800468c:	d032      	beq.n	80046f4 <__ssputs_r+0x80>
 800468e:	6825      	ldr	r5, [r4, #0]
 8004690:	6909      	ldr	r1, [r1, #16]
 8004692:	eba5 0901 	sub.w	r9, r5, r1
 8004696:	6965      	ldr	r5, [r4, #20]
 8004698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800469c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046a0:	3301      	adds	r3, #1
 80046a2:	444b      	add	r3, r9
 80046a4:	106d      	asrs	r5, r5, #1
 80046a6:	429d      	cmp	r5, r3
 80046a8:	bf38      	it	cc
 80046aa:	461d      	movcc	r5, r3
 80046ac:	0553      	lsls	r3, r2, #21
 80046ae:	d531      	bpl.n	8004714 <__ssputs_r+0xa0>
 80046b0:	4629      	mov	r1, r5
 80046b2:	f000 fb47 	bl	8004d44 <_malloc_r>
 80046b6:	4606      	mov	r6, r0
 80046b8:	b950      	cbnz	r0, 80046d0 <__ssputs_r+0x5c>
 80046ba:	230c      	movs	r3, #12
 80046bc:	f8ca 3000 	str.w	r3, [sl]
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d0:	6921      	ldr	r1, [r4, #16]
 80046d2:	464a      	mov	r2, r9
 80046d4:	f000 fabe 	bl	8004c54 <memcpy>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	6126      	str	r6, [r4, #16]
 80046e6:	6165      	str	r5, [r4, #20]
 80046e8:	444e      	add	r6, r9
 80046ea:	eba5 0509 	sub.w	r5, r5, r9
 80046ee:	6026      	str	r6, [r4, #0]
 80046f0:	60a5      	str	r5, [r4, #8]
 80046f2:	463e      	mov	r6, r7
 80046f4:	42be      	cmp	r6, r7
 80046f6:	d900      	bls.n	80046fa <__ssputs_r+0x86>
 80046f8:	463e      	mov	r6, r7
 80046fa:	4632      	mov	r2, r6
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	4641      	mov	r1, r8
 8004700:	f000 fab6 	bl	8004c70 <memmove>
 8004704:	68a3      	ldr	r3, [r4, #8]
 8004706:	6822      	ldr	r2, [r4, #0]
 8004708:	1b9b      	subs	r3, r3, r6
 800470a:	4432      	add	r2, r6
 800470c:	60a3      	str	r3, [r4, #8]
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	2000      	movs	r0, #0
 8004712:	e7db      	b.n	80046cc <__ssputs_r+0x58>
 8004714:	462a      	mov	r2, r5
 8004716:	f000 fb6f 	bl	8004df8 <_realloc_r>
 800471a:	4606      	mov	r6, r0
 800471c:	2800      	cmp	r0, #0
 800471e:	d1e1      	bne.n	80046e4 <__ssputs_r+0x70>
 8004720:	6921      	ldr	r1, [r4, #16]
 8004722:	4650      	mov	r0, sl
 8004724:	f000 fabe 	bl	8004ca4 <_free_r>
 8004728:	e7c7      	b.n	80046ba <__ssputs_r+0x46>
	...

0800472c <_svfiprintf_r>:
 800472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004730:	4698      	mov	r8, r3
 8004732:	898b      	ldrh	r3, [r1, #12]
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	b09d      	sub	sp, #116	; 0x74
 8004738:	4607      	mov	r7, r0
 800473a:	460d      	mov	r5, r1
 800473c:	4614      	mov	r4, r2
 800473e:	d50e      	bpl.n	800475e <_svfiprintf_r+0x32>
 8004740:	690b      	ldr	r3, [r1, #16]
 8004742:	b963      	cbnz	r3, 800475e <_svfiprintf_r+0x32>
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	f000 fafd 	bl	8004d44 <_malloc_r>
 800474a:	6028      	str	r0, [r5, #0]
 800474c:	6128      	str	r0, [r5, #16]
 800474e:	b920      	cbnz	r0, 800475a <_svfiprintf_r+0x2e>
 8004750:	230c      	movs	r3, #12
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	e0d1      	b.n	80048fe <_svfiprintf_r+0x1d2>
 800475a:	2340      	movs	r3, #64	; 0x40
 800475c:	616b      	str	r3, [r5, #20]
 800475e:	2300      	movs	r3, #0
 8004760:	9309      	str	r3, [sp, #36]	; 0x24
 8004762:	2320      	movs	r3, #32
 8004764:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004768:	f8cd 800c 	str.w	r8, [sp, #12]
 800476c:	2330      	movs	r3, #48	; 0x30
 800476e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004918 <_svfiprintf_r+0x1ec>
 8004772:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004776:	f04f 0901 	mov.w	r9, #1
 800477a:	4623      	mov	r3, r4
 800477c:	469a      	mov	sl, r3
 800477e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004782:	b10a      	cbz	r2, 8004788 <_svfiprintf_r+0x5c>
 8004784:	2a25      	cmp	r2, #37	; 0x25
 8004786:	d1f9      	bne.n	800477c <_svfiprintf_r+0x50>
 8004788:	ebba 0b04 	subs.w	fp, sl, r4
 800478c:	d00b      	beq.n	80047a6 <_svfiprintf_r+0x7a>
 800478e:	465b      	mov	r3, fp
 8004790:	4622      	mov	r2, r4
 8004792:	4629      	mov	r1, r5
 8004794:	4638      	mov	r0, r7
 8004796:	f7ff ff6d 	bl	8004674 <__ssputs_r>
 800479a:	3001      	adds	r0, #1
 800479c:	f000 80aa 	beq.w	80048f4 <_svfiprintf_r+0x1c8>
 80047a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a2:	445a      	add	r2, fp
 80047a4:	9209      	str	r2, [sp, #36]	; 0x24
 80047a6:	f89a 3000 	ldrb.w	r3, [sl]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80a2 	beq.w	80048f4 <_svfiprintf_r+0x1c8>
 80047b0:	2300      	movs	r3, #0
 80047b2:	f04f 32ff 	mov.w	r2, #4294967295
 80047b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ba:	f10a 0a01 	add.w	sl, sl, #1
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	9307      	str	r3, [sp, #28]
 80047c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047c6:	931a      	str	r3, [sp, #104]	; 0x68
 80047c8:	4654      	mov	r4, sl
 80047ca:	2205      	movs	r2, #5
 80047cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d0:	4851      	ldr	r0, [pc, #324]	; (8004918 <_svfiprintf_r+0x1ec>)
 80047d2:	f7fb fd05 	bl	80001e0 <memchr>
 80047d6:	9a04      	ldr	r2, [sp, #16]
 80047d8:	b9d8      	cbnz	r0, 8004812 <_svfiprintf_r+0xe6>
 80047da:	06d0      	lsls	r0, r2, #27
 80047dc:	bf44      	itt	mi
 80047de:	2320      	movmi	r3, #32
 80047e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047e4:	0711      	lsls	r1, r2, #28
 80047e6:	bf44      	itt	mi
 80047e8:	232b      	movmi	r3, #43	; 0x2b
 80047ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ee:	f89a 3000 	ldrb.w	r3, [sl]
 80047f2:	2b2a      	cmp	r3, #42	; 0x2a
 80047f4:	d015      	beq.n	8004822 <_svfiprintf_r+0xf6>
 80047f6:	9a07      	ldr	r2, [sp, #28]
 80047f8:	4654      	mov	r4, sl
 80047fa:	2000      	movs	r0, #0
 80047fc:	f04f 0c0a 	mov.w	ip, #10
 8004800:	4621      	mov	r1, r4
 8004802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004806:	3b30      	subs	r3, #48	; 0x30
 8004808:	2b09      	cmp	r3, #9
 800480a:	d94e      	bls.n	80048aa <_svfiprintf_r+0x17e>
 800480c:	b1b0      	cbz	r0, 800483c <_svfiprintf_r+0x110>
 800480e:	9207      	str	r2, [sp, #28]
 8004810:	e014      	b.n	800483c <_svfiprintf_r+0x110>
 8004812:	eba0 0308 	sub.w	r3, r0, r8
 8004816:	fa09 f303 	lsl.w	r3, r9, r3
 800481a:	4313      	orrs	r3, r2
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	46a2      	mov	sl, r4
 8004820:	e7d2      	b.n	80047c8 <_svfiprintf_r+0x9c>
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	1d19      	adds	r1, r3, #4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	9103      	str	r1, [sp, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	bfbb      	ittet	lt
 800482e:	425b      	neglt	r3, r3
 8004830:	f042 0202 	orrlt.w	r2, r2, #2
 8004834:	9307      	strge	r3, [sp, #28]
 8004836:	9307      	strlt	r3, [sp, #28]
 8004838:	bfb8      	it	lt
 800483a:	9204      	strlt	r2, [sp, #16]
 800483c:	7823      	ldrb	r3, [r4, #0]
 800483e:	2b2e      	cmp	r3, #46	; 0x2e
 8004840:	d10c      	bne.n	800485c <_svfiprintf_r+0x130>
 8004842:	7863      	ldrb	r3, [r4, #1]
 8004844:	2b2a      	cmp	r3, #42	; 0x2a
 8004846:	d135      	bne.n	80048b4 <_svfiprintf_r+0x188>
 8004848:	9b03      	ldr	r3, [sp, #12]
 800484a:	1d1a      	adds	r2, r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	9203      	str	r2, [sp, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	bfb8      	it	lt
 8004854:	f04f 33ff 	movlt.w	r3, #4294967295
 8004858:	3402      	adds	r4, #2
 800485a:	9305      	str	r3, [sp, #20]
 800485c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004928 <_svfiprintf_r+0x1fc>
 8004860:	7821      	ldrb	r1, [r4, #0]
 8004862:	2203      	movs	r2, #3
 8004864:	4650      	mov	r0, sl
 8004866:	f7fb fcbb 	bl	80001e0 <memchr>
 800486a:	b140      	cbz	r0, 800487e <_svfiprintf_r+0x152>
 800486c:	2340      	movs	r3, #64	; 0x40
 800486e:	eba0 000a 	sub.w	r0, r0, sl
 8004872:	fa03 f000 	lsl.w	r0, r3, r0
 8004876:	9b04      	ldr	r3, [sp, #16]
 8004878:	4303      	orrs	r3, r0
 800487a:	3401      	adds	r4, #1
 800487c:	9304      	str	r3, [sp, #16]
 800487e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004882:	4826      	ldr	r0, [pc, #152]	; (800491c <_svfiprintf_r+0x1f0>)
 8004884:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004888:	2206      	movs	r2, #6
 800488a:	f7fb fca9 	bl	80001e0 <memchr>
 800488e:	2800      	cmp	r0, #0
 8004890:	d038      	beq.n	8004904 <_svfiprintf_r+0x1d8>
 8004892:	4b23      	ldr	r3, [pc, #140]	; (8004920 <_svfiprintf_r+0x1f4>)
 8004894:	bb1b      	cbnz	r3, 80048de <_svfiprintf_r+0x1b2>
 8004896:	9b03      	ldr	r3, [sp, #12]
 8004898:	3307      	adds	r3, #7
 800489a:	f023 0307 	bic.w	r3, r3, #7
 800489e:	3308      	adds	r3, #8
 80048a0:	9303      	str	r3, [sp, #12]
 80048a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a4:	4433      	add	r3, r6
 80048a6:	9309      	str	r3, [sp, #36]	; 0x24
 80048a8:	e767      	b.n	800477a <_svfiprintf_r+0x4e>
 80048aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ae:	460c      	mov	r4, r1
 80048b0:	2001      	movs	r0, #1
 80048b2:	e7a5      	b.n	8004800 <_svfiprintf_r+0xd4>
 80048b4:	2300      	movs	r3, #0
 80048b6:	3401      	adds	r4, #1
 80048b8:	9305      	str	r3, [sp, #20]
 80048ba:	4619      	mov	r1, r3
 80048bc:	f04f 0c0a 	mov.w	ip, #10
 80048c0:	4620      	mov	r0, r4
 80048c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048c6:	3a30      	subs	r2, #48	; 0x30
 80048c8:	2a09      	cmp	r2, #9
 80048ca:	d903      	bls.n	80048d4 <_svfiprintf_r+0x1a8>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0c5      	beq.n	800485c <_svfiprintf_r+0x130>
 80048d0:	9105      	str	r1, [sp, #20]
 80048d2:	e7c3      	b.n	800485c <_svfiprintf_r+0x130>
 80048d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048d8:	4604      	mov	r4, r0
 80048da:	2301      	movs	r3, #1
 80048dc:	e7f0      	b.n	80048c0 <_svfiprintf_r+0x194>
 80048de:	ab03      	add	r3, sp, #12
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	462a      	mov	r2, r5
 80048e4:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <_svfiprintf_r+0x1f8>)
 80048e6:	a904      	add	r1, sp, #16
 80048e8:	4638      	mov	r0, r7
 80048ea:	f3af 8000 	nop.w
 80048ee:	1c42      	adds	r2, r0, #1
 80048f0:	4606      	mov	r6, r0
 80048f2:	d1d6      	bne.n	80048a2 <_svfiprintf_r+0x176>
 80048f4:	89ab      	ldrh	r3, [r5, #12]
 80048f6:	065b      	lsls	r3, r3, #25
 80048f8:	f53f af2c 	bmi.w	8004754 <_svfiprintf_r+0x28>
 80048fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048fe:	b01d      	add	sp, #116	; 0x74
 8004900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004904:	ab03      	add	r3, sp, #12
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	462a      	mov	r2, r5
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <_svfiprintf_r+0x1f8>)
 800490c:	a904      	add	r1, sp, #16
 800490e:	4638      	mov	r0, r7
 8004910:	f000 f87a 	bl	8004a08 <_printf_i>
 8004914:	e7eb      	b.n	80048ee <_svfiprintf_r+0x1c2>
 8004916:	bf00      	nop
 8004918:	08005014 	.word	0x08005014
 800491c:	0800501e 	.word	0x0800501e
 8004920:	00000000 	.word	0x00000000
 8004924:	08004675 	.word	0x08004675
 8004928:	0800501a 	.word	0x0800501a

0800492c <_printf_common>:
 800492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	4616      	mov	r6, r2
 8004932:	4699      	mov	r9, r3
 8004934:	688a      	ldr	r2, [r1, #8]
 8004936:	690b      	ldr	r3, [r1, #16]
 8004938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800493c:	4293      	cmp	r3, r2
 800493e:	bfb8      	it	lt
 8004940:	4613      	movlt	r3, r2
 8004942:	6033      	str	r3, [r6, #0]
 8004944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004948:	4607      	mov	r7, r0
 800494a:	460c      	mov	r4, r1
 800494c:	b10a      	cbz	r2, 8004952 <_printf_common+0x26>
 800494e:	3301      	adds	r3, #1
 8004950:	6033      	str	r3, [r6, #0]
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	0699      	lsls	r1, r3, #26
 8004956:	bf42      	ittt	mi
 8004958:	6833      	ldrmi	r3, [r6, #0]
 800495a:	3302      	addmi	r3, #2
 800495c:	6033      	strmi	r3, [r6, #0]
 800495e:	6825      	ldr	r5, [r4, #0]
 8004960:	f015 0506 	ands.w	r5, r5, #6
 8004964:	d106      	bne.n	8004974 <_printf_common+0x48>
 8004966:	f104 0a19 	add.w	sl, r4, #25
 800496a:	68e3      	ldr	r3, [r4, #12]
 800496c:	6832      	ldr	r2, [r6, #0]
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	42ab      	cmp	r3, r5
 8004972:	dc26      	bgt.n	80049c2 <_printf_common+0x96>
 8004974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004978:	1e13      	subs	r3, r2, #0
 800497a:	6822      	ldr	r2, [r4, #0]
 800497c:	bf18      	it	ne
 800497e:	2301      	movne	r3, #1
 8004980:	0692      	lsls	r2, r2, #26
 8004982:	d42b      	bmi.n	80049dc <_printf_common+0xb0>
 8004984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004988:	4649      	mov	r1, r9
 800498a:	4638      	mov	r0, r7
 800498c:	47c0      	blx	r8
 800498e:	3001      	adds	r0, #1
 8004990:	d01e      	beq.n	80049d0 <_printf_common+0xa4>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	68e5      	ldr	r5, [r4, #12]
 8004996:	6832      	ldr	r2, [r6, #0]
 8004998:	f003 0306 	and.w	r3, r3, #6
 800499c:	2b04      	cmp	r3, #4
 800499e:	bf08      	it	eq
 80049a0:	1aad      	subeq	r5, r5, r2
 80049a2:	68a3      	ldr	r3, [r4, #8]
 80049a4:	6922      	ldr	r2, [r4, #16]
 80049a6:	bf0c      	ite	eq
 80049a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049ac:	2500      	movne	r5, #0
 80049ae:	4293      	cmp	r3, r2
 80049b0:	bfc4      	itt	gt
 80049b2:	1a9b      	subgt	r3, r3, r2
 80049b4:	18ed      	addgt	r5, r5, r3
 80049b6:	2600      	movs	r6, #0
 80049b8:	341a      	adds	r4, #26
 80049ba:	42b5      	cmp	r5, r6
 80049bc:	d11a      	bne.n	80049f4 <_printf_common+0xc8>
 80049be:	2000      	movs	r0, #0
 80049c0:	e008      	b.n	80049d4 <_printf_common+0xa8>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4652      	mov	r2, sl
 80049c6:	4649      	mov	r1, r9
 80049c8:	4638      	mov	r0, r7
 80049ca:	47c0      	blx	r8
 80049cc:	3001      	adds	r0, #1
 80049ce:	d103      	bne.n	80049d8 <_printf_common+0xac>
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295
 80049d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d8:	3501      	adds	r5, #1
 80049da:	e7c6      	b.n	800496a <_printf_common+0x3e>
 80049dc:	18e1      	adds	r1, r4, r3
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	2030      	movs	r0, #48	; 0x30
 80049e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049e6:	4422      	add	r2, r4
 80049e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049f0:	3302      	adds	r3, #2
 80049f2:	e7c7      	b.n	8004984 <_printf_common+0x58>
 80049f4:	2301      	movs	r3, #1
 80049f6:	4622      	mov	r2, r4
 80049f8:	4649      	mov	r1, r9
 80049fa:	4638      	mov	r0, r7
 80049fc:	47c0      	blx	r8
 80049fe:	3001      	adds	r0, #1
 8004a00:	d0e6      	beq.n	80049d0 <_printf_common+0xa4>
 8004a02:	3601      	adds	r6, #1
 8004a04:	e7d9      	b.n	80049ba <_printf_common+0x8e>
	...

08004a08 <_printf_i>:
 8004a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	4691      	mov	r9, r2
 8004a10:	7e27      	ldrb	r7, [r4, #24]
 8004a12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a14:	2f78      	cmp	r7, #120	; 0x78
 8004a16:	4680      	mov	r8, r0
 8004a18:	469a      	mov	sl, r3
 8004a1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a1e:	d807      	bhi.n	8004a30 <_printf_i+0x28>
 8004a20:	2f62      	cmp	r7, #98	; 0x62
 8004a22:	d80a      	bhi.n	8004a3a <_printf_i+0x32>
 8004a24:	2f00      	cmp	r7, #0
 8004a26:	f000 80d8 	beq.w	8004bda <_printf_i+0x1d2>
 8004a2a:	2f58      	cmp	r7, #88	; 0x58
 8004a2c:	f000 80a3 	beq.w	8004b76 <_printf_i+0x16e>
 8004a30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a38:	e03a      	b.n	8004ab0 <_printf_i+0xa8>
 8004a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a3e:	2b15      	cmp	r3, #21
 8004a40:	d8f6      	bhi.n	8004a30 <_printf_i+0x28>
 8004a42:	a001      	add	r0, pc, #4	; (adr r0, 8004a48 <_printf_i+0x40>)
 8004a44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a48:	08004aa1 	.word	0x08004aa1
 8004a4c:	08004ab5 	.word	0x08004ab5
 8004a50:	08004a31 	.word	0x08004a31
 8004a54:	08004a31 	.word	0x08004a31
 8004a58:	08004a31 	.word	0x08004a31
 8004a5c:	08004a31 	.word	0x08004a31
 8004a60:	08004ab5 	.word	0x08004ab5
 8004a64:	08004a31 	.word	0x08004a31
 8004a68:	08004a31 	.word	0x08004a31
 8004a6c:	08004a31 	.word	0x08004a31
 8004a70:	08004a31 	.word	0x08004a31
 8004a74:	08004bc1 	.word	0x08004bc1
 8004a78:	08004ae5 	.word	0x08004ae5
 8004a7c:	08004ba3 	.word	0x08004ba3
 8004a80:	08004a31 	.word	0x08004a31
 8004a84:	08004a31 	.word	0x08004a31
 8004a88:	08004be3 	.word	0x08004be3
 8004a8c:	08004a31 	.word	0x08004a31
 8004a90:	08004ae5 	.word	0x08004ae5
 8004a94:	08004a31 	.word	0x08004a31
 8004a98:	08004a31 	.word	0x08004a31
 8004a9c:	08004bab 	.word	0x08004bab
 8004aa0:	680b      	ldr	r3, [r1, #0]
 8004aa2:	1d1a      	adds	r2, r3, #4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	600a      	str	r2, [r1, #0]
 8004aa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0a3      	b.n	8004bfc <_printf_i+0x1f4>
 8004ab4:	6825      	ldr	r5, [r4, #0]
 8004ab6:	6808      	ldr	r0, [r1, #0]
 8004ab8:	062e      	lsls	r6, r5, #24
 8004aba:	f100 0304 	add.w	r3, r0, #4
 8004abe:	d50a      	bpl.n	8004ad6 <_printf_i+0xce>
 8004ac0:	6805      	ldr	r5, [r0, #0]
 8004ac2:	600b      	str	r3, [r1, #0]
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	da03      	bge.n	8004ad0 <_printf_i+0xc8>
 8004ac8:	232d      	movs	r3, #45	; 0x2d
 8004aca:	426d      	negs	r5, r5
 8004acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad0:	485e      	ldr	r0, [pc, #376]	; (8004c4c <_printf_i+0x244>)
 8004ad2:	230a      	movs	r3, #10
 8004ad4:	e019      	b.n	8004b0a <_printf_i+0x102>
 8004ad6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ada:	6805      	ldr	r5, [r0, #0]
 8004adc:	600b      	str	r3, [r1, #0]
 8004ade:	bf18      	it	ne
 8004ae0:	b22d      	sxthne	r5, r5
 8004ae2:	e7ef      	b.n	8004ac4 <_printf_i+0xbc>
 8004ae4:	680b      	ldr	r3, [r1, #0]
 8004ae6:	6825      	ldr	r5, [r4, #0]
 8004ae8:	1d18      	adds	r0, r3, #4
 8004aea:	6008      	str	r0, [r1, #0]
 8004aec:	0628      	lsls	r0, r5, #24
 8004aee:	d501      	bpl.n	8004af4 <_printf_i+0xec>
 8004af0:	681d      	ldr	r5, [r3, #0]
 8004af2:	e002      	b.n	8004afa <_printf_i+0xf2>
 8004af4:	0669      	lsls	r1, r5, #25
 8004af6:	d5fb      	bpl.n	8004af0 <_printf_i+0xe8>
 8004af8:	881d      	ldrh	r5, [r3, #0]
 8004afa:	4854      	ldr	r0, [pc, #336]	; (8004c4c <_printf_i+0x244>)
 8004afc:	2f6f      	cmp	r7, #111	; 0x6f
 8004afe:	bf0c      	ite	eq
 8004b00:	2308      	moveq	r3, #8
 8004b02:	230a      	movne	r3, #10
 8004b04:	2100      	movs	r1, #0
 8004b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b0a:	6866      	ldr	r6, [r4, #4]
 8004b0c:	60a6      	str	r6, [r4, #8]
 8004b0e:	2e00      	cmp	r6, #0
 8004b10:	bfa2      	ittt	ge
 8004b12:	6821      	ldrge	r1, [r4, #0]
 8004b14:	f021 0104 	bicge.w	r1, r1, #4
 8004b18:	6021      	strge	r1, [r4, #0]
 8004b1a:	b90d      	cbnz	r5, 8004b20 <_printf_i+0x118>
 8004b1c:	2e00      	cmp	r6, #0
 8004b1e:	d04d      	beq.n	8004bbc <_printf_i+0x1b4>
 8004b20:	4616      	mov	r6, r2
 8004b22:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b26:	fb03 5711 	mls	r7, r3, r1, r5
 8004b2a:	5dc7      	ldrb	r7, [r0, r7]
 8004b2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b30:	462f      	mov	r7, r5
 8004b32:	42bb      	cmp	r3, r7
 8004b34:	460d      	mov	r5, r1
 8004b36:	d9f4      	bls.n	8004b22 <_printf_i+0x11a>
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d10b      	bne.n	8004b54 <_printf_i+0x14c>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	07df      	lsls	r7, r3, #31
 8004b40:	d508      	bpl.n	8004b54 <_printf_i+0x14c>
 8004b42:	6923      	ldr	r3, [r4, #16]
 8004b44:	6861      	ldr	r1, [r4, #4]
 8004b46:	4299      	cmp	r1, r3
 8004b48:	bfde      	ittt	le
 8004b4a:	2330      	movle	r3, #48	; 0x30
 8004b4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b54:	1b92      	subs	r2, r2, r6
 8004b56:	6122      	str	r2, [r4, #16]
 8004b58:	f8cd a000 	str.w	sl, [sp]
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	aa03      	add	r2, sp, #12
 8004b60:	4621      	mov	r1, r4
 8004b62:	4640      	mov	r0, r8
 8004b64:	f7ff fee2 	bl	800492c <_printf_common>
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d14c      	bne.n	8004c06 <_printf_i+0x1fe>
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	b004      	add	sp, #16
 8004b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b76:	4835      	ldr	r0, [pc, #212]	; (8004c4c <_printf_i+0x244>)
 8004b78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	680e      	ldr	r6, [r1, #0]
 8004b80:	061f      	lsls	r7, r3, #24
 8004b82:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b86:	600e      	str	r6, [r1, #0]
 8004b88:	d514      	bpl.n	8004bb4 <_printf_i+0x1ac>
 8004b8a:	07d9      	lsls	r1, r3, #31
 8004b8c:	bf44      	itt	mi
 8004b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b92:	6023      	strmi	r3, [r4, #0]
 8004b94:	b91d      	cbnz	r5, 8004b9e <_printf_i+0x196>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	f023 0320 	bic.w	r3, r3, #32
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	2310      	movs	r3, #16
 8004ba0:	e7b0      	b.n	8004b04 <_printf_i+0xfc>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	f043 0320 	orr.w	r3, r3, #32
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	2378      	movs	r3, #120	; 0x78
 8004bac:	4828      	ldr	r0, [pc, #160]	; (8004c50 <_printf_i+0x248>)
 8004bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bb2:	e7e3      	b.n	8004b7c <_printf_i+0x174>
 8004bb4:	065e      	lsls	r6, r3, #25
 8004bb6:	bf48      	it	mi
 8004bb8:	b2ad      	uxthmi	r5, r5
 8004bba:	e7e6      	b.n	8004b8a <_printf_i+0x182>
 8004bbc:	4616      	mov	r6, r2
 8004bbe:	e7bb      	b.n	8004b38 <_printf_i+0x130>
 8004bc0:	680b      	ldr	r3, [r1, #0]
 8004bc2:	6826      	ldr	r6, [r4, #0]
 8004bc4:	6960      	ldr	r0, [r4, #20]
 8004bc6:	1d1d      	adds	r5, r3, #4
 8004bc8:	600d      	str	r5, [r1, #0]
 8004bca:	0635      	lsls	r5, r6, #24
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	d501      	bpl.n	8004bd4 <_printf_i+0x1cc>
 8004bd0:	6018      	str	r0, [r3, #0]
 8004bd2:	e002      	b.n	8004bda <_printf_i+0x1d2>
 8004bd4:	0671      	lsls	r1, r6, #25
 8004bd6:	d5fb      	bpl.n	8004bd0 <_printf_i+0x1c8>
 8004bd8:	8018      	strh	r0, [r3, #0]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	4616      	mov	r6, r2
 8004be0:	e7ba      	b.n	8004b58 <_printf_i+0x150>
 8004be2:	680b      	ldr	r3, [r1, #0]
 8004be4:	1d1a      	adds	r2, r3, #4
 8004be6:	600a      	str	r2, [r1, #0]
 8004be8:	681e      	ldr	r6, [r3, #0]
 8004bea:	6862      	ldr	r2, [r4, #4]
 8004bec:	2100      	movs	r1, #0
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f7fb faf6 	bl	80001e0 <memchr>
 8004bf4:	b108      	cbz	r0, 8004bfa <_printf_i+0x1f2>
 8004bf6:	1b80      	subs	r0, r0, r6
 8004bf8:	6060      	str	r0, [r4, #4]
 8004bfa:	6863      	ldr	r3, [r4, #4]
 8004bfc:	6123      	str	r3, [r4, #16]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c04:	e7a8      	b.n	8004b58 <_printf_i+0x150>
 8004c06:	6923      	ldr	r3, [r4, #16]
 8004c08:	4632      	mov	r2, r6
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	47d0      	blx	sl
 8004c10:	3001      	adds	r0, #1
 8004c12:	d0ab      	beq.n	8004b6c <_printf_i+0x164>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	079b      	lsls	r3, r3, #30
 8004c18:	d413      	bmi.n	8004c42 <_printf_i+0x23a>
 8004c1a:	68e0      	ldr	r0, [r4, #12]
 8004c1c:	9b03      	ldr	r3, [sp, #12]
 8004c1e:	4298      	cmp	r0, r3
 8004c20:	bfb8      	it	lt
 8004c22:	4618      	movlt	r0, r3
 8004c24:	e7a4      	b.n	8004b70 <_printf_i+0x168>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4632      	mov	r2, r6
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	47d0      	blx	sl
 8004c30:	3001      	adds	r0, #1
 8004c32:	d09b      	beq.n	8004b6c <_printf_i+0x164>
 8004c34:	3501      	adds	r5, #1
 8004c36:	68e3      	ldr	r3, [r4, #12]
 8004c38:	9903      	ldr	r1, [sp, #12]
 8004c3a:	1a5b      	subs	r3, r3, r1
 8004c3c:	42ab      	cmp	r3, r5
 8004c3e:	dcf2      	bgt.n	8004c26 <_printf_i+0x21e>
 8004c40:	e7eb      	b.n	8004c1a <_printf_i+0x212>
 8004c42:	2500      	movs	r5, #0
 8004c44:	f104 0619 	add.w	r6, r4, #25
 8004c48:	e7f5      	b.n	8004c36 <_printf_i+0x22e>
 8004c4a:	bf00      	nop
 8004c4c:	08005025 	.word	0x08005025
 8004c50:	08005036 	.word	0x08005036

08004c54 <memcpy>:
 8004c54:	440a      	add	r2, r1
 8004c56:	4291      	cmp	r1, r2
 8004c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c5c:	d100      	bne.n	8004c60 <memcpy+0xc>
 8004c5e:	4770      	bx	lr
 8004c60:	b510      	push	{r4, lr}
 8004c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c6a:	4291      	cmp	r1, r2
 8004c6c:	d1f9      	bne.n	8004c62 <memcpy+0xe>
 8004c6e:	bd10      	pop	{r4, pc}

08004c70 <memmove>:
 8004c70:	4288      	cmp	r0, r1
 8004c72:	b510      	push	{r4, lr}
 8004c74:	eb01 0402 	add.w	r4, r1, r2
 8004c78:	d902      	bls.n	8004c80 <memmove+0x10>
 8004c7a:	4284      	cmp	r4, r0
 8004c7c:	4623      	mov	r3, r4
 8004c7e:	d807      	bhi.n	8004c90 <memmove+0x20>
 8004c80:	1e43      	subs	r3, r0, #1
 8004c82:	42a1      	cmp	r1, r4
 8004c84:	d008      	beq.n	8004c98 <memmove+0x28>
 8004c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8e:	e7f8      	b.n	8004c82 <memmove+0x12>
 8004c90:	4402      	add	r2, r0
 8004c92:	4601      	mov	r1, r0
 8004c94:	428a      	cmp	r2, r1
 8004c96:	d100      	bne.n	8004c9a <memmove+0x2a>
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ca2:	e7f7      	b.n	8004c94 <memmove+0x24>

08004ca4 <_free_r>:
 8004ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ca6:	2900      	cmp	r1, #0
 8004ca8:	d048      	beq.n	8004d3c <_free_r+0x98>
 8004caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cae:	9001      	str	r0, [sp, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8004cb6:	bfb8      	it	lt
 8004cb8:	18e4      	addlt	r4, r4, r3
 8004cba:	f000 f8d3 	bl	8004e64 <__malloc_lock>
 8004cbe:	4a20      	ldr	r2, [pc, #128]	; (8004d40 <_free_r+0x9c>)
 8004cc0:	9801      	ldr	r0, [sp, #4]
 8004cc2:	6813      	ldr	r3, [r2, #0]
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	b933      	cbnz	r3, 8004cd6 <_free_r+0x32>
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	6014      	str	r4, [r2, #0]
 8004ccc:	b003      	add	sp, #12
 8004cce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cd2:	f000 b8cd 	b.w	8004e70 <__malloc_unlock>
 8004cd6:	42a3      	cmp	r3, r4
 8004cd8:	d90b      	bls.n	8004cf2 <_free_r+0x4e>
 8004cda:	6821      	ldr	r1, [r4, #0]
 8004cdc:	1862      	adds	r2, r4, r1
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	bf04      	itt	eq
 8004ce2:	681a      	ldreq	r2, [r3, #0]
 8004ce4:	685b      	ldreq	r3, [r3, #4]
 8004ce6:	6063      	str	r3, [r4, #4]
 8004ce8:	bf04      	itt	eq
 8004cea:	1852      	addeq	r2, r2, r1
 8004cec:	6022      	streq	r2, [r4, #0]
 8004cee:	602c      	str	r4, [r5, #0]
 8004cf0:	e7ec      	b.n	8004ccc <_free_r+0x28>
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	b10b      	cbz	r3, 8004cfc <_free_r+0x58>
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d9fa      	bls.n	8004cf2 <_free_r+0x4e>
 8004cfc:	6811      	ldr	r1, [r2, #0]
 8004cfe:	1855      	adds	r5, r2, r1
 8004d00:	42a5      	cmp	r5, r4
 8004d02:	d10b      	bne.n	8004d1c <_free_r+0x78>
 8004d04:	6824      	ldr	r4, [r4, #0]
 8004d06:	4421      	add	r1, r4
 8004d08:	1854      	adds	r4, r2, r1
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	d1dd      	bne.n	8004ccc <_free_r+0x28>
 8004d10:	681c      	ldr	r4, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	6053      	str	r3, [r2, #4]
 8004d16:	4421      	add	r1, r4
 8004d18:	6011      	str	r1, [r2, #0]
 8004d1a:	e7d7      	b.n	8004ccc <_free_r+0x28>
 8004d1c:	d902      	bls.n	8004d24 <_free_r+0x80>
 8004d1e:	230c      	movs	r3, #12
 8004d20:	6003      	str	r3, [r0, #0]
 8004d22:	e7d3      	b.n	8004ccc <_free_r+0x28>
 8004d24:	6825      	ldr	r5, [r4, #0]
 8004d26:	1961      	adds	r1, r4, r5
 8004d28:	428b      	cmp	r3, r1
 8004d2a:	bf04      	itt	eq
 8004d2c:	6819      	ldreq	r1, [r3, #0]
 8004d2e:	685b      	ldreq	r3, [r3, #4]
 8004d30:	6063      	str	r3, [r4, #4]
 8004d32:	bf04      	itt	eq
 8004d34:	1949      	addeq	r1, r1, r5
 8004d36:	6021      	streq	r1, [r4, #0]
 8004d38:	6054      	str	r4, [r2, #4]
 8004d3a:	e7c7      	b.n	8004ccc <_free_r+0x28>
 8004d3c:	b003      	add	sp, #12
 8004d3e:	bd30      	pop	{r4, r5, pc}
 8004d40:	200000e8 	.word	0x200000e8

08004d44 <_malloc_r>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	1ccd      	adds	r5, r1, #3
 8004d48:	f025 0503 	bic.w	r5, r5, #3
 8004d4c:	3508      	adds	r5, #8
 8004d4e:	2d0c      	cmp	r5, #12
 8004d50:	bf38      	it	cc
 8004d52:	250c      	movcc	r5, #12
 8004d54:	2d00      	cmp	r5, #0
 8004d56:	4606      	mov	r6, r0
 8004d58:	db01      	blt.n	8004d5e <_malloc_r+0x1a>
 8004d5a:	42a9      	cmp	r1, r5
 8004d5c:	d903      	bls.n	8004d66 <_malloc_r+0x22>
 8004d5e:	230c      	movs	r3, #12
 8004d60:	6033      	str	r3, [r6, #0]
 8004d62:	2000      	movs	r0, #0
 8004d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d66:	f000 f87d 	bl	8004e64 <__malloc_lock>
 8004d6a:	4921      	ldr	r1, [pc, #132]	; (8004df0 <_malloc_r+0xac>)
 8004d6c:	680a      	ldr	r2, [r1, #0]
 8004d6e:	4614      	mov	r4, r2
 8004d70:	b99c      	cbnz	r4, 8004d9a <_malloc_r+0x56>
 8004d72:	4f20      	ldr	r7, [pc, #128]	; (8004df4 <_malloc_r+0xb0>)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	b923      	cbnz	r3, 8004d82 <_malloc_r+0x3e>
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f000 f862 	bl	8004e44 <_sbrk_r>
 8004d80:	6038      	str	r0, [r7, #0]
 8004d82:	4629      	mov	r1, r5
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 f85d 	bl	8004e44 <_sbrk_r>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	d123      	bne.n	8004dd6 <_malloc_r+0x92>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	4630      	mov	r0, r6
 8004d94:	f000 f86c 	bl	8004e70 <__malloc_unlock>
 8004d98:	e7e3      	b.n	8004d62 <_malloc_r+0x1e>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	1b5b      	subs	r3, r3, r5
 8004d9e:	d417      	bmi.n	8004dd0 <_malloc_r+0x8c>
 8004da0:	2b0b      	cmp	r3, #11
 8004da2:	d903      	bls.n	8004dac <_malloc_r+0x68>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	441c      	add	r4, r3
 8004da8:	6025      	str	r5, [r4, #0]
 8004daa:	e004      	b.n	8004db6 <_malloc_r+0x72>
 8004dac:	6863      	ldr	r3, [r4, #4]
 8004dae:	42a2      	cmp	r2, r4
 8004db0:	bf0c      	ite	eq
 8004db2:	600b      	streq	r3, [r1, #0]
 8004db4:	6053      	strne	r3, [r2, #4]
 8004db6:	4630      	mov	r0, r6
 8004db8:	f000 f85a 	bl	8004e70 <__malloc_unlock>
 8004dbc:	f104 000b 	add.w	r0, r4, #11
 8004dc0:	1d23      	adds	r3, r4, #4
 8004dc2:	f020 0007 	bic.w	r0, r0, #7
 8004dc6:	1ac2      	subs	r2, r0, r3
 8004dc8:	d0cc      	beq.n	8004d64 <_malloc_r+0x20>
 8004dca:	1a1b      	subs	r3, r3, r0
 8004dcc:	50a3      	str	r3, [r4, r2]
 8004dce:	e7c9      	b.n	8004d64 <_malloc_r+0x20>
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	6864      	ldr	r4, [r4, #4]
 8004dd4:	e7cc      	b.n	8004d70 <_malloc_r+0x2c>
 8004dd6:	1cc4      	adds	r4, r0, #3
 8004dd8:	f024 0403 	bic.w	r4, r4, #3
 8004ddc:	42a0      	cmp	r0, r4
 8004dde:	d0e3      	beq.n	8004da8 <_malloc_r+0x64>
 8004de0:	1a21      	subs	r1, r4, r0
 8004de2:	4630      	mov	r0, r6
 8004de4:	f000 f82e 	bl	8004e44 <_sbrk_r>
 8004de8:	3001      	adds	r0, #1
 8004dea:	d1dd      	bne.n	8004da8 <_malloc_r+0x64>
 8004dec:	e7cf      	b.n	8004d8e <_malloc_r+0x4a>
 8004dee:	bf00      	nop
 8004df0:	200000e8 	.word	0x200000e8
 8004df4:	200000ec 	.word	0x200000ec

08004df8 <_realloc_r>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	4607      	mov	r7, r0
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	460e      	mov	r6, r1
 8004e00:	b921      	cbnz	r1, 8004e0c <_realloc_r+0x14>
 8004e02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e06:	4611      	mov	r1, r2
 8004e08:	f7ff bf9c 	b.w	8004d44 <_malloc_r>
 8004e0c:	b922      	cbnz	r2, 8004e18 <_realloc_r+0x20>
 8004e0e:	f7ff ff49 	bl	8004ca4 <_free_r>
 8004e12:	4625      	mov	r5, r4
 8004e14:	4628      	mov	r0, r5
 8004e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e18:	f000 f830 	bl	8004e7c <_malloc_usable_size_r>
 8004e1c:	42a0      	cmp	r0, r4
 8004e1e:	d20f      	bcs.n	8004e40 <_realloc_r+0x48>
 8004e20:	4621      	mov	r1, r4
 8004e22:	4638      	mov	r0, r7
 8004e24:	f7ff ff8e 	bl	8004d44 <_malloc_r>
 8004e28:	4605      	mov	r5, r0
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d0f2      	beq.n	8004e14 <_realloc_r+0x1c>
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4622      	mov	r2, r4
 8004e32:	f7ff ff0f 	bl	8004c54 <memcpy>
 8004e36:	4631      	mov	r1, r6
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f7ff ff33 	bl	8004ca4 <_free_r>
 8004e3e:	e7e9      	b.n	8004e14 <_realloc_r+0x1c>
 8004e40:	4635      	mov	r5, r6
 8004e42:	e7e7      	b.n	8004e14 <_realloc_r+0x1c>

08004e44 <_sbrk_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d06      	ldr	r5, [pc, #24]	; (8004e60 <_sbrk_r+0x1c>)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	f7fc fc58 	bl	8001704 <_sbrk>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_sbrk_r+0x1a>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_sbrk_r+0x1a>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	200002a0 	.word	0x200002a0

08004e64 <__malloc_lock>:
 8004e64:	4801      	ldr	r0, [pc, #4]	; (8004e6c <__malloc_lock+0x8>)
 8004e66:	f000 b811 	b.w	8004e8c <__retarget_lock_acquire_recursive>
 8004e6a:	bf00      	nop
 8004e6c:	200002a8 	.word	0x200002a8

08004e70 <__malloc_unlock>:
 8004e70:	4801      	ldr	r0, [pc, #4]	; (8004e78 <__malloc_unlock+0x8>)
 8004e72:	f000 b80c 	b.w	8004e8e <__retarget_lock_release_recursive>
 8004e76:	bf00      	nop
 8004e78:	200002a8 	.word	0x200002a8

08004e7c <_malloc_usable_size_r>:
 8004e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e80:	1f18      	subs	r0, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bfbc      	itt	lt
 8004e86:	580b      	ldrlt	r3, [r1, r0]
 8004e88:	18c0      	addlt	r0, r0, r3
 8004e8a:	4770      	bx	lr

08004e8c <__retarget_lock_acquire_recursive>:
 8004e8c:	4770      	bx	lr

08004e8e <__retarget_lock_release_recursive>:
 8004e8e:	4770      	bx	lr

08004e90 <_init>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr

08004e9c <_fini>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr
