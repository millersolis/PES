
CAN_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08008990  08008990  00018990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e68  08008e68  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008e68  08008e68  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e68  08008e68  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e68  08008e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000554  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000740  20000740  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6d4  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002271  00000000  00000000  0002e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00030b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c10  00000000  00000000  000317e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c50  00000000  00000000  000323f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f328  00000000  00000000  00054048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6c8b  00000000  00000000  00063370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129ffb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004568  00000000  00000000  0012a04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008978 	.word	0x08008978

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08008978 	.word	0x08008978

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2lz>:
 8000bec:	b538      	push	{r3, r4, r5, lr}
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	460d      	mov	r5, r1
 8000bf6:	f7ff ff89 	bl	8000b0c <__aeabi_dcmplt>
 8000bfa:	b928      	cbnz	r0, 8000c08 <__aeabi_d2lz+0x1c>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	4629      	mov	r1, r5
 8000c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c04:	f000 b80a 	b.w	8000c1c <__aeabi_d2ulz>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c0e:	f000 f805 	bl	8000c1c <__aeabi_d2ulz>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2ulz>:
 8000c1c:	b5d0      	push	{r4, r6, r7, lr}
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__aeabi_d2ulz+0x34>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	4606      	mov	r6, r0
 8000c24:	460f      	mov	r7, r1
 8000c26:	f7ff fcff 	bl	8000628 <__aeabi_dmul>
 8000c2a:	f7ff ffbf 	bl	8000bac <__aeabi_d2uiz>
 8000c2e:	4604      	mov	r4, r0
 8000c30:	f7ff fc80 	bl	8000534 <__aeabi_ui2d>
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <__aeabi_d2ulz+0x38>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f7ff fcf6 	bl	8000628 <__aeabi_dmul>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4630      	mov	r0, r6
 8000c42:	4639      	mov	r1, r7
 8000c44:	f7ff fb38 	bl	80002b8 <__aeabi_dsub>
 8000c48:	f7ff ffb0 	bl	8000bac <__aeabi_d2uiz>
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c50:	3df00000 	.word	0x3df00000
 8000c54:	41f00000 	.word	0x41f00000

08000c58 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c60:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <MX_CAN_Init+0xa0>)
 8000c62:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c66:	2212      	movs	r2, #18
 8000c68:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c7c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000caa:	f001 fd79 	bl	80027a0 <HAL_CAN_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000cb4:	f001 fb28 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
//  canfilterconfig.FilterBank = 10;
  canfilterconfig.FilterBank = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <MX_CAN_Init+0x9c>)
 8000ce6:	f001 fe56 	bl	8002996 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000208 	.word	0x20000208
 8000cf8:	40006400 	.word	0x40006400

08000cfc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <HAL_CAN_MspInit+0xa0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d139      	bne.n	8000d92 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_CAN_MspInit+0xa4>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_CAN_MspInit+0xa4>)
 8000d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_CAN_MspInit+0xa4>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_CAN_MspInit+0xa4>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_CAN_MspInit+0xa4>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	6153      	str	r3, [r2, #20]
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_CAN_MspInit+0xa4>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000d60:	2309      	movs	r3, #9
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f002 fc75 	bl	800365c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2014      	movs	r0, #20
 8000d78:	f002 fc39 	bl	80035ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000d7c:	2014      	movs	r0, #20
 8000d7e:	f002 fc52 	bl	8003626 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2015      	movs	r0, #21
 8000d88:	f002 fc31 	bl	80035ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000d8c:	2015      	movs	r0, #21
 8000d8e:	f002 fc4a 	bl	8003626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40006400 	.word	0x40006400
 8000da0:	40021000 	.word	0x40021000

08000da4 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <case_insensitive_strcmp+0x16>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e056      	b.n	8000e6c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d10d      	bne.n	8000de2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e050      	b.n	8000e6c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e04a      	b.n	8000e6c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <case_insensitive_strcmp+0xd4>)
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d103      	bne.n	8000e02 <case_insensitive_strcmp+0x5e>
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	f103 0220 	add.w	r2, r3, #32
 8000e00:	e000      	b.n	8000e04 <case_insensitive_strcmp+0x60>
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	73bb      	strb	r3, [r7, #14]
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	491a      	ldr	r1, [pc, #104]	; (8000e78 <case_insensitive_strcmp+0xd4>)
 8000e10:	440b      	add	r3, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d102      	bne.n	8000e22 <case_insensitive_strcmp+0x7e>
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	3320      	adds	r3, #32
 8000e20:	e000      	b.n	8000e24 <case_insensitive_strcmp+0x80>
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d0d0      	beq.n	8000dca <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	737b      	strb	r3, [r7, #13]
 8000e2e:	7b7b      	ldrb	r3, [r7, #13]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <case_insensitive_strcmp+0xd4>)
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d103      	bne.n	8000e48 <case_insensitive_strcmp+0xa4>
 8000e40:	7b7b      	ldrb	r3, [r7, #13]
 8000e42:	f103 0220 	add.w	r2, r3, #32
 8000e46:	e000      	b.n	8000e4a <case_insensitive_strcmp+0xa6>
 8000e48:	7b7a      	ldrb	r2, [r7, #13]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	733b      	strb	r3, [r7, #12]
 8000e50:	7b3b      	ldrb	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4908      	ldr	r1, [pc, #32]	; (8000e78 <case_insensitive_strcmp+0xd4>)
 8000e56:	440b      	add	r3, r1
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <case_insensitive_strcmp+0xc4>
 8000e62:	7b3b      	ldrb	r3, [r7, #12]
 8000e64:	3320      	adds	r3, #32
 8000e66:	e000      	b.n	8000e6a <case_insensitive_strcmp+0xc6>
 8000e68:	7b3b      	ldrb	r3, [r7, #12]
 8000e6a:	1ad3      	subs	r3, r2, r3
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	08008a34 	.word	0x08008a34

08000e7c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2028      	movs	r0, #40	; 0x28
 8000e8a:	4798      	blx	r3
 8000e8c:	60f8      	str	r0, [r7, #12]
    if (node)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000e94:	2228      	movs	r2, #40	; 0x28
 8000e96:	2100      	movs	r1, #0
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f004 fe77 	bl	8005b8c <memset>
    }

    return node;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000eb4:	e037      	b.n	8000f26 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d108      	bne.n	8000eda <cJSON_Delete+0x32>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ffe7 	bl	8000ea8 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d109      	bne.n	8000efa <cJSON_Delete+0x52>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d005      	beq.n	8000efa <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <cJSON_Delete+0x90>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6912      	ldr	r2, [r2, #16]
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d109      	bne.n	8000f1a <cJSON_Delete+0x72>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <cJSON_Delete+0x90>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6a12      	ldr	r2, [r2, #32]
 8000f16:	4610      	mov	r0, r2
 8000f18:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <cJSON_Delete+0x90>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	4798      	blx	r3
        item = next;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1c4      	bne.n	8000eb6 <cJSON_Delete+0xe>
    }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000000 	.word	0x20000000

08000f3c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000f40:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b098      	sub	sp, #96	; 0x60
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    double number = 0;
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8000f6a:	f7ff ffe7 	bl	8000f3c <get_decimal_point>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <parse_number+0x36>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <parse_number+0x3a>
    {
        return false;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e0c6      	b.n	8001118 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f8e:	e063      	b.n	8001058 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	6899      	ldr	r1, [r3, #8]
 8000f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f9a:	440b      	add	r3, r1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b45      	cmp	r3, #69	; 0x45
 8000fa2:	dc3d      	bgt.n	8001020 <parse_number+0xd0>
 8000fa4:	2b2b      	cmp	r3, #43	; 0x2b
 8000fa6:	db66      	blt.n	8001076 <parse_number+0x126>
 8000fa8:	3b2b      	subs	r3, #43	; 0x2b
 8000faa:	2b1a      	cmp	r3, #26
 8000fac:	d863      	bhi.n	8001076 <parse_number+0x126>
 8000fae:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <parse_number+0x64>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08001025 	.word	0x08001025
 8000fb8:	08001077 	.word	0x08001077
 8000fbc:	08001025 	.word	0x08001025
 8000fc0:	08001043 	.word	0x08001043
 8000fc4:	08001077 	.word	0x08001077
 8000fc8:	08001025 	.word	0x08001025
 8000fcc:	08001025 	.word	0x08001025
 8000fd0:	08001025 	.word	0x08001025
 8000fd4:	08001025 	.word	0x08001025
 8000fd8:	08001025 	.word	0x08001025
 8000fdc:	08001025 	.word	0x08001025
 8000fe0:	08001025 	.word	0x08001025
 8000fe4:	08001025 	.word	0x08001025
 8000fe8:	08001025 	.word	0x08001025
 8000fec:	08001025 	.word	0x08001025
 8000ff0:	08001077 	.word	0x08001077
 8000ff4:	08001077 	.word	0x08001077
 8000ff8:	08001077 	.word	0x08001077
 8000ffc:	08001077 	.word	0x08001077
 8001000:	08001077 	.word	0x08001077
 8001004:	08001077 	.word	0x08001077
 8001008:	08001077 	.word	0x08001077
 800100c:	08001077 	.word	0x08001077
 8001010:	08001077 	.word	0x08001077
 8001014:	08001077 	.word	0x08001077
 8001018:	08001077 	.word	0x08001077
 800101c:	08001025 	.word	0x08001025
 8001020:	2b65      	cmp	r3, #101	; 0x65
 8001022:	d128      	bne.n	8001076 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6899      	ldr	r1, [r3, #8]
 800102c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800102e:	440b      	add	r3, r1
 8001030:	4413      	add	r3, r2
 8001032:	7819      	ldrb	r1, [r3, #0]
 8001034:	f107 0208 	add.w	r2, r7, #8
 8001038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800103a:	4413      	add	r3, r2
 800103c:	460a      	mov	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
                break;
 8001040:	e007      	b.n	8001052 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8001042:	f107 0208 	add.w	r2, r7, #8
 8001046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001048:	4413      	add	r3, r2
 800104a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800104e:	701a      	strb	r2, [r3, #0]
                break;
 8001050:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001054:	3301      	adds	r3, #1
 8001056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800105a:	2b3e      	cmp	r3, #62	; 0x3e
 800105c:	d80d      	bhi.n	800107a <parse_number+0x12a>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <parse_number+0x12a>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800106a:	441a      	add	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	d38d      	bcc.n	8000f90 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001074:	e001      	b.n	800107a <parse_number+0x12a>
                goto loop_end;
 8001076:	bf00      	nop
 8001078:	e000      	b.n	800107c <parse_number+0x12c>
loop_end:
 800107a:	bf00      	nop
    number_c_string[i] = '\0';
 800107c:	f107 0208 	add.w	r2, r7, #8
 8001080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001082:	4413      	add	r3, r2
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001088:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f005 fd02 	bl	8006a9c <strtod>
 8001098:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800109c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d101      	bne.n	80010aa <parse_number+0x15a>
    {
        return false; /* parse_error */
 80010a6:	2300      	movs	r3, #0
 80010a8:	e036      	b.n	8001118 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80010b0:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80010b4:	a31b      	add	r3, pc, #108	; (adr r3, 8001124 <parse_number+0x1d4>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80010be:	f7ff fd39 	bl	8000b34 <__aeabi_dcmpge>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80010ce:	615a      	str	r2, [r3, #20]
 80010d0:	e015      	b.n	80010fe <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <parse_number+0x1d0>)
 80010d8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80010dc:	f7ff fd20 	bl	8000b20 <__aeabi_dcmple>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	e006      	b.n	80010fe <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 80010f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80010f4:	f7ff fd32 	bl	8000b5c <__aeabi_d2iz>
 80010f8:	4602      	mov	r2, r0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2208      	movs	r2, #8
 8001102:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800110a:	f107 0208 	add.w	r2, r7, #8
 800110e:	1a8a      	subs	r2, r1, r2
 8001110:	441a      	add	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	609a      	str	r2, [r3, #8]
    return true;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3760      	adds	r7, #96	; 0x60
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	c1e00000 	.word	0xc1e00000
 8001124:	ffc00000 	.word	0xffc00000
 8001128:	41dfffff 	.word	0x41dfffff

0800112c <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	e04c      	b.n	80011dc <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b2f      	cmp	r3, #47	; 0x2f
 800114c:	d90f      	bls.n	800116e <parse_hex4+0x42>
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b39      	cmp	r3, #57	; 0x39
 8001158:	d809      	bhi.n	800116e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	3b30      	subs	r3, #48	; 0x30
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e02d      	b.n	80011ca <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b40      	cmp	r3, #64	; 0x40
 8001178:	d90f      	bls.n	800119a <parse_hex4+0x6e>
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b46      	cmp	r3, #70	; 0x46
 8001184:	d809      	bhi.n	800119a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	3b37      	subs	r3, #55	; 0x37
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e017      	b.n	80011ca <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b60      	cmp	r3, #96	; 0x60
 80011a4:	d90f      	bls.n	80011c6 <parse_hex4+0x9a>
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b66      	cmp	r3, #102	; 0x66
 80011b0:	d809      	bhi.n	80011c6 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	3b57      	subs	r3, #87	; 0x57
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e001      	b.n	80011ca <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e00c      	b.n	80011e4 <parse_hex4+0xb8>
        }

        if (i < 3)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d802      	bhi.n	80011d6 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3301      	adds	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d9af      	bls.n	8001142 <parse_hex4+0x16>
        }
    }

    return h;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b05      	cmp	r3, #5
 8001228:	f340 80b7 	ble.w	800139a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	3302      	adds	r3, #2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff7b 	bl	800112c <parse_hex4>
 8001236:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800123e:	d304      	bcc.n	800124a <utf16_literal_to_utf8+0x5a>
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001246:	f0c0 80aa 	bcc.w	800139e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001250:	d337      	bcc.n	80012c2 <utf16_literal_to_utf8+0xd2>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001258:	d233      	bcs.n	80012c2 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	3306      	adds	r3, #6
 800125e:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001264:	230c      	movs	r3, #12
 8001266:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b05      	cmp	r3, #5
 8001272:	f340 8096 	ble.w	80013a2 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b5c      	cmp	r3, #92	; 0x5c
 800127c:	f040 8093 	bne.w	80013a6 <utf16_literal_to_utf8+0x1b6>
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b75      	cmp	r3, #117	; 0x75
 8001288:	f040 808d 	bne.w	80013a6 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3302      	adds	r3, #2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff4b 	bl	800112c <parse_hex4>
 8001296:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800129e:	f0c0 8084 	bcc.w	80013aa <utf16_literal_to_utf8+0x1ba>
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80012a8:	d27f      	bcs.n	80013aa <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	029a      	lsls	r2, r3, #10
 80012ae:	4b43      	ldr	r3, [pc, #268]	; (80013bc <utf16_literal_to_utf8+0x1cc>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80012b8:	4313      	orrs	r3, r2
 80012ba:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80012c0:	e004      	b.n	80012cc <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80012c2:	2306      	movs	r3, #6
 80012c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	2b7f      	cmp	r3, #127	; 0x7f
 80012d0:	d803      	bhi.n	80012da <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80012d8:	e01f      	b.n	800131a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012e0:	d206      	bcs.n	80012f0 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	f887 3020 	strb.w	r3, [r7, #32]
 80012ee:	e014      	b.n	800131a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f6:	d206      	bcs.n	8001306 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80012fe:	23e0      	movs	r3, #224	; 0xe0
 8001300:	f887 3020 	strb.w	r3, [r7, #32]
 8001304:	e009      	b.n	800131a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800130c:	d24f      	bcs.n	80013ae <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800130e:	2304      	movs	r3, #4
 8001310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001314:	23f0      	movs	r3, #240	; 0xf0
 8001316:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800131a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800131e:	3b01      	subs	r3, #1
 8001320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001324:	e015      	b.n	8001352 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800132e:	b2da      	uxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6819      	ldr	r1, [r3, #0]
 8001334:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001338:	440b      	add	r3, r1
 800133a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	099b      	lsrs	r3, r3, #6
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001348:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800134c:	3b01      	subs	r3, #1
 800134e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001352:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1e5      	bne.n	8001326 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800135a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800135e:	2b01      	cmp	r3, #1
 8001360:	d909      	bls.n	8001376 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	b2d9      	uxtb	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800136e:	430a      	orrs	r2, r1
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	e007      	b.n	8001386 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800138e:	441a      	add	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001394:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001398:	e00b      	b.n	80013b2 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800139a:	bf00      	nop
 800139c:	e008      	b.n	80013b0 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800139e:	bf00      	nop
 80013a0:	e006      	b.n	80013b0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80013a2:	bf00      	nop
 80013a4:	e004      	b.n	80013b0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80013a6:	bf00      	nop
 80013a8:	e002      	b.n	80013b0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80013aa:	bf00      	nop
 80013ac:	e000      	b.n	80013b0 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80013ae:	bf00      	nop

fail:
    return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	000ffc00 	.word	0x000ffc00

080013c0 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b22      	cmp	r3, #34	; 0x22
 80013fc:	f040 8102 	bne.w	8001604 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001408:	e017      	b.n	800143a <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b5c      	cmp	r3, #92	; 0x5c
 8001410:	d110      	bne.n	8001434 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	461a      	mov	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	f080 80f0 	bcs.w	8001608 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	3301      	adds	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
                input_end++;
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	3301      	adds	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	3301      	adds	r3, #1
 8001438:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a3a      	ldr	r2, [r7, #32]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	461a      	mov	r2, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	d203      	bcs.n	8001454 <parse_string+0x94>
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b22      	cmp	r3, #34	; 0x22
 8001452:	d1da      	bne.n	800140a <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6a3a      	ldr	r2, [r7, #32]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	461a      	mov	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	f080 80d2 	bcs.w	800160c <parse_string+0x24c>
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b22      	cmp	r3, #34	; 0x22
 800146e:	f040 80cd 	bne.w	800160c <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4413      	add	r3, r2
 800147c:	6a3a      	ldr	r2, [r7, #32]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	461a      	mov	r2, r3
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	3201      	adds	r2, #1
 8001490:	4610      	mov	r0, r2
 8001492:	4798      	blx	r3
 8001494:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80b9 	beq.w	8001610 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80014a2:	e093      	b.n	80015cc <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b5c      	cmp	r3, #92	; 0x5c
 80014aa:	d008      	beq.n	80014be <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	1c53      	adds	r3, r2, #1
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1c59      	adds	r1, r3, #1
 80014b6:	60f9      	str	r1, [r7, #12]
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e086      	b.n	80015cc <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80014c2:	6a3a      	ldr	r2, [r7, #32]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f340 80a3 	ble.w	8001614 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	3301      	adds	r3, #1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b75      	cmp	r3, #117	; 0x75
 80014d6:	f300 809f 	bgt.w	8001618 <parse_string+0x258>
 80014da:	2b5c      	cmp	r3, #92	; 0x5c
 80014dc:	da04      	bge.n	80014e8 <parse_string+0x128>
 80014de:	2b22      	cmp	r3, #34	; 0x22
 80014e0:	d05c      	beq.n	800159c <parse_string+0x1dc>
 80014e2:	2b2f      	cmp	r3, #47	; 0x2f
 80014e4:	d05a      	beq.n	800159c <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 80014e6:	e097      	b.n	8001618 <parse_string+0x258>
            switch (input_pointer[1])
 80014e8:	3b5c      	subs	r3, #92	; 0x5c
 80014ea:	2b19      	cmp	r3, #25
 80014ec:	f200 8094 	bhi.w	8001618 <parse_string+0x258>
 80014f0:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <parse_string+0x138>)
 80014f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f6:	bf00      	nop
 80014f8:	0800159d 	.word	0x0800159d
 80014fc:	08001619 	.word	0x08001619
 8001500:	08001619 	.word	0x08001619
 8001504:	08001619 	.word	0x08001619
 8001508:	08001619 	.word	0x08001619
 800150c:	08001619 	.word	0x08001619
 8001510:	08001561 	.word	0x08001561
 8001514:	08001619 	.word	0x08001619
 8001518:	08001619 	.word	0x08001619
 800151c:	08001619 	.word	0x08001619
 8001520:	0800156d 	.word	0x0800156d
 8001524:	08001619 	.word	0x08001619
 8001528:	08001619 	.word	0x08001619
 800152c:	08001619 	.word	0x08001619
 8001530:	08001619 	.word	0x08001619
 8001534:	08001619 	.word	0x08001619
 8001538:	08001619 	.word	0x08001619
 800153c:	08001619 	.word	0x08001619
 8001540:	08001579 	.word	0x08001579
 8001544:	08001619 	.word	0x08001619
 8001548:	08001619 	.word	0x08001619
 800154c:	08001619 	.word	0x08001619
 8001550:	08001585 	.word	0x08001585
 8001554:	08001619 	.word	0x08001619
 8001558:	08001591 	.word	0x08001591
 800155c:	080015ab 	.word	0x080015ab
                    *output_pointer++ = '\b';
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60fa      	str	r2, [r7, #12]
 8001566:	2208      	movs	r2, #8
 8001568:	701a      	strb	r2, [r3, #0]
                    break;
 800156a:	e02b      	b.n	80015c4 <parse_string+0x204>
                    *output_pointer++ = '\f';
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60fa      	str	r2, [r7, #12]
 8001572:	220c      	movs	r2, #12
 8001574:	701a      	strb	r2, [r3, #0]
                    break;
 8001576:	e025      	b.n	80015c4 <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60fa      	str	r2, [r7, #12]
 800157e:	220a      	movs	r2, #10
 8001580:	701a      	strb	r2, [r3, #0]
                    break;
 8001582:	e01f      	b.n	80015c4 <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	60fa      	str	r2, [r7, #12]
 800158a:	220d      	movs	r2, #13
 800158c:	701a      	strb	r2, [r3, #0]
                    break;
 800158e:	e019      	b.n	80015c4 <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60fa      	str	r2, [r7, #12]
 8001596:	2209      	movs	r2, #9
 8001598:	701a      	strb	r2, [r3, #0]
                    break;
 800159a:	e013      	b.n	80015c4 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60fa      	str	r2, [r7, #12]
 80015a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a4:	7852      	ldrb	r2, [r2, #1]
 80015a6:	701a      	strb	r2, [r3, #0]
                    break;
 80015a8:	e00c      	b.n	80015c4 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	461a      	mov	r2, r3
 80015b0:	6a39      	ldr	r1, [r7, #32]
 80015b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015b4:	f7ff fe1c 	bl	80011f0 <utf16_literal_to_utf8>
 80015b8:	4603      	mov	r3, r0
 80015ba:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d02c      	beq.n	800161c <parse_string+0x25c>
                    break;
 80015c2:	bf00      	nop
            }
            input_pointer += sequence_length;
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	4413      	add	r3, r2
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f4ff af67 	bcc.w	80014a4 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2210      	movs	r2, #16
 80015e0:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	609a      	str	r2, [r3, #8]

    return true;
 8001600:	2301      	movs	r3, #1
 8001602:	e01e      	b.n	8001642 <parse_string+0x282>
        goto fail;
 8001604:	bf00      	nop
 8001606:	e00a      	b.n	800161e <parse_string+0x25e>
                    goto fail;
 8001608:	bf00      	nop
 800160a:	e008      	b.n	800161e <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800160c:	bf00      	nop
 800160e:	e006      	b.n	800161e <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001610:	bf00      	nop
 8001612:	e004      	b.n	800161e <parse_string+0x25e>
                goto fail;
 8001614:	bf00      	nop
 8001616:	e002      	b.n	800161e <parse_string+0x25e>
                    goto fail;
 8001618:	bf00      	nop
 800161a:	e000      	b.n	800161e <parse_string+0x25e>
                        goto fail;
 800161c:	bf00      	nop

fail:
    if (output != NULL)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	69f8      	ldr	r0, [r7, #28]
 800162a:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	461a      	mov	r2, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop

0800164c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <buffer_skip_whitespace+0x16>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001662:	2300      	movs	r3, #0
 8001664:	e02c      	b.n	80016c0 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <buffer_skip_whitespace+0x2c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	d306      	bcc.n	8001686 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	e021      	b.n	80016c0 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00d      	beq.n	80016a8 <buffer_skip_whitespace+0x5c>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <buffer_skip_whitespace+0x5c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4413      	add	r3, r2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b20      	cmp	r3, #32
 80016a6:	d9e9      	bls.n	800167c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d104      	bne.n	80016be <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <skip_utf8_bom+0x1e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <skip_utf8_bom+0x1e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <skip_utf8_bom+0x22>
    {
        return NULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e01c      	b.n	8001728 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d018      	beq.n	8001726 <skip_utf8_bom+0x5a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	1d1a      	adds	r2, r3, #4
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d211      	bcs.n	8001726 <skip_utf8_bom+0x5a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4413      	add	r3, r2
 800170c:	2203      	movs	r2, #3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <skip_utf8_bom+0x64>)
 8001710:	4618      	mov	r0, r3
 8001712:	f004 fb8d 	bl	8005e30 <strncmp>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d104      	bne.n	8001726 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	1cda      	adds	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	080089c8 	.word	0x080089c8

08001734 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001746:	2300      	movs	r3, #0
 8001748:	e00c      	b.n	8001764 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f7fe fd52 	bl	80001f4 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	3301      	adds	r3, #1
 8001754:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	6979      	ldr	r1, [r7, #20]
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 f805 	bl	800176c <cJSON_ParseWithLengthOpts>
 8001762:	4603      	mov	r3, r0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	; 0x38
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <cJSON_ParseWithLengthOpts+0x12c>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <cJSON_ParseWithLengthOpts+0x12c>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d042      	beq.n	800182a <cJSON_ParseWithLengthOpts+0xbe>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d03f      	beq.n	800182a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80017b6:	4a39      	ldr	r2, [pc, #228]	; (800189c <cJSON_ParseWithLengthOpts+0x130>)
 80017b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80017be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80017c2:	4836      	ldr	r0, [pc, #216]	; (800189c <cJSON_ParseWithLengthOpts+0x130>)
 80017c4:	f7ff fb5a 	bl	8000e7c <cJSON_New_Item>
 80017c8:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d02e      	beq.n	800182e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff79 	bl	80016cc <skip_utf8_bom>
 80017da:	4603      	mov	r3, r0
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff35 	bl	800164c <buffer_skip_whitespace>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4619      	mov	r1, r3
 80017e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017e8:	f000 f868 	bl	80018bc <parse_value>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d01f      	beq.n	8001832 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00e      	beq.n	8001816 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff25 	bl	800164c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001802:	6a3a      	ldr	r2, [r7, #32]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	429a      	cmp	r2, r3
 8001808:	d215      	bcs.n	8001836 <cJSON_ParseWithLengthOpts+0xca>
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	4413      	add	r3, r2
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	441a      	add	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	e031      	b.n	800188e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800182a:	bf00      	nop
 800182c:	e004      	b.n	8001838 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800182e:	bf00      	nop
 8001830:	e002      	b.n	8001838 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001832:	bf00      	nop
 8001834:	e000      	b.n	8001838 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001836:	bf00      	nop

fail:
    if (item != NULL)
 8001838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800183e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001840:	f7ff fb32 	bl	8000ea8 <cJSON_Delete>
    }

    if (value != NULL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d020      	beq.n	800188c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001852:	6a3a      	ldr	r2, [r7, #32]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	429a      	cmp	r2, r3
 8001858:	d202      	bcs.n	8001860 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e005      	b.n	800186c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b01      	subs	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	441a      	add	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <cJSON_ParseWithLengthOpts+0x12c>)
 800187e:	461a      	mov	r2, r3
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001888:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3738      	adds	r7, #56	; 0x38
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000230 	.word	0x20000230
 800189c:	20000000 	.word	0x20000000

080018a0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff41 	bl	8001734 <cJSON_ParseWithOpts>
 80018b2:	4603      	mov	r3, r0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <parse_value+0x18>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <parse_value+0x1c>
    {
        return false; /* no input */
 80018d4:	2300      	movs	r3, #0
 80018d6:	e0d2      	b.n	8001a7e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01d      	beq.n	800191a <parse_value+0x5e>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	1d1a      	adds	r2, r3, #4
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d816      	bhi.n	800191a <parse_value+0x5e>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	2204      	movs	r2, #4
 80018f8:	4963      	ldr	r1, [pc, #396]	; (8001a88 <parse_value+0x1cc>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 fa98 	bl	8005e30 <strncmp>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2204      	movs	r2, #4
 800190a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	1d1a      	adds	r2, r3, #4
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	609a      	str	r2, [r3, #8]
        return true;
 8001916:	2301      	movs	r3, #1
 8001918:	e0b1      	b.n	8001a7e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01d      	beq.n	800195c <parse_value+0xa0>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	1d5a      	adds	r2, r3, #5
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	d816      	bhi.n	800195c <parse_value+0xa0>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4413      	add	r3, r2
 8001938:	2205      	movs	r2, #5
 800193a:	4954      	ldr	r1, [pc, #336]	; (8001a8c <parse_value+0x1d0>)
 800193c:	4618      	mov	r0, r3
 800193e:	f004 fa77 	bl	8005e30 <strncmp>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	1d5a      	adds	r2, r3, #5
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	609a      	str	r2, [r3, #8]
        return true;
 8001958:	2301      	movs	r3, #1
 800195a:	e090      	b.n	8001a7e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d020      	beq.n	80019a4 <parse_value+0xe8>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	1d1a      	adds	r2, r3, #4
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	d819      	bhi.n	80019a4 <parse_value+0xe8>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4413      	add	r3, r2
 800197a:	2204      	movs	r2, #4
 800197c:	4944      	ldr	r1, [pc, #272]	; (8001a90 <parse_value+0x1d4>)
 800197e:	4618      	mov	r0, r3
 8001980:	f004 fa56 	bl	8005e30 <strncmp>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2202      	movs	r2, #2
 800198e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	1d1a      	adds	r2, r3, #4
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	609a      	str	r2, [r3, #8]
        return true;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e06c      	b.n	8001a7e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d013      	beq.n	80019d2 <parse_value+0x116>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d20d      	bcs.n	80019d2 <parse_value+0x116>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b22      	cmp	r3, #34	; 0x22
 80019c4:	d105      	bne.n	80019d2 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fcf9 	bl	80013c0 <parse_string>
 80019ce:	4603      	mov	r3, r0
 80019d0:	e055      	b.n	8001a7e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d023      	beq.n	8001a20 <parse_value+0x164>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d21d      	bcs.n	8001a20 <parse_value+0x164>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4413      	add	r3, r2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b2d      	cmp	r3, #45	; 0x2d
 80019f2:	d00f      	beq.n	8001a14 <parse_value+0x158>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b2f      	cmp	r3, #47	; 0x2f
 8001a02:	d90d      	bls.n	8001a20 <parse_value+0x164>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b39      	cmp	r3, #57	; 0x39
 8001a12:	d805      	bhi.n	8001a20 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001a14:	6839      	ldr	r1, [r7, #0]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fa9a 	bl	8000f50 <parse_number>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	e02e      	b.n	8001a7e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d013      	beq.n	8001a4e <parse_value+0x192>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d20d      	bcs.n	8001a4e <parse_value+0x192>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b5b      	cmp	r3, #91	; 0x5b
 8001a40:	d105      	bne.n	8001a4e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f825 	bl	8001a94 <parse_array>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	e017      	b.n	8001a7e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <parse_value+0x1c0>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d20d      	bcs.n	8001a7c <parse_value+0x1c0>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4413      	add	r3, r2
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b7b      	cmp	r3, #123	; 0x7b
 8001a6e:	d105      	bne.n	8001a7c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8d2 	bl	8001c1c <parse_object>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	e000      	b.n	8001a7e <parse_value+0x1c2>
    }

    return false;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	0800899c 	.word	0x0800899c
 8001a8c:	080089cc 	.word	0x080089cc
 8001a90:	080089d4 	.word	0x080089d4

08001a94 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aae:	d301      	bcc.n	8001ab4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e0af      	b.n	8001c14 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b5b      	cmp	r3, #91	; 0x5b
 8001acc:	f040 8094 	bne.w	8001bf8 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001ada:	6838      	ldr	r0, [r7, #0]
 8001adc:	f7ff fdb6 	bl	800164c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <parse_array+0x6e>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d207      	bcs.n	8001b02 <parse_array+0x6e>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b5d      	cmp	r3, #93	; 0x5d
 8001b00:	d061      	beq.n	8001bc6 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <parse_array+0x80>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d305      	bcc.n	8001b20 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001b1e:	e072      	b.n	8001c06 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	1e5a      	subs	r2, r3, #1
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3310      	adds	r3, #16
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f9a4 	bl	8000e7c <cJSON_New_Item>
 8001b34:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05f      	beq.n	8001bfc <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d104      	bne.n	8001b4c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	e007      	b.n	8001b5c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f7ff fd70 	bl	800164c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001b6c:	6839      	ldr	r1, [r7, #0]
 8001b6e:	6938      	ldr	r0, [r7, #16]
 8001b70:	f7ff fea4 	bl	80018bc <parse_value>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d042      	beq.n	8001c00 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001b7a:	6838      	ldr	r0, [r7, #0]
 8001b7c:	f7ff fd66 	bl	800164c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <parse_array+0x10e>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d207      	bcs.n	8001ba2 <parse_array+0x10e>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b2c      	cmp	r3, #44	; 0x2c
 8001ba0:	d0c3      	beq.n	8001b2a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d02d      	beq.n	8001c04 <parse_array+0x170>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d227      	bcs.n	8001c04 <parse_array+0x170>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b5d      	cmp	r3, #93	; 0x5d
 8001bc2:	d11f      	bne.n	8001c04 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001bc4:	e000      	b.n	8001bc8 <parse_array+0x134>
        goto success;
 8001bc6:	bf00      	nop
    input_buffer->depth--;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <parse_array+0x14a>
        head->prev = current_item;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	609a      	str	r2, [r3, #8]

    return true;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e00d      	b.n	8001c14 <parse_array+0x180>
        goto fail;
 8001bf8:	bf00      	nop
 8001bfa:	e004      	b.n	8001c06 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001bfc:	bf00      	nop
 8001bfe:	e002      	b.n	8001c06 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001c00:	bf00      	nop
 8001c02:	e000      	b.n	8001c06 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001c04:	bf00      	nop

fail:
    if (head != NULL)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001c0c:	6978      	ldr	r0, [r7, #20]
 8001c0e:	f7ff f94b 	bl	8000ea8 <cJSON_Delete>
    }

    return false;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c36:	d301      	bcc.n	8001c3c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e0ea      	b.n	8001e12 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80d0 	beq.w	8001dee <parse_object+0x1d2>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	f080 80c9 	bcs.w	8001dee <parse_object+0x1d2>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4413      	add	r3, r2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b7b      	cmp	r3, #123	; 0x7b
 8001c6a:	f040 80c0 	bne.w	8001dee <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001c78:	6838      	ldr	r0, [r7, #0]
 8001c7a:	f7ff fce7 	bl	800164c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00e      	beq.n	8001ca2 <parse_object+0x86>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d208      	bcs.n	8001ca2 <parse_object+0x86>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b7d      	cmp	r3, #125	; 0x7d
 8001c9e:	f000 808d 	beq.w	8001dbc <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <parse_object+0x98>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d305      	bcc.n	8001cc0 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	1e5a      	subs	r2, r3, #1
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	609a      	str	r2, [r3, #8]
        goto fail;
 8001cbe:	e0a1      	b.n	8001e04 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	1e5a      	subs	r2, r3, #1
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3310      	adds	r3, #16
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f8d4 	bl	8000e7c <cJSON_New_Item>
 8001cd4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 808a 	beq.w	8001df2 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d104      	bne.n	8001cee <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	e007      	b.n	8001cfe <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d08:	6838      	ldr	r0, [r7, #0]
 8001d0a:	f7ff fc9f 	bl	800164c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	6938      	ldr	r0, [r7, #16]
 8001d12:	f7ff fb55 	bl	80013c0 <parse_string>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d06c      	beq.n	8001df6 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f7ff fc95 	bl	800164c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d061      	beq.n	8001dfa <parse_object+0x1de>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d25b      	bcs.n	8001dfa <parse_object+0x1de>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b3a      	cmp	r3, #58	; 0x3a
 8001d50:	d153      	bne.n	8001dfa <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	f7ff fc75 	bl	800164c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	6938      	ldr	r0, [r7, #16]
 8001d66:	f7ff fda9 	bl	80018bc <parse_value>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d046      	beq.n	8001dfe <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001d70:	6838      	ldr	r0, [r7, #0]
 8001d72:	f7ff fc6b 	bl	800164c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <parse_object+0x17c>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <parse_object+0x17c>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4413      	add	r3, r2
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b2c      	cmp	r3, #44	; 0x2c
 8001d96:	d098      	beq.n	8001cca <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d031      	beq.n	8001e02 <parse_object+0x1e6>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d22b      	bcs.n	8001e02 <parse_object+0x1e6>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b7d      	cmp	r3, #125	; 0x7d
 8001db8:	d123      	bne.n	8001e02 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001dba:	e000      	b.n	8001dbe <parse_object+0x1a2>
        goto success; /* empty object */
 8001dbc:	bf00      	nop
    input_buffer->depth--;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	1e5a      	subs	r2, r3, #1
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <parse_object+0x1b8>
        head->prev = current_item;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2240      	movs	r2, #64	; 0x40
 8001dd8:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	609a      	str	r2, [r3, #8]
    return true;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e011      	b.n	8001e12 <parse_object+0x1f6>
        goto fail; /* not an object */
 8001dee:	bf00      	nop
 8001df0:	e008      	b.n	8001e04 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001df2:	bf00      	nop
 8001df4:	e006      	b.n	8001e04 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001df6:	bf00      	nop
 8001df8:	e004      	b.n	8001e04 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001dfa:	bf00      	nop
 8001dfc:	e002      	b.n	8001e04 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001dfe:	bf00      	nop
 8001e00:	e000      	b.n	8001e04 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001e02:	bf00      	nop

fail:
    if (head != NULL)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff f84c 	bl	8000ea8 <cJSON_Delete>
    }

    return false;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e00d      	b.n	8001e50 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 8001e3a:	e005      	b.n	8001e48 <cJSON_GetArraySize+0x2e>
    {
        size++;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
        child = child->next;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f6      	bne.n	8001e3c <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <get_array_item+0x18>
    {
        return NULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e010      	b.n	8001e96 <get_array_item+0x3a>
    }

    current_child = array->child;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8001e7a:	e005      	b.n	8001e88 <get_array_item+0x2c>
    {
        index--;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <get_array_item+0x38>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f3      	bne.n	8001e7c <get_array_item+0x20>
    }

    return current_child;
 8001e94:	68fb      	ldr	r3, [r7, #12]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da01      	bge.n	8001eb6 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e005      	b.n	8001ec2 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffce 	bl	8001e5c <get_array_item>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <get_object_item+0x1c>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <get_object_item+0x20>
    {
        return NULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e033      	b.n	8001f52 <get_object_item+0x88>
    }

    current_element = object->child;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d017      	beq.n	8001f26 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001ef6:	e002      	b.n	8001efe <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01c      	beq.n	8001f3e <get_object_item+0x74>
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d018      	beq.n	8001f3e <get_object_item+0x74>
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4619      	mov	r1, r3
 8001f12:	68b8      	ldr	r0, [r7, #8]
 8001f14:	f7fe f964 	bl	80001e0 <strcmp>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ec      	bne.n	8001ef8 <get_object_item+0x2e>
 8001f1e:	e00e      	b.n	8001f3e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <get_object_item+0x74>
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4619      	mov	r1, r3
 8001f32:	68b8      	ldr	r0, [r7, #8]
 8001f34:	f7fe ff36 	bl	8000da4 <case_insensitive_strcmp>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <get_object_item+0x82>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <get_object_item+0x86>
        return NULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <get_object_item+0x88>
    }

    return current_element;
 8001f50:	697b      	ldr	r3, [r7, #20]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8001f64:	2201      	movs	r2, #1
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ffae 	bl	8001eca <get_object_item>
 8001f6e:	4603      	mov	r3, r0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b38      	ldr	r3, [pc, #224]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4a37      	ldr	r2, [pc, #220]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f98:	6153      	str	r3, [r2, #20]
 8001f9a:	4b35      	ldr	r3, [pc, #212]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa6:	4b32      	ldr	r3, [pc, #200]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4a31      	ldr	r2, [pc, #196]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001fac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fb0:	6153      	str	r3, [r2, #20]
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	6153      	str	r3, [r2, #20]
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe0:	6153      	str	r3, [r2, #20]
 8001fe2:	4b23      	ldr	r3, [pc, #140]	; (8002070 <MX_GPIO_Init+0xf8>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff6:	f001 fcbb 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn_Pin;
 8001ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002000:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	4818      	ldr	r0, [pc, #96]	; (8002074 <MX_GPIO_Init+0xfc>)
 8002012:	f001 fb23 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002016:	230c      	movs	r3, #12
 8002018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002026:	2307      	movs	r3, #7
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f001 fb12 	bl	800365c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002038:	2320      	movs	r3, #32
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203c:	2301      	movs	r3, #1
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f001 fb03 	bl	800365c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2028      	movs	r0, #40	; 0x28
 800205c:	f001 fac7 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002060:	2028      	movs	r0, #40	; 0x28
 8002062:	f001 fae0 	bl	8003626 <HAL_NVIC_EnableIRQ>

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	48000800 	.word	0x48000800

08002078 <HAL_CAN_RxFifo0MsgPendingCallback>:
cJSON* json_data;
const char* public_RID_keys[2]; // size of array should be max number of RID keys
const char* private_RID_keys[2];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8002082:	4a2e      	ldr	r2, [pc, #184]	; (800213c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8002084:	2100      	movs	r1, #0
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fe6e 	bl	8002d68 <HAL_CAN_GetRxMessage>

	if (RxHeader.StdId == 0x101)
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f240 1201 	movw	r2, #257	; 0x101
 8002094:	4293      	cmp	r3, r2
 8002096:	d104      	bne.n	80020a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
	{
		num_of_msgs = RxData[0];
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e040      	b.n	8002124 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
	}
	else
	{
		strcat(rcvData, RxData);
 80020a2:	4925      	ldr	r1, [pc, #148]	; (8002138 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80020a4:	4827      	ldr	r0, [pc, #156]	; (8002144 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80020a6:	f003 feb4 	bl	8005e12 <strcat>

		// Last data message
		if (RxHeader.StdId+1 == num_of_msgs)
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3301      	adds	r3, #1
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80020b2:	7812      	ldrb	r2, [r2, #0]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d135      	bne.n	8002124 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		{
			// enrollment table is an array of json objects
			json_data = cJSON_Parse(rcvData);
 80020b8:	4822      	ldr	r0, [pc, #136]	; (8002144 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80020ba:	f7ff fbf1 	bl	80018a0 <cJSON_Parse>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80020c2:	6013      	str	r3, [r2, #0]

			for (int i = 0; i < cJSON_GetArraySize(json_data); i++) {
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	e01d      	b.n	8002106 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
				cJSON *elem = cJSON_GetArrayItem(json_data, i);
 80020ca:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fee6 	bl	8001ea2 <cJSON_GetArrayItem>
 80020d6:	60b8      	str	r0, [r7, #8]
				public_RID_keys[i] = cJSON_GetObjectItemCaseSensitive(elem, "public_RID_key")->valuestring;
 80020d8:	491c      	ldr	r1, [pc, #112]	; (800214c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80020da:	68b8      	ldr	r0, [r7, #8]
 80020dc:	f7ff ff3d 	bl	8001f5a <cJSON_GetObjectItemCaseSensitive>
 80020e0:	4603      	mov	r3, r0
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	491a      	ldr	r1, [pc, #104]	; (8002150 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				private_RID_keys[i] = cJSON_GetObjectItemCaseSensitive(elem, "private_RID_key")->valuestring;
 80020ec:	4919      	ldr	r1, [pc, #100]	; (8002154 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80020ee:	68b8      	ldr	r0, [r7, #8]
 80020f0:	f7ff ff33 	bl	8001f5a <cJSON_GetObjectItemCaseSensitive>
 80020f4:	4603      	mov	r3, r0
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	4917      	ldr	r1, [pc, #92]	; (8002158 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < cJSON_GetArraySize(json_data); i++) {
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3301      	adds	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fe85 	bl	8001e1a <cJSON_GetArraySize>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4293      	cmp	r3, r2
 8002116:	dbd8      	blt.n	80020ca <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			}

			memset(rcvData, 0, sizeof(rcvData));
 8002118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800211c:	2100      	movs	r1, #0
 800211e:	4809      	ldr	r0, [pc, #36]	; (8002144 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8002120:	f003 fd34 	bl	8005b8c <memset>
		}
	}

    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002124:	2120      	movs	r1, #32
 8002126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212a:	f001 fc39 	bl	80039a0 <HAL_GPIO_TogglePin>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000274 	.word	0x20000274
 800213c:	20000250 	.word	0x20000250
 8002140:	2000068c 	.word	0x2000068c
 8002144:	2000028c 	.word	0x2000028c
 8002148:	20000690 	.word	0x20000690
 800214c:	080089dc 	.word	0x080089dc
 8002150:	20000694 	.word	0x20000694
 8002154:	080089ec 	.word	0x080089ec
 8002158:	2000069c 	.word	0x2000069c

0800215c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002160:	f000 fab8 	bl	80026d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002164:	f000 f810 	bl	8002188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002168:	f7ff ff06 	bl	8001f78 <MX_GPIO_Init>
  MX_CAN_Init();
 800216c:	f7fe fd74 	bl	8000c58 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8002170:	f000 fa12 	bl	8002598 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8002174:	4803      	ldr	r0, [pc, #12]	; (8002184 <main+0x28>)
 8002176:	f000 fcd8 	bl	8002b2a <HAL_CAN_Start>

  //Activate notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800217a:	2102      	movs	r1, #2
 800217c:	4801      	ldr	r0, [pc, #4]	; (8002184 <main+0x28>)
 800217e:	f000 ff05 	bl	8002f8c <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002182:	e7fe      	b.n	8002182 <main+0x26>
 8002184:	20000208 	.word	0x20000208

08002188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0a6      	sub	sp, #152	; 0x98
 800218c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002192:	2228      	movs	r2, #40	; 0x28
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fcf8 	bl	8005b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800219c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2258      	movs	r2, #88	; 0x58
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fcea 	bl	8005b8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021b8:	2302      	movs	r3, #2
 80021ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021bc:	2301      	movs	r3, #1
 80021be:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c0:	2310      	movs	r3, #16
 80021c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 fc0c 	bl	8003a04 <HAL_RCC_OscConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80021f2:	f000 f889 	bl	8002308 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f6:	230f      	movs	r3, #15
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021fa:	2302      	movs	r3, #2
 80021fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021fe:	2300      	movs	r3, #0
 8002200:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002206:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800220c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002210:	2102      	movs	r1, #2
 8002212:	4618      	mov	r0, r3
 8002214:	f002 fc4a 	bl	8004aac <HAL_RCC_ClockConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800221e:	f000 f873 	bl	8002308 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002222:	2301      	movs	r3, #1
 8002224:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	4618      	mov	r0, r3
 800222e:	f002 fe73 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002238:	f000 f866 	bl	8002308 <Error_Handler>
  }
}
 800223c:	bf00      	nop
 800223e:	3798      	adds	r7, #152	; 0x98
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <SendControlMessage>:

/* USER CODE BEGIN 4 */
void SendControlMessage(StateMessage state)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
	TxHeader.DLC = 2; // Data length in bits
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <SendControlMessage+0x94>)
 8002250:	2202      	movs	r2, #2
 8002252:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8002254:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <SendControlMessage+0x94>)
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <SendControlMessage+0x94>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <SendControlMessage+0x94>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x103; // Arbitration_ID
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <SendControlMessage+0x94>)
 8002268:	f240 1203 	movw	r2, #259	; 0x103
 800226c:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <SendControlMessage+0x94>)
 8002270:	2200      	movs	r2, #0
 8002272:	751a      	strb	r2, [r3, #20]


	if (state == REQUEST)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d103      	bne.n	8002282 <SendControlMessage+0x3e>
	{
		TxData[0] = 0x02;
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <SendControlMessage+0x98>)
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e01b      	b.n	80022ba <SendControlMessage+0x76>
	}
	else
	{
		TxData[0] = 0x01;
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <SendControlMessage+0x98>)
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]

		switch(state)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d00e      	beq.n	80022ac <SendControlMessage+0x68>
 800228e:	2b02      	cmp	r3, #2
 8002290:	dc10      	bgt.n	80022b4 <SendControlMessage+0x70>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <SendControlMessage+0x58>
 8002296:	2b01      	cmp	r3, #1
 8002298:	d004      	beq.n	80022a4 <SendControlMessage+0x60>
 800229a:	e00b      	b.n	80022b4 <SendControlMessage+0x70>
		{
		case WAKEUP:
			TxData[1] = 0x01;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <SendControlMessage+0x98>)
 800229e:	2201      	movs	r2, #1
 80022a0:	705a      	strb	r2, [r3, #1]
			break;
 80022a2:	e00a      	b.n	80022ba <SendControlMessage+0x76>
		case START:
			TxData[1] = 0x02;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <SendControlMessage+0x98>)
 80022a6:	2202      	movs	r2, #2
 80022a8:	705a      	strb	r2, [r3, #1]
			break;
 80022aa:	e006      	b.n	80022ba <SendControlMessage+0x76>
		case LOCK:
			TxData[1] = 0x03;
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <SendControlMessage+0x98>)
 80022ae:	2203      	movs	r2, #3
 80022b0:	705a      	strb	r2, [r3, #1]
			break;
 80022b2:	e002      	b.n	80022ba <SendControlMessage+0x76>
		default:
			TxData[1] = 0x00;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <SendControlMessage+0x98>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	705a      	strb	r2, [r3, #1]
		}
	}

	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox[0]) != HAL_OK)
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <SendControlMessage+0x9c>)
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <SendControlMessage+0x98>)
 80022be:	4906      	ldr	r1, [pc, #24]	; (80022d8 <SendControlMessage+0x94>)
 80022c0:	4808      	ldr	r0, [pc, #32]	; (80022e4 <SendControlMessage+0xa0>)
 80022c2:	f000 fc76 	bl	8002bb2 <HAL_CAN_AddTxMessage>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <SendControlMessage+0x8c>
	{
		Error_Handler();
 80022cc:	f000 f81c 	bl	8002308 <Error_Handler>
	}
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000238 	.word	0x20000238
 80022dc:	2000026c 	.word	0x2000026c
 80022e0:	2000027c 	.word	0x2000027c
 80022e4:	20000208 	.word	0x20000208

080022e8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Btn_Pin)
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f8:	d102      	bne.n	8002300 <HAL_GPIO_EXTI_Callback+0x18>
	{
		SendControlMessage(WAKEUP);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7ff ffa2 	bl	8002244 <SendControlMessage>
	}
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	e7fe      	b.n	8002310 <Error_Handler+0x8>
	...

08002314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_MspInit+0x44>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_MspInit+0x44>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6193      	str	r3, [r2, #24]
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_MspInit+0x44>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_MspInit+0x44>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_MspInit+0x44>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_MspInit+0x44>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800234a:	2007      	movs	r0, #7
 800234c:	f001 f944 	bl	80035d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <NMI_Handler+0x4>

08002362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <MemManage_Handler+0x4>

0800236e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <BusFault_Handler+0x4>

08002374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <UsageFault_Handler+0x4>

0800237a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a8:	f000 f9da 	bl	8002760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80023b6:	f000 fe0f 	bl	8002fd8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000208 	.word	0x20000208

080023c4 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <CAN_RX1_IRQHandler+0x10>)
 80023ca:	f000 fe05 	bl	8002fd8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000208 	.word	0x20000208

080023d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Pin);
 80023dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023e0:	f001 faf8 	bl	80039d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
	return 1;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_kill>:

int _kill(int pid, int sig)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002402:	f003 fb7b 	bl	8005afc <__errno>
 8002406:	4603      	mov	r3, r0
 8002408:	2216      	movs	r2, #22
 800240a:	601a      	str	r2, [r3, #0]
	return -1;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_exit>:

void _exit (int status)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ffe7 	bl	80023f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800242a:	e7fe      	b.n	800242a <_exit+0x12>

0800242c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e00a      	b.n	8002454 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800243e:	f3af 8000 	nop.w
 8002442:	4601      	mov	r1, r0
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	60ba      	str	r2, [r7, #8]
 800244a:	b2ca      	uxtb	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3301      	adds	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	dbf0      	blt.n	800243e <_read+0x12>
	}

return len;
 800245c:	687b      	ldr	r3, [r7, #4]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e009      	b.n	800248c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	60ba      	str	r2, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	dbf1      	blt.n	8002478 <_write+0x12>
	}
	return len;
 8002494:	687b      	ldr	r3, [r7, #4]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_close>:

int _close(int file)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	return -1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c6:	605a      	str	r2, [r3, #4]
	return 0;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_isatty>:

int _isatty(int file)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	return 1;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
	return 0;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <_sbrk+0x5c>)
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <_sbrk+0x60>)
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <_sbrk+0x64>)
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <_sbrk+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002538:	f003 fae0 	bl	8005afc <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	220c      	movs	r2, #12
 8002540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	e009      	b.n	800255c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <_sbrk+0x64>)
 8002558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20010000 	.word	0x20010000
 8002568:	00000400 	.word	0x00000400
 800256c:	200006a4 	.word	0x200006a4
 8002570:	20000740 	.word	0x20000740

08002574 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <SystemInit+0x20>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <SystemInit+0x20>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <MX_USART1_UART_Init+0x5c>)
 80025a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025a4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80025a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025be:	220c      	movs	r2, #12
 80025c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025dc:	f002 feba 	bl	8005354 <HAL_UART_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025e6:	f7ff fe8f 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200006a8 	.word	0x200006a8
 80025f4:	40013800 	.word	0x40013800

080025f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_UART_MspInit+0x7c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d127      	bne.n	800266a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_UART_MspInit+0x80>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6193      	str	r3, [r2, #24]
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800263c:	6153      	str	r3, [r2, #20]
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_UART_MspInit+0x80>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800264a:	2330      	movs	r3, #48	; 0x30
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800265a:	2307      	movs	r3, #7
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4805      	ldr	r0, [pc, #20]	; (800267c <HAL_UART_MspInit+0x84>)
 8002666:	f000 fff9 	bl	800365c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40013800 	.word	0x40013800
 8002678:	40021000 	.word	0x40021000
 800267c:	48000800 	.word	0x48000800

08002680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002684:	480d      	ldr	r0, [pc, #52]	; (80026bc <LoopForever+0x6>)
  ldr r1, =_edata
 8002686:	490e      	ldr	r1, [pc, #56]	; (80026c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002688:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <LoopForever+0xe>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800268c:	e002      	b.n	8002694 <LoopCopyDataInit>

0800268e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002692:	3304      	adds	r3, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002698:	d3f9      	bcc.n	800268e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800269c:	4c0b      	ldr	r4, [pc, #44]	; (80026cc <LoopForever+0x16>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a0:	e001      	b.n	80026a6 <LoopFillZerobss>

080026a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a4:	3204      	adds	r2, #4

080026a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a8:	d3fb      	bcc.n	80026a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026aa:	f7ff ff63 	bl	8002574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ae:	f003 fa2b 	bl	8005b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026b2:	f7ff fd53 	bl	800215c <main>

080026b6 <LoopForever>:

LoopForever:
    b LoopForever
 80026b6:	e7fe      	b.n	80026b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80026c4:	08008e70 	.word	0x08008e70
  ldr r2, =_sbss
 80026c8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80026cc:	20000740 	.word	0x20000740

080026d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026d0:	e7fe      	b.n	80026d0 <ADC1_2_IRQHandler>
	...

080026d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_Init+0x28>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <HAL_Init+0x28>)
 80026de:	f043 0310 	orr.w	r3, r3, #16
 80026e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e4:	2003      	movs	r0, #3
 80026e6:	f000 ff77 	bl	80035d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f000 f808 	bl	8002700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f0:	f7ff fe10 	bl	8002314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40022000 	.word	0x40022000

08002700 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_InitTick+0x54>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_InitTick+0x58>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002716:	fbb3 f3f1 	udiv	r3, r3, r1
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	4618      	mov	r0, r3
 8002720:	f000 ff8f 	bl	8003642 <HAL_SYSTICK_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e00e      	b.n	800274c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b0f      	cmp	r3, #15
 8002732:	d80a      	bhi.n	800274a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002734:	2200      	movs	r2, #0
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f000 ff57 	bl	80035ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002740:	4a06      	ldr	r2, [pc, #24]	; (800275c <HAL_InitTick+0x5c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	2000000c 	.word	0x2000000c
 8002758:	20000014 	.word	0x20000014
 800275c:	20000010 	.word	0x20000010

08002760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x20>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x24>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_IncTick+0x24>)
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000014 	.word	0x20000014
 8002784:	2000072c 	.word	0x2000072c

08002788 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;  
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_GetTick+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000072c 	.word	0x2000072c

080027a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0ed      	b.n	800298e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fa9c 	bl	8000cfc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d4:	f7ff ffd8 	bl	8002788 <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027da:	e012      	b.n	8002802 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027dc:	f7ff ffd4 	bl	8002788 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b0a      	cmp	r3, #10
 80027e8:	d90b      	bls.n	8002802 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2205      	movs	r2, #5
 80027fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e0c5      	b.n	800298e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0e5      	beq.n	80027dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0202 	bic.w	r2, r2, #2
 800281e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002820:	f7ff ffb2 	bl	8002788 <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002826:	e012      	b.n	800284e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002828:	f7ff ffae 	bl	8002788 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b0a      	cmp	r3, #10
 8002834:	d90b      	bls.n	800284e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2205      	movs	r2, #5
 8002846:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e09f      	b.n	800298e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e5      	bne.n	8002828 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7e1b      	ldrb	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d108      	bne.n	8002876 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e007      	b.n	8002886 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7e5b      	ldrb	r3, [r3, #25]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d108      	bne.n	80028a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e007      	b.n	80028b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	7e9b      	ldrb	r3, [r3, #26]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d108      	bne.n	80028ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0220 	orr.w	r2, r2, #32
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e007      	b.n	80028da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0220 	bic.w	r2, r2, #32
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7edb      	ldrb	r3, [r3, #27]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d108      	bne.n	80028f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0210 	bic.w	r2, r2, #16
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e007      	b.n	8002904 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0210 	orr.w	r2, r2, #16
 8002902:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7f1b      	ldrb	r3, [r3, #28]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d108      	bne.n	800291e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0208 	orr.w	r2, r2, #8
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e007      	b.n	800292e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0208 	bic.w	r2, r2, #8
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7f5b      	ldrb	r3, [r3, #29]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0204 	orr.w	r2, r2, #4
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e007      	b.n	8002958 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0204 	bic.w	r2, r2, #4
 8002956:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	ea42 0103 	orr.w	r1, r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	1e5a      	subs	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d003      	beq.n	80029bc <HAL_CAN_ConfigFilter+0x26>
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	f040 80aa 	bne.w	8002b10 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2201      	movs	r2, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d123      	bne.n	8002a3e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	401a      	ands	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3248      	adds	r2, #72	; 0x48
 8002a1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a34:	6979      	ldr	r1, [r7, #20]
 8002a36:	3348      	adds	r3, #72	; 0x48
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d122      	bne.n	8002a8c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3248      	adds	r2, #72	; 0x48
 8002a6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a82:	6979      	ldr	r1, [r7, #20]
 8002a84:	3348      	adds	r3, #72	; 0x48
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002aa6:	e007      	b.n	8002ab8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ad2:	e007      	b.n	8002ae4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b02:	f023 0201 	bic.w	r2, r3, #1
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e006      	b.n	8002b1e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d12e      	bne.n	8002b9c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b56:	f7ff fe17 	bl	8002788 <HAL_GetTick>
 8002b5a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b5c:	e012      	b.n	8002b84 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b5e:	f7ff fe13 	bl	8002788 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b0a      	cmp	r3, #10
 8002b6a:	d90b      	bls.n	8002b84 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2205      	movs	r2, #5
 8002b7c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e012      	b.n	8002baa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e5      	bne.n	8002b5e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e006      	b.n	8002baa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b089      	sub	sp, #36	; 0x24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bd0:	7ffb      	ldrb	r3, [r7, #31]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d003      	beq.n	8002bde <HAL_CAN_AddTxMessage+0x2c>
 8002bd6:	7ffb      	ldrb	r3, [r7, #31]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	f040 80b8 	bne.w	8002d4e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a0 	beq.w	8002d3e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	0e1b      	lsrs	r3, r3, #24
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d907      	bls.n	8002c1e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e09e      	b.n	8002d5c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c1e:	2201      	movs	r2, #1
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c3a:	68f9      	ldr	r1, [r7, #12]
 8002c3c:	6809      	ldr	r1, [r1, #0]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3318      	adds	r3, #24
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	440b      	add	r3, r1
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e00f      	b.n	8002c6c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c56:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c60:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3318      	adds	r3, #24
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	440b      	add	r3, r1
 8002c6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3318      	adds	r3, #24
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	7d1b      	ldrb	r3, [r3, #20]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d111      	bne.n	8002cac <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3318      	adds	r3, #24
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	6811      	ldr	r1, [r2, #0]
 8002c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3318      	adds	r3, #24
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3304      	adds	r3, #4
 8002caa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3307      	adds	r3, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	061a      	lsls	r2, r3, #24
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3306      	adds	r3, #6
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	041b      	lsls	r3, r3, #16
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3305      	adds	r3, #5
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	3204      	adds	r2, #4
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	4610      	mov	r0, r2
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	6811      	ldr	r1, [r2, #0]
 8002cd4:	ea43 0200 	orr.w	r2, r3, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002ce2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3303      	adds	r3, #3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	061a      	lsls	r2, r3, #24
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3302      	adds	r3, #2
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	4610      	mov	r0, r2
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	6811      	ldr	r1, [r2, #0]
 8002d0a:	ea43 0200 	orr.w	r2, r3, r0
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002d18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3318      	adds	r3, #24
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	4413      	add	r3, r2
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	6811      	ldr	r1, [r2, #0]
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3318      	adds	r3, #24
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	440b      	add	r3, r1
 8002d38:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e00e      	b.n	8002d5c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e006      	b.n	8002d5c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
  }
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3724      	adds	r7, #36	; 0x24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d003      	beq.n	8002d8c <HAL_CAN_GetRxMessage+0x24>
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	f040 80f3 	bne.w	8002f72 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10e      	bne.n	8002db0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d116      	bne.n	8002dce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0e7      	b.n	8002f80 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d107      	bne.n	8002dce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0d8      	b.n	8002f80 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	331b      	adds	r3, #27
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	4413      	add	r3, r2
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0204 	and.w	r2, r3, #4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10c      	bne.n	8002e06 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	331b      	adds	r3, #27
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0d5b      	lsrs	r3, r3, #21
 8002dfc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e00b      	b.n	8002e1e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	331b      	adds	r3, #27
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	08db      	lsrs	r3, r3, #3
 8002e16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	331b      	adds	r3, #27
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	4413      	add	r3, r2
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0202 	and.w	r2, r3, #2
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	331b      	adds	r3, #27
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 020f 	and.w	r2, r3, #15
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	331b      	adds	r3, #27
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	4413      	add	r3, r2
 8002e58:	3304      	adds	r3, #4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	331b      	adds	r3, #27
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	3304      	adds	r3, #4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0c1b      	lsrs	r3, r3, #16
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	0a1a      	lsrs	r2, r3, #8
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0c1a      	lsrs	r2, r3, #16
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	0e1a      	lsrs	r2, r3, #24
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	3303      	adds	r3, #3
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0a1a      	lsrs	r2, r3, #8
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	3305      	adds	r3, #5
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0c1a      	lsrs	r2, r3, #16
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	3306      	adds	r3, #6
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e1a      	lsrs	r2, r3, #24
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	3307      	adds	r3, #7
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d108      	bne.n	8002f5e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0220 	orr.w	r2, r2, #32
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	e007      	b.n	8002f6e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0220 	orr.w	r2, r2, #32
 8002f6c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e006      	b.n	8002f80 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f9c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d002      	beq.n	8002faa <HAL_CAN_ActivateNotification+0x1e>
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d109      	bne.n	8002fbe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6959      	ldr	r1, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e006      	b.n	8002fcc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
  }
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d07c      	beq.n	8003118 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d023      	beq.n	8003070 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2201      	movs	r2, #1
 800302e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f983 	bl	8003346 <HAL_CAN_TxMailbox0CompleteCallback>
 8003040:	e016      	b.n	8003070 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
 8003054:	e00c      	b.n	8003070 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
 8003068:	e002      	b.n	8003070 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f989 	bl	8003382 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d024      	beq.n	80030c4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003082:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f963 	bl	800335a <HAL_CAN_TxMailbox1CompleteCallback>
 8003094:	e016      	b.n	80030c4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	e00c      	b.n	80030c4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
 80030bc:	e002      	b.n	80030c4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f969 	bl	8003396 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d024      	beq.n	8003118 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f943 	bl	800336e <HAL_CAN_TxMailbox2CompleteCallback>
 80030e8:	e016      	b.n	8003118 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d004      	beq.n	80030fe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
 80030fc:	e00c      	b.n	8003118 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
 8003110:	e002      	b.n	8003118 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f949 	bl	80033aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00c      	beq.n	800313c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003132:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2210      	movs	r2, #16
 800313a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2208      	movs	r2, #8
 8003156:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f930 	bl	80033be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe ff7e 	bl	8002078 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003196:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2210      	movs	r2, #16
 800319e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2208      	movs	r2, #8
 80031ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f912 	bl	80033e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8f9 	bl	80033d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2210      	movs	r2, #16
 80031fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8fc 	bl	80033fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2208      	movs	r2, #8
 800321c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8f5 	bl	800340e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d07b      	beq.n	8003326 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d072      	beq.n	800331e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	f043 0304 	orr.w	r3, r3, #4
 800328a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003292:	2b00      	cmp	r3, #0
 8003294:	d043      	beq.n	800331e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03e      	beq.n	800331e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a6:	2b60      	cmp	r3, #96	; 0x60
 80032a8:	d02b      	beq.n	8003302 <HAL_CAN_IRQHandler+0x32a>
 80032aa:	2b60      	cmp	r3, #96	; 0x60
 80032ac:	d82e      	bhi.n	800330c <HAL_CAN_IRQHandler+0x334>
 80032ae:	2b50      	cmp	r3, #80	; 0x50
 80032b0:	d022      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x320>
 80032b2:	2b50      	cmp	r3, #80	; 0x50
 80032b4:	d82a      	bhi.n	800330c <HAL_CAN_IRQHandler+0x334>
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d019      	beq.n	80032ee <HAL_CAN_IRQHandler+0x316>
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	d826      	bhi.n	800330c <HAL_CAN_IRQHandler+0x334>
 80032be:	2b30      	cmp	r3, #48	; 0x30
 80032c0:	d010      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x30c>
 80032c2:	2b30      	cmp	r3, #48	; 0x30
 80032c4:	d822      	bhi.n	800330c <HAL_CAN_IRQHandler+0x334>
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d002      	beq.n	80032d0 <HAL_CAN_IRQHandler+0x2f8>
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d005      	beq.n	80032da <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032ce:	e01d      	b.n	800330c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	f043 0308 	orr.w	r3, r3, #8
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032d8:	e019      	b.n	800330e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	f043 0310 	orr.w	r3, r3, #16
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032e2:	e014      	b.n	800330e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f043 0320 	orr.w	r3, r3, #32
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032ec:	e00f      	b.n	800330e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032f6:	e00a      	b.n	800330e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003300:	e005      	b.n	800330e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800330a:	e000      	b.n	800330e <HAL_CAN_IRQHandler+0x336>
            break;
 800330c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800331c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2204      	movs	r2, #4
 8003324:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f872 	bl	8003422 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800333e:	bf00      	nop
 8003340:	3728      	adds	r7, #40	; 0x28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <__NVIC_SetPriorityGrouping+0x44>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003454:	4013      	ands	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800346a:	4a04      	ldr	r2, [pc, #16]	; (800347c <__NVIC_SetPriorityGrouping+0x44>)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	60d3      	str	r3, [r2, #12]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <__NVIC_GetPriorityGrouping+0x18>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 0307 	and.w	r3, r3, #7
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	db0b      	blt.n	80034c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	4907      	ldr	r1, [pc, #28]	; (80034d4 <__NVIC_EnableIRQ+0x38>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2001      	movs	r0, #1
 80034be:	fa00 f202 	lsl.w	r2, r0, r2
 80034c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000e100 	.word	0xe000e100

080034d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	db0a      	blt.n	8003502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	490c      	ldr	r1, [pc, #48]	; (8003524 <__NVIC_SetPriority+0x4c>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	440b      	add	r3, r1
 80034fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003500:	e00a      	b.n	8003518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4908      	ldr	r1, [pc, #32]	; (8003528 <__NVIC_SetPriority+0x50>)
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3b04      	subs	r3, #4
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	440b      	add	r3, r1
 8003516:	761a      	strb	r2, [r3, #24]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000e100 	.word	0xe000e100
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f1c3 0307 	rsb	r3, r3, #7
 8003546:	2b04      	cmp	r3, #4
 8003548:	bf28      	it	cs
 800354a:	2304      	movcs	r3, #4
 800354c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3304      	adds	r3, #4
 8003552:	2b06      	cmp	r3, #6
 8003554:	d902      	bls.n	800355c <NVIC_EncodePriority+0x30>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3b03      	subs	r3, #3
 800355a:	e000      	b.n	800355e <NVIC_EncodePriority+0x32>
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	f04f 32ff 	mov.w	r2, #4294967295
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	401a      	ands	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003574:	f04f 31ff 	mov.w	r1, #4294967295
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43d9      	mvns	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	4313      	orrs	r3, r2
         );
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	; 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a4:	d301      	bcc.n	80035aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00f      	b.n	80035ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <SysTick_Config+0x40>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b2:	210f      	movs	r1, #15
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295
 80035b8:	f7ff ff8e 	bl	80034d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <SysTick_Config+0x40>)
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <SysTick_Config+0x40>)
 80035c4:	2207      	movs	r2, #7
 80035c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	e000e010 	.word	0xe000e010

080035d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff29 	bl	8003438 <__NVIC_SetPriorityGrouping>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003600:	f7ff ff3e 	bl	8003480 <__NVIC_GetPriorityGrouping>
 8003604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	6978      	ldr	r0, [r7, #20]
 800360c:	f7ff ff8e 	bl	800352c <NVIC_EncodePriority>
 8003610:	4602      	mov	r2, r0
 8003612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff5d 	bl	80034d8 <__NVIC_SetPriority>
}
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff31 	bl	800349c <__NVIC_EnableIRQ>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ffa2 	bl	8003594 <SysTick_Config>
 8003650:	4603      	mov	r3, r0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800366a:	e160      	b.n	800392e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	4013      	ands	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 8152 	beq.w	8003928 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d005      	beq.n	800369c <HAL_GPIO_Init+0x40>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d130      	bne.n	80036fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	2203      	movs	r2, #3
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d2:	2201      	movs	r2, #1
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	f003 0201 	and.w	r2, r3, #1
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b03      	cmp	r3, #3
 8003708:	d017      	beq.n	800373a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	2203      	movs	r2, #3
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d123      	bne.n	800378e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	08da      	lsrs	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3208      	adds	r2, #8
 800374e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	220f      	movs	r2, #15
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	08da      	lsrs	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3208      	adds	r2, #8
 8003788:	6939      	ldr	r1, [r7, #16]
 800378a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	2203      	movs	r2, #3
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0203 	and.w	r2, r3, #3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80ac 	beq.w	8003928 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d0:	4b5e      	ldr	r3, [pc, #376]	; (800394c <HAL_GPIO_Init+0x2f0>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	4a5d      	ldr	r2, [pc, #372]	; (800394c <HAL_GPIO_Init+0x2f0>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6193      	str	r3, [r2, #24]
 80037dc:	4b5b      	ldr	r3, [pc, #364]	; (800394c <HAL_GPIO_Init+0x2f0>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037e8:	4a59      	ldr	r2, [pc, #356]	; (8003950 <HAL_GPIO_Init+0x2f4>)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	220f      	movs	r2, #15
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003812:	d025      	beq.n	8003860 <HAL_GPIO_Init+0x204>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a4f      	ldr	r2, [pc, #316]	; (8003954 <HAL_GPIO_Init+0x2f8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d01f      	beq.n	800385c <HAL_GPIO_Init+0x200>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a4e      	ldr	r2, [pc, #312]	; (8003958 <HAL_GPIO_Init+0x2fc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d019      	beq.n	8003858 <HAL_GPIO_Init+0x1fc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a4d      	ldr	r2, [pc, #308]	; (800395c <HAL_GPIO_Init+0x300>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <HAL_GPIO_Init+0x1f8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a4c      	ldr	r2, [pc, #304]	; (8003960 <HAL_GPIO_Init+0x304>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00d      	beq.n	8003850 <HAL_GPIO_Init+0x1f4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a4b      	ldr	r2, [pc, #300]	; (8003964 <HAL_GPIO_Init+0x308>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <HAL_GPIO_Init+0x1f0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a4a      	ldr	r2, [pc, #296]	; (8003968 <HAL_GPIO_Init+0x30c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_GPIO_Init+0x1ec>
 8003844:	2306      	movs	r3, #6
 8003846:	e00c      	b.n	8003862 <HAL_GPIO_Init+0x206>
 8003848:	2307      	movs	r3, #7
 800384a:	e00a      	b.n	8003862 <HAL_GPIO_Init+0x206>
 800384c:	2305      	movs	r3, #5
 800384e:	e008      	b.n	8003862 <HAL_GPIO_Init+0x206>
 8003850:	2304      	movs	r3, #4
 8003852:	e006      	b.n	8003862 <HAL_GPIO_Init+0x206>
 8003854:	2303      	movs	r3, #3
 8003856:	e004      	b.n	8003862 <HAL_GPIO_Init+0x206>
 8003858:	2302      	movs	r3, #2
 800385a:	e002      	b.n	8003862 <HAL_GPIO_Init+0x206>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_GPIO_Init+0x206>
 8003860:	2300      	movs	r3, #0
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	f002 0203 	and.w	r2, r2, #3
 8003868:	0092      	lsls	r2, r2, #2
 800386a:	4093      	lsls	r3, r2
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003872:	4937      	ldr	r1, [pc, #220]	; (8003950 <HAL_GPIO_Init+0x2f4>)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	3302      	adds	r3, #2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003880:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_GPIO_Init+0x310>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	43db      	mvns	r3, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038a4:	4a31      	ldr	r2, [pc, #196]	; (800396c <HAL_GPIO_Init+0x310>)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038aa:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_GPIO_Init+0x310>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038ce:	4a27      	ldr	r2, [pc, #156]	; (800396c <HAL_GPIO_Init+0x310>)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_GPIO_Init+0x310>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038f8:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_GPIO_Init+0x310>)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038fe:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_GPIO_Init+0x310>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43db      	mvns	r3, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003922:	4a12      	ldr	r2, [pc, #72]	; (800396c <HAL_GPIO_Init+0x310>)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3301      	adds	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f ae97 	bne.w	800366c <HAL_GPIO_Init+0x10>
  }
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40021000 	.word	0x40021000
 8003950:	40010000 	.word	0x40010000
 8003954:	48000400 	.word	0x48000400
 8003958:	48000800 	.word	0x48000800
 800395c:	48000c00 	.word	0x48000c00
 8003960:	48001000 	.word	0x48001000
 8003964:	48001400 	.word	0x48001400
 8003968:	48001800 	.word	0x48001800
 800396c:	40010400 	.word	0x40010400

08003970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
 800397c:	4613      	mov	r3, r2
 800397e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003980:	787b      	ldrb	r3, [r7, #1]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800398c:	e002      	b.n	8003994 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800398e:	887a      	ldrh	r2, [r7, #2]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4013      	ands	r3, r2
 80039b8:	041a      	lsls	r2, r3, #16
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	43d9      	mvns	r1, r3
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	400b      	ands	r3, r1
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	619a      	str	r2, [r3, #24]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d006      	beq.n	80039f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039ea:	4a05      	ldr	r2, [pc, #20]	; (8003a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fc78 	bl	80022e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40010400 	.word	0x40010400

08003a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a14:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d102      	bne.n	8003a2a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f001 b83a 	b.w	8004a9e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 816f 	beq.w	8003d1e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a40:	4bb5      	ldr	r3, [pc, #724]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 030c 	and.w	r3, r3, #12
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d00c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a4c:	4bb2      	ldr	r3, [pc, #712]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d15c      	bne.n	8003b12 <HAL_RCC_OscConfig+0x10e>
 8003a58:	4baf      	ldr	r3, [pc, #700]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d155      	bne.n	8003b12 <HAL_RCC_OscConfig+0x10e>
 8003a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a7a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_OscConfig+0x94>
 8003a92:	4ba1      	ldr	r3, [pc, #644]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	e015      	b.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
 8003a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a9c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ab4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003ac0:	4b95      	ldr	r3, [pc, #596]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ac8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003acc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003ad0:	fa92 f2a2 	rbit	r2, r2
 8003ad4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003ad8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003adc:	fab2 f282 	clz	r2, r2
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f042 0220 	orr.w	r2, r2, #32
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	f002 021f 	and.w	r2, r2, #31
 8003aec:	2101      	movs	r1, #1
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8111 	beq.w	8003d1c <HAL_RCC_OscConfig+0x318>
 8003afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 8108 	bne.w	8003d1c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f000 bfc6 	b.w	8004a9e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x12e>
 8003b24:	4b7c      	ldr	r3, [pc, #496]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a7b      	ldr	r2, [pc, #492]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	e036      	b.n	8003ba0 <HAL_RCC_OscConfig+0x19c>
 8003b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x158>
 8003b42:	4b75      	ldr	r3, [pc, #468]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a74      	ldr	r2, [pc, #464]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b72      	ldr	r3, [pc, #456]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a71      	ldr	r2, [pc, #452]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e021      	b.n	8003ba0 <HAL_RCC_OscConfig+0x19c>
 8003b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x184>
 8003b6e:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a69      	ldr	r2, [pc, #420]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a66      	ldr	r2, [pc, #408]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x19c>
 8003b88:	4b63      	ldr	r3, [pc, #396]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a62      	ldr	r2, [pc, #392]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b60      	ldr	r3, [pc, #384]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5f      	ldr	r2, [pc, #380]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d059      	beq.n	8003c64 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fdea 	bl	8002788 <HAL_GetTick>
 8003bb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bba:	f7fe fde5 	bl	8002788 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d902      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	f000 bf67 	b.w	8004a9e <HAL_RCC_OscConfig+0x109a>
 8003bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bd4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003be4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be8:	fab3 f383 	clz	r3, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d102      	bne.n	8003c02 <HAL_RCC_OscConfig+0x1fe>
 8003bfc:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	e015      	b.n	8003c2e <HAL_RCC_OscConfig+0x22a>
 8003c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c1a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c1e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c32:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003c36:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003c3a:	fa92 f2a2 	rbit	r2, r2
 8003c3e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003c42:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c46:	fab2 f282 	clz	r2, r2
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	f042 0220 	orr.w	r2, r2, #32
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	f002 021f 	and.w	r2, r2, #31
 8003c56:	2101      	movs	r1, #1
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ab      	beq.n	8003bba <HAL_RCC_OscConfig+0x1b6>
 8003c62:	e05c      	b.n	8003d1e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fd90 	bl	8002788 <HAL_GetTick>
 8003c68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6e:	f7fe fd8b 	bl	8002788 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d902      	bls.n	8003c84 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	f000 bf0d 	b.w	8004a9e <HAL_RCC_OscConfig+0x109a>
 8003c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c88:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003c98:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d102      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x2b2>
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCC_OscConfig+0x2de>
 8003cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cd2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ce6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003cea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003cee:	fa92 f2a2 	rbit	r2, r2
 8003cf2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003cf6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003cfa:	fab2 f282 	clz	r2, r2
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	f042 0220 	orr.w	r2, r2, #32
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	f002 021f 	and.w	r2, r2, #31
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ab      	bne.n	8003c6e <HAL_RCC_OscConfig+0x26a>
 8003d16:	e002      	b.n	8003d1e <HAL_RCC_OscConfig+0x31a>
 8003d18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 817f 	beq.w	8004032 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d34:	4ba7      	ldr	r3, [pc, #668]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 030c 	and.w	r3, r3, #12
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d40:	4ba4      	ldr	r3, [pc, #656]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d173      	bne.n	8003e34 <HAL_RCC_OscConfig+0x430>
 8003d4c:	4ba1      	ldr	r3, [pc, #644]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d58:	d16c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x430>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003d6c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d102      	bne.n	8003d8a <HAL_RCC_OscConfig+0x386>
 8003d84:	4b93      	ldr	r3, [pc, #588]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	e013      	b.n	8003db2 <HAL_RCC_OscConfig+0x3ae>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003da2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003da6:	fa93 f3a3 	rbit	r3, r3
 8003daa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003dae:	4b89      	ldr	r3, [pc, #548]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2202      	movs	r2, #2
 8003db4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003db8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003dbc:	fa92 f2a2 	rbit	r2, r2
 8003dc0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003dc4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003dc8:	fab2 f282 	clz	r2, r2
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	f042 0220 	orr.w	r2, r2, #32
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	f002 021f 	and.w	r2, r2, #31
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f202 	lsl.w	r2, r1, r2
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCC_OscConfig+0x3f6>
 8003de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d002      	beq.n	8003dfa <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f000 be52 	b.w	8004a9e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	4b76      	ldr	r3, [pc, #472]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	21f8      	movs	r1, #248	; 0xf8
 8003e10:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003e18:	fa91 f1a1 	rbit	r1, r1
 8003e1c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003e20:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e24:	fab1 f181 	clz	r1, r1
 8003e28:	b2c9      	uxtb	r1, r1
 8003e2a:	408b      	lsls	r3, r1
 8003e2c:	4969      	ldr	r1, [pc, #420]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e32:	e0fe      	b.n	8004032 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8088 	beq.w	8003f56 <HAL_RCC_OscConfig+0x552>
 8003e46:	2301      	movs	r3, #1
 8003e48:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003e58:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e5c:	fab3 f383 	clz	r3, r3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2301      	movs	r3, #1
 8003e70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe fc89 	bl	8002788 <HAL_GetTick>
 8003e76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e7c:	f7fe fc84 	bl	8002788 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d902      	bls.n	8003e92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	f000 be06 	b.w	8004a9e <HAL_RCC_OscConfig+0x109a>
 8003e92:	2302      	movs	r3, #2
 8003e94:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003ea4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	fab3 f383 	clz	r3, r3
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d102      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4be>
 8003ebc:	4b45      	ldr	r3, [pc, #276]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	e013      	b.n	8003eea <HAL_RCC_OscConfig+0x4e6>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003eda:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2202      	movs	r2, #2
 8003eec:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003ef0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003ef4:	fa92 f2a2 	rbit	r2, r2
 8003ef8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003efc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f00:	fab2 f282 	clz	r2, r2
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	f042 0220 	orr.w	r2, r2, #32
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	f002 021f 	and.w	r2, r2, #31
 8003f10:	2101      	movs	r1, #1
 8003f12:	fa01 f202 	lsl.w	r2, r1, r2
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0af      	beq.n	8003e7c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	21f8      	movs	r1, #248	; 0xf8
 8003f32:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003f3a:	fa91 f1a1 	rbit	r1, r1
 8003f3e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003f42:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f46:	fab1 f181 	clz	r1, r1
 8003f4a:	b2c9      	uxtb	r1, r1
 8003f4c:	408b      	lsls	r3, r1
 8003f4e:	4921      	ldr	r1, [pc, #132]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	600b      	str	r3, [r1, #0]
 8003f54:	e06d      	b.n	8004032 <HAL_RCC_OscConfig+0x62e>
 8003f56:	2301      	movs	r3, #1
 8003f58:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f60:	fa93 f3a3 	rbit	r3, r3
 8003f64:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003f68:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f82:	f7fe fc01 	bl	8002788 <HAL_GetTick>
 8003f86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f8c:	f7fe fbfc 	bl	8002788 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d902      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	f000 bd7e 	b.w	8004a9e <HAL_RCC_OscConfig+0x109a>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003fac:	fa93 f3a3 	rbit	r3, r3
 8003fb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003fb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x5d4>
 8003fcc:	4b01      	ldr	r3, [pc, #4]	; (8003fd4 <HAL_RCC_OscConfig+0x5d0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	e016      	b.n	8004000 <HAL_RCC_OscConfig+0x5fc>
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003fea:	2302      	movs	r3, #2
 8003fec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ff0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003ff4:	fa93 f3a3 	rbit	r3, r3
 8003ff8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ffc:	4bbf      	ldr	r3, [pc, #764]	; (80042fc <HAL_RCC_OscConfig+0x8f8>)
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	2202      	movs	r2, #2
 8004002:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004006:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800400a:	fa92 f2a2 	rbit	r2, r2
 800400e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004012:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004016:	fab2 f282 	clz	r2, r2
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	f042 0220 	orr.w	r2, r2, #32
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	f002 021f 	and.w	r2, r2, #31
 8004026:	2101      	movs	r1, #1
 8004028:	fa01 f202 	lsl.w	r2, r1, r2
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1ac      	bne.n	8003f8c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8113 	beq.w	800426e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800404c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d07c      	beq.n	8004152 <HAL_RCC_OscConfig+0x74e>
 8004058:	2301      	movs	r3, #1
 800405a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004062:	fa93 f3a3 	rbit	r3, r3
 8004066:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800406a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	4ba2      	ldr	r3, [pc, #648]	; (8004300 <HAL_RCC_OscConfig+0x8fc>)
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	461a      	mov	r2, r3
 800407e:	2301      	movs	r3, #1
 8004080:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004082:	f7fe fb81 	bl	8002788 <HAL_GetTick>
 8004086:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408c:	f7fe fb7c 	bl	8002788 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d902      	bls.n	80040a2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	f000 bcfe 	b.w	8004a9e <HAL_RCC_OscConfig+0x109a>
 80040a2:	2302      	movs	r3, #2
 80040a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040c2:	2202      	movs	r2, #2
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	fa93 f2a3 	rbit	r2, r3
 80040d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80040e6:	2202      	movs	r2, #2
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	fa93 f2a3 	rbit	r2, r3
 80040f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004100:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	4b7e      	ldr	r3, [pc, #504]	; (80042fc <HAL_RCC_OscConfig+0x8f8>)
 8004104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800410e:	2102      	movs	r1, #2
 8004110:	6019      	str	r1, [r3, #0]
 8004112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004116:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	fa93 f1a3 	rbit	r1, r3
 8004120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004124:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004128:	6019      	str	r1, [r3, #0]
  return result;
 800412a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d09d      	beq.n	800408c <HAL_RCC_OscConfig+0x688>
 8004150:	e08d      	b.n	800426e <HAL_RCC_OscConfig+0x86a>
 8004152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004156:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800415a:	2201      	movs	r2, #1
 800415c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004162:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	fa93 f2a3 	rbit	r2, r3
 800416c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004170:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004174:	601a      	str	r2, [r3, #0]
  return result;
 8004176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800417a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800417e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	fab3 f383 	clz	r3, r3
 8004184:	b2db      	uxtb	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	4b5d      	ldr	r3, [pc, #372]	; (8004300 <HAL_RCC_OscConfig+0x8fc>)
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	461a      	mov	r2, r3
 8004190:	2300      	movs	r3, #0
 8004192:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004194:	f7fe faf8 	bl	8002788 <HAL_GetTick>
 8004198:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419e:	f7fe faf3 	bl	8002788 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d902      	bls.n	80041b4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	f000 bc75 	b.w	8004a9e <HAL_RCC_OscConfig+0x109a>
 80041b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041bc:	2202      	movs	r2, #2
 80041be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	fa93 f2a3 	rbit	r2, r3
 80041ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041e0:	2202      	movs	r2, #2
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	fa93 f2a3 	rbit	r2, r3
 80041f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004200:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004204:	2202      	movs	r2, #2
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800420c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	fa93 f2a3 	rbit	r2, r3
 8004216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800421a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800421e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	4b36      	ldr	r3, [pc, #216]	; (80042fc <HAL_RCC_OscConfig+0x8f8>)
 8004222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004228:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800422c:	2102      	movs	r1, #2
 800422e:	6019      	str	r1, [r3, #0]
 8004230:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004234:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	fa93 f1a3 	rbit	r1, r3
 800423e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004242:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004246:	6019      	str	r1, [r3, #0]
  return result;
 8004248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800424c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d197      	bne.n	800419e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004272:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 81a5 	beq.w	80045ce <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428a:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <HAL_RCC_OscConfig+0x8f8>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d116      	bne.n	80042c4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_RCC_OscConfig+0x8f8>)
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_RCC_OscConfig+0x8f8>)
 800429c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a0:	61d3      	str	r3, [r2, #28]
 80042a2:	4b16      	ldr	r3, [pc, #88]	; (80042fc <HAL_RCC_OscConfig+0x8f8>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80042aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042bc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <HAL_RCC_OscConfig+0x900>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d121      	bne.n	8004314 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <HAL_RCC_OscConfig+0x900>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <HAL_RCC_OscConfig+0x900>)
 80042d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042dc:	f7fe fa54 	bl	8002788 <HAL_GetTick>
 80042e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e4:	e010      	b.n	8004308 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e6:	f7fe fa4f 	bl	8002788 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d908      	bls.n	8004308 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e3d1      	b.n	8004a9e <HAL_RCC_OscConfig+0x109a>
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	10908120 	.word	0x10908120
 8004304:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	4b8d      	ldr	r3, [pc, #564]	; (8004540 <HAL_RCC_OscConfig+0xb3c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0e8      	beq.n	80042e6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004318:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x92e>
 8004324:	4b87      	ldr	r3, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4a86      	ldr	r2, [pc, #536]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6213      	str	r3, [r2, #32]
 8004330:	e035      	b.n	800439e <HAL_RCC_OscConfig+0x99a>
 8004332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004336:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x958>
 8004342:	4b80      	ldr	r3, [pc, #512]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4a7f      	ldr	r2, [pc, #508]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6213      	str	r3, [r2, #32]
 800434e:	4b7d      	ldr	r3, [pc, #500]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a7c      	ldr	r2, [pc, #496]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	e020      	b.n	800439e <HAL_RCC_OscConfig+0x99a>
 800435c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004360:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d10c      	bne.n	8004386 <HAL_RCC_OscConfig+0x982>
 800436c:	4b75      	ldr	r3, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4a74      	ldr	r2, [pc, #464]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004372:	f043 0304 	orr.w	r3, r3, #4
 8004376:	6213      	str	r3, [r2, #32]
 8004378:	4b72      	ldr	r3, [pc, #456]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4a71      	ldr	r2, [pc, #452]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	6213      	str	r3, [r2, #32]
 8004384:	e00b      	b.n	800439e <HAL_RCC_OscConfig+0x99a>
 8004386:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4a6e      	ldr	r2, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	6213      	str	r3, [r2, #32]
 8004392:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	4a6b      	ldr	r2, [pc, #428]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800439e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8081 	beq.w	80044b2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b0:	f7fe f9ea 	bl	8002788 <HAL_GetTick>
 80043b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fe f9e5 	bl	8002788 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e365      	b.n	8004a9e <HAL_RCC_OscConfig+0x109a>
 80043d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80043da:	2202      	movs	r2, #2
 80043dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	fa93 f2a3 	rbit	r2, r3
 80043ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043fe:	2202      	movs	r2, #2
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004406:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	fa93 f2a3 	rbit	r2, r3
 8004410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004414:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004418:	601a      	str	r2, [r3, #0]
  return result;
 800441a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800441e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004422:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	fab3 f383 	clz	r3, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f043 0302 	orr.w	r3, r3, #2
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d102      	bne.n	800443e <HAL_RCC_OscConfig+0xa3a>
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	e013      	b.n	8004466 <HAL_RCC_OscConfig+0xa62>
 800443e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004442:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004446:	2202      	movs	r2, #2
 8004448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800444e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	fa93 f2a3 	rbit	r2, r3
 8004458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800445c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	4b38      	ldr	r3, [pc, #224]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800446a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800446e:	2102      	movs	r1, #2
 8004470:	6011      	str	r1, [r2, #0]
 8004472:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004476:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	fa92 f1a2 	rbit	r1, r2
 8004480:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004484:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004488:	6011      	str	r1, [r2, #0]
  return result;
 800448a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800448e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	fab2 f282 	clz	r2, r2
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	f002 021f 	and.w	r2, r2, #31
 80044a4:	2101      	movs	r1, #1
 80044a6:	fa01 f202 	lsl.w	r2, r1, r2
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d084      	beq.n	80043ba <HAL_RCC_OscConfig+0x9b6>
 80044b0:	e083      	b.n	80045ba <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b2:	f7fe f969 	bl	8002788 <HAL_GetTick>
 80044b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ba:	e00b      	b.n	80044d4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fe f964 	bl	8002788 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e2e4      	b.n	8004a9e <HAL_RCC_OscConfig+0x109a>
 80044d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80044dc:	2202      	movs	r2, #2
 80044de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	fa93 f2a3 	rbit	r2, r3
 80044ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004500:	2202      	movs	r2, #2
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004508:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	fa93 f2a3 	rbit	r2, r3
 8004512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004516:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800451a:	601a      	str	r2, [r3, #0]
  return result;
 800451c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004520:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004524:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f043 0302 	orr.w	r3, r3, #2
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0xb44>
 800453a:	4b02      	ldr	r3, [pc, #8]	; (8004544 <HAL_RCC_OscConfig+0xb40>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	e017      	b.n	8004570 <HAL_RCC_OscConfig+0xb6c>
 8004540:	40007000 	.word	0x40007000
 8004544:	40021000 	.word	0x40021000
 8004548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800454c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004550:	2202      	movs	r2, #2
 8004552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004558:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	fa93 f2a3 	rbit	r2, r3
 8004562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004566:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	4bb3      	ldr	r3, [pc, #716]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004574:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004578:	2102      	movs	r1, #2
 800457a:	6011      	str	r1, [r2, #0]
 800457c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004580:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	fa92 f1a2 	rbit	r1, r2
 800458a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800458e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004592:	6011      	str	r1, [r2, #0]
  return result;
 8004594:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004598:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	fab2 f282 	clz	r2, r2
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	f002 021f 	and.w	r2, r2, #31
 80045ae:	2101      	movs	r1, #1
 80045b0:	fa01 f202 	lsl.w	r2, r1, r2
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d180      	bne.n	80044bc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045ba:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d105      	bne.n	80045ce <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c2:	4b9e      	ldr	r3, [pc, #632]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4a9d      	ldr	r2, [pc, #628]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 80045c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045cc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 825e 	beq.w	8004a9c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e0:	4b96      	ldr	r3, [pc, #600]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	f000 821f 	beq.w	8004a2c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	f040 8170 	bne.w	80048e0 <HAL_RCC_OscConfig+0xedc>
 8004600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004604:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800460c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004612:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	fa93 f2a3 	rbit	r2, r3
 800461c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004620:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004624:	601a      	str	r2, [r3, #0]
  return result;
 8004626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800462a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800462e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800463a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fe f89f 	bl	8002788 <HAL_GetTick>
 800464a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464e:	e009      	b.n	8004664 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004650:	f7fe f89a 	bl	8002788 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e21c      	b.n	8004a9e <HAL_RCC_OscConfig+0x109a>
 8004664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004668:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800466c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004676:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	fa93 f2a3 	rbit	r2, r3
 8004680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004684:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004688:	601a      	str	r2, [r3, #0]
  return result;
 800468a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004692:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004694:	fab3 f383 	clz	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d102      	bne.n	80046ae <HAL_RCC_OscConfig+0xcaa>
 80046a8:	4b64      	ldr	r3, [pc, #400]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	e027      	b.n	80046fe <HAL_RCC_OscConfig+0xcfa>
 80046ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80046b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046c0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	fa93 f2a3 	rbit	r2, r3
 80046ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80046dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046e6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	fa93 f2a3 	rbit	r2, r3
 80046f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	4b50      	ldr	r3, [pc, #320]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004702:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004706:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800470a:	6011      	str	r1, [r2, #0]
 800470c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004710:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	fa92 f1a2 	rbit	r1, r2
 800471a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800471e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004722:	6011      	str	r1, [r2, #0]
  return result;
 8004724:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004728:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	fab2 f282 	clz	r2, r2
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	f042 0220 	orr.w	r2, r2, #32
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	f002 021f 	and.w	r2, r2, #31
 800473e:	2101      	movs	r1, #1
 8004740:	fa01 f202 	lsl.w	r2, r1, r2
 8004744:	4013      	ands	r3, r2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d182      	bne.n	8004650 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474a:	4b3c      	ldr	r3, [pc, #240]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	f023 020f 	bic.w	r2, r3, #15
 8004752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004756:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	4937      	ldr	r1, [pc, #220]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 8004760:	4313      	orrs	r3, r2
 8004762:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800476c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004770:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a19      	ldr	r1, [r3, #32]
 8004778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800477c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	430b      	orrs	r3, r1
 8004786:	492d      	ldr	r1, [pc, #180]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 8004788:	4313      	orrs	r3, r2
 800478a:	604b      	str	r3, [r1, #4]
 800478c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004790:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800479e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	fa93 f2a3 	rbit	r2, r3
 80047a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80047b0:	601a      	str	r2, [r3, #0]
  return result;
 80047b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80047ba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047bc:	fab3 f383 	clz	r3, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	461a      	mov	r2, r3
 80047ce:	2301      	movs	r3, #1
 80047d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d2:	f7fd ffd9 	bl	8002788 <HAL_GetTick>
 80047d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047da:	e009      	b.n	80047f0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd ffd4 	bl	8002788 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e156      	b.n	8004a9e <HAL_RCC_OscConfig+0x109a>
 80047f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047f4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80047f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004802:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	fa93 f2a3 	rbit	r2, r3
 800480c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004810:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004814:	601a      	str	r2, [r3, #0]
  return result;
 8004816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800481a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800481e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d105      	bne.n	8004840 <HAL_RCC_OscConfig+0xe3c>
 8004834:	4b01      	ldr	r3, [pc, #4]	; (800483c <HAL_RCC_OscConfig+0xe38>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	e02a      	b.n	8004890 <HAL_RCC_OscConfig+0xe8c>
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004844:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800484c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004852:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	fa93 f2a3 	rbit	r2, r3
 800485c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004860:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800486a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800486e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004878:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	fa93 f2a3 	rbit	r2, r3
 8004882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004886:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	4b86      	ldr	r3, [pc, #536]	; (8004aa8 <HAL_RCC_OscConfig+0x10a4>)
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004894:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004898:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800489c:	6011      	str	r1, [r2, #0]
 800489e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048a2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	fa92 f1a2 	rbit	r1, r2
 80048ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048b0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80048b4:	6011      	str	r1, [r2, #0]
  return result;
 80048b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048ba:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	fab2 f282 	clz	r2, r2
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	f042 0220 	orr.w	r2, r2, #32
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	f002 021f 	and.w	r2, r2, #31
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f202 	lsl.w	r2, r1, r2
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f43f af7f 	beq.w	80047dc <HAL_RCC_OscConfig+0xdd8>
 80048de:	e0dd      	b.n	8004a9c <HAL_RCC_OscConfig+0x1098>
 80048e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80048e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	fa93 f2a3 	rbit	r2, r3
 80048fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004900:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004904:	601a      	str	r2, [r3, #0]
  return result;
 8004906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800490a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800490e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800491a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	461a      	mov	r2, r3
 8004922:	2300      	movs	r3, #0
 8004924:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004926:	f7fd ff2f 	bl	8002788 <HAL_GetTick>
 800492a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492e:	e009      	b.n	8004944 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004930:	f7fd ff2a 	bl	8002788 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e0ac      	b.n	8004a9e <HAL_RCC_OscConfig+0x109a>
 8004944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004948:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800494c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004956:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	fa93 f2a3 	rbit	r2, r3
 8004960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004964:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004968:	601a      	str	r2, [r3, #0]
  return result;
 800496a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800496e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004972:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004974:	fab3 f383 	clz	r3, r3
 8004978:	b2db      	uxtb	r3, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d102      	bne.n	800498e <HAL_RCC_OscConfig+0xf8a>
 8004988:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCC_OscConfig+0x10a4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	e027      	b.n	80049de <HAL_RCC_OscConfig+0xfda>
 800498e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004992:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800499a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	fa93 f2a3 	rbit	r2, r3
 80049aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80049bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	fa93 f2a3 	rbit	r2, r3
 80049d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_RCC_OscConfig+0x10a4>)
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049e2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80049e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049ea:	6011      	str	r1, [r2, #0]
 80049ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049f0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	fa92 f1a2 	rbit	r1, r2
 80049fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049fe:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004a02:	6011      	str	r1, [r2, #0]
  return result;
 8004a04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a08:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	fab2 f282 	clz	r2, r2
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	f042 0220 	orr.w	r2, r2, #32
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	f002 021f 	and.w	r2, r2, #31
 8004a1e:	2101      	movs	r1, #1
 8004a20:	fa01 f202 	lsl.w	r2, r1, r2
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d182      	bne.n	8004930 <HAL_RCC_OscConfig+0xf2c>
 8004a2a:	e037      	b.n	8004a9c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e02e      	b.n	8004a9e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_RCC_OscConfig+0x10a4>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004a48:	4b17      	ldr	r3, [pc, #92]	; (8004aa8 <HAL_RCC_OscConfig+0x10a4>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a54:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d117      	bne.n	8004a98 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004a68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a6c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d10b      	bne.n	8004a98 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a84:	f003 020f 	and.w	r2, r3, #15
 8004a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000

08004aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b09e      	sub	sp, #120	; 0x78
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e162      	b.n	8004d8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b90      	ldr	r3, [pc, #576]	; (8004d08 <HAL_RCC_ClockConfig+0x25c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d910      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b8d      	ldr	r3, [pc, #564]	; (8004d08 <HAL_RCC_ClockConfig+0x25c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 0207 	bic.w	r2, r3, #7
 8004ada:	498b      	ldr	r1, [pc, #556]	; (8004d08 <HAL_RCC_ClockConfig+0x25c>)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae2:	4b89      	ldr	r3, [pc, #548]	; (8004d08 <HAL_RCC_ClockConfig+0x25c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e14a      	b.n	8004d8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b00:	4b82      	ldr	r3, [pc, #520]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	497f      	ldr	r1, [pc, #508]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80dc 	beq.w	8004cd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d13c      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xf6>
 8004b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b30:	fa93 f3a3 	rbit	r3, r3
 8004b34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d102      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xa6>
 8004b4c:	4b6f      	ldr	r3, [pc, #444]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	e00f      	b.n	8004b72 <HAL_RCC_ClockConfig+0xc6>
 8004b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b5a:	fa93 f3a3 	rbit	r3, r3
 8004b5e:	667b      	str	r3, [r7, #100]	; 0x64
 8004b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b64:	663b      	str	r3, [r7, #96]	; 0x60
 8004b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b68:	fa93 f3a3 	rbit	r3, r3
 8004b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b6e:	4b67      	ldr	r3, [pc, #412]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b76:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b7a:	fa92 f2a2 	rbit	r2, r2
 8004b7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004b80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b82:	fab2 f282 	clz	r2, r2
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	f042 0220 	orr.w	r2, r2, #32
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	f002 021f 	and.w	r2, r2, #31
 8004b92:	2101      	movs	r1, #1
 8004b94:	fa01 f202 	lsl.w	r2, r1, r2
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d17b      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0f3      	b.n	8004d8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d13c      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x178>
 8004baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb2:	fa93 f3a3 	rbit	r3, r3
 8004bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	fab3 f383 	clz	r3, r3
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d102      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x128>
 8004bce:	4b4f      	ldr	r3, [pc, #316]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	e00f      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x148>
 8004bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	647b      	str	r3, [r7, #68]	; 0x44
 8004be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004be6:	643b      	str	r3, [r7, #64]	; 0x40
 8004be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf0:	4b46      	ldr	r3, [pc, #280]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bf8:	63ba      	str	r2, [r7, #56]	; 0x38
 8004bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bfc:	fa92 f2a2 	rbit	r2, r2
 8004c00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c04:	fab2 f282 	clz	r2, r2
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	f042 0220 	orr.w	r2, r2, #32
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	f002 021f 	and.w	r2, r2, #31
 8004c14:	2101      	movs	r1, #1
 8004c16:	fa01 f202 	lsl.w	r2, r1, r2
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d13a      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0b2      	b.n	8004d8a <HAL_RCC_ClockConfig+0x2de>
 8004c24:	2302      	movs	r3, #2
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d102      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x1a0>
 8004c46:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	e00d      	b.n	8004c68 <HAL_RCC_ClockConfig+0x1bc>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	fa93 f3a3 	rbit	r3, r3
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
 8004c58:	2302      	movs	r3, #2
 8004c5a:	623b      	str	r3, [r7, #32]
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	fa93 f3a3 	rbit	r3, r3
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2202      	movs	r2, #2
 8004c6a:	61ba      	str	r2, [r7, #24]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	fa92 f2a2 	rbit	r2, r2
 8004c72:	617a      	str	r2, [r7, #20]
  return result;
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	fab2 f282 	clz	r2, r2
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	f042 0220 	orr.w	r2, r2, #32
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	f002 021f 	and.w	r2, r2, #31
 8004c86:	2101      	movs	r1, #1
 8004c88:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e079      	b.n	8004d8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c96:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f023 0203 	bic.w	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	491a      	ldr	r1, [pc, #104]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca8:	f7fd fd6e 	bl	8002788 <HAL_GetTick>
 8004cac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb0:	f7fd fd6a 	bl	8002788 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e061      	b.n	8004d8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 020c 	and.w	r2, r3, #12
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d1eb      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_ClockConfig+0x25c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d214      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_RCC_ClockConfig+0x25c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 0207 	bic.w	r2, r3, #7
 8004cee:	4906      	ldr	r1, [pc, #24]	; (8004d08 <HAL_RCC_ClockConfig+0x25c>)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <HAL_RCC_ClockConfig+0x25c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e040      	b.n	8004d8a <HAL_RCC_ClockConfig+0x2de>
 8004d08:	40022000 	.word	0x40022000
 8004d0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <HAL_RCC_ClockConfig+0x2e8>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	491a      	ldr	r1, [pc, #104]	; (8004d94 <HAL_RCC_ClockConfig+0x2e8>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3a:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <HAL_RCC_ClockConfig+0x2e8>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4912      	ldr	r1, [pc, #72]	; (8004d94 <HAL_RCC_ClockConfig+0x2e8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004d4e:	f000 f829 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004d52:	4601      	mov	r1, r0
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <HAL_RCC_ClockConfig+0x2e8>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d5c:	22f0      	movs	r2, #240	; 0xf0
 8004d5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	fa92 f2a2 	rbit	r2, r2
 8004d66:	60fa      	str	r2, [r7, #12]
  return result;
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	fab2 f282 	clz	r2, r2
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	40d3      	lsrs	r3, r2
 8004d72:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x2ec>)
 8004d74:	5cd3      	ldrb	r3, [r2, r3]
 8004d76:	fa21 f303 	lsr.w	r3, r1, r3
 8004d7a:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <HAL_RCC_ClockConfig+0x2f0>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <HAL_RCC_ClockConfig+0x2f4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd fcbc 	bl	8002700 <HAL_InitTick>
  
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3778      	adds	r7, #120	; 0x78
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	080089fc 	.word	0x080089fc
 8004d9c:	2000000c 	.word	0x2000000c
 8004da0:	20000010 	.word	0x20000010

08004da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b08b      	sub	sp, #44	; 0x2c
 8004da8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	2300      	movs	r3, #0
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004dbe:	4b2a      	ldr	r3, [pc, #168]	; (8004e68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d002      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x30>
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d003      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0x36>
 8004dd2:	e03f      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004dd6:	623b      	str	r3, [r7, #32]
      break;
 8004dd8:	e03f      	b.n	8004e5a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004de0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004de4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	fa92 f2a2 	rbit	r2, r2
 8004dec:	607a      	str	r2, [r7, #4]
  return result;
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	fab2 f282 	clz	r2, r2
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	40d3      	lsrs	r3, r2
 8004df8:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	220f      	movs	r2, #15
 8004e08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	fa92 f2a2 	rbit	r2, r2
 8004e10:	60fa      	str	r2, [r7, #12]
  return result;
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	fab2 f282 	clz	r2, r2
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	40d3      	lsrs	r3, r2
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e1e:	5cd3      	ldrb	r3, [r2, r3]
 8004e20:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e2c:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3c:	e007      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e3e:	4a0b      	ldr	r2, [pc, #44]	; (8004e6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	623b      	str	r3, [r7, #32]
      break;
 8004e52:	e002      	b.n	8004e5a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e56:	623b      	str	r3, [r7, #32]
      break;
 8004e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	372c      	adds	r7, #44	; 0x2c
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	007a1200 	.word	0x007a1200
 8004e70:	08008a14 	.word	0x08008a14
 8004e74:	08008a24 	.word	0x08008a24

08004e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	2000000c 	.word	0x2000000c

08004e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004e96:	f7ff ffef 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ea4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ea8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	fa92 f2a2 	rbit	r2, r2
 8004eb0:	603a      	str	r2, [r7, #0]
  return result;
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	fab2 f282 	clz	r2, r2
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	40d3      	lsrs	r3, r2
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ebe:	5cd3      	ldrb	r3, [r2, r3]
 8004ec0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	08008a0c 	.word	0x08008a0c

08004ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004eda:	f7ff ffcd 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004ede:	4601      	mov	r1, r0
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ee8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004eec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	fa92 f2a2 	rbit	r2, r2
 8004ef4:	603a      	str	r2, [r7, #0]
  return result;
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	fab2 f282 	clz	r2, r2
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	40d3      	lsrs	r3, r2
 8004f00:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f02:	5cd3      	ldrb	r3, [r2, r3]
 8004f04:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000
 8004f14:	08008a0c 	.word	0x08008a0c

08004f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b092      	sub	sp, #72	; 0x48
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80d4 	beq.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f3c:	4b4e      	ldr	r3, [pc, #312]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10e      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f48:	4b4b      	ldr	r3, [pc, #300]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	4a4a      	ldr	r2, [pc, #296]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f52:	61d3      	str	r3, [r2, #28]
 8004f54:	4b48      	ldr	r3, [pc, #288]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f66:	4b45      	ldr	r3, [pc, #276]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d118      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f72:	4b42      	ldr	r3, [pc, #264]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a41      	ldr	r2, [pc, #260]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7e:	f7fd fc03 	bl	8002788 <HAL_GetTick>
 8004f82:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f84:	e008      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f86:	f7fd fbff 	bl	8002788 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b64      	cmp	r3, #100	; 0x64
 8004f92:	d901      	bls.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e1d6      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f98:	4b38      	ldr	r3, [pc, #224]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fa4:	4b34      	ldr	r3, [pc, #208]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8084 	beq.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d07c      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	fa93 f3a3 	rbit	r3, r3
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fde:	fab3 f383 	clz	r3, r3
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4b26      	ldr	r3, [pc, #152]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	461a      	mov	r2, r3
 8004fee:	2301      	movs	r3, #1
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005002:	fab3 f383 	clz	r3, r3
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	461a      	mov	r2, r3
 8005012:	2300      	movs	r3, #0
 8005014:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005016:	4a18      	ldr	r2, [pc, #96]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d04b      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7fd fbaf 	bl	8002788 <HAL_GetTick>
 800502a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502c:	e00a      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fd fbab 	bl	8002788 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e180      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005044:	2302      	movs	r3, #2
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	fa93 f3a3 	rbit	r3, r3
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
 8005050:	2302      	movs	r3, #2
 8005052:	623b      	str	r3, [r7, #32]
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	fa93 f3a3 	rbit	r3, r3
 800505a:	61fb      	str	r3, [r7, #28]
  return result;
 800505c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505e:	fab3 f383 	clz	r3, r3
 8005062:	b2db      	uxtb	r3, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d108      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005072:	4b01      	ldr	r3, [pc, #4]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	e00d      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005078:	40021000 	.word	0x40021000
 800507c:	40007000 	.word	0x40007000
 8005080:	10908100 	.word	0x10908100
 8005084:	2302      	movs	r3, #2
 8005086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	fa93 f3a3 	rbit	r3, r3
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	4b9a      	ldr	r3, [pc, #616]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	2202      	movs	r2, #2
 8005096:	613a      	str	r2, [r7, #16]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	fa92 f2a2 	rbit	r2, r2
 800509e:	60fa      	str	r2, [r7, #12]
  return result;
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	fab2 f282 	clz	r2, r2
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	f002 021f 	and.w	r2, r2, #31
 80050b2:	2101      	movs	r1, #1
 80050b4:	fa01 f202 	lsl.w	r2, r1, r2
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0b7      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80050be:	4b8f      	ldr	r3, [pc, #572]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	498c      	ldr	r1, [pc, #560]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d105      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d8:	4b88      	ldr	r3, [pc, #544]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	4a87      	ldr	r2, [pc, #540]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f0:	4b82      	ldr	r3, [pc, #520]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	f023 0203 	bic.w	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	497f      	ldr	r1, [pc, #508]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d008      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800510e:	4b7b      	ldr	r3, [pc, #492]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4978      	ldr	r1, [pc, #480]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800511c:	4313      	orrs	r3, r2
 800511e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800512c:	4b73      	ldr	r3, [pc, #460]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	4970      	ldr	r1, [pc, #448]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d008      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800514a:	4b6c      	ldr	r3, [pc, #432]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	f023 0210 	bic.w	r2, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	4969      	ldr	r1, [pc, #420]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005158:	4313      	orrs	r3, r2
 800515a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005168:	4b64      	ldr	r3, [pc, #400]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	4961      	ldr	r1, [pc, #388]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005186:	4b5d      	ldr	r3, [pc, #372]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f023 0220 	bic.w	r2, r3, #32
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	495a      	ldr	r1, [pc, #360]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005194:	4313      	orrs	r3, r2
 8005196:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051a4:	4b55      	ldr	r3, [pc, #340]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	4952      	ldr	r1, [pc, #328]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051c2:	4b4e      	ldr	r3, [pc, #312]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	494b      	ldr	r1, [pc, #300]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051e0:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	4943      	ldr	r1, [pc, #268]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051fe:	4b3f      	ldr	r3, [pc, #252]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	493c      	ldr	r1, [pc, #240]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800520c:	4313      	orrs	r3, r2
 800520e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800521c:	4b37      	ldr	r3, [pc, #220]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	4934      	ldr	r1, [pc, #208]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800523a:	4b30      	ldr	r3, [pc, #192]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	492d      	ldr	r1, [pc, #180]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005258:	4b28      	ldr	r3, [pc, #160]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005264:	4925      	ldr	r1, [pc, #148]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005266:	4313      	orrs	r3, r2
 8005268:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d008      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005276:	4b21      	ldr	r3, [pc, #132]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	491e      	ldr	r1, [pc, #120]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005284:	4313      	orrs	r3, r2
 8005286:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005294:	4b19      	ldr	r3, [pc, #100]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	4916      	ldr	r1, [pc, #88]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	490f      	ldr	r1, [pc, #60]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052dc:	4907      	ldr	r1, [pc, #28]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80052ee:	4b03      	ldr	r3, [pc, #12]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	e002      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000
 8005300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005302:	4913      	ldr	r1, [pc, #76]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005304:	4313      	orrs	r3, r2
 8005306:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005314:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005320:	490b      	ldr	r1, [pc, #44]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005322:	4313      	orrs	r3, r2
 8005324:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005332:	4b07      	ldr	r3, [pc, #28]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533e:	4904      	ldr	r1, [pc, #16]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005340:	4313      	orrs	r3, r2
 8005342:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3748      	adds	r7, #72	; 0x48
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000

08005354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e040      	b.n	80053e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fd f93e 	bl	80025f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2224      	movs	r2, #36	; 0x24
 8005380:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f82c 	bl	80053f0 <UART_SetConfig>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e022      	b.n	80053e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9f6 	bl	800579c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fa7d 	bl	80058e0 <UART_CheckIdleState>
 80053e6:	4603      	mov	r3, r0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b92      	ldr	r3, [pc, #584]	; (8005664 <UART_SetConfig+0x274>)
 800541c:	4013      	ands	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	430b      	orrs	r3, r1
 8005426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	430a      	orrs	r2, r1
 8005460:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a80      	ldr	r2, [pc, #512]	; (8005668 <UART_SetConfig+0x278>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d120      	bne.n	80054ae <UART_SetConfig+0xbe>
 800546c:	4b7f      	ldr	r3, [pc, #508]	; (800566c <UART_SetConfig+0x27c>)
 800546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	2b03      	cmp	r3, #3
 8005476:	d817      	bhi.n	80054a8 <UART_SetConfig+0xb8>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x90>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	08005491 	.word	0x08005491
 8005484:	0800549d 	.word	0x0800549d
 8005488:	080054a3 	.word	0x080054a3
 800548c:	08005497 	.word	0x08005497
 8005490:	2301      	movs	r3, #1
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e0b5      	b.n	8005602 <UART_SetConfig+0x212>
 8005496:	2302      	movs	r3, #2
 8005498:	77fb      	strb	r3, [r7, #31]
 800549a:	e0b2      	b.n	8005602 <UART_SetConfig+0x212>
 800549c:	2304      	movs	r3, #4
 800549e:	77fb      	strb	r3, [r7, #31]
 80054a0:	e0af      	b.n	8005602 <UART_SetConfig+0x212>
 80054a2:	2308      	movs	r3, #8
 80054a4:	77fb      	strb	r3, [r7, #31]
 80054a6:	e0ac      	b.n	8005602 <UART_SetConfig+0x212>
 80054a8:	2310      	movs	r3, #16
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e0a9      	b.n	8005602 <UART_SetConfig+0x212>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a6f      	ldr	r2, [pc, #444]	; (8005670 <UART_SetConfig+0x280>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d124      	bne.n	8005502 <UART_SetConfig+0x112>
 80054b8:	4b6c      	ldr	r3, [pc, #432]	; (800566c <UART_SetConfig+0x27c>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054c4:	d011      	beq.n	80054ea <UART_SetConfig+0xfa>
 80054c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054ca:	d817      	bhi.n	80054fc <UART_SetConfig+0x10c>
 80054cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054d0:	d011      	beq.n	80054f6 <UART_SetConfig+0x106>
 80054d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054d6:	d811      	bhi.n	80054fc <UART_SetConfig+0x10c>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <UART_SetConfig+0xf4>
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e0:	d006      	beq.n	80054f0 <UART_SetConfig+0x100>
 80054e2:	e00b      	b.n	80054fc <UART_SetConfig+0x10c>
 80054e4:	2300      	movs	r3, #0
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e08b      	b.n	8005602 <UART_SetConfig+0x212>
 80054ea:	2302      	movs	r3, #2
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e088      	b.n	8005602 <UART_SetConfig+0x212>
 80054f0:	2304      	movs	r3, #4
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e085      	b.n	8005602 <UART_SetConfig+0x212>
 80054f6:	2308      	movs	r3, #8
 80054f8:	77fb      	strb	r3, [r7, #31]
 80054fa:	e082      	b.n	8005602 <UART_SetConfig+0x212>
 80054fc:	2310      	movs	r3, #16
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e07f      	b.n	8005602 <UART_SetConfig+0x212>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a5b      	ldr	r2, [pc, #364]	; (8005674 <UART_SetConfig+0x284>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d124      	bne.n	8005556 <UART_SetConfig+0x166>
 800550c:	4b57      	ldr	r3, [pc, #348]	; (800566c <UART_SetConfig+0x27c>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005514:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005518:	d011      	beq.n	800553e <UART_SetConfig+0x14e>
 800551a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800551e:	d817      	bhi.n	8005550 <UART_SetConfig+0x160>
 8005520:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005524:	d011      	beq.n	800554a <UART_SetConfig+0x15a>
 8005526:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800552a:	d811      	bhi.n	8005550 <UART_SetConfig+0x160>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <UART_SetConfig+0x148>
 8005530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005534:	d006      	beq.n	8005544 <UART_SetConfig+0x154>
 8005536:	e00b      	b.n	8005550 <UART_SetConfig+0x160>
 8005538:	2300      	movs	r3, #0
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e061      	b.n	8005602 <UART_SetConfig+0x212>
 800553e:	2302      	movs	r3, #2
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e05e      	b.n	8005602 <UART_SetConfig+0x212>
 8005544:	2304      	movs	r3, #4
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e05b      	b.n	8005602 <UART_SetConfig+0x212>
 800554a:	2308      	movs	r3, #8
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e058      	b.n	8005602 <UART_SetConfig+0x212>
 8005550:	2310      	movs	r3, #16
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e055      	b.n	8005602 <UART_SetConfig+0x212>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a47      	ldr	r2, [pc, #284]	; (8005678 <UART_SetConfig+0x288>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d124      	bne.n	80055aa <UART_SetConfig+0x1ba>
 8005560:	4b42      	ldr	r3, [pc, #264]	; (800566c <UART_SetConfig+0x27c>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005568:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800556c:	d011      	beq.n	8005592 <UART_SetConfig+0x1a2>
 800556e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005572:	d817      	bhi.n	80055a4 <UART_SetConfig+0x1b4>
 8005574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005578:	d011      	beq.n	800559e <UART_SetConfig+0x1ae>
 800557a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800557e:	d811      	bhi.n	80055a4 <UART_SetConfig+0x1b4>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <UART_SetConfig+0x19c>
 8005584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005588:	d006      	beq.n	8005598 <UART_SetConfig+0x1a8>
 800558a:	e00b      	b.n	80055a4 <UART_SetConfig+0x1b4>
 800558c:	2300      	movs	r3, #0
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e037      	b.n	8005602 <UART_SetConfig+0x212>
 8005592:	2302      	movs	r3, #2
 8005594:	77fb      	strb	r3, [r7, #31]
 8005596:	e034      	b.n	8005602 <UART_SetConfig+0x212>
 8005598:	2304      	movs	r3, #4
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	e031      	b.n	8005602 <UART_SetConfig+0x212>
 800559e:	2308      	movs	r3, #8
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e02e      	b.n	8005602 <UART_SetConfig+0x212>
 80055a4:	2310      	movs	r3, #16
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e02b      	b.n	8005602 <UART_SetConfig+0x212>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a33      	ldr	r2, [pc, #204]	; (800567c <UART_SetConfig+0x28c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d124      	bne.n	80055fe <UART_SetConfig+0x20e>
 80055b4:	4b2d      	ldr	r3, [pc, #180]	; (800566c <UART_SetConfig+0x27c>)
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80055bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055c0:	d011      	beq.n	80055e6 <UART_SetConfig+0x1f6>
 80055c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055c6:	d817      	bhi.n	80055f8 <UART_SetConfig+0x208>
 80055c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055cc:	d011      	beq.n	80055f2 <UART_SetConfig+0x202>
 80055ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055d2:	d811      	bhi.n	80055f8 <UART_SetConfig+0x208>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <UART_SetConfig+0x1f0>
 80055d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055dc:	d006      	beq.n	80055ec <UART_SetConfig+0x1fc>
 80055de:	e00b      	b.n	80055f8 <UART_SetConfig+0x208>
 80055e0:	2300      	movs	r3, #0
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e00d      	b.n	8005602 <UART_SetConfig+0x212>
 80055e6:	2302      	movs	r3, #2
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	e00a      	b.n	8005602 <UART_SetConfig+0x212>
 80055ec:	2304      	movs	r3, #4
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e007      	b.n	8005602 <UART_SetConfig+0x212>
 80055f2:	2308      	movs	r3, #8
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e004      	b.n	8005602 <UART_SetConfig+0x212>
 80055f8:	2310      	movs	r3, #16
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e001      	b.n	8005602 <UART_SetConfig+0x212>
 80055fe:	2310      	movs	r3, #16
 8005600:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560a:	d16c      	bne.n	80056e6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800560c:	7ffb      	ldrb	r3, [r7, #31]
 800560e:	2b08      	cmp	r3, #8
 8005610:	d838      	bhi.n	8005684 <UART_SetConfig+0x294>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <UART_SetConfig+0x228>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	0800563d 	.word	0x0800563d
 800561c:	08005645 	.word	0x08005645
 8005620:	0800564d 	.word	0x0800564d
 8005624:	08005685 	.word	0x08005685
 8005628:	08005653 	.word	0x08005653
 800562c:	08005685 	.word	0x08005685
 8005630:	08005685 	.word	0x08005685
 8005634:	08005685 	.word	0x08005685
 8005638:	0800565b 	.word	0x0800565b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800563c:	f7ff fc28 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8005640:	61b8      	str	r0, [r7, #24]
        break;
 8005642:	e024      	b.n	800568e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005644:	f7ff fc46 	bl	8004ed4 <HAL_RCC_GetPCLK2Freq>
 8005648:	61b8      	str	r0, [r7, #24]
        break;
 800564a:	e020      	b.n	800568e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <UART_SetConfig+0x290>)
 800564e:	61bb      	str	r3, [r7, #24]
        break;
 8005650:	e01d      	b.n	800568e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005652:	f7ff fba7 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8005656:	61b8      	str	r0, [r7, #24]
        break;
 8005658:	e019      	b.n	800568e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565e:	61bb      	str	r3, [r7, #24]
        break;
 8005660:	e015      	b.n	800568e <UART_SetConfig+0x29e>
 8005662:	bf00      	nop
 8005664:	efff69f3 	.word	0xefff69f3
 8005668:	40013800 	.word	0x40013800
 800566c:	40021000 	.word	0x40021000
 8005670:	40004400 	.word	0x40004400
 8005674:	40004800 	.word	0x40004800
 8005678:	40004c00 	.word	0x40004c00
 800567c:	40005000 	.word	0x40005000
 8005680:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	77bb      	strb	r3, [r7, #30]
        break;
 800568c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d075      	beq.n	8005780 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	005a      	lsls	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	085b      	lsrs	r3, r3, #1
 800569e:	441a      	add	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b0f      	cmp	r3, #15
 80056b0:	d916      	bls.n	80056e0 <UART_SetConfig+0x2f0>
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b8:	d212      	bcs.n	80056e0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	f023 030f 	bic.w	r3, r3, #15
 80056c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	89fb      	ldrh	r3, [r7, #14]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	89fa      	ldrh	r2, [r7, #14]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	e04f      	b.n	8005780 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	77bb      	strb	r3, [r7, #30]
 80056e4:	e04c      	b.n	8005780 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e6:	7ffb      	ldrb	r3, [r7, #31]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d828      	bhi.n	800573e <UART_SetConfig+0x34e>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x304>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005719 	.word	0x08005719
 80056f8:	08005721 	.word	0x08005721
 80056fc:	08005729 	.word	0x08005729
 8005700:	0800573f 	.word	0x0800573f
 8005704:	0800572f 	.word	0x0800572f
 8005708:	0800573f 	.word	0x0800573f
 800570c:	0800573f 	.word	0x0800573f
 8005710:	0800573f 	.word	0x0800573f
 8005714:	08005737 	.word	0x08005737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005718:	f7ff fbba 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 800571c:	61b8      	str	r0, [r7, #24]
        break;
 800571e:	e013      	b.n	8005748 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005720:	f7ff fbd8 	bl	8004ed4 <HAL_RCC_GetPCLK2Freq>
 8005724:	61b8      	str	r0, [r7, #24]
        break;
 8005726:	e00f      	b.n	8005748 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <UART_SetConfig+0x3a8>)
 800572a:	61bb      	str	r3, [r7, #24]
        break;
 800572c:	e00c      	b.n	8005748 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572e:	f7ff fb39 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8005732:	61b8      	str	r0, [r7, #24]
        break;
 8005734:	e008      	b.n	8005748 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800573a:	61bb      	str	r3, [r7, #24]
        break;
 800573c:	e004      	b.n	8005748 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	77bb      	strb	r3, [r7, #30]
        break;
 8005746:	bf00      	nop
    }

    if (pclk != 0U)
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d018      	beq.n	8005780 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	085a      	lsrs	r2, r3, #1
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	441a      	add	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005760:	b29b      	uxth	r3, r3
 8005762:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d908      	bls.n	800577c <UART_SetConfig+0x38c>
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005770:	d204      	bcs.n	800577c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	e001      	b.n	8005780 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800578c:	7fbb      	ldrb	r3, [r7, #30]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	007a1200 	.word	0x007a1200

0800579c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589a:	d10a      	bne.n	80058b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f0:	f7fc ff4a 	bl	8002788 <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d10e      	bne.n	8005922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f82d 	bl	8005972 <UART_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e023      	b.n	800596a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b04      	cmp	r3, #4
 800592e:	d10e      	bne.n	800594e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f817 	bl	8005972 <UART_WaitOnFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e00d      	b.n	800596a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b09c      	sub	sp, #112	; 0x70
 8005976:	af00      	add	r7, sp, #0
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	4613      	mov	r3, r2
 8005980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005982:	e0a5      	b.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	f000 80a1 	beq.w	8005ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598e:	f7fc fefb 	bl	8002788 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800599a:	429a      	cmp	r2, r3
 800599c:	d302      	bcc.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800599e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d13e      	bne.n	8005a22 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059b8:	667b      	str	r3, [r7, #100]	; 0x64
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e6      	bne.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3308      	adds	r3, #8
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	663b      	str	r3, [r7, #96]	; 0x60
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3308      	adds	r3, #8
 80059f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80059f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e5      	bne.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e067      	b.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d04f      	beq.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a3e:	d147      	bne.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a68:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e6      	bne.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3308      	adds	r3, #8
 8005a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f023 0301 	bic.w	r3, r3, #1
 8005a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3308      	adds	r3, #8
 8005a9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a9c:	623a      	str	r2, [r7, #32]
 8005a9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	69f9      	ldr	r1, [r7, #28]
 8005aa2:	6a3a      	ldr	r2, [r7, #32]
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e010      	b.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	f43f af4a 	beq.w	8005984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3770      	adds	r7, #112	; 0x70
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <__errno>:
 8005afc:	4b01      	ldr	r3, [pc, #4]	; (8005b04 <__errno+0x8>)
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000018 	.word	0x20000018

08005b08 <__libc_init_array>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4d0d      	ldr	r5, [pc, #52]	; (8005b40 <__libc_init_array+0x38>)
 8005b0c:	4c0d      	ldr	r4, [pc, #52]	; (8005b44 <__libc_init_array+0x3c>)
 8005b0e:	1b64      	subs	r4, r4, r5
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	2600      	movs	r6, #0
 8005b14:	42a6      	cmp	r6, r4
 8005b16:	d109      	bne.n	8005b2c <__libc_init_array+0x24>
 8005b18:	4d0b      	ldr	r5, [pc, #44]	; (8005b48 <__libc_init_array+0x40>)
 8005b1a:	4c0c      	ldr	r4, [pc, #48]	; (8005b4c <__libc_init_array+0x44>)
 8005b1c:	f002 ff2c 	bl	8008978 <_init>
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	2600      	movs	r6, #0
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	d105      	bne.n	8005b36 <__libc_init_array+0x2e>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b30:	4798      	blx	r3
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7ee      	b.n	8005b14 <__libc_init_array+0xc>
 8005b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3a:	4798      	blx	r3
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7f2      	b.n	8005b26 <__libc_init_array+0x1e>
 8005b40:	08008e68 	.word	0x08008e68
 8005b44:	08008e68 	.word	0x08008e68
 8005b48:	08008e68 	.word	0x08008e68
 8005b4c:	08008e6c 	.word	0x08008e6c

08005b50 <malloc>:
 8005b50:	4b02      	ldr	r3, [pc, #8]	; (8005b5c <malloc+0xc>)
 8005b52:	4601      	mov	r1, r0
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	f000 b88d 	b.w	8005c74 <_malloc_r>
 8005b5a:	bf00      	nop
 8005b5c:	20000018 	.word	0x20000018

08005b60 <free>:
 8005b60:	4b02      	ldr	r3, [pc, #8]	; (8005b6c <free+0xc>)
 8005b62:	4601      	mov	r1, r0
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	f000 b819 	b.w	8005b9c <_free_r>
 8005b6a:	bf00      	nop
 8005b6c:	20000018 	.word	0x20000018

08005b70 <memcpy>:
 8005b70:	440a      	add	r2, r1
 8005b72:	4291      	cmp	r1, r2
 8005b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b78:	d100      	bne.n	8005b7c <memcpy+0xc>
 8005b7a:	4770      	bx	lr
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b86:	4291      	cmp	r1, r2
 8005b88:	d1f9      	bne.n	8005b7e <memcpy+0xe>
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <memset>:
 8005b8c:	4402      	add	r2, r0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d100      	bne.n	8005b96 <memset+0xa>
 8005b94:	4770      	bx	lr
 8005b96:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9a:	e7f9      	b.n	8005b90 <memset+0x4>

08005b9c <_free_r>:
 8005b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b9e:	2900      	cmp	r1, #0
 8005ba0:	d044      	beq.n	8005c2c <_free_r+0x90>
 8005ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba6:	9001      	str	r0, [sp, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f1a1 0404 	sub.w	r4, r1, #4
 8005bae:	bfb8      	it	lt
 8005bb0:	18e4      	addlt	r4, r4, r3
 8005bb2:	f001 fb35 	bl	8007220 <__malloc_lock>
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	; (8005c30 <_free_r+0x94>)
 8005bb8:	9801      	ldr	r0, [sp, #4]
 8005bba:	6813      	ldr	r3, [r2, #0]
 8005bbc:	b933      	cbnz	r3, 8005bcc <_free_r+0x30>
 8005bbe:	6063      	str	r3, [r4, #4]
 8005bc0:	6014      	str	r4, [r2, #0]
 8005bc2:	b003      	add	sp, #12
 8005bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bc8:	f001 bb30 	b.w	800722c <__malloc_unlock>
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d908      	bls.n	8005be2 <_free_r+0x46>
 8005bd0:	6825      	ldr	r5, [r4, #0]
 8005bd2:	1961      	adds	r1, r4, r5
 8005bd4:	428b      	cmp	r3, r1
 8005bd6:	bf01      	itttt	eq
 8005bd8:	6819      	ldreq	r1, [r3, #0]
 8005bda:	685b      	ldreq	r3, [r3, #4]
 8005bdc:	1949      	addeq	r1, r1, r5
 8005bde:	6021      	streq	r1, [r4, #0]
 8005be0:	e7ed      	b.n	8005bbe <_free_r+0x22>
 8005be2:	461a      	mov	r2, r3
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	b10b      	cbz	r3, 8005bec <_free_r+0x50>
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	d9fa      	bls.n	8005be2 <_free_r+0x46>
 8005bec:	6811      	ldr	r1, [r2, #0]
 8005bee:	1855      	adds	r5, r2, r1
 8005bf0:	42a5      	cmp	r5, r4
 8005bf2:	d10b      	bne.n	8005c0c <_free_r+0x70>
 8005bf4:	6824      	ldr	r4, [r4, #0]
 8005bf6:	4421      	add	r1, r4
 8005bf8:	1854      	adds	r4, r2, r1
 8005bfa:	42a3      	cmp	r3, r4
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	d1e0      	bne.n	8005bc2 <_free_r+0x26>
 8005c00:	681c      	ldr	r4, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	6053      	str	r3, [r2, #4]
 8005c06:	4421      	add	r1, r4
 8005c08:	6011      	str	r1, [r2, #0]
 8005c0a:	e7da      	b.n	8005bc2 <_free_r+0x26>
 8005c0c:	d902      	bls.n	8005c14 <_free_r+0x78>
 8005c0e:	230c      	movs	r3, #12
 8005c10:	6003      	str	r3, [r0, #0]
 8005c12:	e7d6      	b.n	8005bc2 <_free_r+0x26>
 8005c14:	6825      	ldr	r5, [r4, #0]
 8005c16:	1961      	adds	r1, r4, r5
 8005c18:	428b      	cmp	r3, r1
 8005c1a:	bf04      	itt	eq
 8005c1c:	6819      	ldreq	r1, [r3, #0]
 8005c1e:	685b      	ldreq	r3, [r3, #4]
 8005c20:	6063      	str	r3, [r4, #4]
 8005c22:	bf04      	itt	eq
 8005c24:	1949      	addeq	r1, r1, r5
 8005c26:	6021      	streq	r1, [r4, #0]
 8005c28:	6054      	str	r4, [r2, #4]
 8005c2a:	e7ca      	b.n	8005bc2 <_free_r+0x26>
 8005c2c:	b003      	add	sp, #12
 8005c2e:	bd30      	pop	{r4, r5, pc}
 8005c30:	20000730 	.word	0x20000730

08005c34 <sbrk_aligned>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	4e0e      	ldr	r6, [pc, #56]	; (8005c70 <sbrk_aligned+0x3c>)
 8005c38:	460c      	mov	r4, r1
 8005c3a:	6831      	ldr	r1, [r6, #0]
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	b911      	cbnz	r1, 8005c46 <sbrk_aligned+0x12>
 8005c40:	f000 f894 	bl	8005d6c <_sbrk_r>
 8005c44:	6030      	str	r0, [r6, #0]
 8005c46:	4621      	mov	r1, r4
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f000 f88f 	bl	8005d6c <_sbrk_r>
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	d00a      	beq.n	8005c68 <sbrk_aligned+0x34>
 8005c52:	1cc4      	adds	r4, r0, #3
 8005c54:	f024 0403 	bic.w	r4, r4, #3
 8005c58:	42a0      	cmp	r0, r4
 8005c5a:	d007      	beq.n	8005c6c <sbrk_aligned+0x38>
 8005c5c:	1a21      	subs	r1, r4, r0
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 f884 	bl	8005d6c <_sbrk_r>
 8005c64:	3001      	adds	r0, #1
 8005c66:	d101      	bne.n	8005c6c <sbrk_aligned+0x38>
 8005c68:	f04f 34ff 	mov.w	r4, #4294967295
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	20000734 	.word	0x20000734

08005c74 <_malloc_r>:
 8005c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c78:	1ccd      	adds	r5, r1, #3
 8005c7a:	f025 0503 	bic.w	r5, r5, #3
 8005c7e:	3508      	adds	r5, #8
 8005c80:	2d0c      	cmp	r5, #12
 8005c82:	bf38      	it	cc
 8005c84:	250c      	movcc	r5, #12
 8005c86:	2d00      	cmp	r5, #0
 8005c88:	4607      	mov	r7, r0
 8005c8a:	db01      	blt.n	8005c90 <_malloc_r+0x1c>
 8005c8c:	42a9      	cmp	r1, r5
 8005c8e:	d905      	bls.n	8005c9c <_malloc_r+0x28>
 8005c90:	230c      	movs	r3, #12
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	2600      	movs	r6, #0
 8005c96:	4630      	mov	r0, r6
 8005c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9c:	4e2e      	ldr	r6, [pc, #184]	; (8005d58 <_malloc_r+0xe4>)
 8005c9e:	f001 fabf 	bl	8007220 <__malloc_lock>
 8005ca2:	6833      	ldr	r3, [r6, #0]
 8005ca4:	461c      	mov	r4, r3
 8005ca6:	bb34      	cbnz	r4, 8005cf6 <_malloc_r+0x82>
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4638      	mov	r0, r7
 8005cac:	f7ff ffc2 	bl	8005c34 <sbrk_aligned>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	d14d      	bne.n	8005d52 <_malloc_r+0xde>
 8005cb6:	6834      	ldr	r4, [r6, #0]
 8005cb8:	4626      	mov	r6, r4
 8005cba:	2e00      	cmp	r6, #0
 8005cbc:	d140      	bne.n	8005d40 <_malloc_r+0xcc>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	eb04 0803 	add.w	r8, r4, r3
 8005cc8:	f000 f850 	bl	8005d6c <_sbrk_r>
 8005ccc:	4580      	cmp	r8, r0
 8005cce:	d13a      	bne.n	8005d46 <_malloc_r+0xd2>
 8005cd0:	6821      	ldr	r1, [r4, #0]
 8005cd2:	3503      	adds	r5, #3
 8005cd4:	1a6d      	subs	r5, r5, r1
 8005cd6:	f025 0503 	bic.w	r5, r5, #3
 8005cda:	3508      	adds	r5, #8
 8005cdc:	2d0c      	cmp	r5, #12
 8005cde:	bf38      	it	cc
 8005ce0:	250c      	movcc	r5, #12
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f7ff ffa5 	bl	8005c34 <sbrk_aligned>
 8005cea:	3001      	adds	r0, #1
 8005cec:	d02b      	beq.n	8005d46 <_malloc_r+0xd2>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	442b      	add	r3, r5
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	e00e      	b.n	8005d14 <_malloc_r+0xa0>
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	1b52      	subs	r2, r2, r5
 8005cfa:	d41e      	bmi.n	8005d3a <_malloc_r+0xc6>
 8005cfc:	2a0b      	cmp	r2, #11
 8005cfe:	d916      	bls.n	8005d2e <_malloc_r+0xba>
 8005d00:	1961      	adds	r1, r4, r5
 8005d02:	42a3      	cmp	r3, r4
 8005d04:	6025      	str	r5, [r4, #0]
 8005d06:	bf18      	it	ne
 8005d08:	6059      	strne	r1, [r3, #4]
 8005d0a:	6863      	ldr	r3, [r4, #4]
 8005d0c:	bf08      	it	eq
 8005d0e:	6031      	streq	r1, [r6, #0]
 8005d10:	5162      	str	r2, [r4, r5]
 8005d12:	604b      	str	r3, [r1, #4]
 8005d14:	4638      	mov	r0, r7
 8005d16:	f104 060b 	add.w	r6, r4, #11
 8005d1a:	f001 fa87 	bl	800722c <__malloc_unlock>
 8005d1e:	f026 0607 	bic.w	r6, r6, #7
 8005d22:	1d23      	adds	r3, r4, #4
 8005d24:	1af2      	subs	r2, r6, r3
 8005d26:	d0b6      	beq.n	8005c96 <_malloc_r+0x22>
 8005d28:	1b9b      	subs	r3, r3, r6
 8005d2a:	50a3      	str	r3, [r4, r2]
 8005d2c:	e7b3      	b.n	8005c96 <_malloc_r+0x22>
 8005d2e:	6862      	ldr	r2, [r4, #4]
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	bf0c      	ite	eq
 8005d34:	6032      	streq	r2, [r6, #0]
 8005d36:	605a      	strne	r2, [r3, #4]
 8005d38:	e7ec      	b.n	8005d14 <_malloc_r+0xa0>
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	6864      	ldr	r4, [r4, #4]
 8005d3e:	e7b2      	b.n	8005ca6 <_malloc_r+0x32>
 8005d40:	4634      	mov	r4, r6
 8005d42:	6876      	ldr	r6, [r6, #4]
 8005d44:	e7b9      	b.n	8005cba <_malloc_r+0x46>
 8005d46:	230c      	movs	r3, #12
 8005d48:	603b      	str	r3, [r7, #0]
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	f001 fa6e 	bl	800722c <__malloc_unlock>
 8005d50:	e7a1      	b.n	8005c96 <_malloc_r+0x22>
 8005d52:	6025      	str	r5, [r4, #0]
 8005d54:	e7de      	b.n	8005d14 <_malloc_r+0xa0>
 8005d56:	bf00      	nop
 8005d58:	20000730 	.word	0x20000730

08005d5c <realloc>:
 8005d5c:	4b02      	ldr	r3, [pc, #8]	; (8005d68 <realloc+0xc>)
 8005d5e:	460a      	mov	r2, r1
 8005d60:	4601      	mov	r1, r0
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	f001 bf3f 	b.w	8007be6 <_realloc_r>
 8005d68:	20000018 	.word	0x20000018

08005d6c <_sbrk_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d06      	ldr	r5, [pc, #24]	; (8005d88 <_sbrk_r+0x1c>)
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	602b      	str	r3, [r5, #0]
 8005d78:	f7fc fbc6 	bl	8002508 <_sbrk>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_sbrk_r+0x1a>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_sbrk_r+0x1a>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20000738 	.word	0x20000738

08005d8c <__sread>:
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	460c      	mov	r4, r1
 8005d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d94:	f002 f8ea 	bl	8007f6c <_read_r>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	bfab      	itete	ge
 8005d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8005da0:	181b      	addge	r3, r3, r0
 8005da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005da6:	bfac      	ite	ge
 8005da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005daa:	81a3      	strhlt	r3, [r4, #12]
 8005dac:	bd10      	pop	{r4, pc}

08005dae <__swrite>:
 8005dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db2:	461f      	mov	r7, r3
 8005db4:	898b      	ldrh	r3, [r1, #12]
 8005db6:	05db      	lsls	r3, r3, #23
 8005db8:	4605      	mov	r5, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4616      	mov	r6, r2
 8005dbe:	d505      	bpl.n	8005dcc <__swrite+0x1e>
 8005dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f001 fa06 	bl	80071d8 <_lseek_r>
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	4632      	mov	r2, r6
 8005dda:	463b      	mov	r3, r7
 8005ddc:	4628      	mov	r0, r5
 8005dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005de2:	f000 be67 	b.w	8006ab4 <_write_r>

08005de6 <__sseek>:
 8005de6:	b510      	push	{r4, lr}
 8005de8:	460c      	mov	r4, r1
 8005dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dee:	f001 f9f3 	bl	80071d8 <_lseek_r>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	bf15      	itete	ne
 8005df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e02:	81a3      	strheq	r3, [r4, #12]
 8005e04:	bf18      	it	ne
 8005e06:	81a3      	strhne	r3, [r4, #12]
 8005e08:	bd10      	pop	{r4, pc}

08005e0a <__sclose>:
 8005e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0e:	f000 be63 	b.w	8006ad8 <_close_r>

08005e12 <strcat>:
 8005e12:	b510      	push	{r4, lr}
 8005e14:	4602      	mov	r2, r0
 8005e16:	7814      	ldrb	r4, [r2, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	3201      	adds	r2, #1
 8005e1c:	2c00      	cmp	r4, #0
 8005e1e:	d1fa      	bne.n	8005e16 <strcat+0x4>
 8005e20:	3b01      	subs	r3, #1
 8005e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	d1f9      	bne.n	8005e22 <strcat+0x10>
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <strncmp>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	b17a      	cbz	r2, 8005e54 <strncmp+0x24>
 8005e34:	4603      	mov	r3, r0
 8005e36:	3901      	subs	r1, #1
 8005e38:	1884      	adds	r4, r0, r2
 8005e3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e3e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005e42:	4290      	cmp	r0, r2
 8005e44:	d101      	bne.n	8005e4a <strncmp+0x1a>
 8005e46:	42a3      	cmp	r3, r4
 8005e48:	d101      	bne.n	8005e4e <strncmp+0x1e>
 8005e4a:	1a80      	subs	r0, r0, r2
 8005e4c:	bd10      	pop	{r4, pc}
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d1f3      	bne.n	8005e3a <strncmp+0xa>
 8005e52:	e7fa      	b.n	8005e4a <strncmp+0x1a>
 8005e54:	4610      	mov	r0, r2
 8005e56:	e7f9      	b.n	8005e4c <strncmp+0x1c>

08005e58 <sulp>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	ec45 4b10 	vmov	d0, r4, r5
 8005e62:	4616      	mov	r6, r2
 8005e64:	f001 fd5a 	bl	800791c <__ulp>
 8005e68:	ec51 0b10 	vmov	r0, r1, d0
 8005e6c:	b17e      	cbz	r6, 8005e8e <sulp+0x36>
 8005e6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	dd09      	ble.n	8005e8e <sulp+0x36>
 8005e7a:	051b      	lsls	r3, r3, #20
 8005e7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005e80:	2400      	movs	r4, #0
 8005e82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005e86:	4622      	mov	r2, r4
 8005e88:	462b      	mov	r3, r5
 8005e8a:	f7fa fbcd 	bl	8000628 <__aeabi_dmul>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}

08005e90 <_strtod_l>:
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	ed2d 8b02 	vpush	{d8}
 8005e98:	b09d      	sub	sp, #116	; 0x74
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9318      	str	r3, [sp, #96]	; 0x60
 8005ea0:	4ba2      	ldr	r3, [pc, #648]	; (800612c <_strtod_l+0x29c>)
 8005ea2:	9213      	str	r2, [sp, #76]	; 0x4c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	9305      	str	r3, [sp, #20]
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	4688      	mov	r8, r1
 8005eae:	f7fa f9a1 	bl	80001f4 <strlen>
 8005eb2:	f04f 0a00 	mov.w	sl, #0
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	f04f 0b00 	mov.w	fp, #0
 8005ebc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	2a2b      	cmp	r2, #43	; 0x2b
 8005ec6:	d04e      	beq.n	8005f66 <_strtod_l+0xd6>
 8005ec8:	d83b      	bhi.n	8005f42 <_strtod_l+0xb2>
 8005eca:	2a0d      	cmp	r2, #13
 8005ecc:	d834      	bhi.n	8005f38 <_strtod_l+0xa8>
 8005ece:	2a08      	cmp	r2, #8
 8005ed0:	d834      	bhi.n	8005f3c <_strtod_l+0xac>
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	d03e      	beq.n	8005f54 <_strtod_l+0xc4>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8005eda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005edc:	7833      	ldrb	r3, [r6, #0]
 8005ede:	2b30      	cmp	r3, #48	; 0x30
 8005ee0:	f040 80b0 	bne.w	8006044 <_strtod_l+0x1b4>
 8005ee4:	7873      	ldrb	r3, [r6, #1]
 8005ee6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005eea:	2b58      	cmp	r3, #88	; 0x58
 8005eec:	d168      	bne.n	8005fc0 <_strtod_l+0x130>
 8005eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	ab18      	add	r3, sp, #96	; 0x60
 8005ef4:	9702      	str	r7, [sp, #8]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4a8d      	ldr	r2, [pc, #564]	; (8006130 <_strtod_l+0x2a0>)
 8005efa:	ab19      	add	r3, sp, #100	; 0x64
 8005efc:	a917      	add	r1, sp, #92	; 0x5c
 8005efe:	4620      	mov	r0, r4
 8005f00:	f000 fe62 	bl	8006bc8 <__gethex>
 8005f04:	f010 0707 	ands.w	r7, r0, #7
 8005f08:	4605      	mov	r5, r0
 8005f0a:	d005      	beq.n	8005f18 <_strtod_l+0x88>
 8005f0c:	2f06      	cmp	r7, #6
 8005f0e:	d12c      	bne.n	8005f6a <_strtod_l+0xda>
 8005f10:	3601      	adds	r6, #1
 8005f12:	2300      	movs	r3, #0
 8005f14:	9617      	str	r6, [sp, #92]	; 0x5c
 8005f16:	930a      	str	r3, [sp, #40]	; 0x28
 8005f18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 8590 	bne.w	8006a40 <_strtod_l+0xbb0>
 8005f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f22:	b1eb      	cbz	r3, 8005f60 <_strtod_l+0xd0>
 8005f24:	4652      	mov	r2, sl
 8005f26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f2a:	ec43 2b10 	vmov	d0, r2, r3
 8005f2e:	b01d      	add	sp, #116	; 0x74
 8005f30:	ecbd 8b02 	vpop	{d8}
 8005f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f38:	2a20      	cmp	r2, #32
 8005f3a:	d1cc      	bne.n	8005ed6 <_strtod_l+0x46>
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f40:	e7be      	b.n	8005ec0 <_strtod_l+0x30>
 8005f42:	2a2d      	cmp	r2, #45	; 0x2d
 8005f44:	d1c7      	bne.n	8005ed6 <_strtod_l+0x46>
 8005f46:	2201      	movs	r2, #1
 8005f48:	920a      	str	r2, [sp, #40]	; 0x28
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1c2      	bne.n	8005eda <_strtod_l+0x4a>
 8005f54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f56:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 856e 	bne.w	8006a3c <_strtod_l+0xbac>
 8005f60:	4652      	mov	r2, sl
 8005f62:	465b      	mov	r3, fp
 8005f64:	e7e1      	b.n	8005f2a <_strtod_l+0x9a>
 8005f66:	2200      	movs	r2, #0
 8005f68:	e7ee      	b.n	8005f48 <_strtod_l+0xb8>
 8005f6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005f6c:	b13a      	cbz	r2, 8005f7e <_strtod_l+0xee>
 8005f6e:	2135      	movs	r1, #53	; 0x35
 8005f70:	a81a      	add	r0, sp, #104	; 0x68
 8005f72:	f001 fdde 	bl	8007b32 <__copybits>
 8005f76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f001 f99d 	bl	80072b8 <_Bfree>
 8005f7e:	3f01      	subs	r7, #1
 8005f80:	2f04      	cmp	r7, #4
 8005f82:	d806      	bhi.n	8005f92 <_strtod_l+0x102>
 8005f84:	e8df f007 	tbb	[pc, r7]
 8005f88:	1714030a 	.word	0x1714030a
 8005f8c:	0a          	.byte	0x0a
 8005f8d:	00          	.byte	0x00
 8005f8e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005f92:	0728      	lsls	r0, r5, #28
 8005f94:	d5c0      	bpl.n	8005f18 <_strtod_l+0x88>
 8005f96:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005f9a:	e7bd      	b.n	8005f18 <_strtod_l+0x88>
 8005f9c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005fa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005fa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005fa6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005faa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005fae:	e7f0      	b.n	8005f92 <_strtod_l+0x102>
 8005fb0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006134 <_strtod_l+0x2a4>
 8005fb4:	e7ed      	b.n	8005f92 <_strtod_l+0x102>
 8005fb6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005fba:	f04f 3aff 	mov.w	sl, #4294967295
 8005fbe:	e7e8      	b.n	8005f92 <_strtod_l+0x102>
 8005fc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b30      	cmp	r3, #48	; 0x30
 8005fca:	d0f9      	beq.n	8005fc0 <_strtod_l+0x130>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0a3      	beq.n	8005f18 <_strtod_l+0x88>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f04f 0900 	mov.w	r9, #0
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fda:	9308      	str	r3, [sp, #32]
 8005fdc:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fe0:	464f      	mov	r7, r9
 8005fe2:	220a      	movs	r2, #10
 8005fe4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005fe6:	7806      	ldrb	r6, [r0, #0]
 8005fe8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005fec:	b2d9      	uxtb	r1, r3
 8005fee:	2909      	cmp	r1, #9
 8005ff0:	d92a      	bls.n	8006048 <_strtod_l+0x1b8>
 8005ff2:	9905      	ldr	r1, [sp, #20]
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	f7ff ff1b 	bl	8005e30 <strncmp>
 8005ffa:	b398      	cbz	r0, 8006064 <_strtod_l+0x1d4>
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	4632      	mov	r2, r6
 8006000:	463d      	mov	r5, r7
 8006002:	9005      	str	r0, [sp, #20]
 8006004:	4603      	mov	r3, r0
 8006006:	2a65      	cmp	r2, #101	; 0x65
 8006008:	d001      	beq.n	800600e <_strtod_l+0x17e>
 800600a:	2a45      	cmp	r2, #69	; 0x45
 800600c:	d118      	bne.n	8006040 <_strtod_l+0x1b0>
 800600e:	b91d      	cbnz	r5, 8006018 <_strtod_l+0x188>
 8006010:	9a04      	ldr	r2, [sp, #16]
 8006012:	4302      	orrs	r2, r0
 8006014:	d09e      	beq.n	8005f54 <_strtod_l+0xc4>
 8006016:	2500      	movs	r5, #0
 8006018:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800601c:	f108 0201 	add.w	r2, r8, #1
 8006020:	9217      	str	r2, [sp, #92]	; 0x5c
 8006022:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006026:	2a2b      	cmp	r2, #43	; 0x2b
 8006028:	d075      	beq.n	8006116 <_strtod_l+0x286>
 800602a:	2a2d      	cmp	r2, #45	; 0x2d
 800602c:	d07b      	beq.n	8006126 <_strtod_l+0x296>
 800602e:	f04f 0c00 	mov.w	ip, #0
 8006032:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006036:	2909      	cmp	r1, #9
 8006038:	f240 8082 	bls.w	8006140 <_strtod_l+0x2b0>
 800603c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006040:	2600      	movs	r6, #0
 8006042:	e09d      	b.n	8006180 <_strtod_l+0x2f0>
 8006044:	2300      	movs	r3, #0
 8006046:	e7c4      	b.n	8005fd2 <_strtod_l+0x142>
 8006048:	2f08      	cmp	r7, #8
 800604a:	bfd8      	it	le
 800604c:	9907      	ldrle	r1, [sp, #28]
 800604e:	f100 0001 	add.w	r0, r0, #1
 8006052:	bfda      	itte	le
 8006054:	fb02 3301 	mlale	r3, r2, r1, r3
 8006058:	9307      	strle	r3, [sp, #28]
 800605a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800605e:	3701      	adds	r7, #1
 8006060:	9017      	str	r0, [sp, #92]	; 0x5c
 8006062:	e7bf      	b.n	8005fe4 <_strtod_l+0x154>
 8006064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006066:	195a      	adds	r2, r3, r5
 8006068:	9217      	str	r2, [sp, #92]	; 0x5c
 800606a:	5d5a      	ldrb	r2, [r3, r5]
 800606c:	2f00      	cmp	r7, #0
 800606e:	d037      	beq.n	80060e0 <_strtod_l+0x250>
 8006070:	9005      	str	r0, [sp, #20]
 8006072:	463d      	mov	r5, r7
 8006074:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006078:	2b09      	cmp	r3, #9
 800607a:	d912      	bls.n	80060a2 <_strtod_l+0x212>
 800607c:	2301      	movs	r3, #1
 800607e:	e7c2      	b.n	8006006 <_strtod_l+0x176>
 8006080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	9217      	str	r2, [sp, #92]	; 0x5c
 8006086:	785a      	ldrb	r2, [r3, #1]
 8006088:	3001      	adds	r0, #1
 800608a:	2a30      	cmp	r2, #48	; 0x30
 800608c:	d0f8      	beq.n	8006080 <_strtod_l+0x1f0>
 800608e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006092:	2b08      	cmp	r3, #8
 8006094:	f200 84d9 	bhi.w	8006a4a <_strtod_l+0xbba>
 8006098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800609a:	9005      	str	r0, [sp, #20]
 800609c:	2000      	movs	r0, #0
 800609e:	9308      	str	r3, [sp, #32]
 80060a0:	4605      	mov	r5, r0
 80060a2:	3a30      	subs	r2, #48	; 0x30
 80060a4:	f100 0301 	add.w	r3, r0, #1
 80060a8:	d014      	beq.n	80060d4 <_strtod_l+0x244>
 80060aa:	9905      	ldr	r1, [sp, #20]
 80060ac:	4419      	add	r1, r3
 80060ae:	9105      	str	r1, [sp, #20]
 80060b0:	462b      	mov	r3, r5
 80060b2:	eb00 0e05 	add.w	lr, r0, r5
 80060b6:	210a      	movs	r1, #10
 80060b8:	4573      	cmp	r3, lr
 80060ba:	d113      	bne.n	80060e4 <_strtod_l+0x254>
 80060bc:	182b      	adds	r3, r5, r0
 80060be:	2b08      	cmp	r3, #8
 80060c0:	f105 0501 	add.w	r5, r5, #1
 80060c4:	4405      	add	r5, r0
 80060c6:	dc1c      	bgt.n	8006102 <_strtod_l+0x272>
 80060c8:	9907      	ldr	r1, [sp, #28]
 80060ca:	230a      	movs	r3, #10
 80060cc:	fb03 2301 	mla	r3, r3, r1, r2
 80060d0:	9307      	str	r3, [sp, #28]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80060d6:	1c51      	adds	r1, r2, #1
 80060d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80060da:	7852      	ldrb	r2, [r2, #1]
 80060dc:	4618      	mov	r0, r3
 80060de:	e7c9      	b.n	8006074 <_strtod_l+0x1e4>
 80060e0:	4638      	mov	r0, r7
 80060e2:	e7d2      	b.n	800608a <_strtod_l+0x1fa>
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	dc04      	bgt.n	80060f2 <_strtod_l+0x262>
 80060e8:	9e07      	ldr	r6, [sp, #28]
 80060ea:	434e      	muls	r6, r1
 80060ec:	9607      	str	r6, [sp, #28]
 80060ee:	3301      	adds	r3, #1
 80060f0:	e7e2      	b.n	80060b8 <_strtod_l+0x228>
 80060f2:	f103 0c01 	add.w	ip, r3, #1
 80060f6:	f1bc 0f10 	cmp.w	ip, #16
 80060fa:	bfd8      	it	le
 80060fc:	fb01 f909 	mulle.w	r9, r1, r9
 8006100:	e7f5      	b.n	80060ee <_strtod_l+0x25e>
 8006102:	2d10      	cmp	r5, #16
 8006104:	bfdc      	itt	le
 8006106:	230a      	movle	r3, #10
 8006108:	fb03 2909 	mlale	r9, r3, r9, r2
 800610c:	e7e1      	b.n	80060d2 <_strtod_l+0x242>
 800610e:	2300      	movs	r3, #0
 8006110:	9305      	str	r3, [sp, #20]
 8006112:	2301      	movs	r3, #1
 8006114:	e77c      	b.n	8006010 <_strtod_l+0x180>
 8006116:	f04f 0c00 	mov.w	ip, #0
 800611a:	f108 0202 	add.w	r2, r8, #2
 800611e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006120:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006124:	e785      	b.n	8006032 <_strtod_l+0x1a2>
 8006126:	f04f 0c01 	mov.w	ip, #1
 800612a:	e7f6      	b.n	800611a <_strtod_l+0x28a>
 800612c:	08008c10 	.word	0x08008c10
 8006130:	08008b48 	.word	0x08008b48
 8006134:	7ff00000 	.word	0x7ff00000
 8006138:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800613a:	1c51      	adds	r1, r2, #1
 800613c:	9117      	str	r1, [sp, #92]	; 0x5c
 800613e:	7852      	ldrb	r2, [r2, #1]
 8006140:	2a30      	cmp	r2, #48	; 0x30
 8006142:	d0f9      	beq.n	8006138 <_strtod_l+0x2a8>
 8006144:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006148:	2908      	cmp	r1, #8
 800614a:	f63f af79 	bhi.w	8006040 <_strtod_l+0x1b0>
 800614e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006152:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006154:	9206      	str	r2, [sp, #24]
 8006156:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006158:	1c51      	adds	r1, r2, #1
 800615a:	9117      	str	r1, [sp, #92]	; 0x5c
 800615c:	7852      	ldrb	r2, [r2, #1]
 800615e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006162:	2e09      	cmp	r6, #9
 8006164:	d937      	bls.n	80061d6 <_strtod_l+0x346>
 8006166:	9e06      	ldr	r6, [sp, #24]
 8006168:	1b89      	subs	r1, r1, r6
 800616a:	2908      	cmp	r1, #8
 800616c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006170:	dc02      	bgt.n	8006178 <_strtod_l+0x2e8>
 8006172:	4576      	cmp	r6, lr
 8006174:	bfa8      	it	ge
 8006176:	4676      	movge	r6, lr
 8006178:	f1bc 0f00 	cmp.w	ip, #0
 800617c:	d000      	beq.n	8006180 <_strtod_l+0x2f0>
 800617e:	4276      	negs	r6, r6
 8006180:	2d00      	cmp	r5, #0
 8006182:	d14d      	bne.n	8006220 <_strtod_l+0x390>
 8006184:	9904      	ldr	r1, [sp, #16]
 8006186:	4301      	orrs	r1, r0
 8006188:	f47f aec6 	bne.w	8005f18 <_strtod_l+0x88>
 800618c:	2b00      	cmp	r3, #0
 800618e:	f47f aee1 	bne.w	8005f54 <_strtod_l+0xc4>
 8006192:	2a69      	cmp	r2, #105	; 0x69
 8006194:	d027      	beq.n	80061e6 <_strtod_l+0x356>
 8006196:	dc24      	bgt.n	80061e2 <_strtod_l+0x352>
 8006198:	2a49      	cmp	r2, #73	; 0x49
 800619a:	d024      	beq.n	80061e6 <_strtod_l+0x356>
 800619c:	2a4e      	cmp	r2, #78	; 0x4e
 800619e:	f47f aed9 	bne.w	8005f54 <_strtod_l+0xc4>
 80061a2:	499f      	ldr	r1, [pc, #636]	; (8006420 <_strtod_l+0x590>)
 80061a4:	a817      	add	r0, sp, #92	; 0x5c
 80061a6:	f000 ff67 	bl	8007078 <__match>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	f43f aed2 	beq.w	8005f54 <_strtod_l+0xc4>
 80061b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b28      	cmp	r3, #40	; 0x28
 80061b6:	d12d      	bne.n	8006214 <_strtod_l+0x384>
 80061b8:	499a      	ldr	r1, [pc, #616]	; (8006424 <_strtod_l+0x594>)
 80061ba:	aa1a      	add	r2, sp, #104	; 0x68
 80061bc:	a817      	add	r0, sp, #92	; 0x5c
 80061be:	f000 ff6f 	bl	80070a0 <__hexnan>
 80061c2:	2805      	cmp	r0, #5
 80061c4:	d126      	bne.n	8006214 <_strtod_l+0x384>
 80061c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80061cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80061d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80061d4:	e6a0      	b.n	8005f18 <_strtod_l+0x88>
 80061d6:	210a      	movs	r1, #10
 80061d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80061dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80061e0:	e7b9      	b.n	8006156 <_strtod_l+0x2c6>
 80061e2:	2a6e      	cmp	r2, #110	; 0x6e
 80061e4:	e7db      	b.n	800619e <_strtod_l+0x30e>
 80061e6:	4990      	ldr	r1, [pc, #576]	; (8006428 <_strtod_l+0x598>)
 80061e8:	a817      	add	r0, sp, #92	; 0x5c
 80061ea:	f000 ff45 	bl	8007078 <__match>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f43f aeb0 	beq.w	8005f54 <_strtod_l+0xc4>
 80061f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061f6:	498d      	ldr	r1, [pc, #564]	; (800642c <_strtod_l+0x59c>)
 80061f8:	3b01      	subs	r3, #1
 80061fa:	a817      	add	r0, sp, #92	; 0x5c
 80061fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80061fe:	f000 ff3b 	bl	8007078 <__match>
 8006202:	b910      	cbnz	r0, 800620a <_strtod_l+0x37a>
 8006204:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006206:	3301      	adds	r3, #1
 8006208:	9317      	str	r3, [sp, #92]	; 0x5c
 800620a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800643c <_strtod_l+0x5ac>
 800620e:	f04f 0a00 	mov.w	sl, #0
 8006212:	e681      	b.n	8005f18 <_strtod_l+0x88>
 8006214:	4886      	ldr	r0, [pc, #536]	; (8006430 <_strtod_l+0x5a0>)
 8006216:	f001 febb 	bl	8007f90 <nan>
 800621a:	ec5b ab10 	vmov	sl, fp, d0
 800621e:	e67b      	b.n	8005f18 <_strtod_l+0x88>
 8006220:	9b05      	ldr	r3, [sp, #20]
 8006222:	9807      	ldr	r0, [sp, #28]
 8006224:	1af3      	subs	r3, r6, r3
 8006226:	2f00      	cmp	r7, #0
 8006228:	bf08      	it	eq
 800622a:	462f      	moveq	r7, r5
 800622c:	2d10      	cmp	r5, #16
 800622e:	9306      	str	r3, [sp, #24]
 8006230:	46a8      	mov	r8, r5
 8006232:	bfa8      	it	ge
 8006234:	f04f 0810 	movge.w	r8, #16
 8006238:	f7fa f97c 	bl	8000534 <__aeabi_ui2d>
 800623c:	2d09      	cmp	r5, #9
 800623e:	4682      	mov	sl, r0
 8006240:	468b      	mov	fp, r1
 8006242:	dd13      	ble.n	800626c <_strtod_l+0x3dc>
 8006244:	4b7b      	ldr	r3, [pc, #492]	; (8006434 <_strtod_l+0x5a4>)
 8006246:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800624a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800624e:	f7fa f9eb 	bl	8000628 <__aeabi_dmul>
 8006252:	4682      	mov	sl, r0
 8006254:	4648      	mov	r0, r9
 8006256:	468b      	mov	fp, r1
 8006258:	f7fa f96c 	bl	8000534 <__aeabi_ui2d>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4650      	mov	r0, sl
 8006262:	4659      	mov	r1, fp
 8006264:	f7fa f82a 	bl	80002bc <__adddf3>
 8006268:	4682      	mov	sl, r0
 800626a:	468b      	mov	fp, r1
 800626c:	2d0f      	cmp	r5, #15
 800626e:	dc38      	bgt.n	80062e2 <_strtod_l+0x452>
 8006270:	9b06      	ldr	r3, [sp, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f43f ae50 	beq.w	8005f18 <_strtod_l+0x88>
 8006278:	dd24      	ble.n	80062c4 <_strtod_l+0x434>
 800627a:	2b16      	cmp	r3, #22
 800627c:	dc0b      	bgt.n	8006296 <_strtod_l+0x406>
 800627e:	496d      	ldr	r1, [pc, #436]	; (8006434 <_strtod_l+0x5a4>)
 8006280:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006288:	4652      	mov	r2, sl
 800628a:	465b      	mov	r3, fp
 800628c:	f7fa f9cc 	bl	8000628 <__aeabi_dmul>
 8006290:	4682      	mov	sl, r0
 8006292:	468b      	mov	fp, r1
 8006294:	e640      	b.n	8005f18 <_strtod_l+0x88>
 8006296:	9a06      	ldr	r2, [sp, #24]
 8006298:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800629c:	4293      	cmp	r3, r2
 800629e:	db20      	blt.n	80062e2 <_strtod_l+0x452>
 80062a0:	4c64      	ldr	r4, [pc, #400]	; (8006434 <_strtod_l+0x5a4>)
 80062a2:	f1c5 050f 	rsb	r5, r5, #15
 80062a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80062aa:	4652      	mov	r2, sl
 80062ac:	465b      	mov	r3, fp
 80062ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062b2:	f7fa f9b9 	bl	8000628 <__aeabi_dmul>
 80062b6:	9b06      	ldr	r3, [sp, #24]
 80062b8:	1b5d      	subs	r5, r3, r5
 80062ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80062be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80062c2:	e7e3      	b.n	800628c <_strtod_l+0x3fc>
 80062c4:	9b06      	ldr	r3, [sp, #24]
 80062c6:	3316      	adds	r3, #22
 80062c8:	db0b      	blt.n	80062e2 <_strtod_l+0x452>
 80062ca:	9b05      	ldr	r3, [sp, #20]
 80062cc:	1b9e      	subs	r6, r3, r6
 80062ce:	4b59      	ldr	r3, [pc, #356]	; (8006434 <_strtod_l+0x5a4>)
 80062d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80062d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062d8:	4650      	mov	r0, sl
 80062da:	4659      	mov	r1, fp
 80062dc:	f7fa face 	bl	800087c <__aeabi_ddiv>
 80062e0:	e7d6      	b.n	8006290 <_strtod_l+0x400>
 80062e2:	9b06      	ldr	r3, [sp, #24]
 80062e4:	eba5 0808 	sub.w	r8, r5, r8
 80062e8:	4498      	add	r8, r3
 80062ea:	f1b8 0f00 	cmp.w	r8, #0
 80062ee:	dd74      	ble.n	80063da <_strtod_l+0x54a>
 80062f0:	f018 030f 	ands.w	r3, r8, #15
 80062f4:	d00a      	beq.n	800630c <_strtod_l+0x47c>
 80062f6:	494f      	ldr	r1, [pc, #316]	; (8006434 <_strtod_l+0x5a4>)
 80062f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062fc:	4652      	mov	r2, sl
 80062fe:	465b      	mov	r3, fp
 8006300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006304:	f7fa f990 	bl	8000628 <__aeabi_dmul>
 8006308:	4682      	mov	sl, r0
 800630a:	468b      	mov	fp, r1
 800630c:	f038 080f 	bics.w	r8, r8, #15
 8006310:	d04f      	beq.n	80063b2 <_strtod_l+0x522>
 8006312:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006316:	dd22      	ble.n	800635e <_strtod_l+0x4ce>
 8006318:	2500      	movs	r5, #0
 800631a:	462e      	mov	r6, r5
 800631c:	9507      	str	r5, [sp, #28]
 800631e:	9505      	str	r5, [sp, #20]
 8006320:	2322      	movs	r3, #34	; 0x22
 8006322:	f8df b118 	ldr.w	fp, [pc, #280]	; 800643c <_strtod_l+0x5ac>
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	f04f 0a00 	mov.w	sl, #0
 800632c:	9b07      	ldr	r3, [sp, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	f43f adf2 	beq.w	8005f18 <_strtod_l+0x88>
 8006334:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006336:	4620      	mov	r0, r4
 8006338:	f000 ffbe 	bl	80072b8 <_Bfree>
 800633c:	9905      	ldr	r1, [sp, #20]
 800633e:	4620      	mov	r0, r4
 8006340:	f000 ffba 	bl	80072b8 <_Bfree>
 8006344:	4631      	mov	r1, r6
 8006346:	4620      	mov	r0, r4
 8006348:	f000 ffb6 	bl	80072b8 <_Bfree>
 800634c:	9907      	ldr	r1, [sp, #28]
 800634e:	4620      	mov	r0, r4
 8006350:	f000 ffb2 	bl	80072b8 <_Bfree>
 8006354:	4629      	mov	r1, r5
 8006356:	4620      	mov	r0, r4
 8006358:	f000 ffae 	bl	80072b8 <_Bfree>
 800635c:	e5dc      	b.n	8005f18 <_strtod_l+0x88>
 800635e:	4b36      	ldr	r3, [pc, #216]	; (8006438 <_strtod_l+0x5a8>)
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	2300      	movs	r3, #0
 8006364:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006368:	4650      	mov	r0, sl
 800636a:	4659      	mov	r1, fp
 800636c:	4699      	mov	r9, r3
 800636e:	f1b8 0f01 	cmp.w	r8, #1
 8006372:	dc21      	bgt.n	80063b8 <_strtod_l+0x528>
 8006374:	b10b      	cbz	r3, 800637a <_strtod_l+0x4ea>
 8006376:	4682      	mov	sl, r0
 8006378:	468b      	mov	fp, r1
 800637a:	4b2f      	ldr	r3, [pc, #188]	; (8006438 <_strtod_l+0x5a8>)
 800637c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006380:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	e9d9 0100 	ldrd	r0, r1, [r9]
 800638c:	f7fa f94c 	bl	8000628 <__aeabi_dmul>
 8006390:	4b2a      	ldr	r3, [pc, #168]	; (800643c <_strtod_l+0x5ac>)
 8006392:	460a      	mov	r2, r1
 8006394:	400b      	ands	r3, r1
 8006396:	492a      	ldr	r1, [pc, #168]	; (8006440 <_strtod_l+0x5b0>)
 8006398:	428b      	cmp	r3, r1
 800639a:	4682      	mov	sl, r0
 800639c:	d8bc      	bhi.n	8006318 <_strtod_l+0x488>
 800639e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80063a2:	428b      	cmp	r3, r1
 80063a4:	bf86      	itte	hi
 80063a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006444 <_strtod_l+0x5b4>
 80063aa:	f04f 3aff 	movhi.w	sl, #4294967295
 80063ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80063b2:	2300      	movs	r3, #0
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	e084      	b.n	80064c2 <_strtod_l+0x632>
 80063b8:	f018 0f01 	tst.w	r8, #1
 80063bc:	d005      	beq.n	80063ca <_strtod_l+0x53a>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f7fa f930 	bl	8000628 <__aeabi_dmul>
 80063c8:	2301      	movs	r3, #1
 80063ca:	9a04      	ldr	r2, [sp, #16]
 80063cc:	3208      	adds	r2, #8
 80063ce:	f109 0901 	add.w	r9, r9, #1
 80063d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80063d6:	9204      	str	r2, [sp, #16]
 80063d8:	e7c9      	b.n	800636e <_strtod_l+0x4de>
 80063da:	d0ea      	beq.n	80063b2 <_strtod_l+0x522>
 80063dc:	f1c8 0800 	rsb	r8, r8, #0
 80063e0:	f018 020f 	ands.w	r2, r8, #15
 80063e4:	d00a      	beq.n	80063fc <_strtod_l+0x56c>
 80063e6:	4b13      	ldr	r3, [pc, #76]	; (8006434 <_strtod_l+0x5a4>)
 80063e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063ec:	4650      	mov	r0, sl
 80063ee:	4659      	mov	r1, fp
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f7fa fa42 	bl	800087c <__aeabi_ddiv>
 80063f8:	4682      	mov	sl, r0
 80063fa:	468b      	mov	fp, r1
 80063fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006400:	d0d7      	beq.n	80063b2 <_strtod_l+0x522>
 8006402:	f1b8 0f1f 	cmp.w	r8, #31
 8006406:	dd1f      	ble.n	8006448 <_strtod_l+0x5b8>
 8006408:	2500      	movs	r5, #0
 800640a:	462e      	mov	r6, r5
 800640c:	9507      	str	r5, [sp, #28]
 800640e:	9505      	str	r5, [sp, #20]
 8006410:	2322      	movs	r3, #34	; 0x22
 8006412:	f04f 0a00 	mov.w	sl, #0
 8006416:	f04f 0b00 	mov.w	fp, #0
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	e786      	b.n	800632c <_strtod_l+0x49c>
 800641e:	bf00      	nop
 8006420:	08008b45 	.word	0x08008b45
 8006424:	08008b5c 	.word	0x08008b5c
 8006428:	08008b3c 	.word	0x08008b3c
 800642c:	08008b3f 	.word	0x08008b3f
 8006430:	08008df1 	.word	0x08008df1
 8006434:	08008cc0 	.word	0x08008cc0
 8006438:	08008c98 	.word	0x08008c98
 800643c:	7ff00000 	.word	0x7ff00000
 8006440:	7ca00000 	.word	0x7ca00000
 8006444:	7fefffff 	.word	0x7fefffff
 8006448:	f018 0310 	ands.w	r3, r8, #16
 800644c:	bf18      	it	ne
 800644e:	236a      	movne	r3, #106	; 0x6a
 8006450:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006800 <_strtod_l+0x970>
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	4650      	mov	r0, sl
 8006458:	4659      	mov	r1, fp
 800645a:	2300      	movs	r3, #0
 800645c:	f018 0f01 	tst.w	r8, #1
 8006460:	d004      	beq.n	800646c <_strtod_l+0x5dc>
 8006462:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006466:	f7fa f8df 	bl	8000628 <__aeabi_dmul>
 800646a:	2301      	movs	r3, #1
 800646c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006470:	f109 0908 	add.w	r9, r9, #8
 8006474:	d1f2      	bne.n	800645c <_strtod_l+0x5cc>
 8006476:	b10b      	cbz	r3, 800647c <_strtod_l+0x5ec>
 8006478:	4682      	mov	sl, r0
 800647a:	468b      	mov	fp, r1
 800647c:	9b04      	ldr	r3, [sp, #16]
 800647e:	b1c3      	cbz	r3, 80064b2 <_strtod_l+0x622>
 8006480:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006484:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006488:	2b00      	cmp	r3, #0
 800648a:	4659      	mov	r1, fp
 800648c:	dd11      	ble.n	80064b2 <_strtod_l+0x622>
 800648e:	2b1f      	cmp	r3, #31
 8006490:	f340 8124 	ble.w	80066dc <_strtod_l+0x84c>
 8006494:	2b34      	cmp	r3, #52	; 0x34
 8006496:	bfde      	ittt	le
 8006498:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800649c:	f04f 33ff 	movle.w	r3, #4294967295
 80064a0:	fa03 f202 	lslle.w	r2, r3, r2
 80064a4:	f04f 0a00 	mov.w	sl, #0
 80064a8:	bfcc      	ite	gt
 80064aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80064ae:	ea02 0b01 	andle.w	fp, r2, r1
 80064b2:	2200      	movs	r2, #0
 80064b4:	2300      	movs	r3, #0
 80064b6:	4650      	mov	r0, sl
 80064b8:	4659      	mov	r1, fp
 80064ba:	f7fa fb1d 	bl	8000af8 <__aeabi_dcmpeq>
 80064be:	2800      	cmp	r0, #0
 80064c0:	d1a2      	bne.n	8006408 <_strtod_l+0x578>
 80064c2:	9b07      	ldr	r3, [sp, #28]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	9908      	ldr	r1, [sp, #32]
 80064c8:	462b      	mov	r3, r5
 80064ca:	463a      	mov	r2, r7
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 ff5b 	bl	8007388 <__s2b>
 80064d2:	9007      	str	r0, [sp, #28]
 80064d4:	2800      	cmp	r0, #0
 80064d6:	f43f af1f 	beq.w	8006318 <_strtod_l+0x488>
 80064da:	9b05      	ldr	r3, [sp, #20]
 80064dc:	1b9e      	subs	r6, r3, r6
 80064de:	9b06      	ldr	r3, [sp, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bfb4      	ite	lt
 80064e4:	4633      	movlt	r3, r6
 80064e6:	2300      	movge	r3, #0
 80064e8:	930c      	str	r3, [sp, #48]	; 0x30
 80064ea:	9b06      	ldr	r3, [sp, #24]
 80064ec:	2500      	movs	r5, #0
 80064ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80064f2:	9312      	str	r3, [sp, #72]	; 0x48
 80064f4:	462e      	mov	r6, r5
 80064f6:	9b07      	ldr	r3, [sp, #28]
 80064f8:	4620      	mov	r0, r4
 80064fa:	6859      	ldr	r1, [r3, #4]
 80064fc:	f000 fe9c 	bl	8007238 <_Balloc>
 8006500:	9005      	str	r0, [sp, #20]
 8006502:	2800      	cmp	r0, #0
 8006504:	f43f af0c 	beq.w	8006320 <_strtod_l+0x490>
 8006508:	9b07      	ldr	r3, [sp, #28]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	3202      	adds	r2, #2
 800650e:	f103 010c 	add.w	r1, r3, #12
 8006512:	0092      	lsls	r2, r2, #2
 8006514:	300c      	adds	r0, #12
 8006516:	f7ff fb2b 	bl	8005b70 <memcpy>
 800651a:	ec4b ab10 	vmov	d0, sl, fp
 800651e:	aa1a      	add	r2, sp, #104	; 0x68
 8006520:	a919      	add	r1, sp, #100	; 0x64
 8006522:	4620      	mov	r0, r4
 8006524:	f001 fa76 	bl	8007a14 <__d2b>
 8006528:	ec4b ab18 	vmov	d8, sl, fp
 800652c:	9018      	str	r0, [sp, #96]	; 0x60
 800652e:	2800      	cmp	r0, #0
 8006530:	f43f aef6 	beq.w	8006320 <_strtod_l+0x490>
 8006534:	2101      	movs	r1, #1
 8006536:	4620      	mov	r0, r4
 8006538:	f000 ffc0 	bl	80074bc <__i2b>
 800653c:	4606      	mov	r6, r0
 800653e:	2800      	cmp	r0, #0
 8006540:	f43f aeee 	beq.w	8006320 <_strtod_l+0x490>
 8006544:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006546:	9904      	ldr	r1, [sp, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	bfab      	itete	ge
 800654c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800654e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006550:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006552:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006556:	bfac      	ite	ge
 8006558:	eb03 0902 	addge.w	r9, r3, r2
 800655c:	1ad7      	sublt	r7, r2, r3
 800655e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006560:	eba3 0801 	sub.w	r8, r3, r1
 8006564:	4490      	add	r8, r2
 8006566:	4ba1      	ldr	r3, [pc, #644]	; (80067ec <_strtod_l+0x95c>)
 8006568:	f108 38ff 	add.w	r8, r8, #4294967295
 800656c:	4598      	cmp	r8, r3
 800656e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006572:	f280 80c7 	bge.w	8006704 <_strtod_l+0x874>
 8006576:	eba3 0308 	sub.w	r3, r3, r8
 800657a:	2b1f      	cmp	r3, #31
 800657c:	eba2 0203 	sub.w	r2, r2, r3
 8006580:	f04f 0101 	mov.w	r1, #1
 8006584:	f300 80b1 	bgt.w	80066ea <_strtod_l+0x85a>
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	930d      	str	r3, [sp, #52]	; 0x34
 800658e:	2300      	movs	r3, #0
 8006590:	9308      	str	r3, [sp, #32]
 8006592:	eb09 0802 	add.w	r8, r9, r2
 8006596:	9b04      	ldr	r3, [sp, #16]
 8006598:	45c1      	cmp	r9, r8
 800659a:	4417      	add	r7, r2
 800659c:	441f      	add	r7, r3
 800659e:	464b      	mov	r3, r9
 80065a0:	bfa8      	it	ge
 80065a2:	4643      	movge	r3, r8
 80065a4:	42bb      	cmp	r3, r7
 80065a6:	bfa8      	it	ge
 80065a8:	463b      	movge	r3, r7
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bfc2      	ittt	gt
 80065ae:	eba8 0803 	subgt.w	r8, r8, r3
 80065b2:	1aff      	subgt	r7, r7, r3
 80065b4:	eba9 0903 	subgt.w	r9, r9, r3
 80065b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	dd17      	ble.n	80065ee <_strtod_l+0x75e>
 80065be:	4631      	mov	r1, r6
 80065c0:	461a      	mov	r2, r3
 80065c2:	4620      	mov	r0, r4
 80065c4:	f001 f83a 	bl	800763c <__pow5mult>
 80065c8:	4606      	mov	r6, r0
 80065ca:	2800      	cmp	r0, #0
 80065cc:	f43f aea8 	beq.w	8006320 <_strtod_l+0x490>
 80065d0:	4601      	mov	r1, r0
 80065d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 ff87 	bl	80074e8 <__multiply>
 80065da:	900b      	str	r0, [sp, #44]	; 0x2c
 80065dc:	2800      	cmp	r0, #0
 80065de:	f43f ae9f 	beq.w	8006320 <_strtod_l+0x490>
 80065e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fe67 	bl	80072b8 <_Bfree>
 80065ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ec:	9318      	str	r3, [sp, #96]	; 0x60
 80065ee:	f1b8 0f00 	cmp.w	r8, #0
 80065f2:	f300 808c 	bgt.w	800670e <_strtod_l+0x87e>
 80065f6:	9b06      	ldr	r3, [sp, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	dd08      	ble.n	800660e <_strtod_l+0x77e>
 80065fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065fe:	9905      	ldr	r1, [sp, #20]
 8006600:	4620      	mov	r0, r4
 8006602:	f001 f81b 	bl	800763c <__pow5mult>
 8006606:	9005      	str	r0, [sp, #20]
 8006608:	2800      	cmp	r0, #0
 800660a:	f43f ae89 	beq.w	8006320 <_strtod_l+0x490>
 800660e:	2f00      	cmp	r7, #0
 8006610:	dd08      	ble.n	8006624 <_strtod_l+0x794>
 8006612:	9905      	ldr	r1, [sp, #20]
 8006614:	463a      	mov	r2, r7
 8006616:	4620      	mov	r0, r4
 8006618:	f001 f86a 	bl	80076f0 <__lshift>
 800661c:	9005      	str	r0, [sp, #20]
 800661e:	2800      	cmp	r0, #0
 8006620:	f43f ae7e 	beq.w	8006320 <_strtod_l+0x490>
 8006624:	f1b9 0f00 	cmp.w	r9, #0
 8006628:	dd08      	ble.n	800663c <_strtod_l+0x7ac>
 800662a:	4631      	mov	r1, r6
 800662c:	464a      	mov	r2, r9
 800662e:	4620      	mov	r0, r4
 8006630:	f001 f85e 	bl	80076f0 <__lshift>
 8006634:	4606      	mov	r6, r0
 8006636:	2800      	cmp	r0, #0
 8006638:	f43f ae72 	beq.w	8006320 <_strtod_l+0x490>
 800663c:	9a05      	ldr	r2, [sp, #20]
 800663e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006640:	4620      	mov	r0, r4
 8006642:	f001 f8e1 	bl	8007808 <__mdiff>
 8006646:	4605      	mov	r5, r0
 8006648:	2800      	cmp	r0, #0
 800664a:	f43f ae69 	beq.w	8006320 <_strtod_l+0x490>
 800664e:	68c3      	ldr	r3, [r0, #12]
 8006650:	930b      	str	r3, [sp, #44]	; 0x2c
 8006652:	2300      	movs	r3, #0
 8006654:	60c3      	str	r3, [r0, #12]
 8006656:	4631      	mov	r1, r6
 8006658:	f001 f8ba 	bl	80077d0 <__mcmp>
 800665c:	2800      	cmp	r0, #0
 800665e:	da60      	bge.n	8006722 <_strtod_l+0x892>
 8006660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006662:	ea53 030a 	orrs.w	r3, r3, sl
 8006666:	f040 8082 	bne.w	800676e <_strtod_l+0x8de>
 800666a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800666e:	2b00      	cmp	r3, #0
 8006670:	d17d      	bne.n	800676e <_strtod_l+0x8de>
 8006672:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006676:	0d1b      	lsrs	r3, r3, #20
 8006678:	051b      	lsls	r3, r3, #20
 800667a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800667e:	d976      	bls.n	800676e <_strtod_l+0x8de>
 8006680:	696b      	ldr	r3, [r5, #20]
 8006682:	b913      	cbnz	r3, 800668a <_strtod_l+0x7fa>
 8006684:	692b      	ldr	r3, [r5, #16]
 8006686:	2b01      	cmp	r3, #1
 8006688:	dd71      	ble.n	800676e <_strtod_l+0x8de>
 800668a:	4629      	mov	r1, r5
 800668c:	2201      	movs	r2, #1
 800668e:	4620      	mov	r0, r4
 8006690:	f001 f82e 	bl	80076f0 <__lshift>
 8006694:	4631      	mov	r1, r6
 8006696:	4605      	mov	r5, r0
 8006698:	f001 f89a 	bl	80077d0 <__mcmp>
 800669c:	2800      	cmp	r0, #0
 800669e:	dd66      	ble.n	800676e <_strtod_l+0x8de>
 80066a0:	9904      	ldr	r1, [sp, #16]
 80066a2:	4a53      	ldr	r2, [pc, #332]	; (80067f0 <_strtod_l+0x960>)
 80066a4:	465b      	mov	r3, fp
 80066a6:	2900      	cmp	r1, #0
 80066a8:	f000 8081 	beq.w	80067ae <_strtod_l+0x91e>
 80066ac:	ea02 010b 	and.w	r1, r2, fp
 80066b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80066b4:	dc7b      	bgt.n	80067ae <_strtod_l+0x91e>
 80066b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80066ba:	f77f aea9 	ble.w	8006410 <_strtod_l+0x580>
 80066be:	4b4d      	ldr	r3, [pc, #308]	; (80067f4 <_strtod_l+0x964>)
 80066c0:	4650      	mov	r0, sl
 80066c2:	4659      	mov	r1, fp
 80066c4:	2200      	movs	r2, #0
 80066c6:	f7f9 ffaf 	bl	8000628 <__aeabi_dmul>
 80066ca:	460b      	mov	r3, r1
 80066cc:	4303      	orrs	r3, r0
 80066ce:	bf08      	it	eq
 80066d0:	2322      	moveq	r3, #34	; 0x22
 80066d2:	4682      	mov	sl, r0
 80066d4:	468b      	mov	fp, r1
 80066d6:	bf08      	it	eq
 80066d8:	6023      	streq	r3, [r4, #0]
 80066da:	e62b      	b.n	8006334 <_strtod_l+0x4a4>
 80066dc:	f04f 32ff 	mov.w	r2, #4294967295
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	ea03 0a0a 	and.w	sl, r3, sl
 80066e8:	e6e3      	b.n	80064b2 <_strtod_l+0x622>
 80066ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80066ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80066f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80066f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80066fa:	fa01 f308 	lsl.w	r3, r1, r8
 80066fe:	9308      	str	r3, [sp, #32]
 8006700:	910d      	str	r1, [sp, #52]	; 0x34
 8006702:	e746      	b.n	8006592 <_strtod_l+0x702>
 8006704:	2300      	movs	r3, #0
 8006706:	9308      	str	r3, [sp, #32]
 8006708:	2301      	movs	r3, #1
 800670a:	930d      	str	r3, [sp, #52]	; 0x34
 800670c:	e741      	b.n	8006592 <_strtod_l+0x702>
 800670e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006710:	4642      	mov	r2, r8
 8006712:	4620      	mov	r0, r4
 8006714:	f000 ffec 	bl	80076f0 <__lshift>
 8006718:	9018      	str	r0, [sp, #96]	; 0x60
 800671a:	2800      	cmp	r0, #0
 800671c:	f47f af6b 	bne.w	80065f6 <_strtod_l+0x766>
 8006720:	e5fe      	b.n	8006320 <_strtod_l+0x490>
 8006722:	465f      	mov	r7, fp
 8006724:	d16e      	bne.n	8006804 <_strtod_l+0x974>
 8006726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006728:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800672c:	b342      	cbz	r2, 8006780 <_strtod_l+0x8f0>
 800672e:	4a32      	ldr	r2, [pc, #200]	; (80067f8 <_strtod_l+0x968>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d128      	bne.n	8006786 <_strtod_l+0x8f6>
 8006734:	9b04      	ldr	r3, [sp, #16]
 8006736:	4651      	mov	r1, sl
 8006738:	b1eb      	cbz	r3, 8006776 <_strtod_l+0x8e6>
 800673a:	4b2d      	ldr	r3, [pc, #180]	; (80067f0 <_strtod_l+0x960>)
 800673c:	403b      	ands	r3, r7
 800673e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006742:	f04f 32ff 	mov.w	r2, #4294967295
 8006746:	d819      	bhi.n	800677c <_strtod_l+0x8ec>
 8006748:	0d1b      	lsrs	r3, r3, #20
 800674a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	4299      	cmp	r1, r3
 8006754:	d117      	bne.n	8006786 <_strtod_l+0x8f6>
 8006756:	4b29      	ldr	r3, [pc, #164]	; (80067fc <_strtod_l+0x96c>)
 8006758:	429f      	cmp	r7, r3
 800675a:	d102      	bne.n	8006762 <_strtod_l+0x8d2>
 800675c:	3101      	adds	r1, #1
 800675e:	f43f addf 	beq.w	8006320 <_strtod_l+0x490>
 8006762:	4b23      	ldr	r3, [pc, #140]	; (80067f0 <_strtod_l+0x960>)
 8006764:	403b      	ands	r3, r7
 8006766:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800676a:	f04f 0a00 	mov.w	sl, #0
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1a4      	bne.n	80066be <_strtod_l+0x82e>
 8006774:	e5de      	b.n	8006334 <_strtod_l+0x4a4>
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	e7ea      	b.n	8006752 <_strtod_l+0x8c2>
 800677c:	4613      	mov	r3, r2
 800677e:	e7e8      	b.n	8006752 <_strtod_l+0x8c2>
 8006780:	ea53 030a 	orrs.w	r3, r3, sl
 8006784:	d08c      	beq.n	80066a0 <_strtod_l+0x810>
 8006786:	9b08      	ldr	r3, [sp, #32]
 8006788:	b1db      	cbz	r3, 80067c2 <_strtod_l+0x932>
 800678a:	423b      	tst	r3, r7
 800678c:	d0ef      	beq.n	800676e <_strtod_l+0x8de>
 800678e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006790:	9a04      	ldr	r2, [sp, #16]
 8006792:	4650      	mov	r0, sl
 8006794:	4659      	mov	r1, fp
 8006796:	b1c3      	cbz	r3, 80067ca <_strtod_l+0x93a>
 8006798:	f7ff fb5e 	bl	8005e58 <sulp>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	ec51 0b18 	vmov	r0, r1, d8
 80067a4:	f7f9 fd8a 	bl	80002bc <__adddf3>
 80067a8:	4682      	mov	sl, r0
 80067aa:	468b      	mov	fp, r1
 80067ac:	e7df      	b.n	800676e <_strtod_l+0x8de>
 80067ae:	4013      	ands	r3, r2
 80067b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80067b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80067b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80067bc:	f04f 3aff 	mov.w	sl, #4294967295
 80067c0:	e7d5      	b.n	800676e <_strtod_l+0x8de>
 80067c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067c4:	ea13 0f0a 	tst.w	r3, sl
 80067c8:	e7e0      	b.n	800678c <_strtod_l+0x8fc>
 80067ca:	f7ff fb45 	bl	8005e58 <sulp>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	ec51 0b18 	vmov	r0, r1, d8
 80067d6:	f7f9 fd6f 	bl	80002b8 <__aeabi_dsub>
 80067da:	2200      	movs	r2, #0
 80067dc:	2300      	movs	r3, #0
 80067de:	4682      	mov	sl, r0
 80067e0:	468b      	mov	fp, r1
 80067e2:	f7fa f989 	bl	8000af8 <__aeabi_dcmpeq>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d0c1      	beq.n	800676e <_strtod_l+0x8de>
 80067ea:	e611      	b.n	8006410 <_strtod_l+0x580>
 80067ec:	fffffc02 	.word	0xfffffc02
 80067f0:	7ff00000 	.word	0x7ff00000
 80067f4:	39500000 	.word	0x39500000
 80067f8:	000fffff 	.word	0x000fffff
 80067fc:	7fefffff 	.word	0x7fefffff
 8006800:	08008b70 	.word	0x08008b70
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	f001 f960 	bl	8007acc <__ratio>
 800680c:	ec59 8b10 	vmov	r8, r9, d0
 8006810:	ee10 0a10 	vmov	r0, s0
 8006814:	2200      	movs	r2, #0
 8006816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800681a:	4649      	mov	r1, r9
 800681c:	f7fa f980 	bl	8000b20 <__aeabi_dcmple>
 8006820:	2800      	cmp	r0, #0
 8006822:	d07a      	beq.n	800691a <_strtod_l+0xa8a>
 8006824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d04a      	beq.n	80068c0 <_strtod_l+0xa30>
 800682a:	4b95      	ldr	r3, [pc, #596]	; (8006a80 <_strtod_l+0xbf0>)
 800682c:	2200      	movs	r2, #0
 800682e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006832:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006a80 <_strtod_l+0xbf0>
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	4b92      	ldr	r3, [pc, #584]	; (8006a84 <_strtod_l+0xbf4>)
 800683c:	403b      	ands	r3, r7
 800683e:	930d      	str	r3, [sp, #52]	; 0x34
 8006840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006842:	4b91      	ldr	r3, [pc, #580]	; (8006a88 <_strtod_l+0xbf8>)
 8006844:	429a      	cmp	r2, r3
 8006846:	f040 80b0 	bne.w	80069aa <_strtod_l+0xb1a>
 800684a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800684e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006852:	ec4b ab10 	vmov	d0, sl, fp
 8006856:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800685a:	f001 f85f 	bl	800791c <__ulp>
 800685e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006862:	ec53 2b10 	vmov	r2, r3, d0
 8006866:	f7f9 fedf 	bl	8000628 <__aeabi_dmul>
 800686a:	4652      	mov	r2, sl
 800686c:	465b      	mov	r3, fp
 800686e:	f7f9 fd25 	bl	80002bc <__adddf3>
 8006872:	460b      	mov	r3, r1
 8006874:	4983      	ldr	r1, [pc, #524]	; (8006a84 <_strtod_l+0xbf4>)
 8006876:	4a85      	ldr	r2, [pc, #532]	; (8006a8c <_strtod_l+0xbfc>)
 8006878:	4019      	ands	r1, r3
 800687a:	4291      	cmp	r1, r2
 800687c:	4682      	mov	sl, r0
 800687e:	d960      	bls.n	8006942 <_strtod_l+0xab2>
 8006880:	ee18 3a90 	vmov	r3, s17
 8006884:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006888:	4293      	cmp	r3, r2
 800688a:	d104      	bne.n	8006896 <_strtod_l+0xa06>
 800688c:	ee18 3a10 	vmov	r3, s16
 8006890:	3301      	adds	r3, #1
 8006892:	f43f ad45 	beq.w	8006320 <_strtod_l+0x490>
 8006896:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006a98 <_strtod_l+0xc08>
 800689a:	f04f 3aff 	mov.w	sl, #4294967295
 800689e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fd09 	bl	80072b8 <_Bfree>
 80068a6:	9905      	ldr	r1, [sp, #20]
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fd05 	bl	80072b8 <_Bfree>
 80068ae:	4631      	mov	r1, r6
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fd01 	bl	80072b8 <_Bfree>
 80068b6:	4629      	mov	r1, r5
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fcfd 	bl	80072b8 <_Bfree>
 80068be:	e61a      	b.n	80064f6 <_strtod_l+0x666>
 80068c0:	f1ba 0f00 	cmp.w	sl, #0
 80068c4:	d11b      	bne.n	80068fe <_strtod_l+0xa6e>
 80068c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068ca:	b9f3      	cbnz	r3, 800690a <_strtod_l+0xa7a>
 80068cc:	4b6c      	ldr	r3, [pc, #432]	; (8006a80 <_strtod_l+0xbf0>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	4640      	mov	r0, r8
 80068d2:	4649      	mov	r1, r9
 80068d4:	f7fa f91a 	bl	8000b0c <__aeabi_dcmplt>
 80068d8:	b9d0      	cbnz	r0, 8006910 <_strtod_l+0xa80>
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	4b6c      	ldr	r3, [pc, #432]	; (8006a90 <_strtod_l+0xc00>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	f7f9 fea1 	bl	8000628 <__aeabi_dmul>
 80068e6:	4680      	mov	r8, r0
 80068e8:	4689      	mov	r9, r1
 80068ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80068ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80068f2:	9315      	str	r3, [sp, #84]	; 0x54
 80068f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80068f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068fc:	e79d      	b.n	800683a <_strtod_l+0x9aa>
 80068fe:	f1ba 0f01 	cmp.w	sl, #1
 8006902:	d102      	bne.n	800690a <_strtod_l+0xa7a>
 8006904:	2f00      	cmp	r7, #0
 8006906:	f43f ad83 	beq.w	8006410 <_strtod_l+0x580>
 800690a:	4b62      	ldr	r3, [pc, #392]	; (8006a94 <_strtod_l+0xc04>)
 800690c:	2200      	movs	r2, #0
 800690e:	e78e      	b.n	800682e <_strtod_l+0x99e>
 8006910:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006a90 <_strtod_l+0xc00>
 8006914:	f04f 0800 	mov.w	r8, #0
 8006918:	e7e7      	b.n	80068ea <_strtod_l+0xa5a>
 800691a:	4b5d      	ldr	r3, [pc, #372]	; (8006a90 <_strtod_l+0xc00>)
 800691c:	4640      	mov	r0, r8
 800691e:	4649      	mov	r1, r9
 8006920:	2200      	movs	r2, #0
 8006922:	f7f9 fe81 	bl	8000628 <__aeabi_dmul>
 8006926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006928:	4680      	mov	r8, r0
 800692a:	4689      	mov	r9, r1
 800692c:	b933      	cbnz	r3, 800693c <_strtod_l+0xaac>
 800692e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006932:	900e      	str	r0, [sp, #56]	; 0x38
 8006934:	930f      	str	r3, [sp, #60]	; 0x3c
 8006936:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800693a:	e7dd      	b.n	80068f8 <_strtod_l+0xa68>
 800693c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006940:	e7f9      	b.n	8006936 <_strtod_l+0xaa6>
 8006942:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1a8      	bne.n	800689e <_strtod_l+0xa0e>
 800694c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006952:	0d1b      	lsrs	r3, r3, #20
 8006954:	051b      	lsls	r3, r3, #20
 8006956:	429a      	cmp	r2, r3
 8006958:	d1a1      	bne.n	800689e <_strtod_l+0xa0e>
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7fa f945 	bl	8000bec <__aeabi_d2lz>
 8006962:	f7f9 fe33 	bl	80005cc <__aeabi_l2d>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4640      	mov	r0, r8
 800696c:	4649      	mov	r1, r9
 800696e:	f7f9 fca3 	bl	80002b8 <__aeabi_dsub>
 8006972:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006974:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006978:	ea43 030a 	orr.w	r3, r3, sl
 800697c:	4313      	orrs	r3, r2
 800697e:	4680      	mov	r8, r0
 8006980:	4689      	mov	r9, r1
 8006982:	d055      	beq.n	8006a30 <_strtod_l+0xba0>
 8006984:	a336      	add	r3, pc, #216	; (adr r3, 8006a60 <_strtod_l+0xbd0>)
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	f7fa f8bf 	bl	8000b0c <__aeabi_dcmplt>
 800698e:	2800      	cmp	r0, #0
 8006990:	f47f acd0 	bne.w	8006334 <_strtod_l+0x4a4>
 8006994:	a334      	add	r3, pc, #208	; (adr r3, 8006a68 <_strtod_l+0xbd8>)
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	4640      	mov	r0, r8
 800699c:	4649      	mov	r1, r9
 800699e:	f7fa f8d3 	bl	8000b48 <__aeabi_dcmpgt>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f43f af7b 	beq.w	800689e <_strtod_l+0xa0e>
 80069a8:	e4c4      	b.n	8006334 <_strtod_l+0x4a4>
 80069aa:	9b04      	ldr	r3, [sp, #16]
 80069ac:	b333      	cbz	r3, 80069fc <_strtod_l+0xb6c>
 80069ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80069b4:	d822      	bhi.n	80069fc <_strtod_l+0xb6c>
 80069b6:	a32e      	add	r3, pc, #184	; (adr r3, 8006a70 <_strtod_l+0xbe0>)
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	4640      	mov	r0, r8
 80069be:	4649      	mov	r1, r9
 80069c0:	f7fa f8ae 	bl	8000b20 <__aeabi_dcmple>
 80069c4:	b1a0      	cbz	r0, 80069f0 <_strtod_l+0xb60>
 80069c6:	4649      	mov	r1, r9
 80069c8:	4640      	mov	r0, r8
 80069ca:	f7fa f8ef 	bl	8000bac <__aeabi_d2uiz>
 80069ce:	2801      	cmp	r0, #1
 80069d0:	bf38      	it	cc
 80069d2:	2001      	movcc	r0, #1
 80069d4:	f7f9 fdae 	bl	8000534 <__aeabi_ui2d>
 80069d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069da:	4680      	mov	r8, r0
 80069dc:	4689      	mov	r9, r1
 80069de:	bb23      	cbnz	r3, 8006a2a <_strtod_l+0xb9a>
 80069e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069e4:	9010      	str	r0, [sp, #64]	; 0x40
 80069e6:	9311      	str	r3, [sp, #68]	; 0x44
 80069e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	9309      	str	r3, [sp, #36]	; 0x24
 80069fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a00:	eeb0 0a48 	vmov.f32	s0, s16
 8006a04:	eef0 0a68 	vmov.f32	s1, s17
 8006a08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a0c:	f000 ff86 	bl	800791c <__ulp>
 8006a10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a14:	ec53 2b10 	vmov	r2, r3, d0
 8006a18:	f7f9 fe06 	bl	8000628 <__aeabi_dmul>
 8006a1c:	ec53 2b18 	vmov	r2, r3, d8
 8006a20:	f7f9 fc4c 	bl	80002bc <__adddf3>
 8006a24:	4682      	mov	sl, r0
 8006a26:	468b      	mov	fp, r1
 8006a28:	e78d      	b.n	8006946 <_strtod_l+0xab6>
 8006a2a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006a2e:	e7db      	b.n	80069e8 <_strtod_l+0xb58>
 8006a30:	a311      	add	r3, pc, #68	; (adr r3, 8006a78 <_strtod_l+0xbe8>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7fa f869 	bl	8000b0c <__aeabi_dcmplt>
 8006a3a:	e7b2      	b.n	80069a2 <_strtod_l+0xb12>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	f7ff ba6b 	b.w	8005f20 <_strtod_l+0x90>
 8006a4a:	2a65      	cmp	r2, #101	; 0x65
 8006a4c:	f43f ab5f 	beq.w	800610e <_strtod_l+0x27e>
 8006a50:	2a45      	cmp	r2, #69	; 0x45
 8006a52:	f43f ab5c 	beq.w	800610e <_strtod_l+0x27e>
 8006a56:	2301      	movs	r3, #1
 8006a58:	f7ff bb94 	b.w	8006184 <_strtod_l+0x2f4>
 8006a5c:	f3af 8000 	nop.w
 8006a60:	94a03595 	.word	0x94a03595
 8006a64:	3fdfffff 	.word	0x3fdfffff
 8006a68:	35afe535 	.word	0x35afe535
 8006a6c:	3fe00000 	.word	0x3fe00000
 8006a70:	ffc00000 	.word	0xffc00000
 8006a74:	41dfffff 	.word	0x41dfffff
 8006a78:	94a03595 	.word	0x94a03595
 8006a7c:	3fcfffff 	.word	0x3fcfffff
 8006a80:	3ff00000 	.word	0x3ff00000
 8006a84:	7ff00000 	.word	0x7ff00000
 8006a88:	7fe00000 	.word	0x7fe00000
 8006a8c:	7c9fffff 	.word	0x7c9fffff
 8006a90:	3fe00000 	.word	0x3fe00000
 8006a94:	bff00000 	.word	0xbff00000
 8006a98:	7fefffff 	.word	0x7fefffff

08006a9c <strtod>:
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	4802      	ldr	r0, [pc, #8]	; (8006aac <strtod+0x10>)
 8006aa2:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <strtod+0x14>)
 8006aa4:	6800      	ldr	r0, [r0, #0]
 8006aa6:	f7ff b9f3 	b.w	8005e90 <_strtod_l>
 8006aaa:	bf00      	nop
 8006aac:	20000018 	.word	0x20000018
 8006ab0:	20000080 	.word	0x20000080

08006ab4 <_write_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d07      	ldr	r5, [pc, #28]	; (8006ad4 <_write_r+0x20>)
 8006ab8:	4604      	mov	r4, r0
 8006aba:	4608      	mov	r0, r1
 8006abc:	4611      	mov	r1, r2
 8006abe:	2200      	movs	r2, #0
 8006ac0:	602a      	str	r2, [r5, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f7fb fccf 	bl	8002466 <_write>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_write_r+0x1e>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_write_r+0x1e>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	20000738 	.word	0x20000738

08006ad8 <_close_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d06      	ldr	r5, [pc, #24]	; (8006af4 <_close_r+0x1c>)
 8006adc:	2300      	movs	r3, #0
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7fb fcdb 	bl	800249e <_close>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d102      	bne.n	8006af2 <_close_r+0x1a>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b103      	cbz	r3, 8006af2 <_close_r+0x1a>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	20000738 	.word	0x20000738

08006af8 <rshift>:
 8006af8:	6903      	ldr	r3, [r0, #16]
 8006afa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006afe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b02:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b06:	f100 0414 	add.w	r4, r0, #20
 8006b0a:	dd45      	ble.n	8006b98 <rshift+0xa0>
 8006b0c:	f011 011f 	ands.w	r1, r1, #31
 8006b10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b18:	d10c      	bne.n	8006b34 <rshift+0x3c>
 8006b1a:	f100 0710 	add.w	r7, r0, #16
 8006b1e:	4629      	mov	r1, r5
 8006b20:	42b1      	cmp	r1, r6
 8006b22:	d334      	bcc.n	8006b8e <rshift+0x96>
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	1eea      	subs	r2, r5, #3
 8006b2a:	4296      	cmp	r6, r2
 8006b2c:	bf38      	it	cc
 8006b2e:	2300      	movcc	r3, #0
 8006b30:	4423      	add	r3, r4
 8006b32:	e015      	b.n	8006b60 <rshift+0x68>
 8006b34:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b38:	f1c1 0820 	rsb	r8, r1, #32
 8006b3c:	40cf      	lsrs	r7, r1
 8006b3e:	f105 0e04 	add.w	lr, r5, #4
 8006b42:	46a1      	mov	r9, r4
 8006b44:	4576      	cmp	r6, lr
 8006b46:	46f4      	mov	ip, lr
 8006b48:	d815      	bhi.n	8006b76 <rshift+0x7e>
 8006b4a:	1a9a      	subs	r2, r3, r2
 8006b4c:	0092      	lsls	r2, r2, #2
 8006b4e:	3a04      	subs	r2, #4
 8006b50:	3501      	adds	r5, #1
 8006b52:	42ae      	cmp	r6, r5
 8006b54:	bf38      	it	cc
 8006b56:	2200      	movcc	r2, #0
 8006b58:	18a3      	adds	r3, r4, r2
 8006b5a:	50a7      	str	r7, [r4, r2]
 8006b5c:	b107      	cbz	r7, 8006b60 <rshift+0x68>
 8006b5e:	3304      	adds	r3, #4
 8006b60:	1b1a      	subs	r2, r3, r4
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b68:	bf08      	it	eq
 8006b6a:	2300      	moveq	r3, #0
 8006b6c:	6102      	str	r2, [r0, #16]
 8006b6e:	bf08      	it	eq
 8006b70:	6143      	streq	r3, [r0, #20]
 8006b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b76:	f8dc c000 	ldr.w	ip, [ip]
 8006b7a:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b7e:	ea4c 0707 	orr.w	r7, ip, r7
 8006b82:	f849 7b04 	str.w	r7, [r9], #4
 8006b86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b8a:	40cf      	lsrs	r7, r1
 8006b8c:	e7da      	b.n	8006b44 <rshift+0x4c>
 8006b8e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006b92:	f847 cf04 	str.w	ip, [r7, #4]!
 8006b96:	e7c3      	b.n	8006b20 <rshift+0x28>
 8006b98:	4623      	mov	r3, r4
 8006b9a:	e7e1      	b.n	8006b60 <rshift+0x68>

08006b9c <__hexdig_fun>:
 8006b9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006ba0:	2b09      	cmp	r3, #9
 8006ba2:	d802      	bhi.n	8006baa <__hexdig_fun+0xe>
 8006ba4:	3820      	subs	r0, #32
 8006ba6:	b2c0      	uxtb	r0, r0
 8006ba8:	4770      	bx	lr
 8006baa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006bae:	2b05      	cmp	r3, #5
 8006bb0:	d801      	bhi.n	8006bb6 <__hexdig_fun+0x1a>
 8006bb2:	3847      	subs	r0, #71	; 0x47
 8006bb4:	e7f7      	b.n	8006ba6 <__hexdig_fun+0xa>
 8006bb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	d801      	bhi.n	8006bc2 <__hexdig_fun+0x26>
 8006bbe:	3827      	subs	r0, #39	; 0x27
 8006bc0:	e7f1      	b.n	8006ba6 <__hexdig_fun+0xa>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	4770      	bx	lr
	...

08006bc8 <__gethex>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	ed2d 8b02 	vpush	{d8}
 8006bd0:	b089      	sub	sp, #36	; 0x24
 8006bd2:	ee08 0a10 	vmov	s16, r0
 8006bd6:	9304      	str	r3, [sp, #16]
 8006bd8:	4bb4      	ldr	r3, [pc, #720]	; (8006eac <__gethex+0x2e4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	4618      	mov	r0, r3
 8006be0:	468b      	mov	fp, r1
 8006be2:	4690      	mov	r8, r2
 8006be4:	f7f9 fb06 	bl	80001f4 <strlen>
 8006be8:	9b01      	ldr	r3, [sp, #4]
 8006bea:	f8db 2000 	ldr.w	r2, [fp]
 8006bee:	4403      	add	r3, r0
 8006bf0:	4682      	mov	sl, r0
 8006bf2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006bf6:	9305      	str	r3, [sp, #20]
 8006bf8:	1c93      	adds	r3, r2, #2
 8006bfa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006bfe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006c02:	32fe      	adds	r2, #254	; 0xfe
 8006c04:	18d1      	adds	r1, r2, r3
 8006c06:	461f      	mov	r7, r3
 8006c08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c0c:	9100      	str	r1, [sp, #0]
 8006c0e:	2830      	cmp	r0, #48	; 0x30
 8006c10:	d0f8      	beq.n	8006c04 <__gethex+0x3c>
 8006c12:	f7ff ffc3 	bl	8006b9c <__hexdig_fun>
 8006c16:	4604      	mov	r4, r0
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d13a      	bne.n	8006c92 <__gethex+0xca>
 8006c1c:	9901      	ldr	r1, [sp, #4]
 8006c1e:	4652      	mov	r2, sl
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff f905 	bl	8005e30 <strncmp>
 8006c26:	4605      	mov	r5, r0
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d168      	bne.n	8006cfe <__gethex+0x136>
 8006c2c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006c30:	eb07 060a 	add.w	r6, r7, sl
 8006c34:	f7ff ffb2 	bl	8006b9c <__hexdig_fun>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d062      	beq.n	8006d02 <__gethex+0x13a>
 8006c3c:	4633      	mov	r3, r6
 8006c3e:	7818      	ldrb	r0, [r3, #0]
 8006c40:	2830      	cmp	r0, #48	; 0x30
 8006c42:	461f      	mov	r7, r3
 8006c44:	f103 0301 	add.w	r3, r3, #1
 8006c48:	d0f9      	beq.n	8006c3e <__gethex+0x76>
 8006c4a:	f7ff ffa7 	bl	8006b9c <__hexdig_fun>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	fab0 f480 	clz	r4, r0
 8006c54:	0964      	lsrs	r4, r4, #5
 8006c56:	4635      	mov	r5, r6
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	463a      	mov	r2, r7
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	3201      	adds	r2, #1
 8006c60:	7830      	ldrb	r0, [r6, #0]
 8006c62:	f7ff ff9b 	bl	8006b9c <__hexdig_fun>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d1f8      	bne.n	8006c5c <__gethex+0x94>
 8006c6a:	9901      	ldr	r1, [sp, #4]
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7ff f8de 	bl	8005e30 <strncmp>
 8006c74:	b980      	cbnz	r0, 8006c98 <__gethex+0xd0>
 8006c76:	b94d      	cbnz	r5, 8006c8c <__gethex+0xc4>
 8006c78:	eb06 050a 	add.w	r5, r6, sl
 8006c7c:	462a      	mov	r2, r5
 8006c7e:	4616      	mov	r6, r2
 8006c80:	3201      	adds	r2, #1
 8006c82:	7830      	ldrb	r0, [r6, #0]
 8006c84:	f7ff ff8a 	bl	8006b9c <__hexdig_fun>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d1f8      	bne.n	8006c7e <__gethex+0xb6>
 8006c8c:	1bad      	subs	r5, r5, r6
 8006c8e:	00ad      	lsls	r5, r5, #2
 8006c90:	e004      	b.n	8006c9c <__gethex+0xd4>
 8006c92:	2400      	movs	r4, #0
 8006c94:	4625      	mov	r5, r4
 8006c96:	e7e0      	b.n	8006c5a <__gethex+0x92>
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	d1f7      	bne.n	8006c8c <__gethex+0xc4>
 8006c9c:	7833      	ldrb	r3, [r6, #0]
 8006c9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ca2:	2b50      	cmp	r3, #80	; 0x50
 8006ca4:	d13b      	bne.n	8006d1e <__gethex+0x156>
 8006ca6:	7873      	ldrb	r3, [r6, #1]
 8006ca8:	2b2b      	cmp	r3, #43	; 0x2b
 8006caa:	d02c      	beq.n	8006d06 <__gethex+0x13e>
 8006cac:	2b2d      	cmp	r3, #45	; 0x2d
 8006cae:	d02e      	beq.n	8006d0e <__gethex+0x146>
 8006cb0:	1c71      	adds	r1, r6, #1
 8006cb2:	f04f 0900 	mov.w	r9, #0
 8006cb6:	7808      	ldrb	r0, [r1, #0]
 8006cb8:	f7ff ff70 	bl	8006b9c <__hexdig_fun>
 8006cbc:	1e43      	subs	r3, r0, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b18      	cmp	r3, #24
 8006cc2:	d82c      	bhi.n	8006d1e <__gethex+0x156>
 8006cc4:	f1a0 0210 	sub.w	r2, r0, #16
 8006cc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ccc:	f7ff ff66 	bl	8006b9c <__hexdig_fun>
 8006cd0:	1e43      	subs	r3, r0, #1
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b18      	cmp	r3, #24
 8006cd6:	d91d      	bls.n	8006d14 <__gethex+0x14c>
 8006cd8:	f1b9 0f00 	cmp.w	r9, #0
 8006cdc:	d000      	beq.n	8006ce0 <__gethex+0x118>
 8006cde:	4252      	negs	r2, r2
 8006ce0:	4415      	add	r5, r2
 8006ce2:	f8cb 1000 	str.w	r1, [fp]
 8006ce6:	b1e4      	cbz	r4, 8006d22 <__gethex+0x15a>
 8006ce8:	9b00      	ldr	r3, [sp, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bf14      	ite	ne
 8006cee:	2700      	movne	r7, #0
 8006cf0:	2706      	moveq	r7, #6
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	b009      	add	sp, #36	; 0x24
 8006cf6:	ecbd 8b02 	vpop	{d8}
 8006cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfe:	463e      	mov	r6, r7
 8006d00:	4625      	mov	r5, r4
 8006d02:	2401      	movs	r4, #1
 8006d04:	e7ca      	b.n	8006c9c <__gethex+0xd4>
 8006d06:	f04f 0900 	mov.w	r9, #0
 8006d0a:	1cb1      	adds	r1, r6, #2
 8006d0c:	e7d3      	b.n	8006cb6 <__gethex+0xee>
 8006d0e:	f04f 0901 	mov.w	r9, #1
 8006d12:	e7fa      	b.n	8006d0a <__gethex+0x142>
 8006d14:	230a      	movs	r3, #10
 8006d16:	fb03 0202 	mla	r2, r3, r2, r0
 8006d1a:	3a10      	subs	r2, #16
 8006d1c:	e7d4      	b.n	8006cc8 <__gethex+0x100>
 8006d1e:	4631      	mov	r1, r6
 8006d20:	e7df      	b.n	8006ce2 <__gethex+0x11a>
 8006d22:	1bf3      	subs	r3, r6, r7
 8006d24:	3b01      	subs	r3, #1
 8006d26:	4621      	mov	r1, r4
 8006d28:	2b07      	cmp	r3, #7
 8006d2a:	dc0b      	bgt.n	8006d44 <__gethex+0x17c>
 8006d2c:	ee18 0a10 	vmov	r0, s16
 8006d30:	f000 fa82 	bl	8007238 <_Balloc>
 8006d34:	4604      	mov	r4, r0
 8006d36:	b940      	cbnz	r0, 8006d4a <__gethex+0x182>
 8006d38:	4b5d      	ldr	r3, [pc, #372]	; (8006eb0 <__gethex+0x2e8>)
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	21de      	movs	r1, #222	; 0xde
 8006d3e:	485d      	ldr	r0, [pc, #372]	; (8006eb4 <__gethex+0x2ec>)
 8006d40:	f001 f93c 	bl	8007fbc <__assert_func>
 8006d44:	3101      	adds	r1, #1
 8006d46:	105b      	asrs	r3, r3, #1
 8006d48:	e7ee      	b.n	8006d28 <__gethex+0x160>
 8006d4a:	f100 0914 	add.w	r9, r0, #20
 8006d4e:	f04f 0b00 	mov.w	fp, #0
 8006d52:	f1ca 0301 	rsb	r3, sl, #1
 8006d56:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d5a:	f8cd b000 	str.w	fp, [sp]
 8006d5e:	9306      	str	r3, [sp, #24]
 8006d60:	42b7      	cmp	r7, r6
 8006d62:	d340      	bcc.n	8006de6 <__gethex+0x21e>
 8006d64:	9802      	ldr	r0, [sp, #8]
 8006d66:	9b00      	ldr	r3, [sp, #0]
 8006d68:	f840 3b04 	str.w	r3, [r0], #4
 8006d6c:	eba0 0009 	sub.w	r0, r0, r9
 8006d70:	1080      	asrs	r0, r0, #2
 8006d72:	0146      	lsls	r6, r0, #5
 8006d74:	6120      	str	r0, [r4, #16]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fb50 	bl	800741c <__hi0bits>
 8006d7c:	1a30      	subs	r0, r6, r0
 8006d7e:	f8d8 6000 	ldr.w	r6, [r8]
 8006d82:	42b0      	cmp	r0, r6
 8006d84:	dd63      	ble.n	8006e4e <__gethex+0x286>
 8006d86:	1b87      	subs	r7, r0, r6
 8006d88:	4639      	mov	r1, r7
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 fef4 	bl	8007b78 <__any_on>
 8006d90:	4682      	mov	sl, r0
 8006d92:	b1a8      	cbz	r0, 8006dc0 <__gethex+0x1f8>
 8006d94:	1e7b      	subs	r3, r7, #1
 8006d96:	1159      	asrs	r1, r3, #5
 8006d98:	f003 021f 	and.w	r2, r3, #31
 8006d9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006da0:	f04f 0a01 	mov.w	sl, #1
 8006da4:	fa0a f202 	lsl.w	r2, sl, r2
 8006da8:	420a      	tst	r2, r1
 8006daa:	d009      	beq.n	8006dc0 <__gethex+0x1f8>
 8006dac:	4553      	cmp	r3, sl
 8006dae:	dd05      	ble.n	8006dbc <__gethex+0x1f4>
 8006db0:	1eb9      	subs	r1, r7, #2
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 fee0 	bl	8007b78 <__any_on>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d145      	bne.n	8006e48 <__gethex+0x280>
 8006dbc:	f04f 0a02 	mov.w	sl, #2
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7ff fe98 	bl	8006af8 <rshift>
 8006dc8:	443d      	add	r5, r7
 8006dca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dce:	42ab      	cmp	r3, r5
 8006dd0:	da4c      	bge.n	8006e6c <__gethex+0x2a4>
 8006dd2:	ee18 0a10 	vmov	r0, s16
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	f000 fa6e 	bl	80072b8 <_Bfree>
 8006ddc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006dde:	2300      	movs	r3, #0
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	27a3      	movs	r7, #163	; 0xa3
 8006de4:	e785      	b.n	8006cf2 <__gethex+0x12a>
 8006de6:	1e73      	subs	r3, r6, #1
 8006de8:	9a05      	ldr	r2, [sp, #20]
 8006dea:	9303      	str	r3, [sp, #12]
 8006dec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d019      	beq.n	8006e28 <__gethex+0x260>
 8006df4:	f1bb 0f20 	cmp.w	fp, #32
 8006df8:	d107      	bne.n	8006e0a <__gethex+0x242>
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	9a00      	ldr	r2, [sp, #0]
 8006dfe:	f843 2b04 	str.w	r2, [r3], #4
 8006e02:	9302      	str	r3, [sp, #8]
 8006e04:	2300      	movs	r3, #0
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	469b      	mov	fp, r3
 8006e0a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e0e:	f7ff fec5 	bl	8006b9c <__hexdig_fun>
 8006e12:	9b00      	ldr	r3, [sp, #0]
 8006e14:	f000 000f 	and.w	r0, r0, #15
 8006e18:	fa00 f00b 	lsl.w	r0, r0, fp
 8006e1c:	4303      	orrs	r3, r0
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	f10b 0b04 	add.w	fp, fp, #4
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	e00d      	b.n	8006e44 <__gethex+0x27c>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	9a06      	ldr	r2, [sp, #24]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	42bb      	cmp	r3, r7
 8006e30:	d3e0      	bcc.n	8006df4 <__gethex+0x22c>
 8006e32:	4618      	mov	r0, r3
 8006e34:	9901      	ldr	r1, [sp, #4]
 8006e36:	9307      	str	r3, [sp, #28]
 8006e38:	4652      	mov	r2, sl
 8006e3a:	f7fe fff9 	bl	8005e30 <strncmp>
 8006e3e:	9b07      	ldr	r3, [sp, #28]
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d1d7      	bne.n	8006df4 <__gethex+0x22c>
 8006e44:	461e      	mov	r6, r3
 8006e46:	e78b      	b.n	8006d60 <__gethex+0x198>
 8006e48:	f04f 0a03 	mov.w	sl, #3
 8006e4c:	e7b8      	b.n	8006dc0 <__gethex+0x1f8>
 8006e4e:	da0a      	bge.n	8006e66 <__gethex+0x29e>
 8006e50:	1a37      	subs	r7, r6, r0
 8006e52:	4621      	mov	r1, r4
 8006e54:	ee18 0a10 	vmov	r0, s16
 8006e58:	463a      	mov	r2, r7
 8006e5a:	f000 fc49 	bl	80076f0 <__lshift>
 8006e5e:	1bed      	subs	r5, r5, r7
 8006e60:	4604      	mov	r4, r0
 8006e62:	f100 0914 	add.w	r9, r0, #20
 8006e66:	f04f 0a00 	mov.w	sl, #0
 8006e6a:	e7ae      	b.n	8006dca <__gethex+0x202>
 8006e6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006e70:	42a8      	cmp	r0, r5
 8006e72:	dd72      	ble.n	8006f5a <__gethex+0x392>
 8006e74:	1b45      	subs	r5, r0, r5
 8006e76:	42ae      	cmp	r6, r5
 8006e78:	dc36      	bgt.n	8006ee8 <__gethex+0x320>
 8006e7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d02a      	beq.n	8006ed8 <__gethex+0x310>
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d02c      	beq.n	8006ee0 <__gethex+0x318>
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d11c      	bne.n	8006ec4 <__gethex+0x2fc>
 8006e8a:	42ae      	cmp	r6, r5
 8006e8c:	d11a      	bne.n	8006ec4 <__gethex+0x2fc>
 8006e8e:	2e01      	cmp	r6, #1
 8006e90:	d112      	bne.n	8006eb8 <__gethex+0x2f0>
 8006e92:	9a04      	ldr	r2, [sp, #16]
 8006e94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	6123      	str	r3, [r4, #16]
 8006e9e:	f8c9 3000 	str.w	r3, [r9]
 8006ea2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ea4:	2762      	movs	r7, #98	; 0x62
 8006ea6:	601c      	str	r4, [r3, #0]
 8006ea8:	e723      	b.n	8006cf2 <__gethex+0x12a>
 8006eaa:	bf00      	nop
 8006eac:	08008c10 	.word	0x08008c10
 8006eb0:	08008b98 	.word	0x08008b98
 8006eb4:	08008ba9 	.word	0x08008ba9
 8006eb8:	1e71      	subs	r1, r6, #1
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 fe5c 	bl	8007b78 <__any_on>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d1e6      	bne.n	8006e92 <__gethex+0x2ca>
 8006ec4:	ee18 0a10 	vmov	r0, s16
 8006ec8:	4621      	mov	r1, r4
 8006eca:	f000 f9f5 	bl	80072b8 <_Bfree>
 8006ece:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	2750      	movs	r7, #80	; 0x50
 8006ed6:	e70c      	b.n	8006cf2 <__gethex+0x12a>
 8006ed8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f2      	bne.n	8006ec4 <__gethex+0x2fc>
 8006ede:	e7d8      	b.n	8006e92 <__gethex+0x2ca>
 8006ee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1d5      	bne.n	8006e92 <__gethex+0x2ca>
 8006ee6:	e7ed      	b.n	8006ec4 <__gethex+0x2fc>
 8006ee8:	1e6f      	subs	r7, r5, #1
 8006eea:	f1ba 0f00 	cmp.w	sl, #0
 8006eee:	d131      	bne.n	8006f54 <__gethex+0x38c>
 8006ef0:	b127      	cbz	r7, 8006efc <__gethex+0x334>
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fe3f 	bl	8007b78 <__any_on>
 8006efa:	4682      	mov	sl, r0
 8006efc:	117b      	asrs	r3, r7, #5
 8006efe:	2101      	movs	r1, #1
 8006f00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006f04:	f007 071f 	and.w	r7, r7, #31
 8006f08:	fa01 f707 	lsl.w	r7, r1, r7
 8006f0c:	421f      	tst	r7, r3
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4620      	mov	r0, r4
 8006f12:	bf18      	it	ne
 8006f14:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f18:	1b76      	subs	r6, r6, r5
 8006f1a:	f7ff fded 	bl	8006af8 <rshift>
 8006f1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f22:	2702      	movs	r7, #2
 8006f24:	f1ba 0f00 	cmp.w	sl, #0
 8006f28:	d048      	beq.n	8006fbc <__gethex+0x3f4>
 8006f2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d015      	beq.n	8006f5e <__gethex+0x396>
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d017      	beq.n	8006f66 <__gethex+0x39e>
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d109      	bne.n	8006f4e <__gethex+0x386>
 8006f3a:	f01a 0f02 	tst.w	sl, #2
 8006f3e:	d006      	beq.n	8006f4e <__gethex+0x386>
 8006f40:	f8d9 0000 	ldr.w	r0, [r9]
 8006f44:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f48:	f01a 0f01 	tst.w	sl, #1
 8006f4c:	d10e      	bne.n	8006f6c <__gethex+0x3a4>
 8006f4e:	f047 0710 	orr.w	r7, r7, #16
 8006f52:	e033      	b.n	8006fbc <__gethex+0x3f4>
 8006f54:	f04f 0a01 	mov.w	sl, #1
 8006f58:	e7d0      	b.n	8006efc <__gethex+0x334>
 8006f5a:	2701      	movs	r7, #1
 8006f5c:	e7e2      	b.n	8006f24 <__gethex+0x35c>
 8006f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f60:	f1c3 0301 	rsb	r3, r3, #1
 8006f64:	9315      	str	r3, [sp, #84]	; 0x54
 8006f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <__gethex+0x386>
 8006f6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f70:	f104 0314 	add.w	r3, r4, #20
 8006f74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f7c:	f04f 0c00 	mov.w	ip, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f86:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f8a:	d01c      	beq.n	8006fc6 <__gethex+0x3fe>
 8006f8c:	3201      	adds	r2, #1
 8006f8e:	6002      	str	r2, [r0, #0]
 8006f90:	2f02      	cmp	r7, #2
 8006f92:	f104 0314 	add.w	r3, r4, #20
 8006f96:	d13f      	bne.n	8007018 <__gethex+0x450>
 8006f98:	f8d8 2000 	ldr.w	r2, [r8]
 8006f9c:	3a01      	subs	r2, #1
 8006f9e:	42b2      	cmp	r2, r6
 8006fa0:	d10a      	bne.n	8006fb8 <__gethex+0x3f0>
 8006fa2:	1171      	asrs	r1, r6, #5
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006faa:	f006 061f 	and.w	r6, r6, #31
 8006fae:	fa02 f606 	lsl.w	r6, r2, r6
 8006fb2:	421e      	tst	r6, r3
 8006fb4:	bf18      	it	ne
 8006fb6:	4617      	movne	r7, r2
 8006fb8:	f047 0720 	orr.w	r7, r7, #32
 8006fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fbe:	601c      	str	r4, [r3, #0]
 8006fc0:	9b04      	ldr	r3, [sp, #16]
 8006fc2:	601d      	str	r5, [r3, #0]
 8006fc4:	e695      	b.n	8006cf2 <__gethex+0x12a>
 8006fc6:	4299      	cmp	r1, r3
 8006fc8:	f843 cc04 	str.w	ip, [r3, #-4]
 8006fcc:	d8d8      	bhi.n	8006f80 <__gethex+0x3b8>
 8006fce:	68a3      	ldr	r3, [r4, #8]
 8006fd0:	459b      	cmp	fp, r3
 8006fd2:	db19      	blt.n	8007008 <__gethex+0x440>
 8006fd4:	6861      	ldr	r1, [r4, #4]
 8006fd6:	ee18 0a10 	vmov	r0, s16
 8006fda:	3101      	adds	r1, #1
 8006fdc:	f000 f92c 	bl	8007238 <_Balloc>
 8006fe0:	4681      	mov	r9, r0
 8006fe2:	b918      	cbnz	r0, 8006fec <__gethex+0x424>
 8006fe4:	4b1a      	ldr	r3, [pc, #104]	; (8007050 <__gethex+0x488>)
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	2184      	movs	r1, #132	; 0x84
 8006fea:	e6a8      	b.n	8006d3e <__gethex+0x176>
 8006fec:	6922      	ldr	r2, [r4, #16]
 8006fee:	3202      	adds	r2, #2
 8006ff0:	f104 010c 	add.w	r1, r4, #12
 8006ff4:	0092      	lsls	r2, r2, #2
 8006ff6:	300c      	adds	r0, #12
 8006ff8:	f7fe fdba 	bl	8005b70 <memcpy>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	ee18 0a10 	vmov	r0, s16
 8007002:	f000 f959 	bl	80072b8 <_Bfree>
 8007006:	464c      	mov	r4, r9
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007010:	6122      	str	r2, [r4, #16]
 8007012:	2201      	movs	r2, #1
 8007014:	615a      	str	r2, [r3, #20]
 8007016:	e7bb      	b.n	8006f90 <__gethex+0x3c8>
 8007018:	6922      	ldr	r2, [r4, #16]
 800701a:	455a      	cmp	r2, fp
 800701c:	dd0b      	ble.n	8007036 <__gethex+0x46e>
 800701e:	2101      	movs	r1, #1
 8007020:	4620      	mov	r0, r4
 8007022:	f7ff fd69 	bl	8006af8 <rshift>
 8007026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800702a:	3501      	adds	r5, #1
 800702c:	42ab      	cmp	r3, r5
 800702e:	f6ff aed0 	blt.w	8006dd2 <__gethex+0x20a>
 8007032:	2701      	movs	r7, #1
 8007034:	e7c0      	b.n	8006fb8 <__gethex+0x3f0>
 8007036:	f016 061f 	ands.w	r6, r6, #31
 800703a:	d0fa      	beq.n	8007032 <__gethex+0x46a>
 800703c:	4453      	add	r3, sl
 800703e:	f1c6 0620 	rsb	r6, r6, #32
 8007042:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007046:	f000 f9e9 	bl	800741c <__hi0bits>
 800704a:	42b0      	cmp	r0, r6
 800704c:	dbe7      	blt.n	800701e <__gethex+0x456>
 800704e:	e7f0      	b.n	8007032 <__gethex+0x46a>
 8007050:	08008b98 	.word	0x08008b98

08007054 <L_shift>:
 8007054:	f1c2 0208 	rsb	r2, r2, #8
 8007058:	0092      	lsls	r2, r2, #2
 800705a:	b570      	push	{r4, r5, r6, lr}
 800705c:	f1c2 0620 	rsb	r6, r2, #32
 8007060:	6843      	ldr	r3, [r0, #4]
 8007062:	6804      	ldr	r4, [r0, #0]
 8007064:	fa03 f506 	lsl.w	r5, r3, r6
 8007068:	432c      	orrs	r4, r5
 800706a:	40d3      	lsrs	r3, r2
 800706c:	6004      	str	r4, [r0, #0]
 800706e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007072:	4288      	cmp	r0, r1
 8007074:	d3f4      	bcc.n	8007060 <L_shift+0xc>
 8007076:	bd70      	pop	{r4, r5, r6, pc}

08007078 <__match>:
 8007078:	b530      	push	{r4, r5, lr}
 800707a:	6803      	ldr	r3, [r0, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007082:	b914      	cbnz	r4, 800708a <__match+0x12>
 8007084:	6003      	str	r3, [r0, #0]
 8007086:	2001      	movs	r0, #1
 8007088:	bd30      	pop	{r4, r5, pc}
 800708a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007092:	2d19      	cmp	r5, #25
 8007094:	bf98      	it	ls
 8007096:	3220      	addls	r2, #32
 8007098:	42a2      	cmp	r2, r4
 800709a:	d0f0      	beq.n	800707e <__match+0x6>
 800709c:	2000      	movs	r0, #0
 800709e:	e7f3      	b.n	8007088 <__match+0x10>

080070a0 <__hexnan>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	680b      	ldr	r3, [r1, #0]
 80070a6:	115e      	asrs	r6, r3, #5
 80070a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80070ac:	f013 031f 	ands.w	r3, r3, #31
 80070b0:	b087      	sub	sp, #28
 80070b2:	bf18      	it	ne
 80070b4:	3604      	addne	r6, #4
 80070b6:	2500      	movs	r5, #0
 80070b8:	1f37      	subs	r7, r6, #4
 80070ba:	4690      	mov	r8, r2
 80070bc:	6802      	ldr	r2, [r0, #0]
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	4682      	mov	sl, r0
 80070c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80070c6:	46b9      	mov	r9, r7
 80070c8:	463c      	mov	r4, r7
 80070ca:	9502      	str	r5, [sp, #8]
 80070cc:	46ab      	mov	fp, r5
 80070ce:	7851      	ldrb	r1, [r2, #1]
 80070d0:	1c53      	adds	r3, r2, #1
 80070d2:	9303      	str	r3, [sp, #12]
 80070d4:	b341      	cbz	r1, 8007128 <__hexnan+0x88>
 80070d6:	4608      	mov	r0, r1
 80070d8:	9205      	str	r2, [sp, #20]
 80070da:	9104      	str	r1, [sp, #16]
 80070dc:	f7ff fd5e 	bl	8006b9c <__hexdig_fun>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d14f      	bne.n	8007184 <__hexnan+0xe4>
 80070e4:	9904      	ldr	r1, [sp, #16]
 80070e6:	9a05      	ldr	r2, [sp, #20]
 80070e8:	2920      	cmp	r1, #32
 80070ea:	d818      	bhi.n	800711e <__hexnan+0x7e>
 80070ec:	9b02      	ldr	r3, [sp, #8]
 80070ee:	459b      	cmp	fp, r3
 80070f0:	dd13      	ble.n	800711a <__hexnan+0x7a>
 80070f2:	454c      	cmp	r4, r9
 80070f4:	d206      	bcs.n	8007104 <__hexnan+0x64>
 80070f6:	2d07      	cmp	r5, #7
 80070f8:	dc04      	bgt.n	8007104 <__hexnan+0x64>
 80070fa:	462a      	mov	r2, r5
 80070fc:	4649      	mov	r1, r9
 80070fe:	4620      	mov	r0, r4
 8007100:	f7ff ffa8 	bl	8007054 <L_shift>
 8007104:	4544      	cmp	r4, r8
 8007106:	d950      	bls.n	80071aa <__hexnan+0x10a>
 8007108:	2300      	movs	r3, #0
 800710a:	f1a4 0904 	sub.w	r9, r4, #4
 800710e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007112:	f8cd b008 	str.w	fp, [sp, #8]
 8007116:	464c      	mov	r4, r9
 8007118:	461d      	mov	r5, r3
 800711a:	9a03      	ldr	r2, [sp, #12]
 800711c:	e7d7      	b.n	80070ce <__hexnan+0x2e>
 800711e:	2929      	cmp	r1, #41	; 0x29
 8007120:	d156      	bne.n	80071d0 <__hexnan+0x130>
 8007122:	3202      	adds	r2, #2
 8007124:	f8ca 2000 	str.w	r2, [sl]
 8007128:	f1bb 0f00 	cmp.w	fp, #0
 800712c:	d050      	beq.n	80071d0 <__hexnan+0x130>
 800712e:	454c      	cmp	r4, r9
 8007130:	d206      	bcs.n	8007140 <__hexnan+0xa0>
 8007132:	2d07      	cmp	r5, #7
 8007134:	dc04      	bgt.n	8007140 <__hexnan+0xa0>
 8007136:	462a      	mov	r2, r5
 8007138:	4649      	mov	r1, r9
 800713a:	4620      	mov	r0, r4
 800713c:	f7ff ff8a 	bl	8007054 <L_shift>
 8007140:	4544      	cmp	r4, r8
 8007142:	d934      	bls.n	80071ae <__hexnan+0x10e>
 8007144:	f1a8 0204 	sub.w	r2, r8, #4
 8007148:	4623      	mov	r3, r4
 800714a:	f853 1b04 	ldr.w	r1, [r3], #4
 800714e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007152:	429f      	cmp	r7, r3
 8007154:	d2f9      	bcs.n	800714a <__hexnan+0xaa>
 8007156:	1b3b      	subs	r3, r7, r4
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	3304      	adds	r3, #4
 800715e:	3401      	adds	r4, #1
 8007160:	3e03      	subs	r6, #3
 8007162:	42b4      	cmp	r4, r6
 8007164:	bf88      	it	hi
 8007166:	2304      	movhi	r3, #4
 8007168:	4443      	add	r3, r8
 800716a:	2200      	movs	r2, #0
 800716c:	f843 2b04 	str.w	r2, [r3], #4
 8007170:	429f      	cmp	r7, r3
 8007172:	d2fb      	bcs.n	800716c <__hexnan+0xcc>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	b91b      	cbnz	r3, 8007180 <__hexnan+0xe0>
 8007178:	4547      	cmp	r7, r8
 800717a:	d127      	bne.n	80071cc <__hexnan+0x12c>
 800717c:	2301      	movs	r3, #1
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	2005      	movs	r0, #5
 8007182:	e026      	b.n	80071d2 <__hexnan+0x132>
 8007184:	3501      	adds	r5, #1
 8007186:	2d08      	cmp	r5, #8
 8007188:	f10b 0b01 	add.w	fp, fp, #1
 800718c:	dd06      	ble.n	800719c <__hexnan+0xfc>
 800718e:	4544      	cmp	r4, r8
 8007190:	d9c3      	bls.n	800711a <__hexnan+0x7a>
 8007192:	2300      	movs	r3, #0
 8007194:	f844 3c04 	str.w	r3, [r4, #-4]
 8007198:	2501      	movs	r5, #1
 800719a:	3c04      	subs	r4, #4
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	f000 000f 	and.w	r0, r0, #15
 80071a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80071a6:	6022      	str	r2, [r4, #0]
 80071a8:	e7b7      	b.n	800711a <__hexnan+0x7a>
 80071aa:	2508      	movs	r5, #8
 80071ac:	e7b5      	b.n	800711a <__hexnan+0x7a>
 80071ae:	9b01      	ldr	r3, [sp, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0df      	beq.n	8007174 <__hexnan+0xd4>
 80071b4:	f04f 32ff 	mov.w	r2, #4294967295
 80071b8:	f1c3 0320 	rsb	r3, r3, #32
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
 80071c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80071c4:	401a      	ands	r2, r3
 80071c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80071ca:	e7d3      	b.n	8007174 <__hexnan+0xd4>
 80071cc:	3f04      	subs	r7, #4
 80071ce:	e7d1      	b.n	8007174 <__hexnan+0xd4>
 80071d0:	2004      	movs	r0, #4
 80071d2:	b007      	add	sp, #28
 80071d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071d8 <_lseek_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4d07      	ldr	r5, [pc, #28]	; (80071f8 <_lseek_r+0x20>)
 80071dc:	4604      	mov	r4, r0
 80071de:	4608      	mov	r0, r1
 80071e0:	4611      	mov	r1, r2
 80071e2:	2200      	movs	r2, #0
 80071e4:	602a      	str	r2, [r5, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f7fb f980 	bl	80024ec <_lseek>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_lseek_r+0x1e>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_lseek_r+0x1e>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	20000738 	.word	0x20000738

080071fc <__ascii_mbtowc>:
 80071fc:	b082      	sub	sp, #8
 80071fe:	b901      	cbnz	r1, 8007202 <__ascii_mbtowc+0x6>
 8007200:	a901      	add	r1, sp, #4
 8007202:	b142      	cbz	r2, 8007216 <__ascii_mbtowc+0x1a>
 8007204:	b14b      	cbz	r3, 800721a <__ascii_mbtowc+0x1e>
 8007206:	7813      	ldrb	r3, [r2, #0]
 8007208:	600b      	str	r3, [r1, #0]
 800720a:	7812      	ldrb	r2, [r2, #0]
 800720c:	1e10      	subs	r0, r2, #0
 800720e:	bf18      	it	ne
 8007210:	2001      	movne	r0, #1
 8007212:	b002      	add	sp, #8
 8007214:	4770      	bx	lr
 8007216:	4610      	mov	r0, r2
 8007218:	e7fb      	b.n	8007212 <__ascii_mbtowc+0x16>
 800721a:	f06f 0001 	mvn.w	r0, #1
 800721e:	e7f8      	b.n	8007212 <__ascii_mbtowc+0x16>

08007220 <__malloc_lock>:
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <__malloc_lock+0x8>)
 8007222:	f001 b8b3 	b.w	800838c <__retarget_lock_acquire_recursive>
 8007226:	bf00      	nop
 8007228:	2000073c 	.word	0x2000073c

0800722c <__malloc_unlock>:
 800722c:	4801      	ldr	r0, [pc, #4]	; (8007234 <__malloc_unlock+0x8>)
 800722e:	f001 b8ae 	b.w	800838e <__retarget_lock_release_recursive>
 8007232:	bf00      	nop
 8007234:	2000073c 	.word	0x2000073c

08007238 <_Balloc>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800723c:	4604      	mov	r4, r0
 800723e:	460d      	mov	r5, r1
 8007240:	b976      	cbnz	r6, 8007260 <_Balloc+0x28>
 8007242:	2010      	movs	r0, #16
 8007244:	f7fe fc84 	bl	8005b50 <malloc>
 8007248:	4602      	mov	r2, r0
 800724a:	6260      	str	r0, [r4, #36]	; 0x24
 800724c:	b920      	cbnz	r0, 8007258 <_Balloc+0x20>
 800724e:	4b18      	ldr	r3, [pc, #96]	; (80072b0 <_Balloc+0x78>)
 8007250:	4818      	ldr	r0, [pc, #96]	; (80072b4 <_Balloc+0x7c>)
 8007252:	2166      	movs	r1, #102	; 0x66
 8007254:	f000 feb2 	bl	8007fbc <__assert_func>
 8007258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800725c:	6006      	str	r6, [r0, #0]
 800725e:	60c6      	str	r6, [r0, #12]
 8007260:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007262:	68f3      	ldr	r3, [r6, #12]
 8007264:	b183      	cbz	r3, 8007288 <_Balloc+0x50>
 8007266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800726e:	b9b8      	cbnz	r0, 80072a0 <_Balloc+0x68>
 8007270:	2101      	movs	r1, #1
 8007272:	fa01 f605 	lsl.w	r6, r1, r5
 8007276:	1d72      	adds	r2, r6, #5
 8007278:	0092      	lsls	r2, r2, #2
 800727a:	4620      	mov	r0, r4
 800727c:	f000 fc9d 	bl	8007bba <_calloc_r>
 8007280:	b160      	cbz	r0, 800729c <_Balloc+0x64>
 8007282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007286:	e00e      	b.n	80072a6 <_Balloc+0x6e>
 8007288:	2221      	movs	r2, #33	; 0x21
 800728a:	2104      	movs	r1, #4
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fc94 	bl	8007bba <_calloc_r>
 8007292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007294:	60f0      	str	r0, [r6, #12]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e4      	bne.n	8007266 <_Balloc+0x2e>
 800729c:	2000      	movs	r0, #0
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	6802      	ldr	r2, [r0, #0]
 80072a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072a6:	2300      	movs	r3, #0
 80072a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072ac:	e7f7      	b.n	800729e <_Balloc+0x66>
 80072ae:	bf00      	nop
 80072b0:	08008c24 	.word	0x08008c24
 80072b4:	08008c3b 	.word	0x08008c3b

080072b8 <_Bfree>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072bc:	4605      	mov	r5, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	b976      	cbnz	r6, 80072e0 <_Bfree+0x28>
 80072c2:	2010      	movs	r0, #16
 80072c4:	f7fe fc44 	bl	8005b50 <malloc>
 80072c8:	4602      	mov	r2, r0
 80072ca:	6268      	str	r0, [r5, #36]	; 0x24
 80072cc:	b920      	cbnz	r0, 80072d8 <_Bfree+0x20>
 80072ce:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <_Bfree+0x3c>)
 80072d0:	4809      	ldr	r0, [pc, #36]	; (80072f8 <_Bfree+0x40>)
 80072d2:	218a      	movs	r1, #138	; 0x8a
 80072d4:	f000 fe72 	bl	8007fbc <__assert_func>
 80072d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072dc:	6006      	str	r6, [r0, #0]
 80072de:	60c6      	str	r6, [r0, #12]
 80072e0:	b13c      	cbz	r4, 80072f2 <_Bfree+0x3a>
 80072e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072e4:	6862      	ldr	r2, [r4, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072ec:	6021      	str	r1, [r4, #0]
 80072ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	08008c24 	.word	0x08008c24
 80072f8:	08008c3b 	.word	0x08008c3b

080072fc <__multadd>:
 80072fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007300:	690d      	ldr	r5, [r1, #16]
 8007302:	4607      	mov	r7, r0
 8007304:	460c      	mov	r4, r1
 8007306:	461e      	mov	r6, r3
 8007308:	f101 0c14 	add.w	ip, r1, #20
 800730c:	2000      	movs	r0, #0
 800730e:	f8dc 3000 	ldr.w	r3, [ip]
 8007312:	b299      	uxth	r1, r3
 8007314:	fb02 6101 	mla	r1, r2, r1, r6
 8007318:	0c1e      	lsrs	r6, r3, #16
 800731a:	0c0b      	lsrs	r3, r1, #16
 800731c:	fb02 3306 	mla	r3, r2, r6, r3
 8007320:	b289      	uxth	r1, r1
 8007322:	3001      	adds	r0, #1
 8007324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007328:	4285      	cmp	r5, r0
 800732a:	f84c 1b04 	str.w	r1, [ip], #4
 800732e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007332:	dcec      	bgt.n	800730e <__multadd+0x12>
 8007334:	b30e      	cbz	r6, 800737a <__multadd+0x7e>
 8007336:	68a3      	ldr	r3, [r4, #8]
 8007338:	42ab      	cmp	r3, r5
 800733a:	dc19      	bgt.n	8007370 <__multadd+0x74>
 800733c:	6861      	ldr	r1, [r4, #4]
 800733e:	4638      	mov	r0, r7
 8007340:	3101      	adds	r1, #1
 8007342:	f7ff ff79 	bl	8007238 <_Balloc>
 8007346:	4680      	mov	r8, r0
 8007348:	b928      	cbnz	r0, 8007356 <__multadd+0x5a>
 800734a:	4602      	mov	r2, r0
 800734c:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <__multadd+0x84>)
 800734e:	480d      	ldr	r0, [pc, #52]	; (8007384 <__multadd+0x88>)
 8007350:	21b5      	movs	r1, #181	; 0xb5
 8007352:	f000 fe33 	bl	8007fbc <__assert_func>
 8007356:	6922      	ldr	r2, [r4, #16]
 8007358:	3202      	adds	r2, #2
 800735a:	f104 010c 	add.w	r1, r4, #12
 800735e:	0092      	lsls	r2, r2, #2
 8007360:	300c      	adds	r0, #12
 8007362:	f7fe fc05 	bl	8005b70 <memcpy>
 8007366:	4621      	mov	r1, r4
 8007368:	4638      	mov	r0, r7
 800736a:	f7ff ffa5 	bl	80072b8 <_Bfree>
 800736e:	4644      	mov	r4, r8
 8007370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007374:	3501      	adds	r5, #1
 8007376:	615e      	str	r6, [r3, #20]
 8007378:	6125      	str	r5, [r4, #16]
 800737a:	4620      	mov	r0, r4
 800737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007380:	08008b98 	.word	0x08008b98
 8007384:	08008c3b 	.word	0x08008c3b

08007388 <__s2b>:
 8007388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800738c:	460c      	mov	r4, r1
 800738e:	4615      	mov	r5, r2
 8007390:	461f      	mov	r7, r3
 8007392:	2209      	movs	r2, #9
 8007394:	3308      	adds	r3, #8
 8007396:	4606      	mov	r6, r0
 8007398:	fb93 f3f2 	sdiv	r3, r3, r2
 800739c:	2100      	movs	r1, #0
 800739e:	2201      	movs	r2, #1
 80073a0:	429a      	cmp	r2, r3
 80073a2:	db09      	blt.n	80073b8 <__s2b+0x30>
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff ff47 	bl	8007238 <_Balloc>
 80073aa:	b940      	cbnz	r0, 80073be <__s2b+0x36>
 80073ac:	4602      	mov	r2, r0
 80073ae:	4b19      	ldr	r3, [pc, #100]	; (8007414 <__s2b+0x8c>)
 80073b0:	4819      	ldr	r0, [pc, #100]	; (8007418 <__s2b+0x90>)
 80073b2:	21ce      	movs	r1, #206	; 0xce
 80073b4:	f000 fe02 	bl	8007fbc <__assert_func>
 80073b8:	0052      	lsls	r2, r2, #1
 80073ba:	3101      	adds	r1, #1
 80073bc:	e7f0      	b.n	80073a0 <__s2b+0x18>
 80073be:	9b08      	ldr	r3, [sp, #32]
 80073c0:	6143      	str	r3, [r0, #20]
 80073c2:	2d09      	cmp	r5, #9
 80073c4:	f04f 0301 	mov.w	r3, #1
 80073c8:	6103      	str	r3, [r0, #16]
 80073ca:	dd16      	ble.n	80073fa <__s2b+0x72>
 80073cc:	f104 0909 	add.w	r9, r4, #9
 80073d0:	46c8      	mov	r8, r9
 80073d2:	442c      	add	r4, r5
 80073d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073d8:	4601      	mov	r1, r0
 80073da:	3b30      	subs	r3, #48	; 0x30
 80073dc:	220a      	movs	r2, #10
 80073de:	4630      	mov	r0, r6
 80073e0:	f7ff ff8c 	bl	80072fc <__multadd>
 80073e4:	45a0      	cmp	r8, r4
 80073e6:	d1f5      	bne.n	80073d4 <__s2b+0x4c>
 80073e8:	f1a5 0408 	sub.w	r4, r5, #8
 80073ec:	444c      	add	r4, r9
 80073ee:	1b2d      	subs	r5, r5, r4
 80073f0:	1963      	adds	r3, r4, r5
 80073f2:	42bb      	cmp	r3, r7
 80073f4:	db04      	blt.n	8007400 <__s2b+0x78>
 80073f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fa:	340a      	adds	r4, #10
 80073fc:	2509      	movs	r5, #9
 80073fe:	e7f6      	b.n	80073ee <__s2b+0x66>
 8007400:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007404:	4601      	mov	r1, r0
 8007406:	3b30      	subs	r3, #48	; 0x30
 8007408:	220a      	movs	r2, #10
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff ff76 	bl	80072fc <__multadd>
 8007410:	e7ee      	b.n	80073f0 <__s2b+0x68>
 8007412:	bf00      	nop
 8007414:	08008b98 	.word	0x08008b98
 8007418:	08008c3b 	.word	0x08008c3b

0800741c <__hi0bits>:
 800741c:	0c03      	lsrs	r3, r0, #16
 800741e:	041b      	lsls	r3, r3, #16
 8007420:	b9d3      	cbnz	r3, 8007458 <__hi0bits+0x3c>
 8007422:	0400      	lsls	r0, r0, #16
 8007424:	2310      	movs	r3, #16
 8007426:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800742a:	bf04      	itt	eq
 800742c:	0200      	lsleq	r0, r0, #8
 800742e:	3308      	addeq	r3, #8
 8007430:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007434:	bf04      	itt	eq
 8007436:	0100      	lsleq	r0, r0, #4
 8007438:	3304      	addeq	r3, #4
 800743a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800743e:	bf04      	itt	eq
 8007440:	0080      	lsleq	r0, r0, #2
 8007442:	3302      	addeq	r3, #2
 8007444:	2800      	cmp	r0, #0
 8007446:	db05      	blt.n	8007454 <__hi0bits+0x38>
 8007448:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800744c:	f103 0301 	add.w	r3, r3, #1
 8007450:	bf08      	it	eq
 8007452:	2320      	moveq	r3, #32
 8007454:	4618      	mov	r0, r3
 8007456:	4770      	bx	lr
 8007458:	2300      	movs	r3, #0
 800745a:	e7e4      	b.n	8007426 <__hi0bits+0xa>

0800745c <__lo0bits>:
 800745c:	6803      	ldr	r3, [r0, #0]
 800745e:	f013 0207 	ands.w	r2, r3, #7
 8007462:	4601      	mov	r1, r0
 8007464:	d00b      	beq.n	800747e <__lo0bits+0x22>
 8007466:	07da      	lsls	r2, r3, #31
 8007468:	d423      	bmi.n	80074b2 <__lo0bits+0x56>
 800746a:	0798      	lsls	r0, r3, #30
 800746c:	bf49      	itett	mi
 800746e:	085b      	lsrmi	r3, r3, #1
 8007470:	089b      	lsrpl	r3, r3, #2
 8007472:	2001      	movmi	r0, #1
 8007474:	600b      	strmi	r3, [r1, #0]
 8007476:	bf5c      	itt	pl
 8007478:	600b      	strpl	r3, [r1, #0]
 800747a:	2002      	movpl	r0, #2
 800747c:	4770      	bx	lr
 800747e:	b298      	uxth	r0, r3
 8007480:	b9a8      	cbnz	r0, 80074ae <__lo0bits+0x52>
 8007482:	0c1b      	lsrs	r3, r3, #16
 8007484:	2010      	movs	r0, #16
 8007486:	b2da      	uxtb	r2, r3
 8007488:	b90a      	cbnz	r2, 800748e <__lo0bits+0x32>
 800748a:	3008      	adds	r0, #8
 800748c:	0a1b      	lsrs	r3, r3, #8
 800748e:	071a      	lsls	r2, r3, #28
 8007490:	bf04      	itt	eq
 8007492:	091b      	lsreq	r3, r3, #4
 8007494:	3004      	addeq	r0, #4
 8007496:	079a      	lsls	r2, r3, #30
 8007498:	bf04      	itt	eq
 800749a:	089b      	lsreq	r3, r3, #2
 800749c:	3002      	addeq	r0, #2
 800749e:	07da      	lsls	r2, r3, #31
 80074a0:	d403      	bmi.n	80074aa <__lo0bits+0x4e>
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	f100 0001 	add.w	r0, r0, #1
 80074a8:	d005      	beq.n	80074b6 <__lo0bits+0x5a>
 80074aa:	600b      	str	r3, [r1, #0]
 80074ac:	4770      	bx	lr
 80074ae:	4610      	mov	r0, r2
 80074b0:	e7e9      	b.n	8007486 <__lo0bits+0x2a>
 80074b2:	2000      	movs	r0, #0
 80074b4:	4770      	bx	lr
 80074b6:	2020      	movs	r0, #32
 80074b8:	4770      	bx	lr
	...

080074bc <__i2b>:
 80074bc:	b510      	push	{r4, lr}
 80074be:	460c      	mov	r4, r1
 80074c0:	2101      	movs	r1, #1
 80074c2:	f7ff feb9 	bl	8007238 <_Balloc>
 80074c6:	4602      	mov	r2, r0
 80074c8:	b928      	cbnz	r0, 80074d6 <__i2b+0x1a>
 80074ca:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <__i2b+0x24>)
 80074cc:	4805      	ldr	r0, [pc, #20]	; (80074e4 <__i2b+0x28>)
 80074ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074d2:	f000 fd73 	bl	8007fbc <__assert_func>
 80074d6:	2301      	movs	r3, #1
 80074d8:	6144      	str	r4, [r0, #20]
 80074da:	6103      	str	r3, [r0, #16]
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	bf00      	nop
 80074e0:	08008b98 	.word	0x08008b98
 80074e4:	08008c3b 	.word	0x08008c3b

080074e8 <__multiply>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	4691      	mov	r9, r2
 80074ee:	690a      	ldr	r2, [r1, #16]
 80074f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	bfb8      	it	lt
 80074f8:	460b      	movlt	r3, r1
 80074fa:	460c      	mov	r4, r1
 80074fc:	bfbc      	itt	lt
 80074fe:	464c      	movlt	r4, r9
 8007500:	4699      	movlt	r9, r3
 8007502:	6927      	ldr	r7, [r4, #16]
 8007504:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007508:	68a3      	ldr	r3, [r4, #8]
 800750a:	6861      	ldr	r1, [r4, #4]
 800750c:	eb07 060a 	add.w	r6, r7, sl
 8007510:	42b3      	cmp	r3, r6
 8007512:	b085      	sub	sp, #20
 8007514:	bfb8      	it	lt
 8007516:	3101      	addlt	r1, #1
 8007518:	f7ff fe8e 	bl	8007238 <_Balloc>
 800751c:	b930      	cbnz	r0, 800752c <__multiply+0x44>
 800751e:	4602      	mov	r2, r0
 8007520:	4b44      	ldr	r3, [pc, #272]	; (8007634 <__multiply+0x14c>)
 8007522:	4845      	ldr	r0, [pc, #276]	; (8007638 <__multiply+0x150>)
 8007524:	f240 115d 	movw	r1, #349	; 0x15d
 8007528:	f000 fd48 	bl	8007fbc <__assert_func>
 800752c:	f100 0514 	add.w	r5, r0, #20
 8007530:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007534:	462b      	mov	r3, r5
 8007536:	2200      	movs	r2, #0
 8007538:	4543      	cmp	r3, r8
 800753a:	d321      	bcc.n	8007580 <__multiply+0x98>
 800753c:	f104 0314 	add.w	r3, r4, #20
 8007540:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007544:	f109 0314 	add.w	r3, r9, #20
 8007548:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800754c:	9202      	str	r2, [sp, #8]
 800754e:	1b3a      	subs	r2, r7, r4
 8007550:	3a15      	subs	r2, #21
 8007552:	f022 0203 	bic.w	r2, r2, #3
 8007556:	3204      	adds	r2, #4
 8007558:	f104 0115 	add.w	r1, r4, #21
 800755c:	428f      	cmp	r7, r1
 800755e:	bf38      	it	cc
 8007560:	2204      	movcc	r2, #4
 8007562:	9201      	str	r2, [sp, #4]
 8007564:	9a02      	ldr	r2, [sp, #8]
 8007566:	9303      	str	r3, [sp, #12]
 8007568:	429a      	cmp	r2, r3
 800756a:	d80c      	bhi.n	8007586 <__multiply+0x9e>
 800756c:	2e00      	cmp	r6, #0
 800756e:	dd03      	ble.n	8007578 <__multiply+0x90>
 8007570:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007574:	2b00      	cmp	r3, #0
 8007576:	d05a      	beq.n	800762e <__multiply+0x146>
 8007578:	6106      	str	r6, [r0, #16]
 800757a:	b005      	add	sp, #20
 800757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007580:	f843 2b04 	str.w	r2, [r3], #4
 8007584:	e7d8      	b.n	8007538 <__multiply+0x50>
 8007586:	f8b3 a000 	ldrh.w	sl, [r3]
 800758a:	f1ba 0f00 	cmp.w	sl, #0
 800758e:	d024      	beq.n	80075da <__multiply+0xf2>
 8007590:	f104 0e14 	add.w	lr, r4, #20
 8007594:	46a9      	mov	r9, r5
 8007596:	f04f 0c00 	mov.w	ip, #0
 800759a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800759e:	f8d9 1000 	ldr.w	r1, [r9]
 80075a2:	fa1f fb82 	uxth.w	fp, r2
 80075a6:	b289      	uxth	r1, r1
 80075a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80075ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075b0:	f8d9 2000 	ldr.w	r2, [r9]
 80075b4:	4461      	add	r1, ip
 80075b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80075be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075c2:	b289      	uxth	r1, r1
 80075c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075c8:	4577      	cmp	r7, lr
 80075ca:	f849 1b04 	str.w	r1, [r9], #4
 80075ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075d2:	d8e2      	bhi.n	800759a <__multiply+0xb2>
 80075d4:	9a01      	ldr	r2, [sp, #4]
 80075d6:	f845 c002 	str.w	ip, [r5, r2]
 80075da:	9a03      	ldr	r2, [sp, #12]
 80075dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075e0:	3304      	adds	r3, #4
 80075e2:	f1b9 0f00 	cmp.w	r9, #0
 80075e6:	d020      	beq.n	800762a <__multiply+0x142>
 80075e8:	6829      	ldr	r1, [r5, #0]
 80075ea:	f104 0c14 	add.w	ip, r4, #20
 80075ee:	46ae      	mov	lr, r5
 80075f0:	f04f 0a00 	mov.w	sl, #0
 80075f4:	f8bc b000 	ldrh.w	fp, [ip]
 80075f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075fc:	fb09 220b 	mla	r2, r9, fp, r2
 8007600:	4492      	add	sl, r2
 8007602:	b289      	uxth	r1, r1
 8007604:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007608:	f84e 1b04 	str.w	r1, [lr], #4
 800760c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007610:	f8be 1000 	ldrh.w	r1, [lr]
 8007614:	0c12      	lsrs	r2, r2, #16
 8007616:	fb09 1102 	mla	r1, r9, r2, r1
 800761a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800761e:	4567      	cmp	r7, ip
 8007620:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007624:	d8e6      	bhi.n	80075f4 <__multiply+0x10c>
 8007626:	9a01      	ldr	r2, [sp, #4]
 8007628:	50a9      	str	r1, [r5, r2]
 800762a:	3504      	adds	r5, #4
 800762c:	e79a      	b.n	8007564 <__multiply+0x7c>
 800762e:	3e01      	subs	r6, #1
 8007630:	e79c      	b.n	800756c <__multiply+0x84>
 8007632:	bf00      	nop
 8007634:	08008b98 	.word	0x08008b98
 8007638:	08008c3b 	.word	0x08008c3b

0800763c <__pow5mult>:
 800763c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007640:	4615      	mov	r5, r2
 8007642:	f012 0203 	ands.w	r2, r2, #3
 8007646:	4606      	mov	r6, r0
 8007648:	460f      	mov	r7, r1
 800764a:	d007      	beq.n	800765c <__pow5mult+0x20>
 800764c:	4c25      	ldr	r4, [pc, #148]	; (80076e4 <__pow5mult+0xa8>)
 800764e:	3a01      	subs	r2, #1
 8007650:	2300      	movs	r3, #0
 8007652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007656:	f7ff fe51 	bl	80072fc <__multadd>
 800765a:	4607      	mov	r7, r0
 800765c:	10ad      	asrs	r5, r5, #2
 800765e:	d03d      	beq.n	80076dc <__pow5mult+0xa0>
 8007660:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007662:	b97c      	cbnz	r4, 8007684 <__pow5mult+0x48>
 8007664:	2010      	movs	r0, #16
 8007666:	f7fe fa73 	bl	8005b50 <malloc>
 800766a:	4602      	mov	r2, r0
 800766c:	6270      	str	r0, [r6, #36]	; 0x24
 800766e:	b928      	cbnz	r0, 800767c <__pow5mult+0x40>
 8007670:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <__pow5mult+0xac>)
 8007672:	481e      	ldr	r0, [pc, #120]	; (80076ec <__pow5mult+0xb0>)
 8007674:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007678:	f000 fca0 	bl	8007fbc <__assert_func>
 800767c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007680:	6004      	str	r4, [r0, #0]
 8007682:	60c4      	str	r4, [r0, #12]
 8007684:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800768c:	b94c      	cbnz	r4, 80076a2 <__pow5mult+0x66>
 800768e:	f240 2171 	movw	r1, #625	; 0x271
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ff12 	bl	80074bc <__i2b>
 8007698:	2300      	movs	r3, #0
 800769a:	f8c8 0008 	str.w	r0, [r8, #8]
 800769e:	4604      	mov	r4, r0
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	f04f 0900 	mov.w	r9, #0
 80076a6:	07eb      	lsls	r3, r5, #31
 80076a8:	d50a      	bpl.n	80076c0 <__pow5mult+0x84>
 80076aa:	4639      	mov	r1, r7
 80076ac:	4622      	mov	r2, r4
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff ff1a 	bl	80074e8 <__multiply>
 80076b4:	4639      	mov	r1, r7
 80076b6:	4680      	mov	r8, r0
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7ff fdfd 	bl	80072b8 <_Bfree>
 80076be:	4647      	mov	r7, r8
 80076c0:	106d      	asrs	r5, r5, #1
 80076c2:	d00b      	beq.n	80076dc <__pow5mult+0xa0>
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	b938      	cbnz	r0, 80076d8 <__pow5mult+0x9c>
 80076c8:	4622      	mov	r2, r4
 80076ca:	4621      	mov	r1, r4
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7ff ff0b 	bl	80074e8 <__multiply>
 80076d2:	6020      	str	r0, [r4, #0]
 80076d4:	f8c0 9000 	str.w	r9, [r0]
 80076d8:	4604      	mov	r4, r0
 80076da:	e7e4      	b.n	80076a6 <__pow5mult+0x6a>
 80076dc:	4638      	mov	r0, r7
 80076de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e2:	bf00      	nop
 80076e4:	08008d88 	.word	0x08008d88
 80076e8:	08008c24 	.word	0x08008c24
 80076ec:	08008c3b 	.word	0x08008c3b

080076f0 <__lshift>:
 80076f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f4:	460c      	mov	r4, r1
 80076f6:	6849      	ldr	r1, [r1, #4]
 80076f8:	6923      	ldr	r3, [r4, #16]
 80076fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076fe:	68a3      	ldr	r3, [r4, #8]
 8007700:	4607      	mov	r7, r0
 8007702:	4691      	mov	r9, r2
 8007704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007708:	f108 0601 	add.w	r6, r8, #1
 800770c:	42b3      	cmp	r3, r6
 800770e:	db0b      	blt.n	8007728 <__lshift+0x38>
 8007710:	4638      	mov	r0, r7
 8007712:	f7ff fd91 	bl	8007238 <_Balloc>
 8007716:	4605      	mov	r5, r0
 8007718:	b948      	cbnz	r0, 800772e <__lshift+0x3e>
 800771a:	4602      	mov	r2, r0
 800771c:	4b2a      	ldr	r3, [pc, #168]	; (80077c8 <__lshift+0xd8>)
 800771e:	482b      	ldr	r0, [pc, #172]	; (80077cc <__lshift+0xdc>)
 8007720:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007724:	f000 fc4a 	bl	8007fbc <__assert_func>
 8007728:	3101      	adds	r1, #1
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	e7ee      	b.n	800770c <__lshift+0x1c>
 800772e:	2300      	movs	r3, #0
 8007730:	f100 0114 	add.w	r1, r0, #20
 8007734:	f100 0210 	add.w	r2, r0, #16
 8007738:	4618      	mov	r0, r3
 800773a:	4553      	cmp	r3, sl
 800773c:	db37      	blt.n	80077ae <__lshift+0xbe>
 800773e:	6920      	ldr	r0, [r4, #16]
 8007740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007744:	f104 0314 	add.w	r3, r4, #20
 8007748:	f019 091f 	ands.w	r9, r9, #31
 800774c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007750:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007754:	d02f      	beq.n	80077b6 <__lshift+0xc6>
 8007756:	f1c9 0e20 	rsb	lr, r9, #32
 800775a:	468a      	mov	sl, r1
 800775c:	f04f 0c00 	mov.w	ip, #0
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	fa02 f209 	lsl.w	r2, r2, r9
 8007766:	ea42 020c 	orr.w	r2, r2, ip
 800776a:	f84a 2b04 	str.w	r2, [sl], #4
 800776e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007772:	4298      	cmp	r0, r3
 8007774:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007778:	d8f2      	bhi.n	8007760 <__lshift+0x70>
 800777a:	1b03      	subs	r3, r0, r4
 800777c:	3b15      	subs	r3, #21
 800777e:	f023 0303 	bic.w	r3, r3, #3
 8007782:	3304      	adds	r3, #4
 8007784:	f104 0215 	add.w	r2, r4, #21
 8007788:	4290      	cmp	r0, r2
 800778a:	bf38      	it	cc
 800778c:	2304      	movcc	r3, #4
 800778e:	f841 c003 	str.w	ip, [r1, r3]
 8007792:	f1bc 0f00 	cmp.w	ip, #0
 8007796:	d001      	beq.n	800779c <__lshift+0xac>
 8007798:	f108 0602 	add.w	r6, r8, #2
 800779c:	3e01      	subs	r6, #1
 800779e:	4638      	mov	r0, r7
 80077a0:	612e      	str	r6, [r5, #16]
 80077a2:	4621      	mov	r1, r4
 80077a4:	f7ff fd88 	bl	80072b8 <_Bfree>
 80077a8:	4628      	mov	r0, r5
 80077aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80077b2:	3301      	adds	r3, #1
 80077b4:	e7c1      	b.n	800773a <__lshift+0x4a>
 80077b6:	3904      	subs	r1, #4
 80077b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80077c0:	4298      	cmp	r0, r3
 80077c2:	d8f9      	bhi.n	80077b8 <__lshift+0xc8>
 80077c4:	e7ea      	b.n	800779c <__lshift+0xac>
 80077c6:	bf00      	nop
 80077c8:	08008b98 	.word	0x08008b98
 80077cc:	08008c3b 	.word	0x08008c3b

080077d0 <__mcmp>:
 80077d0:	b530      	push	{r4, r5, lr}
 80077d2:	6902      	ldr	r2, [r0, #16]
 80077d4:	690c      	ldr	r4, [r1, #16]
 80077d6:	1b12      	subs	r2, r2, r4
 80077d8:	d10e      	bne.n	80077f8 <__mcmp+0x28>
 80077da:	f100 0314 	add.w	r3, r0, #20
 80077de:	3114      	adds	r1, #20
 80077e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077f0:	42a5      	cmp	r5, r4
 80077f2:	d003      	beq.n	80077fc <__mcmp+0x2c>
 80077f4:	d305      	bcc.n	8007802 <__mcmp+0x32>
 80077f6:	2201      	movs	r2, #1
 80077f8:	4610      	mov	r0, r2
 80077fa:	bd30      	pop	{r4, r5, pc}
 80077fc:	4283      	cmp	r3, r0
 80077fe:	d3f3      	bcc.n	80077e8 <__mcmp+0x18>
 8007800:	e7fa      	b.n	80077f8 <__mcmp+0x28>
 8007802:	f04f 32ff 	mov.w	r2, #4294967295
 8007806:	e7f7      	b.n	80077f8 <__mcmp+0x28>

08007808 <__mdiff>:
 8007808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	460c      	mov	r4, r1
 800780e:	4606      	mov	r6, r0
 8007810:	4611      	mov	r1, r2
 8007812:	4620      	mov	r0, r4
 8007814:	4690      	mov	r8, r2
 8007816:	f7ff ffdb 	bl	80077d0 <__mcmp>
 800781a:	1e05      	subs	r5, r0, #0
 800781c:	d110      	bne.n	8007840 <__mdiff+0x38>
 800781e:	4629      	mov	r1, r5
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff fd09 	bl	8007238 <_Balloc>
 8007826:	b930      	cbnz	r0, 8007836 <__mdiff+0x2e>
 8007828:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <__mdiff+0x10c>)
 800782a:	4602      	mov	r2, r0
 800782c:	f240 2132 	movw	r1, #562	; 0x232
 8007830:	4839      	ldr	r0, [pc, #228]	; (8007918 <__mdiff+0x110>)
 8007832:	f000 fbc3 	bl	8007fbc <__assert_func>
 8007836:	2301      	movs	r3, #1
 8007838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800783c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	bfa4      	itt	ge
 8007842:	4643      	movge	r3, r8
 8007844:	46a0      	movge	r8, r4
 8007846:	4630      	mov	r0, r6
 8007848:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800784c:	bfa6      	itte	ge
 800784e:	461c      	movge	r4, r3
 8007850:	2500      	movge	r5, #0
 8007852:	2501      	movlt	r5, #1
 8007854:	f7ff fcf0 	bl	8007238 <_Balloc>
 8007858:	b920      	cbnz	r0, 8007864 <__mdiff+0x5c>
 800785a:	4b2e      	ldr	r3, [pc, #184]	; (8007914 <__mdiff+0x10c>)
 800785c:	4602      	mov	r2, r0
 800785e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007862:	e7e5      	b.n	8007830 <__mdiff+0x28>
 8007864:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007868:	6926      	ldr	r6, [r4, #16]
 800786a:	60c5      	str	r5, [r0, #12]
 800786c:	f104 0914 	add.w	r9, r4, #20
 8007870:	f108 0514 	add.w	r5, r8, #20
 8007874:	f100 0e14 	add.w	lr, r0, #20
 8007878:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800787c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007880:	f108 0210 	add.w	r2, r8, #16
 8007884:	46f2      	mov	sl, lr
 8007886:	2100      	movs	r1, #0
 8007888:	f859 3b04 	ldr.w	r3, [r9], #4
 800788c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007890:	fa1f f883 	uxth.w	r8, r3
 8007894:	fa11 f18b 	uxtah	r1, r1, fp
 8007898:	0c1b      	lsrs	r3, r3, #16
 800789a:	eba1 0808 	sub.w	r8, r1, r8
 800789e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078a6:	fa1f f888 	uxth.w	r8, r8
 80078aa:	1419      	asrs	r1, r3, #16
 80078ac:	454e      	cmp	r6, r9
 80078ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078b2:	f84a 3b04 	str.w	r3, [sl], #4
 80078b6:	d8e7      	bhi.n	8007888 <__mdiff+0x80>
 80078b8:	1b33      	subs	r3, r6, r4
 80078ba:	3b15      	subs	r3, #21
 80078bc:	f023 0303 	bic.w	r3, r3, #3
 80078c0:	3304      	adds	r3, #4
 80078c2:	3415      	adds	r4, #21
 80078c4:	42a6      	cmp	r6, r4
 80078c6:	bf38      	it	cc
 80078c8:	2304      	movcc	r3, #4
 80078ca:	441d      	add	r5, r3
 80078cc:	4473      	add	r3, lr
 80078ce:	469e      	mov	lr, r3
 80078d0:	462e      	mov	r6, r5
 80078d2:	4566      	cmp	r6, ip
 80078d4:	d30e      	bcc.n	80078f4 <__mdiff+0xec>
 80078d6:	f10c 0203 	add.w	r2, ip, #3
 80078da:	1b52      	subs	r2, r2, r5
 80078dc:	f022 0203 	bic.w	r2, r2, #3
 80078e0:	3d03      	subs	r5, #3
 80078e2:	45ac      	cmp	ip, r5
 80078e4:	bf38      	it	cc
 80078e6:	2200      	movcc	r2, #0
 80078e8:	441a      	add	r2, r3
 80078ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80078ee:	b17b      	cbz	r3, 8007910 <__mdiff+0x108>
 80078f0:	6107      	str	r7, [r0, #16]
 80078f2:	e7a3      	b.n	800783c <__mdiff+0x34>
 80078f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80078f8:	fa11 f288 	uxtah	r2, r1, r8
 80078fc:	1414      	asrs	r4, r2, #16
 80078fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007902:	b292      	uxth	r2, r2
 8007904:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007908:	f84e 2b04 	str.w	r2, [lr], #4
 800790c:	1421      	asrs	r1, r4, #16
 800790e:	e7e0      	b.n	80078d2 <__mdiff+0xca>
 8007910:	3f01      	subs	r7, #1
 8007912:	e7ea      	b.n	80078ea <__mdiff+0xe2>
 8007914:	08008b98 	.word	0x08008b98
 8007918:	08008c3b 	.word	0x08008c3b

0800791c <__ulp>:
 800791c:	b082      	sub	sp, #8
 800791e:	ed8d 0b00 	vstr	d0, [sp]
 8007922:	9b01      	ldr	r3, [sp, #4]
 8007924:	4912      	ldr	r1, [pc, #72]	; (8007970 <__ulp+0x54>)
 8007926:	4019      	ands	r1, r3
 8007928:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800792c:	2900      	cmp	r1, #0
 800792e:	dd05      	ble.n	800793c <__ulp+0x20>
 8007930:	2200      	movs	r2, #0
 8007932:	460b      	mov	r3, r1
 8007934:	ec43 2b10 	vmov	d0, r2, r3
 8007938:	b002      	add	sp, #8
 800793a:	4770      	bx	lr
 800793c:	4249      	negs	r1, r1
 800793e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007942:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	f04f 0300 	mov.w	r3, #0
 800794e:	da04      	bge.n	800795a <__ulp+0x3e>
 8007950:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007954:	fa41 f300 	asr.w	r3, r1, r0
 8007958:	e7ec      	b.n	8007934 <__ulp+0x18>
 800795a:	f1a0 0114 	sub.w	r1, r0, #20
 800795e:	291e      	cmp	r1, #30
 8007960:	bfda      	itte	le
 8007962:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007966:	fa20 f101 	lsrle.w	r1, r0, r1
 800796a:	2101      	movgt	r1, #1
 800796c:	460a      	mov	r2, r1
 800796e:	e7e1      	b.n	8007934 <__ulp+0x18>
 8007970:	7ff00000 	.word	0x7ff00000

08007974 <__b2d>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	6905      	ldr	r5, [r0, #16]
 8007978:	f100 0714 	add.w	r7, r0, #20
 800797c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007980:	1f2e      	subs	r6, r5, #4
 8007982:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007986:	4620      	mov	r0, r4
 8007988:	f7ff fd48 	bl	800741c <__hi0bits>
 800798c:	f1c0 0320 	rsb	r3, r0, #32
 8007990:	280a      	cmp	r0, #10
 8007992:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007a10 <__b2d+0x9c>
 8007996:	600b      	str	r3, [r1, #0]
 8007998:	dc14      	bgt.n	80079c4 <__b2d+0x50>
 800799a:	f1c0 0e0b 	rsb	lr, r0, #11
 800799e:	fa24 f10e 	lsr.w	r1, r4, lr
 80079a2:	42b7      	cmp	r7, r6
 80079a4:	ea41 030c 	orr.w	r3, r1, ip
 80079a8:	bf34      	ite	cc
 80079aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80079ae:	2100      	movcs	r1, #0
 80079b0:	3015      	adds	r0, #21
 80079b2:	fa04 f000 	lsl.w	r0, r4, r0
 80079b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80079ba:	ea40 0201 	orr.w	r2, r0, r1
 80079be:	ec43 2b10 	vmov	d0, r2, r3
 80079c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c4:	42b7      	cmp	r7, r6
 80079c6:	bf3a      	itte	cc
 80079c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80079cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80079d0:	2100      	movcs	r1, #0
 80079d2:	380b      	subs	r0, #11
 80079d4:	d017      	beq.n	8007a06 <__b2d+0x92>
 80079d6:	f1c0 0c20 	rsb	ip, r0, #32
 80079da:	fa04 f500 	lsl.w	r5, r4, r0
 80079de:	42be      	cmp	r6, r7
 80079e0:	fa21 f40c 	lsr.w	r4, r1, ip
 80079e4:	ea45 0504 	orr.w	r5, r5, r4
 80079e8:	bf8c      	ite	hi
 80079ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80079ee:	2400      	movls	r4, #0
 80079f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80079f4:	fa01 f000 	lsl.w	r0, r1, r0
 80079f8:	fa24 f40c 	lsr.w	r4, r4, ip
 80079fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a00:	ea40 0204 	orr.w	r2, r0, r4
 8007a04:	e7db      	b.n	80079be <__b2d+0x4a>
 8007a06:	ea44 030c 	orr.w	r3, r4, ip
 8007a0a:	460a      	mov	r2, r1
 8007a0c:	e7d7      	b.n	80079be <__b2d+0x4a>
 8007a0e:	bf00      	nop
 8007a10:	3ff00000 	.word	0x3ff00000

08007a14 <__d2b>:
 8007a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a18:	4689      	mov	r9, r1
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	ec57 6b10 	vmov	r6, r7, d0
 8007a20:	4690      	mov	r8, r2
 8007a22:	f7ff fc09 	bl	8007238 <_Balloc>
 8007a26:	4604      	mov	r4, r0
 8007a28:	b930      	cbnz	r0, 8007a38 <__d2b+0x24>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4b25      	ldr	r3, [pc, #148]	; (8007ac4 <__d2b+0xb0>)
 8007a2e:	4826      	ldr	r0, [pc, #152]	; (8007ac8 <__d2b+0xb4>)
 8007a30:	f240 310a 	movw	r1, #778	; 0x30a
 8007a34:	f000 fac2 	bl	8007fbc <__assert_func>
 8007a38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a40:	bb35      	cbnz	r5, 8007a90 <__d2b+0x7c>
 8007a42:	2e00      	cmp	r6, #0
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	d028      	beq.n	8007a9a <__d2b+0x86>
 8007a48:	4668      	mov	r0, sp
 8007a4a:	9600      	str	r6, [sp, #0]
 8007a4c:	f7ff fd06 	bl	800745c <__lo0bits>
 8007a50:	9900      	ldr	r1, [sp, #0]
 8007a52:	b300      	cbz	r0, 8007a96 <__d2b+0x82>
 8007a54:	9a01      	ldr	r2, [sp, #4]
 8007a56:	f1c0 0320 	rsb	r3, r0, #32
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	430b      	orrs	r3, r1
 8007a60:	40c2      	lsrs	r2, r0
 8007a62:	6163      	str	r3, [r4, #20]
 8007a64:	9201      	str	r2, [sp, #4]
 8007a66:	9b01      	ldr	r3, [sp, #4]
 8007a68:	61a3      	str	r3, [r4, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bf14      	ite	ne
 8007a6e:	2202      	movne	r2, #2
 8007a70:	2201      	moveq	r2, #1
 8007a72:	6122      	str	r2, [r4, #16]
 8007a74:	b1d5      	cbz	r5, 8007aac <__d2b+0x98>
 8007a76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a7a:	4405      	add	r5, r0
 8007a7c:	f8c9 5000 	str.w	r5, [r9]
 8007a80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a84:	f8c8 0000 	str.w	r0, [r8]
 8007a88:	4620      	mov	r0, r4
 8007a8a:	b003      	add	sp, #12
 8007a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a94:	e7d5      	b.n	8007a42 <__d2b+0x2e>
 8007a96:	6161      	str	r1, [r4, #20]
 8007a98:	e7e5      	b.n	8007a66 <__d2b+0x52>
 8007a9a:	a801      	add	r0, sp, #4
 8007a9c:	f7ff fcde 	bl	800745c <__lo0bits>
 8007aa0:	9b01      	ldr	r3, [sp, #4]
 8007aa2:	6163      	str	r3, [r4, #20]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	6122      	str	r2, [r4, #16]
 8007aa8:	3020      	adds	r0, #32
 8007aaa:	e7e3      	b.n	8007a74 <__d2b+0x60>
 8007aac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ab0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ab4:	f8c9 0000 	str.w	r0, [r9]
 8007ab8:	6918      	ldr	r0, [r3, #16]
 8007aba:	f7ff fcaf 	bl	800741c <__hi0bits>
 8007abe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ac2:	e7df      	b.n	8007a84 <__d2b+0x70>
 8007ac4:	08008b98 	.word	0x08008b98
 8007ac8:	08008c3b 	.word	0x08008c3b

08007acc <__ratio>:
 8007acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	4688      	mov	r8, r1
 8007ad2:	4669      	mov	r1, sp
 8007ad4:	4681      	mov	r9, r0
 8007ad6:	f7ff ff4d 	bl	8007974 <__b2d>
 8007ada:	a901      	add	r1, sp, #4
 8007adc:	4640      	mov	r0, r8
 8007ade:	ec55 4b10 	vmov	r4, r5, d0
 8007ae2:	f7ff ff47 	bl	8007974 <__b2d>
 8007ae6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007aea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007aee:	eba3 0c02 	sub.w	ip, r3, r2
 8007af2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007af6:	1a9b      	subs	r3, r3, r2
 8007af8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007afc:	ec51 0b10 	vmov	r0, r1, d0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bfd6      	itet	le
 8007b04:	460a      	movle	r2, r1
 8007b06:	462a      	movgt	r2, r5
 8007b08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b0c:	468b      	mov	fp, r1
 8007b0e:	462f      	mov	r7, r5
 8007b10:	bfd4      	ite	le
 8007b12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007b16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	ee10 2a10 	vmov	r2, s0
 8007b20:	465b      	mov	r3, fp
 8007b22:	4639      	mov	r1, r7
 8007b24:	f7f8 feaa 	bl	800087c <__aeabi_ddiv>
 8007b28:	ec41 0b10 	vmov	d0, r0, r1
 8007b2c:	b003      	add	sp, #12
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b32 <__copybits>:
 8007b32:	3901      	subs	r1, #1
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	1149      	asrs	r1, r1, #5
 8007b38:	6914      	ldr	r4, [r2, #16]
 8007b3a:	3101      	adds	r1, #1
 8007b3c:	f102 0314 	add.w	r3, r2, #20
 8007b40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b48:	1f05      	subs	r5, r0, #4
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	d30c      	bcc.n	8007b68 <__copybits+0x36>
 8007b4e:	1aa3      	subs	r3, r4, r2
 8007b50:	3b11      	subs	r3, #17
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	3211      	adds	r2, #17
 8007b58:	42a2      	cmp	r2, r4
 8007b5a:	bf88      	it	hi
 8007b5c:	2300      	movhi	r3, #0
 8007b5e:	4418      	add	r0, r3
 8007b60:	2300      	movs	r3, #0
 8007b62:	4288      	cmp	r0, r1
 8007b64:	d305      	bcc.n	8007b72 <__copybits+0x40>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b6c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b70:	e7eb      	b.n	8007b4a <__copybits+0x18>
 8007b72:	f840 3b04 	str.w	r3, [r0], #4
 8007b76:	e7f4      	b.n	8007b62 <__copybits+0x30>

08007b78 <__any_on>:
 8007b78:	f100 0214 	add.w	r2, r0, #20
 8007b7c:	6900      	ldr	r0, [r0, #16]
 8007b7e:	114b      	asrs	r3, r1, #5
 8007b80:	4298      	cmp	r0, r3
 8007b82:	b510      	push	{r4, lr}
 8007b84:	db11      	blt.n	8007baa <__any_on+0x32>
 8007b86:	dd0a      	ble.n	8007b9e <__any_on+0x26>
 8007b88:	f011 011f 	ands.w	r1, r1, #31
 8007b8c:	d007      	beq.n	8007b9e <__any_on+0x26>
 8007b8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b92:	fa24 f001 	lsr.w	r0, r4, r1
 8007b96:	fa00 f101 	lsl.w	r1, r0, r1
 8007b9a:	428c      	cmp	r4, r1
 8007b9c:	d10b      	bne.n	8007bb6 <__any_on+0x3e>
 8007b9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d803      	bhi.n	8007bae <__any_on+0x36>
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	bd10      	pop	{r4, pc}
 8007baa:	4603      	mov	r3, r0
 8007bac:	e7f7      	b.n	8007b9e <__any_on+0x26>
 8007bae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bb2:	2900      	cmp	r1, #0
 8007bb4:	d0f5      	beq.n	8007ba2 <__any_on+0x2a>
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	e7f6      	b.n	8007ba8 <__any_on+0x30>

08007bba <_calloc_r>:
 8007bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bbc:	fba1 2402 	umull	r2, r4, r1, r2
 8007bc0:	b94c      	cbnz	r4, 8007bd6 <_calloc_r+0x1c>
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	9201      	str	r2, [sp, #4]
 8007bc6:	f7fe f855 	bl	8005c74 <_malloc_r>
 8007bca:	9a01      	ldr	r2, [sp, #4]
 8007bcc:	4605      	mov	r5, r0
 8007bce:	b930      	cbnz	r0, 8007bde <_calloc_r+0x24>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	b003      	add	sp, #12
 8007bd4:	bd30      	pop	{r4, r5, pc}
 8007bd6:	220c      	movs	r2, #12
 8007bd8:	6002      	str	r2, [r0, #0]
 8007bda:	2500      	movs	r5, #0
 8007bdc:	e7f8      	b.n	8007bd0 <_calloc_r+0x16>
 8007bde:	4621      	mov	r1, r4
 8007be0:	f7fd ffd4 	bl	8005b8c <memset>
 8007be4:	e7f4      	b.n	8007bd0 <_calloc_r+0x16>

08007be6 <_realloc_r>:
 8007be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bea:	4680      	mov	r8, r0
 8007bec:	4614      	mov	r4, r2
 8007bee:	460e      	mov	r6, r1
 8007bf0:	b921      	cbnz	r1, 8007bfc <_realloc_r+0x16>
 8007bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	f7fe b83c 	b.w	8005c74 <_malloc_r>
 8007bfc:	b92a      	cbnz	r2, 8007c0a <_realloc_r+0x24>
 8007bfe:	f7fd ffcd 	bl	8005b9c <_free_r>
 8007c02:	4625      	mov	r5, r4
 8007c04:	4628      	mov	r0, r5
 8007c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c0a:	f000 fbc1 	bl	8008390 <_malloc_usable_size_r>
 8007c0e:	4284      	cmp	r4, r0
 8007c10:	4607      	mov	r7, r0
 8007c12:	d802      	bhi.n	8007c1a <_realloc_r+0x34>
 8007c14:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c18:	d812      	bhi.n	8007c40 <_realloc_r+0x5a>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	f7fe f829 	bl	8005c74 <_malloc_r>
 8007c22:	4605      	mov	r5, r0
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d0ed      	beq.n	8007c04 <_realloc_r+0x1e>
 8007c28:	42bc      	cmp	r4, r7
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	bf28      	it	cs
 8007c30:	463a      	movcs	r2, r7
 8007c32:	f7fd ff9d 	bl	8005b70 <memcpy>
 8007c36:	4631      	mov	r1, r6
 8007c38:	4640      	mov	r0, r8
 8007c3a:	f7fd ffaf 	bl	8005b9c <_free_r>
 8007c3e:	e7e1      	b.n	8007c04 <_realloc_r+0x1e>
 8007c40:	4635      	mov	r5, r6
 8007c42:	e7df      	b.n	8007c04 <_realloc_r+0x1e>

08007c44 <_printf_common>:
 8007c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	4616      	mov	r6, r2
 8007c4a:	4699      	mov	r9, r3
 8007c4c:	688a      	ldr	r2, [r1, #8]
 8007c4e:	690b      	ldr	r3, [r1, #16]
 8007c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	bfb8      	it	lt
 8007c58:	4613      	movlt	r3, r2
 8007c5a:	6033      	str	r3, [r6, #0]
 8007c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c60:	4607      	mov	r7, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	b10a      	cbz	r2, 8007c6a <_printf_common+0x26>
 8007c66:	3301      	adds	r3, #1
 8007c68:	6033      	str	r3, [r6, #0]
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	0699      	lsls	r1, r3, #26
 8007c6e:	bf42      	ittt	mi
 8007c70:	6833      	ldrmi	r3, [r6, #0]
 8007c72:	3302      	addmi	r3, #2
 8007c74:	6033      	strmi	r3, [r6, #0]
 8007c76:	6825      	ldr	r5, [r4, #0]
 8007c78:	f015 0506 	ands.w	r5, r5, #6
 8007c7c:	d106      	bne.n	8007c8c <_printf_common+0x48>
 8007c7e:	f104 0a19 	add.w	sl, r4, #25
 8007c82:	68e3      	ldr	r3, [r4, #12]
 8007c84:	6832      	ldr	r2, [r6, #0]
 8007c86:	1a9b      	subs	r3, r3, r2
 8007c88:	42ab      	cmp	r3, r5
 8007c8a:	dc26      	bgt.n	8007cda <_printf_common+0x96>
 8007c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c90:	1e13      	subs	r3, r2, #0
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	bf18      	it	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	0692      	lsls	r2, r2, #26
 8007c9a:	d42b      	bmi.n	8007cf4 <_printf_common+0xb0>
 8007c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	47c0      	blx	r8
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d01e      	beq.n	8007ce8 <_printf_common+0xa4>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	68e5      	ldr	r5, [r4, #12]
 8007cae:	6832      	ldr	r2, [r6, #0]
 8007cb0:	f003 0306 	and.w	r3, r3, #6
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	bf08      	it	eq
 8007cb8:	1aad      	subeq	r5, r5, r2
 8007cba:	68a3      	ldr	r3, [r4, #8]
 8007cbc:	6922      	ldr	r2, [r4, #16]
 8007cbe:	bf0c      	ite	eq
 8007cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc4:	2500      	movne	r5, #0
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	bfc4      	itt	gt
 8007cca:	1a9b      	subgt	r3, r3, r2
 8007ccc:	18ed      	addgt	r5, r5, r3
 8007cce:	2600      	movs	r6, #0
 8007cd0:	341a      	adds	r4, #26
 8007cd2:	42b5      	cmp	r5, r6
 8007cd4:	d11a      	bne.n	8007d0c <_printf_common+0xc8>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e008      	b.n	8007cec <_printf_common+0xa8>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	4652      	mov	r2, sl
 8007cde:	4649      	mov	r1, r9
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	47c0      	blx	r8
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d103      	bne.n	8007cf0 <_printf_common+0xac>
 8007ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf0:	3501      	adds	r5, #1
 8007cf2:	e7c6      	b.n	8007c82 <_printf_common+0x3e>
 8007cf4:	18e1      	adds	r1, r4, r3
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	2030      	movs	r0, #48	; 0x30
 8007cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cfe:	4422      	add	r2, r4
 8007d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d08:	3302      	adds	r3, #2
 8007d0a:	e7c7      	b.n	8007c9c <_printf_common+0x58>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	4622      	mov	r2, r4
 8007d10:	4649      	mov	r1, r9
 8007d12:	4638      	mov	r0, r7
 8007d14:	47c0      	blx	r8
 8007d16:	3001      	adds	r0, #1
 8007d18:	d0e6      	beq.n	8007ce8 <_printf_common+0xa4>
 8007d1a:	3601      	adds	r6, #1
 8007d1c:	e7d9      	b.n	8007cd2 <_printf_common+0x8e>
	...

08007d20 <_printf_i>:
 8007d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d24:	7e0f      	ldrb	r7, [r1, #24]
 8007d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d28:	2f78      	cmp	r7, #120	; 0x78
 8007d2a:	4691      	mov	r9, r2
 8007d2c:	4680      	mov	r8, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	469a      	mov	sl, r3
 8007d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d36:	d807      	bhi.n	8007d48 <_printf_i+0x28>
 8007d38:	2f62      	cmp	r7, #98	; 0x62
 8007d3a:	d80a      	bhi.n	8007d52 <_printf_i+0x32>
 8007d3c:	2f00      	cmp	r7, #0
 8007d3e:	f000 80d8 	beq.w	8007ef2 <_printf_i+0x1d2>
 8007d42:	2f58      	cmp	r7, #88	; 0x58
 8007d44:	f000 80a3 	beq.w	8007e8e <_printf_i+0x16e>
 8007d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d50:	e03a      	b.n	8007dc8 <_printf_i+0xa8>
 8007d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d56:	2b15      	cmp	r3, #21
 8007d58:	d8f6      	bhi.n	8007d48 <_printf_i+0x28>
 8007d5a:	a101      	add	r1, pc, #4	; (adr r1, 8007d60 <_printf_i+0x40>)
 8007d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d60:	08007db9 	.word	0x08007db9
 8007d64:	08007dcd 	.word	0x08007dcd
 8007d68:	08007d49 	.word	0x08007d49
 8007d6c:	08007d49 	.word	0x08007d49
 8007d70:	08007d49 	.word	0x08007d49
 8007d74:	08007d49 	.word	0x08007d49
 8007d78:	08007dcd 	.word	0x08007dcd
 8007d7c:	08007d49 	.word	0x08007d49
 8007d80:	08007d49 	.word	0x08007d49
 8007d84:	08007d49 	.word	0x08007d49
 8007d88:	08007d49 	.word	0x08007d49
 8007d8c:	08007ed9 	.word	0x08007ed9
 8007d90:	08007dfd 	.word	0x08007dfd
 8007d94:	08007ebb 	.word	0x08007ebb
 8007d98:	08007d49 	.word	0x08007d49
 8007d9c:	08007d49 	.word	0x08007d49
 8007da0:	08007efb 	.word	0x08007efb
 8007da4:	08007d49 	.word	0x08007d49
 8007da8:	08007dfd 	.word	0x08007dfd
 8007dac:	08007d49 	.word	0x08007d49
 8007db0:	08007d49 	.word	0x08007d49
 8007db4:	08007ec3 	.word	0x08007ec3
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	1d1a      	adds	r2, r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	602a      	str	r2, [r5, #0]
 8007dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e0a3      	b.n	8007f14 <_printf_i+0x1f4>
 8007dcc:	6820      	ldr	r0, [r4, #0]
 8007dce:	6829      	ldr	r1, [r5, #0]
 8007dd0:	0606      	lsls	r6, r0, #24
 8007dd2:	f101 0304 	add.w	r3, r1, #4
 8007dd6:	d50a      	bpl.n	8007dee <_printf_i+0xce>
 8007dd8:	680e      	ldr	r6, [r1, #0]
 8007dda:	602b      	str	r3, [r5, #0]
 8007ddc:	2e00      	cmp	r6, #0
 8007dde:	da03      	bge.n	8007de8 <_printf_i+0xc8>
 8007de0:	232d      	movs	r3, #45	; 0x2d
 8007de2:	4276      	negs	r6, r6
 8007de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de8:	485e      	ldr	r0, [pc, #376]	; (8007f64 <_printf_i+0x244>)
 8007dea:	230a      	movs	r3, #10
 8007dec:	e019      	b.n	8007e22 <_printf_i+0x102>
 8007dee:	680e      	ldr	r6, [r1, #0]
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007df6:	bf18      	it	ne
 8007df8:	b236      	sxthne	r6, r6
 8007dfa:	e7ef      	b.n	8007ddc <_printf_i+0xbc>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	6820      	ldr	r0, [r4, #0]
 8007e00:	1d19      	adds	r1, r3, #4
 8007e02:	6029      	str	r1, [r5, #0]
 8007e04:	0601      	lsls	r1, r0, #24
 8007e06:	d501      	bpl.n	8007e0c <_printf_i+0xec>
 8007e08:	681e      	ldr	r6, [r3, #0]
 8007e0a:	e002      	b.n	8007e12 <_printf_i+0xf2>
 8007e0c:	0646      	lsls	r6, r0, #25
 8007e0e:	d5fb      	bpl.n	8007e08 <_printf_i+0xe8>
 8007e10:	881e      	ldrh	r6, [r3, #0]
 8007e12:	4854      	ldr	r0, [pc, #336]	; (8007f64 <_printf_i+0x244>)
 8007e14:	2f6f      	cmp	r7, #111	; 0x6f
 8007e16:	bf0c      	ite	eq
 8007e18:	2308      	moveq	r3, #8
 8007e1a:	230a      	movne	r3, #10
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e22:	6865      	ldr	r5, [r4, #4]
 8007e24:	60a5      	str	r5, [r4, #8]
 8007e26:	2d00      	cmp	r5, #0
 8007e28:	bfa2      	ittt	ge
 8007e2a:	6821      	ldrge	r1, [r4, #0]
 8007e2c:	f021 0104 	bicge.w	r1, r1, #4
 8007e30:	6021      	strge	r1, [r4, #0]
 8007e32:	b90e      	cbnz	r6, 8007e38 <_printf_i+0x118>
 8007e34:	2d00      	cmp	r5, #0
 8007e36:	d04d      	beq.n	8007ed4 <_printf_i+0x1b4>
 8007e38:	4615      	mov	r5, r2
 8007e3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e42:	5dc7      	ldrb	r7, [r0, r7]
 8007e44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e48:	4637      	mov	r7, r6
 8007e4a:	42bb      	cmp	r3, r7
 8007e4c:	460e      	mov	r6, r1
 8007e4e:	d9f4      	bls.n	8007e3a <_printf_i+0x11a>
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d10b      	bne.n	8007e6c <_printf_i+0x14c>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	07de      	lsls	r6, r3, #31
 8007e58:	d508      	bpl.n	8007e6c <_printf_i+0x14c>
 8007e5a:	6923      	ldr	r3, [r4, #16]
 8007e5c:	6861      	ldr	r1, [r4, #4]
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	bfde      	ittt	le
 8007e62:	2330      	movle	r3, #48	; 0x30
 8007e64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e6c:	1b52      	subs	r2, r2, r5
 8007e6e:	6122      	str	r2, [r4, #16]
 8007e70:	f8cd a000 	str.w	sl, [sp]
 8007e74:	464b      	mov	r3, r9
 8007e76:	aa03      	add	r2, sp, #12
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	f7ff fee2 	bl	8007c44 <_printf_common>
 8007e80:	3001      	adds	r0, #1
 8007e82:	d14c      	bne.n	8007f1e <_printf_i+0x1fe>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	b004      	add	sp, #16
 8007e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8e:	4835      	ldr	r0, [pc, #212]	; (8007f64 <_printf_i+0x244>)
 8007e90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e94:	6829      	ldr	r1, [r5, #0]
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e9c:	6029      	str	r1, [r5, #0]
 8007e9e:	061d      	lsls	r5, r3, #24
 8007ea0:	d514      	bpl.n	8007ecc <_printf_i+0x1ac>
 8007ea2:	07df      	lsls	r7, r3, #31
 8007ea4:	bf44      	itt	mi
 8007ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eaa:	6023      	strmi	r3, [r4, #0]
 8007eac:	b91e      	cbnz	r6, 8007eb6 <_printf_i+0x196>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	f023 0320 	bic.w	r3, r3, #32
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	2310      	movs	r3, #16
 8007eb8:	e7b0      	b.n	8007e1c <_printf_i+0xfc>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f043 0320 	orr.w	r3, r3, #32
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	2378      	movs	r3, #120	; 0x78
 8007ec4:	4828      	ldr	r0, [pc, #160]	; (8007f68 <_printf_i+0x248>)
 8007ec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eca:	e7e3      	b.n	8007e94 <_printf_i+0x174>
 8007ecc:	0659      	lsls	r1, r3, #25
 8007ece:	bf48      	it	mi
 8007ed0:	b2b6      	uxthmi	r6, r6
 8007ed2:	e7e6      	b.n	8007ea2 <_printf_i+0x182>
 8007ed4:	4615      	mov	r5, r2
 8007ed6:	e7bb      	b.n	8007e50 <_printf_i+0x130>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	6826      	ldr	r6, [r4, #0]
 8007edc:	6961      	ldr	r1, [r4, #20]
 8007ede:	1d18      	adds	r0, r3, #4
 8007ee0:	6028      	str	r0, [r5, #0]
 8007ee2:	0635      	lsls	r5, r6, #24
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	d501      	bpl.n	8007eec <_printf_i+0x1cc>
 8007ee8:	6019      	str	r1, [r3, #0]
 8007eea:	e002      	b.n	8007ef2 <_printf_i+0x1d2>
 8007eec:	0670      	lsls	r0, r6, #25
 8007eee:	d5fb      	bpl.n	8007ee8 <_printf_i+0x1c8>
 8007ef0:	8019      	strh	r1, [r3, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	6123      	str	r3, [r4, #16]
 8007ef6:	4615      	mov	r5, r2
 8007ef8:	e7ba      	b.n	8007e70 <_printf_i+0x150>
 8007efa:	682b      	ldr	r3, [r5, #0]
 8007efc:	1d1a      	adds	r2, r3, #4
 8007efe:	602a      	str	r2, [r5, #0]
 8007f00:	681d      	ldr	r5, [r3, #0]
 8007f02:	6862      	ldr	r2, [r4, #4]
 8007f04:	2100      	movs	r1, #0
 8007f06:	4628      	mov	r0, r5
 8007f08:	f7f8 f982 	bl	8000210 <memchr>
 8007f0c:	b108      	cbz	r0, 8007f12 <_printf_i+0x1f2>
 8007f0e:	1b40      	subs	r0, r0, r5
 8007f10:	6060      	str	r0, [r4, #4]
 8007f12:	6863      	ldr	r3, [r4, #4]
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	2300      	movs	r3, #0
 8007f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f1c:	e7a8      	b.n	8007e70 <_printf_i+0x150>
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	462a      	mov	r2, r5
 8007f22:	4649      	mov	r1, r9
 8007f24:	4640      	mov	r0, r8
 8007f26:	47d0      	blx	sl
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d0ab      	beq.n	8007e84 <_printf_i+0x164>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	079b      	lsls	r3, r3, #30
 8007f30:	d413      	bmi.n	8007f5a <_printf_i+0x23a>
 8007f32:	68e0      	ldr	r0, [r4, #12]
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	4298      	cmp	r0, r3
 8007f38:	bfb8      	it	lt
 8007f3a:	4618      	movlt	r0, r3
 8007f3c:	e7a4      	b.n	8007e88 <_printf_i+0x168>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4632      	mov	r2, r6
 8007f42:	4649      	mov	r1, r9
 8007f44:	4640      	mov	r0, r8
 8007f46:	47d0      	blx	sl
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d09b      	beq.n	8007e84 <_printf_i+0x164>
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	68e3      	ldr	r3, [r4, #12]
 8007f50:	9903      	ldr	r1, [sp, #12]
 8007f52:	1a5b      	subs	r3, r3, r1
 8007f54:	42ab      	cmp	r3, r5
 8007f56:	dcf2      	bgt.n	8007f3e <_printf_i+0x21e>
 8007f58:	e7eb      	b.n	8007f32 <_printf_i+0x212>
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	f104 0619 	add.w	r6, r4, #25
 8007f60:	e7f5      	b.n	8007f4e <_printf_i+0x22e>
 8007f62:	bf00      	nop
 8007f64:	08008d94 	.word	0x08008d94
 8007f68:	08008da5 	.word	0x08008da5

08007f6c <_read_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d07      	ldr	r5, [pc, #28]	; (8007f8c <_read_r+0x20>)
 8007f70:	4604      	mov	r4, r0
 8007f72:	4608      	mov	r0, r1
 8007f74:	4611      	mov	r1, r2
 8007f76:	2200      	movs	r2, #0
 8007f78:	602a      	str	r2, [r5, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f7fa fa56 	bl	800242c <_read>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d102      	bne.n	8007f8a <_read_r+0x1e>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	b103      	cbz	r3, 8007f8a <_read_r+0x1e>
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	20000738 	.word	0x20000738

08007f90 <nan>:
 8007f90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007f98 <nan+0x8>
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	00000000 	.word	0x00000000
 8007f9c:	7ff80000 	.word	0x7ff80000

08007fa0 <__ascii_wctomb>:
 8007fa0:	b149      	cbz	r1, 8007fb6 <__ascii_wctomb+0x16>
 8007fa2:	2aff      	cmp	r2, #255	; 0xff
 8007fa4:	bf85      	ittet	hi
 8007fa6:	238a      	movhi	r3, #138	; 0x8a
 8007fa8:	6003      	strhi	r3, [r0, #0]
 8007faa:	700a      	strbls	r2, [r1, #0]
 8007fac:	f04f 30ff 	movhi.w	r0, #4294967295
 8007fb0:	bf98      	it	ls
 8007fb2:	2001      	movls	r0, #1
 8007fb4:	4770      	bx	lr
 8007fb6:	4608      	mov	r0, r1
 8007fb8:	4770      	bx	lr
	...

08007fbc <__assert_func>:
 8007fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fbe:	4614      	mov	r4, r2
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <__assert_func+0x2c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	68d8      	ldr	r0, [r3, #12]
 8007fca:	b14c      	cbz	r4, 8007fe0 <__assert_func+0x24>
 8007fcc:	4b07      	ldr	r3, [pc, #28]	; (8007fec <__assert_func+0x30>)
 8007fce:	9100      	str	r1, [sp, #0]
 8007fd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fd4:	4906      	ldr	r1, [pc, #24]	; (8007ff0 <__assert_func+0x34>)
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	f000 f9a6 	bl	8008328 <fiprintf>
 8007fdc:	f000 fbfa 	bl	80087d4 <abort>
 8007fe0:	4b04      	ldr	r3, [pc, #16]	; (8007ff4 <__assert_func+0x38>)
 8007fe2:	461c      	mov	r4, r3
 8007fe4:	e7f3      	b.n	8007fce <__assert_func+0x12>
 8007fe6:	bf00      	nop
 8007fe8:	20000018 	.word	0x20000018
 8007fec:	08008db6 	.word	0x08008db6
 8007ff0:	08008dc3 	.word	0x08008dc3
 8007ff4:	08008df1 	.word	0x08008df1

08007ff8 <__sflush_r>:
 8007ff8:	898a      	ldrh	r2, [r1, #12]
 8007ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffe:	4605      	mov	r5, r0
 8008000:	0710      	lsls	r0, r2, #28
 8008002:	460c      	mov	r4, r1
 8008004:	d458      	bmi.n	80080b8 <__sflush_r+0xc0>
 8008006:	684b      	ldr	r3, [r1, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	dc05      	bgt.n	8008018 <__sflush_r+0x20>
 800800c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	dc02      	bgt.n	8008018 <__sflush_r+0x20>
 8008012:	2000      	movs	r0, #0
 8008014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800801a:	2e00      	cmp	r6, #0
 800801c:	d0f9      	beq.n	8008012 <__sflush_r+0x1a>
 800801e:	2300      	movs	r3, #0
 8008020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008024:	682f      	ldr	r7, [r5, #0]
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	d032      	beq.n	8008090 <__sflush_r+0x98>
 800802a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	075a      	lsls	r2, r3, #29
 8008030:	d505      	bpl.n	800803e <__sflush_r+0x46>
 8008032:	6863      	ldr	r3, [r4, #4]
 8008034:	1ac0      	subs	r0, r0, r3
 8008036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008038:	b10b      	cbz	r3, 800803e <__sflush_r+0x46>
 800803a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800803c:	1ac0      	subs	r0, r0, r3
 800803e:	2300      	movs	r3, #0
 8008040:	4602      	mov	r2, r0
 8008042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008044:	6a21      	ldr	r1, [r4, #32]
 8008046:	4628      	mov	r0, r5
 8008048:	47b0      	blx	r6
 800804a:	1c43      	adds	r3, r0, #1
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	d106      	bne.n	800805e <__sflush_r+0x66>
 8008050:	6829      	ldr	r1, [r5, #0]
 8008052:	291d      	cmp	r1, #29
 8008054:	d82c      	bhi.n	80080b0 <__sflush_r+0xb8>
 8008056:	4a2a      	ldr	r2, [pc, #168]	; (8008100 <__sflush_r+0x108>)
 8008058:	40ca      	lsrs	r2, r1
 800805a:	07d6      	lsls	r6, r2, #31
 800805c:	d528      	bpl.n	80080b0 <__sflush_r+0xb8>
 800805e:	2200      	movs	r2, #0
 8008060:	6062      	str	r2, [r4, #4]
 8008062:	04d9      	lsls	r1, r3, #19
 8008064:	6922      	ldr	r2, [r4, #16]
 8008066:	6022      	str	r2, [r4, #0]
 8008068:	d504      	bpl.n	8008074 <__sflush_r+0x7c>
 800806a:	1c42      	adds	r2, r0, #1
 800806c:	d101      	bne.n	8008072 <__sflush_r+0x7a>
 800806e:	682b      	ldr	r3, [r5, #0]
 8008070:	b903      	cbnz	r3, 8008074 <__sflush_r+0x7c>
 8008072:	6560      	str	r0, [r4, #84]	; 0x54
 8008074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008076:	602f      	str	r7, [r5, #0]
 8008078:	2900      	cmp	r1, #0
 800807a:	d0ca      	beq.n	8008012 <__sflush_r+0x1a>
 800807c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008080:	4299      	cmp	r1, r3
 8008082:	d002      	beq.n	800808a <__sflush_r+0x92>
 8008084:	4628      	mov	r0, r5
 8008086:	f7fd fd89 	bl	8005b9c <_free_r>
 800808a:	2000      	movs	r0, #0
 800808c:	6360      	str	r0, [r4, #52]	; 0x34
 800808e:	e7c1      	b.n	8008014 <__sflush_r+0x1c>
 8008090:	6a21      	ldr	r1, [r4, #32]
 8008092:	2301      	movs	r3, #1
 8008094:	4628      	mov	r0, r5
 8008096:	47b0      	blx	r6
 8008098:	1c41      	adds	r1, r0, #1
 800809a:	d1c7      	bne.n	800802c <__sflush_r+0x34>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0c4      	beq.n	800802c <__sflush_r+0x34>
 80080a2:	2b1d      	cmp	r3, #29
 80080a4:	d001      	beq.n	80080aa <__sflush_r+0xb2>
 80080a6:	2b16      	cmp	r3, #22
 80080a8:	d101      	bne.n	80080ae <__sflush_r+0xb6>
 80080aa:	602f      	str	r7, [r5, #0]
 80080ac:	e7b1      	b.n	8008012 <__sflush_r+0x1a>
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b4:	81a3      	strh	r3, [r4, #12]
 80080b6:	e7ad      	b.n	8008014 <__sflush_r+0x1c>
 80080b8:	690f      	ldr	r7, [r1, #16]
 80080ba:	2f00      	cmp	r7, #0
 80080bc:	d0a9      	beq.n	8008012 <__sflush_r+0x1a>
 80080be:	0793      	lsls	r3, r2, #30
 80080c0:	680e      	ldr	r6, [r1, #0]
 80080c2:	bf08      	it	eq
 80080c4:	694b      	ldreq	r3, [r1, #20]
 80080c6:	600f      	str	r7, [r1, #0]
 80080c8:	bf18      	it	ne
 80080ca:	2300      	movne	r3, #0
 80080cc:	eba6 0807 	sub.w	r8, r6, r7
 80080d0:	608b      	str	r3, [r1, #8]
 80080d2:	f1b8 0f00 	cmp.w	r8, #0
 80080d6:	dd9c      	ble.n	8008012 <__sflush_r+0x1a>
 80080d8:	6a21      	ldr	r1, [r4, #32]
 80080da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080dc:	4643      	mov	r3, r8
 80080de:	463a      	mov	r2, r7
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b0      	blx	r6
 80080e4:	2800      	cmp	r0, #0
 80080e6:	dc06      	bgt.n	80080f6 <__sflush_r+0xfe>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ee:	81a3      	strh	r3, [r4, #12]
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	e78e      	b.n	8008014 <__sflush_r+0x1c>
 80080f6:	4407      	add	r7, r0
 80080f8:	eba8 0800 	sub.w	r8, r8, r0
 80080fc:	e7e9      	b.n	80080d2 <__sflush_r+0xda>
 80080fe:	bf00      	nop
 8008100:	20400001 	.word	0x20400001

08008104 <_fflush_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	690b      	ldr	r3, [r1, #16]
 8008108:	4605      	mov	r5, r0
 800810a:	460c      	mov	r4, r1
 800810c:	b913      	cbnz	r3, 8008114 <_fflush_r+0x10>
 800810e:	2500      	movs	r5, #0
 8008110:	4628      	mov	r0, r5
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	b118      	cbz	r0, 800811e <_fflush_r+0x1a>
 8008116:	6983      	ldr	r3, [r0, #24]
 8008118:	b90b      	cbnz	r3, 800811e <_fflush_r+0x1a>
 800811a:	f000 f887 	bl	800822c <__sinit>
 800811e:	4b14      	ldr	r3, [pc, #80]	; (8008170 <_fflush_r+0x6c>)
 8008120:	429c      	cmp	r4, r3
 8008122:	d11b      	bne.n	800815c <_fflush_r+0x58>
 8008124:	686c      	ldr	r4, [r5, #4]
 8008126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0ef      	beq.n	800810e <_fflush_r+0xa>
 800812e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008130:	07d0      	lsls	r0, r2, #31
 8008132:	d404      	bmi.n	800813e <_fflush_r+0x3a>
 8008134:	0599      	lsls	r1, r3, #22
 8008136:	d402      	bmi.n	800813e <_fflush_r+0x3a>
 8008138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800813a:	f000 f927 	bl	800838c <__retarget_lock_acquire_recursive>
 800813e:	4628      	mov	r0, r5
 8008140:	4621      	mov	r1, r4
 8008142:	f7ff ff59 	bl	8007ff8 <__sflush_r>
 8008146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008148:	07da      	lsls	r2, r3, #31
 800814a:	4605      	mov	r5, r0
 800814c:	d4e0      	bmi.n	8008110 <_fflush_r+0xc>
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	059b      	lsls	r3, r3, #22
 8008152:	d4dd      	bmi.n	8008110 <_fflush_r+0xc>
 8008154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008156:	f000 f91a 	bl	800838e <__retarget_lock_release_recursive>
 800815a:	e7d9      	b.n	8008110 <_fflush_r+0xc>
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <_fflush_r+0x70>)
 800815e:	429c      	cmp	r4, r3
 8008160:	d101      	bne.n	8008166 <_fflush_r+0x62>
 8008162:	68ac      	ldr	r4, [r5, #8]
 8008164:	e7df      	b.n	8008126 <_fflush_r+0x22>
 8008166:	4b04      	ldr	r3, [pc, #16]	; (8008178 <_fflush_r+0x74>)
 8008168:	429c      	cmp	r4, r3
 800816a:	bf08      	it	eq
 800816c:	68ec      	ldreq	r4, [r5, #12]
 800816e:	e7da      	b.n	8008126 <_fflush_r+0x22>
 8008170:	08008e14 	.word	0x08008e14
 8008174:	08008e34 	.word	0x08008e34
 8008178:	08008df4 	.word	0x08008df4

0800817c <std>:
 800817c:	2300      	movs	r3, #0
 800817e:	b510      	push	{r4, lr}
 8008180:	4604      	mov	r4, r0
 8008182:	e9c0 3300 	strd	r3, r3, [r0]
 8008186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800818a:	6083      	str	r3, [r0, #8]
 800818c:	8181      	strh	r1, [r0, #12]
 800818e:	6643      	str	r3, [r0, #100]	; 0x64
 8008190:	81c2      	strh	r2, [r0, #14]
 8008192:	6183      	str	r3, [r0, #24]
 8008194:	4619      	mov	r1, r3
 8008196:	2208      	movs	r2, #8
 8008198:	305c      	adds	r0, #92	; 0x5c
 800819a:	f7fd fcf7 	bl	8005b8c <memset>
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <std+0x38>)
 80081a0:	6263      	str	r3, [r4, #36]	; 0x24
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <std+0x3c>)
 80081a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80081a6:	4b05      	ldr	r3, [pc, #20]	; (80081bc <std+0x40>)
 80081a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081aa:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <std+0x44>)
 80081ac:	6224      	str	r4, [r4, #32]
 80081ae:	6323      	str	r3, [r4, #48]	; 0x30
 80081b0:	bd10      	pop	{r4, pc}
 80081b2:	bf00      	nop
 80081b4:	08005d8d 	.word	0x08005d8d
 80081b8:	08005daf 	.word	0x08005daf
 80081bc:	08005de7 	.word	0x08005de7
 80081c0:	08005e0b 	.word	0x08005e0b

080081c4 <_cleanup_r>:
 80081c4:	4901      	ldr	r1, [pc, #4]	; (80081cc <_cleanup_r+0x8>)
 80081c6:	f000 b8c1 	b.w	800834c <_fwalk_reent>
 80081ca:	bf00      	nop
 80081cc:	08008105 	.word	0x08008105

080081d0 <__sfmoreglue>:
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	2268      	movs	r2, #104	; 0x68
 80081d4:	1e4d      	subs	r5, r1, #1
 80081d6:	4355      	muls	r5, r2
 80081d8:	460e      	mov	r6, r1
 80081da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081de:	f7fd fd49 	bl	8005c74 <_malloc_r>
 80081e2:	4604      	mov	r4, r0
 80081e4:	b140      	cbz	r0, 80081f8 <__sfmoreglue+0x28>
 80081e6:	2100      	movs	r1, #0
 80081e8:	e9c0 1600 	strd	r1, r6, [r0]
 80081ec:	300c      	adds	r0, #12
 80081ee:	60a0      	str	r0, [r4, #8]
 80081f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081f4:	f7fd fcca 	bl	8005b8c <memset>
 80081f8:	4620      	mov	r0, r4
 80081fa:	bd70      	pop	{r4, r5, r6, pc}

080081fc <__sfp_lock_acquire>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__sfp_lock_acquire+0x8>)
 80081fe:	f000 b8c5 	b.w	800838c <__retarget_lock_acquire_recursive>
 8008202:	bf00      	nop
 8008204:	2000073d 	.word	0x2000073d

08008208 <__sfp_lock_release>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__sfp_lock_release+0x8>)
 800820a:	f000 b8c0 	b.w	800838e <__retarget_lock_release_recursive>
 800820e:	bf00      	nop
 8008210:	2000073d 	.word	0x2000073d

08008214 <__sinit_lock_acquire>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__sinit_lock_acquire+0x8>)
 8008216:	f000 b8b9 	b.w	800838c <__retarget_lock_acquire_recursive>
 800821a:	bf00      	nop
 800821c:	2000073e 	.word	0x2000073e

08008220 <__sinit_lock_release>:
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <__sinit_lock_release+0x8>)
 8008222:	f000 b8b4 	b.w	800838e <__retarget_lock_release_recursive>
 8008226:	bf00      	nop
 8008228:	2000073e 	.word	0x2000073e

0800822c <__sinit>:
 800822c:	b510      	push	{r4, lr}
 800822e:	4604      	mov	r4, r0
 8008230:	f7ff fff0 	bl	8008214 <__sinit_lock_acquire>
 8008234:	69a3      	ldr	r3, [r4, #24]
 8008236:	b11b      	cbz	r3, 8008240 <__sinit+0x14>
 8008238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800823c:	f7ff bff0 	b.w	8008220 <__sinit_lock_release>
 8008240:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008244:	6523      	str	r3, [r4, #80]	; 0x50
 8008246:	4b13      	ldr	r3, [pc, #76]	; (8008294 <__sinit+0x68>)
 8008248:	4a13      	ldr	r2, [pc, #76]	; (8008298 <__sinit+0x6c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	62a2      	str	r2, [r4, #40]	; 0x28
 800824e:	42a3      	cmp	r3, r4
 8008250:	bf04      	itt	eq
 8008252:	2301      	moveq	r3, #1
 8008254:	61a3      	streq	r3, [r4, #24]
 8008256:	4620      	mov	r0, r4
 8008258:	f000 f820 	bl	800829c <__sfp>
 800825c:	6060      	str	r0, [r4, #4]
 800825e:	4620      	mov	r0, r4
 8008260:	f000 f81c 	bl	800829c <__sfp>
 8008264:	60a0      	str	r0, [r4, #8]
 8008266:	4620      	mov	r0, r4
 8008268:	f000 f818 	bl	800829c <__sfp>
 800826c:	2200      	movs	r2, #0
 800826e:	60e0      	str	r0, [r4, #12]
 8008270:	2104      	movs	r1, #4
 8008272:	6860      	ldr	r0, [r4, #4]
 8008274:	f7ff ff82 	bl	800817c <std>
 8008278:	68a0      	ldr	r0, [r4, #8]
 800827a:	2201      	movs	r2, #1
 800827c:	2109      	movs	r1, #9
 800827e:	f7ff ff7d 	bl	800817c <std>
 8008282:	68e0      	ldr	r0, [r4, #12]
 8008284:	2202      	movs	r2, #2
 8008286:	2112      	movs	r1, #18
 8008288:	f7ff ff78 	bl	800817c <std>
 800828c:	2301      	movs	r3, #1
 800828e:	61a3      	str	r3, [r4, #24]
 8008290:	e7d2      	b.n	8008238 <__sinit+0xc>
 8008292:	bf00      	nop
 8008294:	08008b38 	.word	0x08008b38
 8008298:	080081c5 	.word	0x080081c5

0800829c <__sfp>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	4607      	mov	r7, r0
 80082a0:	f7ff ffac 	bl	80081fc <__sfp_lock_acquire>
 80082a4:	4b1e      	ldr	r3, [pc, #120]	; (8008320 <__sfp+0x84>)
 80082a6:	681e      	ldr	r6, [r3, #0]
 80082a8:	69b3      	ldr	r3, [r6, #24]
 80082aa:	b913      	cbnz	r3, 80082b2 <__sfp+0x16>
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff ffbd 	bl	800822c <__sinit>
 80082b2:	3648      	adds	r6, #72	; 0x48
 80082b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	d503      	bpl.n	80082c4 <__sfp+0x28>
 80082bc:	6833      	ldr	r3, [r6, #0]
 80082be:	b30b      	cbz	r3, 8008304 <__sfp+0x68>
 80082c0:	6836      	ldr	r6, [r6, #0]
 80082c2:	e7f7      	b.n	80082b4 <__sfp+0x18>
 80082c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082c8:	b9d5      	cbnz	r5, 8008300 <__sfp+0x64>
 80082ca:	4b16      	ldr	r3, [pc, #88]	; (8008324 <__sfp+0x88>)
 80082cc:	60e3      	str	r3, [r4, #12]
 80082ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082d2:	6665      	str	r5, [r4, #100]	; 0x64
 80082d4:	f000 f859 	bl	800838a <__retarget_lock_init_recursive>
 80082d8:	f7ff ff96 	bl	8008208 <__sfp_lock_release>
 80082dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082e4:	6025      	str	r5, [r4, #0]
 80082e6:	61a5      	str	r5, [r4, #24]
 80082e8:	2208      	movs	r2, #8
 80082ea:	4629      	mov	r1, r5
 80082ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082f0:	f7fd fc4c 	bl	8005b8c <memset>
 80082f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082fc:	4620      	mov	r0, r4
 80082fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008300:	3468      	adds	r4, #104	; 0x68
 8008302:	e7d9      	b.n	80082b8 <__sfp+0x1c>
 8008304:	2104      	movs	r1, #4
 8008306:	4638      	mov	r0, r7
 8008308:	f7ff ff62 	bl	80081d0 <__sfmoreglue>
 800830c:	4604      	mov	r4, r0
 800830e:	6030      	str	r0, [r6, #0]
 8008310:	2800      	cmp	r0, #0
 8008312:	d1d5      	bne.n	80082c0 <__sfp+0x24>
 8008314:	f7ff ff78 	bl	8008208 <__sfp_lock_release>
 8008318:	230c      	movs	r3, #12
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	e7ee      	b.n	80082fc <__sfp+0x60>
 800831e:	bf00      	nop
 8008320:	08008b38 	.word	0x08008b38
 8008324:	ffff0001 	.word	0xffff0001

08008328 <fiprintf>:
 8008328:	b40e      	push	{r1, r2, r3}
 800832a:	b503      	push	{r0, r1, lr}
 800832c:	4601      	mov	r1, r0
 800832e:	ab03      	add	r3, sp, #12
 8008330:	4805      	ldr	r0, [pc, #20]	; (8008348 <fiprintf+0x20>)
 8008332:	f853 2b04 	ldr.w	r2, [r3], #4
 8008336:	6800      	ldr	r0, [r0, #0]
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	f000 f85b 	bl	80083f4 <_vfiprintf_r>
 800833e:	b002      	add	sp, #8
 8008340:	f85d eb04 	ldr.w	lr, [sp], #4
 8008344:	b003      	add	sp, #12
 8008346:	4770      	bx	lr
 8008348:	20000018 	.word	0x20000018

0800834c <_fwalk_reent>:
 800834c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008350:	4606      	mov	r6, r0
 8008352:	4688      	mov	r8, r1
 8008354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008358:	2700      	movs	r7, #0
 800835a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800835e:	f1b9 0901 	subs.w	r9, r9, #1
 8008362:	d505      	bpl.n	8008370 <_fwalk_reent+0x24>
 8008364:	6824      	ldr	r4, [r4, #0]
 8008366:	2c00      	cmp	r4, #0
 8008368:	d1f7      	bne.n	800835a <_fwalk_reent+0xe>
 800836a:	4638      	mov	r0, r7
 800836c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008370:	89ab      	ldrh	r3, [r5, #12]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d907      	bls.n	8008386 <_fwalk_reent+0x3a>
 8008376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800837a:	3301      	adds	r3, #1
 800837c:	d003      	beq.n	8008386 <_fwalk_reent+0x3a>
 800837e:	4629      	mov	r1, r5
 8008380:	4630      	mov	r0, r6
 8008382:	47c0      	blx	r8
 8008384:	4307      	orrs	r7, r0
 8008386:	3568      	adds	r5, #104	; 0x68
 8008388:	e7e9      	b.n	800835e <_fwalk_reent+0x12>

0800838a <__retarget_lock_init_recursive>:
 800838a:	4770      	bx	lr

0800838c <__retarget_lock_acquire_recursive>:
 800838c:	4770      	bx	lr

0800838e <__retarget_lock_release_recursive>:
 800838e:	4770      	bx	lr

08008390 <_malloc_usable_size_r>:
 8008390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008394:	1f18      	subs	r0, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	bfbc      	itt	lt
 800839a:	580b      	ldrlt	r3, [r1, r0]
 800839c:	18c0      	addlt	r0, r0, r3
 800839e:	4770      	bx	lr

080083a0 <__sfputc_r>:
 80083a0:	6893      	ldr	r3, [r2, #8]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	b410      	push	{r4}
 80083a8:	6093      	str	r3, [r2, #8]
 80083aa:	da08      	bge.n	80083be <__sfputc_r+0x1e>
 80083ac:	6994      	ldr	r4, [r2, #24]
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	db01      	blt.n	80083b6 <__sfputc_r+0x16>
 80083b2:	290a      	cmp	r1, #10
 80083b4:	d103      	bne.n	80083be <__sfputc_r+0x1e>
 80083b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ba:	f000 b94b 	b.w	8008654 <__swbuf_r>
 80083be:	6813      	ldr	r3, [r2, #0]
 80083c0:	1c58      	adds	r0, r3, #1
 80083c2:	6010      	str	r0, [r2, #0]
 80083c4:	7019      	strb	r1, [r3, #0]
 80083c6:	4608      	mov	r0, r1
 80083c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <__sfputs_r>:
 80083ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d0:	4606      	mov	r6, r0
 80083d2:	460f      	mov	r7, r1
 80083d4:	4614      	mov	r4, r2
 80083d6:	18d5      	adds	r5, r2, r3
 80083d8:	42ac      	cmp	r4, r5
 80083da:	d101      	bne.n	80083e0 <__sfputs_r+0x12>
 80083dc:	2000      	movs	r0, #0
 80083de:	e007      	b.n	80083f0 <__sfputs_r+0x22>
 80083e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e4:	463a      	mov	r2, r7
 80083e6:	4630      	mov	r0, r6
 80083e8:	f7ff ffda 	bl	80083a0 <__sfputc_r>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d1f3      	bne.n	80083d8 <__sfputs_r+0xa>
 80083f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083f4 <_vfiprintf_r>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	460d      	mov	r5, r1
 80083fa:	b09d      	sub	sp, #116	; 0x74
 80083fc:	4614      	mov	r4, r2
 80083fe:	4698      	mov	r8, r3
 8008400:	4606      	mov	r6, r0
 8008402:	b118      	cbz	r0, 800840c <_vfiprintf_r+0x18>
 8008404:	6983      	ldr	r3, [r0, #24]
 8008406:	b90b      	cbnz	r3, 800840c <_vfiprintf_r+0x18>
 8008408:	f7ff ff10 	bl	800822c <__sinit>
 800840c:	4b89      	ldr	r3, [pc, #548]	; (8008634 <_vfiprintf_r+0x240>)
 800840e:	429d      	cmp	r5, r3
 8008410:	d11b      	bne.n	800844a <_vfiprintf_r+0x56>
 8008412:	6875      	ldr	r5, [r6, #4]
 8008414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008416:	07d9      	lsls	r1, r3, #31
 8008418:	d405      	bmi.n	8008426 <_vfiprintf_r+0x32>
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	059a      	lsls	r2, r3, #22
 800841e:	d402      	bmi.n	8008426 <_vfiprintf_r+0x32>
 8008420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008422:	f7ff ffb3 	bl	800838c <__retarget_lock_acquire_recursive>
 8008426:	89ab      	ldrh	r3, [r5, #12]
 8008428:	071b      	lsls	r3, r3, #28
 800842a:	d501      	bpl.n	8008430 <_vfiprintf_r+0x3c>
 800842c:	692b      	ldr	r3, [r5, #16]
 800842e:	b9eb      	cbnz	r3, 800846c <_vfiprintf_r+0x78>
 8008430:	4629      	mov	r1, r5
 8008432:	4630      	mov	r0, r6
 8008434:	f000 f960 	bl	80086f8 <__swsetup_r>
 8008438:	b1c0      	cbz	r0, 800846c <_vfiprintf_r+0x78>
 800843a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800843c:	07dc      	lsls	r4, r3, #31
 800843e:	d50e      	bpl.n	800845e <_vfiprintf_r+0x6a>
 8008440:	f04f 30ff 	mov.w	r0, #4294967295
 8008444:	b01d      	add	sp, #116	; 0x74
 8008446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844a:	4b7b      	ldr	r3, [pc, #492]	; (8008638 <_vfiprintf_r+0x244>)
 800844c:	429d      	cmp	r5, r3
 800844e:	d101      	bne.n	8008454 <_vfiprintf_r+0x60>
 8008450:	68b5      	ldr	r5, [r6, #8]
 8008452:	e7df      	b.n	8008414 <_vfiprintf_r+0x20>
 8008454:	4b79      	ldr	r3, [pc, #484]	; (800863c <_vfiprintf_r+0x248>)
 8008456:	429d      	cmp	r5, r3
 8008458:	bf08      	it	eq
 800845a:	68f5      	ldreq	r5, [r6, #12]
 800845c:	e7da      	b.n	8008414 <_vfiprintf_r+0x20>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	0598      	lsls	r0, r3, #22
 8008462:	d4ed      	bmi.n	8008440 <_vfiprintf_r+0x4c>
 8008464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008466:	f7ff ff92 	bl	800838e <__retarget_lock_release_recursive>
 800846a:	e7e9      	b.n	8008440 <_vfiprintf_r+0x4c>
 800846c:	2300      	movs	r3, #0
 800846e:	9309      	str	r3, [sp, #36]	; 0x24
 8008470:	2320      	movs	r3, #32
 8008472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008476:	f8cd 800c 	str.w	r8, [sp, #12]
 800847a:	2330      	movs	r3, #48	; 0x30
 800847c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008640 <_vfiprintf_r+0x24c>
 8008480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008484:	f04f 0901 	mov.w	r9, #1
 8008488:	4623      	mov	r3, r4
 800848a:	469a      	mov	sl, r3
 800848c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008490:	b10a      	cbz	r2, 8008496 <_vfiprintf_r+0xa2>
 8008492:	2a25      	cmp	r2, #37	; 0x25
 8008494:	d1f9      	bne.n	800848a <_vfiprintf_r+0x96>
 8008496:	ebba 0b04 	subs.w	fp, sl, r4
 800849a:	d00b      	beq.n	80084b4 <_vfiprintf_r+0xc0>
 800849c:	465b      	mov	r3, fp
 800849e:	4622      	mov	r2, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	4630      	mov	r0, r6
 80084a4:	f7ff ff93 	bl	80083ce <__sfputs_r>
 80084a8:	3001      	adds	r0, #1
 80084aa:	f000 80aa 	beq.w	8008602 <_vfiprintf_r+0x20e>
 80084ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b0:	445a      	add	r2, fp
 80084b2:	9209      	str	r2, [sp, #36]	; 0x24
 80084b4:	f89a 3000 	ldrb.w	r3, [sl]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 80a2 	beq.w	8008602 <_vfiprintf_r+0x20e>
 80084be:	2300      	movs	r3, #0
 80084c0:	f04f 32ff 	mov.w	r2, #4294967295
 80084c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c8:	f10a 0a01 	add.w	sl, sl, #1
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	9307      	str	r3, [sp, #28]
 80084d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084d4:	931a      	str	r3, [sp, #104]	; 0x68
 80084d6:	4654      	mov	r4, sl
 80084d8:	2205      	movs	r2, #5
 80084da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084de:	4858      	ldr	r0, [pc, #352]	; (8008640 <_vfiprintf_r+0x24c>)
 80084e0:	f7f7 fe96 	bl	8000210 <memchr>
 80084e4:	9a04      	ldr	r2, [sp, #16]
 80084e6:	b9d8      	cbnz	r0, 8008520 <_vfiprintf_r+0x12c>
 80084e8:	06d1      	lsls	r1, r2, #27
 80084ea:	bf44      	itt	mi
 80084ec:	2320      	movmi	r3, #32
 80084ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084f2:	0713      	lsls	r3, r2, #28
 80084f4:	bf44      	itt	mi
 80084f6:	232b      	movmi	r3, #43	; 0x2b
 80084f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008500:	2b2a      	cmp	r3, #42	; 0x2a
 8008502:	d015      	beq.n	8008530 <_vfiprintf_r+0x13c>
 8008504:	9a07      	ldr	r2, [sp, #28]
 8008506:	4654      	mov	r4, sl
 8008508:	2000      	movs	r0, #0
 800850a:	f04f 0c0a 	mov.w	ip, #10
 800850e:	4621      	mov	r1, r4
 8008510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008514:	3b30      	subs	r3, #48	; 0x30
 8008516:	2b09      	cmp	r3, #9
 8008518:	d94e      	bls.n	80085b8 <_vfiprintf_r+0x1c4>
 800851a:	b1b0      	cbz	r0, 800854a <_vfiprintf_r+0x156>
 800851c:	9207      	str	r2, [sp, #28]
 800851e:	e014      	b.n	800854a <_vfiprintf_r+0x156>
 8008520:	eba0 0308 	sub.w	r3, r0, r8
 8008524:	fa09 f303 	lsl.w	r3, r9, r3
 8008528:	4313      	orrs	r3, r2
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	46a2      	mov	sl, r4
 800852e:	e7d2      	b.n	80084d6 <_vfiprintf_r+0xe2>
 8008530:	9b03      	ldr	r3, [sp, #12]
 8008532:	1d19      	adds	r1, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	9103      	str	r1, [sp, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	bfbb      	ittet	lt
 800853c:	425b      	neglt	r3, r3
 800853e:	f042 0202 	orrlt.w	r2, r2, #2
 8008542:	9307      	strge	r3, [sp, #28]
 8008544:	9307      	strlt	r3, [sp, #28]
 8008546:	bfb8      	it	lt
 8008548:	9204      	strlt	r2, [sp, #16]
 800854a:	7823      	ldrb	r3, [r4, #0]
 800854c:	2b2e      	cmp	r3, #46	; 0x2e
 800854e:	d10c      	bne.n	800856a <_vfiprintf_r+0x176>
 8008550:	7863      	ldrb	r3, [r4, #1]
 8008552:	2b2a      	cmp	r3, #42	; 0x2a
 8008554:	d135      	bne.n	80085c2 <_vfiprintf_r+0x1ce>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	1d1a      	adds	r2, r3, #4
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	9203      	str	r2, [sp, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	bfb8      	it	lt
 8008562:	f04f 33ff 	movlt.w	r3, #4294967295
 8008566:	3402      	adds	r4, #2
 8008568:	9305      	str	r3, [sp, #20]
 800856a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008650 <_vfiprintf_r+0x25c>
 800856e:	7821      	ldrb	r1, [r4, #0]
 8008570:	2203      	movs	r2, #3
 8008572:	4650      	mov	r0, sl
 8008574:	f7f7 fe4c 	bl	8000210 <memchr>
 8008578:	b140      	cbz	r0, 800858c <_vfiprintf_r+0x198>
 800857a:	2340      	movs	r3, #64	; 0x40
 800857c:	eba0 000a 	sub.w	r0, r0, sl
 8008580:	fa03 f000 	lsl.w	r0, r3, r0
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	4303      	orrs	r3, r0
 8008588:	3401      	adds	r4, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008590:	482c      	ldr	r0, [pc, #176]	; (8008644 <_vfiprintf_r+0x250>)
 8008592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008596:	2206      	movs	r2, #6
 8008598:	f7f7 fe3a 	bl	8000210 <memchr>
 800859c:	2800      	cmp	r0, #0
 800859e:	d03f      	beq.n	8008620 <_vfiprintf_r+0x22c>
 80085a0:	4b29      	ldr	r3, [pc, #164]	; (8008648 <_vfiprintf_r+0x254>)
 80085a2:	bb1b      	cbnz	r3, 80085ec <_vfiprintf_r+0x1f8>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	3307      	adds	r3, #7
 80085a8:	f023 0307 	bic.w	r3, r3, #7
 80085ac:	3308      	adds	r3, #8
 80085ae:	9303      	str	r3, [sp, #12]
 80085b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b2:	443b      	add	r3, r7
 80085b4:	9309      	str	r3, [sp, #36]	; 0x24
 80085b6:	e767      	b.n	8008488 <_vfiprintf_r+0x94>
 80085b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80085bc:	460c      	mov	r4, r1
 80085be:	2001      	movs	r0, #1
 80085c0:	e7a5      	b.n	800850e <_vfiprintf_r+0x11a>
 80085c2:	2300      	movs	r3, #0
 80085c4:	3401      	adds	r4, #1
 80085c6:	9305      	str	r3, [sp, #20]
 80085c8:	4619      	mov	r1, r3
 80085ca:	f04f 0c0a 	mov.w	ip, #10
 80085ce:	4620      	mov	r0, r4
 80085d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d4:	3a30      	subs	r2, #48	; 0x30
 80085d6:	2a09      	cmp	r2, #9
 80085d8:	d903      	bls.n	80085e2 <_vfiprintf_r+0x1ee>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0c5      	beq.n	800856a <_vfiprintf_r+0x176>
 80085de:	9105      	str	r1, [sp, #20]
 80085e0:	e7c3      	b.n	800856a <_vfiprintf_r+0x176>
 80085e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80085e6:	4604      	mov	r4, r0
 80085e8:	2301      	movs	r3, #1
 80085ea:	e7f0      	b.n	80085ce <_vfiprintf_r+0x1da>
 80085ec:	ab03      	add	r3, sp, #12
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	462a      	mov	r2, r5
 80085f2:	4b16      	ldr	r3, [pc, #88]	; (800864c <_vfiprintf_r+0x258>)
 80085f4:	a904      	add	r1, sp, #16
 80085f6:	4630      	mov	r0, r6
 80085f8:	f3af 8000 	nop.w
 80085fc:	4607      	mov	r7, r0
 80085fe:	1c78      	adds	r0, r7, #1
 8008600:	d1d6      	bne.n	80085b0 <_vfiprintf_r+0x1bc>
 8008602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008604:	07d9      	lsls	r1, r3, #31
 8008606:	d405      	bmi.n	8008614 <_vfiprintf_r+0x220>
 8008608:	89ab      	ldrh	r3, [r5, #12]
 800860a:	059a      	lsls	r2, r3, #22
 800860c:	d402      	bmi.n	8008614 <_vfiprintf_r+0x220>
 800860e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008610:	f7ff febd 	bl	800838e <__retarget_lock_release_recursive>
 8008614:	89ab      	ldrh	r3, [r5, #12]
 8008616:	065b      	lsls	r3, r3, #25
 8008618:	f53f af12 	bmi.w	8008440 <_vfiprintf_r+0x4c>
 800861c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800861e:	e711      	b.n	8008444 <_vfiprintf_r+0x50>
 8008620:	ab03      	add	r3, sp, #12
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	462a      	mov	r2, r5
 8008626:	4b09      	ldr	r3, [pc, #36]	; (800864c <_vfiprintf_r+0x258>)
 8008628:	a904      	add	r1, sp, #16
 800862a:	4630      	mov	r0, r6
 800862c:	f7ff fb78 	bl	8007d20 <_printf_i>
 8008630:	e7e4      	b.n	80085fc <_vfiprintf_r+0x208>
 8008632:	bf00      	nop
 8008634:	08008e14 	.word	0x08008e14
 8008638:	08008e34 	.word	0x08008e34
 800863c:	08008df4 	.word	0x08008df4
 8008640:	08008e54 	.word	0x08008e54
 8008644:	08008e5e 	.word	0x08008e5e
 8008648:	00000000 	.word	0x00000000
 800864c:	080083cf 	.word	0x080083cf
 8008650:	08008e5a 	.word	0x08008e5a

08008654 <__swbuf_r>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	460e      	mov	r6, r1
 8008658:	4614      	mov	r4, r2
 800865a:	4605      	mov	r5, r0
 800865c:	b118      	cbz	r0, 8008666 <__swbuf_r+0x12>
 800865e:	6983      	ldr	r3, [r0, #24]
 8008660:	b90b      	cbnz	r3, 8008666 <__swbuf_r+0x12>
 8008662:	f7ff fde3 	bl	800822c <__sinit>
 8008666:	4b21      	ldr	r3, [pc, #132]	; (80086ec <__swbuf_r+0x98>)
 8008668:	429c      	cmp	r4, r3
 800866a:	d12b      	bne.n	80086c4 <__swbuf_r+0x70>
 800866c:	686c      	ldr	r4, [r5, #4]
 800866e:	69a3      	ldr	r3, [r4, #24]
 8008670:	60a3      	str	r3, [r4, #8]
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	071a      	lsls	r2, r3, #28
 8008676:	d52f      	bpl.n	80086d8 <__swbuf_r+0x84>
 8008678:	6923      	ldr	r3, [r4, #16]
 800867a:	b36b      	cbz	r3, 80086d8 <__swbuf_r+0x84>
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	6820      	ldr	r0, [r4, #0]
 8008680:	1ac0      	subs	r0, r0, r3
 8008682:	6963      	ldr	r3, [r4, #20]
 8008684:	b2f6      	uxtb	r6, r6
 8008686:	4283      	cmp	r3, r0
 8008688:	4637      	mov	r7, r6
 800868a:	dc04      	bgt.n	8008696 <__swbuf_r+0x42>
 800868c:	4621      	mov	r1, r4
 800868e:	4628      	mov	r0, r5
 8008690:	f7ff fd38 	bl	8008104 <_fflush_r>
 8008694:	bb30      	cbnz	r0, 80086e4 <__swbuf_r+0x90>
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	3b01      	subs	r3, #1
 800869a:	60a3      	str	r3, [r4, #8]
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	6022      	str	r2, [r4, #0]
 80086a2:	701e      	strb	r6, [r3, #0]
 80086a4:	6963      	ldr	r3, [r4, #20]
 80086a6:	3001      	adds	r0, #1
 80086a8:	4283      	cmp	r3, r0
 80086aa:	d004      	beq.n	80086b6 <__swbuf_r+0x62>
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	07db      	lsls	r3, r3, #31
 80086b0:	d506      	bpl.n	80086c0 <__swbuf_r+0x6c>
 80086b2:	2e0a      	cmp	r6, #10
 80086b4:	d104      	bne.n	80086c0 <__swbuf_r+0x6c>
 80086b6:	4621      	mov	r1, r4
 80086b8:	4628      	mov	r0, r5
 80086ba:	f7ff fd23 	bl	8008104 <_fflush_r>
 80086be:	b988      	cbnz	r0, 80086e4 <__swbuf_r+0x90>
 80086c0:	4638      	mov	r0, r7
 80086c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c4:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <__swbuf_r+0x9c>)
 80086c6:	429c      	cmp	r4, r3
 80086c8:	d101      	bne.n	80086ce <__swbuf_r+0x7a>
 80086ca:	68ac      	ldr	r4, [r5, #8]
 80086cc:	e7cf      	b.n	800866e <__swbuf_r+0x1a>
 80086ce:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <__swbuf_r+0xa0>)
 80086d0:	429c      	cmp	r4, r3
 80086d2:	bf08      	it	eq
 80086d4:	68ec      	ldreq	r4, [r5, #12]
 80086d6:	e7ca      	b.n	800866e <__swbuf_r+0x1a>
 80086d8:	4621      	mov	r1, r4
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 f80c 	bl	80086f8 <__swsetup_r>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d0cb      	beq.n	800867c <__swbuf_r+0x28>
 80086e4:	f04f 37ff 	mov.w	r7, #4294967295
 80086e8:	e7ea      	b.n	80086c0 <__swbuf_r+0x6c>
 80086ea:	bf00      	nop
 80086ec:	08008e14 	.word	0x08008e14
 80086f0:	08008e34 	.word	0x08008e34
 80086f4:	08008df4 	.word	0x08008df4

080086f8 <__swsetup_r>:
 80086f8:	4b32      	ldr	r3, [pc, #200]	; (80087c4 <__swsetup_r+0xcc>)
 80086fa:	b570      	push	{r4, r5, r6, lr}
 80086fc:	681d      	ldr	r5, [r3, #0]
 80086fe:	4606      	mov	r6, r0
 8008700:	460c      	mov	r4, r1
 8008702:	b125      	cbz	r5, 800870e <__swsetup_r+0x16>
 8008704:	69ab      	ldr	r3, [r5, #24]
 8008706:	b913      	cbnz	r3, 800870e <__swsetup_r+0x16>
 8008708:	4628      	mov	r0, r5
 800870a:	f7ff fd8f 	bl	800822c <__sinit>
 800870e:	4b2e      	ldr	r3, [pc, #184]	; (80087c8 <__swsetup_r+0xd0>)
 8008710:	429c      	cmp	r4, r3
 8008712:	d10f      	bne.n	8008734 <__swsetup_r+0x3c>
 8008714:	686c      	ldr	r4, [r5, #4]
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800871c:	0719      	lsls	r1, r3, #28
 800871e:	d42c      	bmi.n	800877a <__swsetup_r+0x82>
 8008720:	06dd      	lsls	r5, r3, #27
 8008722:	d411      	bmi.n	8008748 <__swsetup_r+0x50>
 8008724:	2309      	movs	r3, #9
 8008726:	6033      	str	r3, [r6, #0]
 8008728:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800872c:	81a3      	strh	r3, [r4, #12]
 800872e:	f04f 30ff 	mov.w	r0, #4294967295
 8008732:	e03e      	b.n	80087b2 <__swsetup_r+0xba>
 8008734:	4b25      	ldr	r3, [pc, #148]	; (80087cc <__swsetup_r+0xd4>)
 8008736:	429c      	cmp	r4, r3
 8008738:	d101      	bne.n	800873e <__swsetup_r+0x46>
 800873a:	68ac      	ldr	r4, [r5, #8]
 800873c:	e7eb      	b.n	8008716 <__swsetup_r+0x1e>
 800873e:	4b24      	ldr	r3, [pc, #144]	; (80087d0 <__swsetup_r+0xd8>)
 8008740:	429c      	cmp	r4, r3
 8008742:	bf08      	it	eq
 8008744:	68ec      	ldreq	r4, [r5, #12]
 8008746:	e7e6      	b.n	8008716 <__swsetup_r+0x1e>
 8008748:	0758      	lsls	r0, r3, #29
 800874a:	d512      	bpl.n	8008772 <__swsetup_r+0x7a>
 800874c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800874e:	b141      	cbz	r1, 8008762 <__swsetup_r+0x6a>
 8008750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008754:	4299      	cmp	r1, r3
 8008756:	d002      	beq.n	800875e <__swsetup_r+0x66>
 8008758:	4630      	mov	r0, r6
 800875a:	f7fd fa1f 	bl	8005b9c <_free_r>
 800875e:	2300      	movs	r3, #0
 8008760:	6363      	str	r3, [r4, #52]	; 0x34
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008768:	81a3      	strh	r3, [r4, #12]
 800876a:	2300      	movs	r3, #0
 800876c:	6063      	str	r3, [r4, #4]
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f043 0308 	orr.w	r3, r3, #8
 8008778:	81a3      	strh	r3, [r4, #12]
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	b94b      	cbnz	r3, 8008792 <__swsetup_r+0x9a>
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008788:	d003      	beq.n	8008792 <__swsetup_r+0x9a>
 800878a:	4621      	mov	r1, r4
 800878c:	4630      	mov	r0, r6
 800878e:	f000 f84d 	bl	800882c <__smakebuf_r>
 8008792:	89a0      	ldrh	r0, [r4, #12]
 8008794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008798:	f010 0301 	ands.w	r3, r0, #1
 800879c:	d00a      	beq.n	80087b4 <__swsetup_r+0xbc>
 800879e:	2300      	movs	r3, #0
 80087a0:	60a3      	str	r3, [r4, #8]
 80087a2:	6963      	ldr	r3, [r4, #20]
 80087a4:	425b      	negs	r3, r3
 80087a6:	61a3      	str	r3, [r4, #24]
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	b943      	cbnz	r3, 80087be <__swsetup_r+0xc6>
 80087ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087b0:	d1ba      	bne.n	8008728 <__swsetup_r+0x30>
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
 80087b4:	0781      	lsls	r1, r0, #30
 80087b6:	bf58      	it	pl
 80087b8:	6963      	ldrpl	r3, [r4, #20]
 80087ba:	60a3      	str	r3, [r4, #8]
 80087bc:	e7f4      	b.n	80087a8 <__swsetup_r+0xb0>
 80087be:	2000      	movs	r0, #0
 80087c0:	e7f7      	b.n	80087b2 <__swsetup_r+0xba>
 80087c2:	bf00      	nop
 80087c4:	20000018 	.word	0x20000018
 80087c8:	08008e14 	.word	0x08008e14
 80087cc:	08008e34 	.word	0x08008e34
 80087d0:	08008df4 	.word	0x08008df4

080087d4 <abort>:
 80087d4:	b508      	push	{r3, lr}
 80087d6:	2006      	movs	r0, #6
 80087d8:	f000 f890 	bl	80088fc <raise>
 80087dc:	2001      	movs	r0, #1
 80087de:	f7f9 fe1b 	bl	8002418 <_exit>

080087e2 <__swhatbuf_r>:
 80087e2:	b570      	push	{r4, r5, r6, lr}
 80087e4:	460e      	mov	r6, r1
 80087e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ea:	2900      	cmp	r1, #0
 80087ec:	b096      	sub	sp, #88	; 0x58
 80087ee:	4614      	mov	r4, r2
 80087f0:	461d      	mov	r5, r3
 80087f2:	da08      	bge.n	8008806 <__swhatbuf_r+0x24>
 80087f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	602a      	str	r2, [r5, #0]
 80087fc:	061a      	lsls	r2, r3, #24
 80087fe:	d410      	bmi.n	8008822 <__swhatbuf_r+0x40>
 8008800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008804:	e00e      	b.n	8008824 <__swhatbuf_r+0x42>
 8008806:	466a      	mov	r2, sp
 8008808:	f000 f894 	bl	8008934 <_fstat_r>
 800880c:	2800      	cmp	r0, #0
 800880e:	dbf1      	blt.n	80087f4 <__swhatbuf_r+0x12>
 8008810:	9a01      	ldr	r2, [sp, #4]
 8008812:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008816:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800881a:	425a      	negs	r2, r3
 800881c:	415a      	adcs	r2, r3
 800881e:	602a      	str	r2, [r5, #0]
 8008820:	e7ee      	b.n	8008800 <__swhatbuf_r+0x1e>
 8008822:	2340      	movs	r3, #64	; 0x40
 8008824:	2000      	movs	r0, #0
 8008826:	6023      	str	r3, [r4, #0]
 8008828:	b016      	add	sp, #88	; 0x58
 800882a:	bd70      	pop	{r4, r5, r6, pc}

0800882c <__smakebuf_r>:
 800882c:	898b      	ldrh	r3, [r1, #12]
 800882e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008830:	079d      	lsls	r5, r3, #30
 8008832:	4606      	mov	r6, r0
 8008834:	460c      	mov	r4, r1
 8008836:	d507      	bpl.n	8008848 <__smakebuf_r+0x1c>
 8008838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	6123      	str	r3, [r4, #16]
 8008840:	2301      	movs	r3, #1
 8008842:	6163      	str	r3, [r4, #20]
 8008844:	b002      	add	sp, #8
 8008846:	bd70      	pop	{r4, r5, r6, pc}
 8008848:	ab01      	add	r3, sp, #4
 800884a:	466a      	mov	r2, sp
 800884c:	f7ff ffc9 	bl	80087e2 <__swhatbuf_r>
 8008850:	9900      	ldr	r1, [sp, #0]
 8008852:	4605      	mov	r5, r0
 8008854:	4630      	mov	r0, r6
 8008856:	f7fd fa0d 	bl	8005c74 <_malloc_r>
 800885a:	b948      	cbnz	r0, 8008870 <__smakebuf_r+0x44>
 800885c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008860:	059a      	lsls	r2, r3, #22
 8008862:	d4ef      	bmi.n	8008844 <__smakebuf_r+0x18>
 8008864:	f023 0303 	bic.w	r3, r3, #3
 8008868:	f043 0302 	orr.w	r3, r3, #2
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	e7e3      	b.n	8008838 <__smakebuf_r+0xc>
 8008870:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <__smakebuf_r+0x7c>)
 8008872:	62b3      	str	r3, [r6, #40]	; 0x28
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	6020      	str	r0, [r4, #0]
 8008878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	9b00      	ldr	r3, [sp, #0]
 8008880:	6163      	str	r3, [r4, #20]
 8008882:	9b01      	ldr	r3, [sp, #4]
 8008884:	6120      	str	r0, [r4, #16]
 8008886:	b15b      	cbz	r3, 80088a0 <__smakebuf_r+0x74>
 8008888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800888c:	4630      	mov	r0, r6
 800888e:	f000 f863 	bl	8008958 <_isatty_r>
 8008892:	b128      	cbz	r0, 80088a0 <__smakebuf_r+0x74>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	f043 0301 	orr.w	r3, r3, #1
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	89a0      	ldrh	r0, [r4, #12]
 80088a2:	4305      	orrs	r5, r0
 80088a4:	81a5      	strh	r5, [r4, #12]
 80088a6:	e7cd      	b.n	8008844 <__smakebuf_r+0x18>
 80088a8:	080081c5 	.word	0x080081c5

080088ac <_raise_r>:
 80088ac:	291f      	cmp	r1, #31
 80088ae:	b538      	push	{r3, r4, r5, lr}
 80088b0:	4604      	mov	r4, r0
 80088b2:	460d      	mov	r5, r1
 80088b4:	d904      	bls.n	80088c0 <_raise_r+0x14>
 80088b6:	2316      	movs	r3, #22
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	f04f 30ff 	mov.w	r0, #4294967295
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088c2:	b112      	cbz	r2, 80088ca <_raise_r+0x1e>
 80088c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088c8:	b94b      	cbnz	r3, 80088de <_raise_r+0x32>
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 f830 	bl	8008930 <_getpid_r>
 80088d0:	462a      	mov	r2, r5
 80088d2:	4601      	mov	r1, r0
 80088d4:	4620      	mov	r0, r4
 80088d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088da:	f000 b817 	b.w	800890c <_kill_r>
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d00a      	beq.n	80088f8 <_raise_r+0x4c>
 80088e2:	1c59      	adds	r1, r3, #1
 80088e4:	d103      	bne.n	80088ee <_raise_r+0x42>
 80088e6:	2316      	movs	r3, #22
 80088e8:	6003      	str	r3, [r0, #0]
 80088ea:	2001      	movs	r0, #1
 80088ec:	e7e7      	b.n	80088be <_raise_r+0x12>
 80088ee:	2400      	movs	r4, #0
 80088f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088f4:	4628      	mov	r0, r5
 80088f6:	4798      	blx	r3
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7e0      	b.n	80088be <_raise_r+0x12>

080088fc <raise>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <raise+0xc>)
 80088fe:	4601      	mov	r1, r0
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	f7ff bfd3 	b.w	80088ac <_raise_r>
 8008906:	bf00      	nop
 8008908:	20000018 	.word	0x20000018

0800890c <_kill_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d07      	ldr	r5, [pc, #28]	; (800892c <_kill_r+0x20>)
 8008910:	2300      	movs	r3, #0
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	f7f9 fd6d 	bl	80023f8 <_kill>
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	d102      	bne.n	8008928 <_kill_r+0x1c>
 8008922:	682b      	ldr	r3, [r5, #0]
 8008924:	b103      	cbz	r3, 8008928 <_kill_r+0x1c>
 8008926:	6023      	str	r3, [r4, #0]
 8008928:	bd38      	pop	{r3, r4, r5, pc}
 800892a:	bf00      	nop
 800892c:	20000738 	.word	0x20000738

08008930 <_getpid_r>:
 8008930:	f7f9 bd5a 	b.w	80023e8 <_getpid>

08008934 <_fstat_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d07      	ldr	r5, [pc, #28]	; (8008954 <_fstat_r+0x20>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	4611      	mov	r1, r2
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	f7f9 fdb8 	bl	80024b6 <_fstat>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	d102      	bne.n	8008950 <_fstat_r+0x1c>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	b103      	cbz	r3, 8008950 <_fstat_r+0x1c>
 800894e:	6023      	str	r3, [r4, #0]
 8008950:	bd38      	pop	{r3, r4, r5, pc}
 8008952:	bf00      	nop
 8008954:	20000738 	.word	0x20000738

08008958 <_isatty_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d06      	ldr	r5, [pc, #24]	; (8008974 <_isatty_r+0x1c>)
 800895c:	2300      	movs	r3, #0
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	602b      	str	r3, [r5, #0]
 8008964:	f7f9 fdb7 	bl	80024d6 <_isatty>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_isatty_r+0x1a>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_isatty_r+0x1a>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	20000738 	.word	0x20000738

08008978 <_init>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr

08008984 <_fini>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr
