
CAN_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a84  08003a84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a84  08003a84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a84  08003a84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000120  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c10b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c0b  00000000  00000000  0002c147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002dd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000768  00000000  00000000  0002e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8f7  00000000  00000000  0002ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b960  00000000  00000000  0004e5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bea86  00000000  00000000  00059f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001189bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f94  00000000  00000000  00118a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a34 	.word	0x08003a34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003a34 	.word	0x08003a34

080001d4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80001da:	4b25      	ldr	r3, [pc, #148]	; (8000270 <MX_CAN_Init+0x9c>)
 80001dc:	4a25      	ldr	r2, [pc, #148]	; (8000274 <MX_CAN_Init+0xa0>)
 80001de:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80001e0:	4b23      	ldr	r3, [pc, #140]	; (8000270 <MX_CAN_Init+0x9c>)
 80001e2:	2212      	movs	r2, #18
 80001e4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80001e6:	4b22      	ldr	r3, [pc, #136]	; (8000270 <MX_CAN_Init+0x9c>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001ec:	4b20      	ldr	r3, [pc, #128]	; (8000270 <MX_CAN_Init+0x9c>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80001f2:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <MX_CAN_Init+0x9c>)
 80001f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80001f8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <MX_CAN_Init+0x9c>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_CAN_Init+0x9c>)
 8000202:	2200      	movs	r2, #0
 8000204:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000206:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <MX_CAN_Init+0x9c>)
 8000208:	2200      	movs	r2, #0
 800020a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_CAN_Init+0x9c>)
 800020e:	2200      	movs	r2, #0
 8000210:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000212:	4b17      	ldr	r3, [pc, #92]	; (8000270 <MX_CAN_Init+0x9c>)
 8000214:	2200      	movs	r2, #0
 8000216:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <MX_CAN_Init+0x9c>)
 800021a:	2200      	movs	r2, #0
 800021c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_CAN_Init+0x9c>)
 8000220:	2200      	movs	r2, #0
 8000222:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000224:	4812      	ldr	r0, [pc, #72]	; (8000270 <MX_CAN_Init+0x9c>)
 8000226:	f000 fb69 	bl	80008fc <HAL_CAN_Init>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000230:	f000 f9de 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000234:	2301      	movs	r3, #1
 8000236:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 8000238:	230a      	movs	r3, #10
 800023a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800023c:	2300      	movs	r3, #0
 800023e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000244:	2300      	movs	r3, #0
 8000246:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000250:	2300      	movs	r3, #0
 8000252:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000254:	2301      	movs	r3, #1
 8000256:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800025c:	463b      	mov	r3, r7
 800025e:	4619      	mov	r1, r3
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <MX_CAN_Init+0x9c>)
 8000262:	f000 fc46 	bl	8000af2 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000266:	bf00      	nop
 8000268:	3728      	adds	r7, #40	; 0x28
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000028 	.word	0x20000028
 8000274:	40006400 	.word	0x40006400

08000278 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a20      	ldr	r2, [pc, #128]	; (8000318 <HAL_CAN_MspInit+0xa0>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d139      	bne.n	800030e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800029a:	4b20      	ldr	r3, [pc, #128]	; (800031c <HAL_CAN_MspInit+0xa4>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	4a1f      	ldr	r2, [pc, #124]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002a4:	61d3      	str	r3, [r2, #28]
 80002a6:	4b1d      	ldr	r3, [pc, #116]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002ae:	613b      	str	r3, [r7, #16]
 80002b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	4b1a      	ldr	r3, [pc, #104]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a19      	ldr	r2, [pc, #100]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002bc:	6153      	str	r3, [r2, #20]
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002d0:	2302      	movs	r3, #2
 80002d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d8:	2303      	movs	r3, #3
 80002da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80002dc:	2309      	movs	r3, #9
 80002de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	4619      	mov	r1, r3
 80002e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ea:	f001 fa65 	bl	80017b8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	2014      	movs	r0, #20
 80002f4:	f001 fa29 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80002f8:	2014      	movs	r0, #20
 80002fa:	f001 fa42 	bl	8001782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80002fe:	2200      	movs	r2, #0
 8000300:	2100      	movs	r1, #0
 8000302:	2015      	movs	r0, #21
 8000304:	f001 fa21 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000308:	2015      	movs	r0, #21
 800030a:	f001 fa3a 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800030e:	bf00      	nop
 8000310:	3728      	adds	r7, #40	; 0x28
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40006400 	.word	0x40006400
 800031c:	40021000 	.word	0x40021000

08000320 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08a      	sub	sp, #40	; 0x28
 8000324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4b38      	ldr	r3, [pc, #224]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a37      	ldr	r2, [pc, #220]	; (8000418 <MX_GPIO_Init+0xf8>)
 800033c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b35      	ldr	r3, [pc, #212]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800034e:	4b32      	ldr	r3, [pc, #200]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a31      	ldr	r2, [pc, #196]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b2f      	ldr	r3, [pc, #188]	; (8000418 <MX_GPIO_Init+0xf8>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a2b      	ldr	r2, [pc, #172]	; (8000418 <MX_GPIO_Init+0xf8>)
 800036c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b29      	ldr	r3, [pc, #164]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a25      	ldr	r2, [pc, #148]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b23      	ldr	r3, [pc, #140]	; (8000418 <MX_GPIO_Init+0xf8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2120      	movs	r1, #32
 800039a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039e:	f001 fb95 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn_Pin;
 80003a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4619      	mov	r1, r3
 80003b8:	4818      	ldr	r0, [pc, #96]	; (800041c <MX_GPIO_Init+0xfc>)
 80003ba:	f001 f9fd 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003be:	230c      	movs	r3, #12
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003c2:	2302      	movs	r3, #2
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2300      	movs	r3, #0
 80003cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003ce:	2307      	movs	r3, #7
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	4619      	mov	r1, r3
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003dc:	f001 f9ec 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003e0:	2320      	movs	r3, #32
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e4:	2301      	movs	r3, #1
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	4619      	mov	r1, r3
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fa:	f001 f9dd 	bl	80017b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	2028      	movs	r0, #40	; 0x28
 8000404:	f001 f9a1 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000408:	2028      	movs	r0, #40	; 0x28
 800040a:	f001 f9ba 	bl	8001782 <HAL_NVIC_EnableIRQ>

}
 800040e:	bf00      	nop
 8000410:	3728      	adds	r7, #40	; 0x28
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	48000800 	.word	0x48000800

08000420 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox[4];

uint8_t count = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800042a:	4a08      	ldr	r2, [pc, #32]	; (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800042c:	2100      	movs	r1, #0
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f000 fd48 	bl	8000ec4 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000434:	2120      	movs	r1, #32
 8000436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043a:	f001 fb5f 	bl	8001afc <HAL_GPIO_TogglePin>
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000068 	.word	0x20000068
 800044c:	20000088 	.word	0x20000088

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000454:	f000 f9ec 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000458:	f000 f810 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045c:	f7ff ff60 	bl	8000320 <MX_GPIO_Init>
  MX_CAN_Init();
 8000460:	f7ff feb8 	bl	80001d4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000464:	f000 f946 	bl	80006f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <main+0x28>)
 800046a:	f000 fc0c 	bl	8000c86 <HAL_CAN_Start>

  //Activate notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800046e:	2102      	movs	r1, #2
 8000470:	4801      	ldr	r0, [pc, #4]	; (8000478 <main+0x28>)
 8000472:	f000 fe39 	bl	80010e8 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000476:	e7fe      	b.n	8000476 <main+0x26>
 8000478:	20000028 	.word	0x20000028

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b0a6      	sub	sp, #152	; 0x98
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000486:	2228      	movs	r2, #40	; 0x28
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f003 faca 	bl	8003a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2258      	movs	r2, #88	; 0x58
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 fabc 	bl	8003a24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ac:	2302      	movs	r3, #2
 80004ae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b0:	2301      	movs	r3, #1
 80004b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b4:	2310      	movs	r3, #16
 80004b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ba:	2302      	movs	r3, #2
 80004bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004da:	4618      	mov	r0, r3
 80004dc:	f001 fb40 	bl	8001b60 <HAL_RCC_OscConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004e6:	f000 f883 	bl	80005f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	230f      	movs	r3, #15
 80004ec:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ee:	2302      	movs	r3, #2
 80004f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000500:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000504:	2102      	movs	r1, #2
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fa40 	bl	800298c <HAL_RCC_ClockConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000512:	f000 f86d 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000516:	2301      	movs	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4618      	mov	r0, r3
 8000522:	f002 fc69 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800052c:	f000 f860 	bl	80005f0 <Error_Handler>
  }
}
 8000530:	bf00      	nop
 8000532:	3798      	adds	r7, #152	; 0x98
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <SendControlMessage>:

/* USER CODE BEGIN 4 */
void SendControlMessage(StateMessage state)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	TxHeader.DLC = 2; // Data length in bits
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SendControlMessage+0x88>)
 8000544:	2202      	movs	r2, #2
 8000546:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <SendControlMessage+0x88>)
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <SendControlMessage+0x88>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <SendControlMessage+0x88>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x103; // Arbitration_ID
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <SendControlMessage+0x88>)
 800055c:	f240 1203 	movw	r2, #259	; 0x103
 8000560:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <SendControlMessage+0x88>)
 8000564:	2200      	movs	r2, #0
 8000566:	751a      	strb	r2, [r3, #20]

	TxData[0] = 0x01;
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <SendControlMessage+0x8c>)
 800056a:	2201      	movs	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]

	switch(state)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d00e      	beq.n	8000592 <SendControlMessage+0x5a>
 8000574:	2b02      	cmp	r3, #2
 8000576:	dc10      	bgt.n	800059a <SendControlMessage+0x62>
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <SendControlMessage+0x4a>
 800057c:	2b01      	cmp	r3, #1
 800057e:	d004      	beq.n	800058a <SendControlMessage+0x52>
 8000580:	e00b      	b.n	800059a <SendControlMessage+0x62>
	{
	case WAKEUP:
		TxData[1] = 0x01;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <SendControlMessage+0x8c>)
 8000584:	2201      	movs	r2, #1
 8000586:	705a      	strb	r2, [r3, #1]
		break;
 8000588:	e00a      	b.n	80005a0 <SendControlMessage+0x68>
	case START:
		TxData[1] = 0x02;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <SendControlMessage+0x8c>)
 800058c:	2202      	movs	r2, #2
 800058e:	705a      	strb	r2, [r3, #1]
		break;
 8000590:	e006      	b.n	80005a0 <SendControlMessage+0x68>
	case LOCK:
		TxData[1] = 0x03;
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <SendControlMessage+0x8c>)
 8000594:	2203      	movs	r2, #3
 8000596:	705a      	strb	r2, [r3, #1]
		break;
 8000598:	e002      	b.n	80005a0 <SendControlMessage+0x68>
	default:
		TxData[1] = 0x00;
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <SendControlMessage+0x8c>)
 800059c:	2200      	movs	r2, #0
 800059e:	705a      	strb	r2, [r3, #1]
	}

	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox[0]) != HAL_OK)
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <SendControlMessage+0x90>)
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <SendControlMessage+0x8c>)
 80005a4:	4906      	ldr	r1, [pc, #24]	; (80005c0 <SendControlMessage+0x88>)
 80005a6:	4809      	ldr	r0, [pc, #36]	; (80005cc <SendControlMessage+0x94>)
 80005a8:	f000 fbb1 	bl	8000d0e <HAL_CAN_AddTxMessage>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SendControlMessage+0x7e>
	{
		Error_Handler();
 80005b2:	f000 f81d 	bl	80005f0 <Error_Handler>
	}
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000070 	.word	0x20000070
 80005c4:	20000050 	.word	0x20000050
 80005c8:	20000058 	.word	0x20000058
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Btn_Pin)
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e0:	d102      	bne.n	80005e8 <HAL_GPIO_EXTI_Callback+0x18>
	{
		SendControlMessage(WAKEUP);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ffa8 	bl	8000538 <SendControlMessage>
	}
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x44>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x44>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x44>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000632:	2007      	movs	r0, #7
 8000634:	f001 f87e 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000690:	f000 f914 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800069e:	f000 fd49 	bl	8001134 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000028 	.word	0x20000028

080006ac <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <CAN_RX1_IRQHandler+0x10>)
 80006b2:	f000 fd3f 	bl	8001134 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028

080006c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Pin);
 80006c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006c8:	f001 fa32 	bl	8001b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <SystemInit+0x20>)
 80006d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <SystemInit+0x20>)
 80006dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_USART1_UART_Init+0x58>)
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <MX_USART1_UART_Init+0x5c>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_USART1_UART_Init+0x58>)
 8000700:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART1_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_USART1_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART1_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART1_UART_Init+0x58>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART1_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART1_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART1_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART1_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART1_UART_Init+0x58>)
 8000738:	f002 fd7c 	bl	8003234 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000742:	f7ff ff55 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000a4 	.word	0x200000a4
 8000750:	40013800 	.word	0x40013800

08000754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_UART_MspInit+0x7c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d127      	bne.n	80007c6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_UART_MspInit+0x80>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <HAL_UART_MspInit+0x80>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_UART_MspInit+0x80>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_UART_MspInit+0x80>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <HAL_UART_MspInit+0x80>)
 8000794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_UART_MspInit+0x80>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007a6:	2330      	movs	r3, #48	; 0x30
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007b6:	2307      	movs	r3, #7
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <HAL_UART_MspInit+0x84>)
 80007c2:	f000 fff9 	bl	80017b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40013800 	.word	0x40013800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000800 	.word	0x48000800

080007dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000814 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e2:	490e      	ldr	r1, [pc, #56]	; (800081c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <LoopForever+0xe>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f8:	4c0b      	ldr	r4, [pc, #44]	; (8000828 <LoopForever+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000806:	f7ff ff63 	bl	80006d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080a:	f003 f8e7 	bl	80039dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080e:	f7ff fe1f 	bl	8000450 <main>

08000812 <LoopForever>:

LoopForever:
    b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000814:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000820:	08003a8c 	.word	0x08003a8c
  ldr r2, =_sbss
 8000824:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000828:	2000012c 	.word	0x2000012c

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_Init+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_Init+0x28>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 ff77 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff fed6 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 ff8f 	bl	800179e <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 ff57 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_IncTick+0x24>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000128 	.word	0x20000128

080008e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000128 	.word	0x20000128

080008fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d101      	bne.n	800090e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e0ed      	b.n	8000aea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d102      	bne.n	8000920 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fcac 	bl	8000278 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f042 0201 	orr.w	r2, r2, #1
 800092e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000930:	f7ff ffd8 	bl	80008e4 <HAL_GetTick>
 8000934:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000936:	e012      	b.n	800095e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000938:	f7ff ffd4 	bl	80008e4 <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b0a      	cmp	r3, #10
 8000944:	d90b      	bls.n	800095e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2205      	movs	r2, #5
 8000956:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e0c5      	b.n	8000aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0e5      	beq.n	8000938 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f022 0202 	bic.w	r2, r2, #2
 800097a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800097c:	f7ff ffb2 	bl	80008e4 <HAL_GetTick>
 8000980:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000982:	e012      	b.n	80009aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000984:	f7ff ffae 	bl	80008e4 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	2b0a      	cmp	r3, #10
 8000990:	d90b      	bls.n	80009aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000996:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2205      	movs	r2, #5
 80009a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e09f      	b.n	8000aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1e5      	bne.n	8000984 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7e1b      	ldrb	r3, [r3, #24]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d108      	bne.n	80009d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	e007      	b.n	80009e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	7e5b      	ldrb	r3, [r3, #25]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d108      	bne.n	80009fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	e007      	b.n	8000a0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7e9b      	ldrb	r3, [r3, #26]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d108      	bne.n	8000a26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0220 	orr.w	r2, r2, #32
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e007      	b.n	8000a36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0220 	bic.w	r2, r2, #32
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7edb      	ldrb	r3, [r3, #27]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d108      	bne.n	8000a50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 0210 	bic.w	r2, r2, #16
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	e007      	b.n	8000a60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0210 	orr.w	r2, r2, #16
 8000a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7f1b      	ldrb	r3, [r3, #28]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d108      	bne.n	8000a7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f042 0208 	orr.w	r2, r2, #8
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	e007      	b.n	8000a8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f022 0208 	bic.w	r2, r2, #8
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7f5b      	ldrb	r3, [r3, #29]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d108      	bne.n	8000aa4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f042 0204 	orr.w	r2, r2, #4
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e007      	b.n	8000ab4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0204 	bic.w	r2, r2, #4
 8000ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	ea42 0103 	orr.w	r1, r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	1e5a      	subs	r2, r3, #1
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b087      	sub	sp, #28
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b08:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b0a:	7cfb      	ldrb	r3, [r7, #19]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d003      	beq.n	8000b18 <HAL_CAN_ConfigFilter+0x26>
 8000b10:	7cfb      	ldrb	r3, [r7, #19]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	f040 80aa 	bne.w	8000c6c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b1e:	f043 0201 	orr.w	r2, r3, #1
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f003 031f 	and.w	r3, r3, #31
 8000b30:	2201      	movs	r2, #1
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d123      	bne.n	8000b9a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3248      	adds	r2, #72	; 0x48
 8000b7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b90:	6979      	ldr	r1, [r7, #20]
 8000b92:	3348      	adds	r3, #72	; 0x48
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d122      	bne.n	8000be8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	431a      	orrs	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3248      	adds	r2, #72	; 0x48
 8000bc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bdc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bde:	6979      	ldr	r1, [r7, #20]
 8000be0:	3348      	adds	r3, #72	; 0x48
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	440b      	add	r3, r1
 8000be6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d109      	bne.n	8000c04 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c02:	e007      	b.n	8000c14 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d109      	bne.n	8000c30 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c2e:	e007      	b.n	8000c40 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d107      	bne.n	8000c58 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c5e:	f023 0201 	bic.w	r2, r3, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e006      	b.n	8000c7a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
  }
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	371c      	adds	r7, #28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d12e      	bne.n	8000cf8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 0201 	bic.w	r2, r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cb2:	f7ff fe17 	bl	80008e4 <HAL_GetTick>
 8000cb6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cb8:	e012      	b.n	8000ce0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cba:	f7ff fe13 	bl	80008e4 <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	2b0a      	cmp	r3, #10
 8000cc6:	d90b      	bls.n	8000ce0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e012      	b.n	8000d06 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1e5      	bne.n	8000cba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e006      	b.n	8000d06 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
  }
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b089      	sub	sp, #36	; 0x24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d22:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d2c:	7ffb      	ldrb	r3, [r7, #31]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d003      	beq.n	8000d3a <HAL_CAN_AddTxMessage+0x2c>
 8000d32:	7ffb      	ldrb	r3, [r7, #31]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	f040 80b8 	bne.w	8000eaa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10a      	bne.n	8000d5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d105      	bne.n	8000d5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80a0 	beq.w	8000e9a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	0e1b      	lsrs	r3, r3, #24
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d907      	bls.n	8000d7a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e09e      	b.n	8000eb8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10d      	bne.n	8000da8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d96:	68f9      	ldr	r1, [r7, #12]
 8000d98:	6809      	ldr	r1, [r1, #0]
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3318      	adds	r3, #24
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	440b      	add	r3, r1
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e00f      	b.n	8000dc8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000db2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000db8:	68f9      	ldr	r1, [r7, #12]
 8000dba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000dbc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3318      	adds	r3, #24
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	440b      	add	r3, r1
 8000dc6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6819      	ldr	r1, [r3, #0]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3318      	adds	r3, #24
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3304      	adds	r3, #4
 8000dda:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	7d1b      	ldrb	r3, [r3, #20]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d111      	bne.n	8000e08 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	3318      	adds	r3, #24
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4413      	add	r3, r2
 8000df0:	3304      	adds	r3, #4
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	6811      	ldr	r1, [r2, #0]
 8000df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3318      	adds	r3, #24
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	440b      	add	r3, r1
 8000e04:	3304      	adds	r3, #4
 8000e06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3307      	adds	r3, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	061a      	lsls	r2, r3, #24
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3306      	adds	r3, #6
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	041b      	lsls	r3, r3, #16
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3305      	adds	r3, #5
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	4313      	orrs	r3, r2
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	3204      	adds	r2, #4
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	6811      	ldr	r1, [r2, #0]
 8000e30:	ea43 0200 	orr.w	r2, r3, r0
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	440b      	add	r3, r1
 8000e3a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3303      	adds	r3, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	061a      	lsls	r2, r3, #24
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3301      	adds	r3, #1
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	7812      	ldrb	r2, [r2, #0]
 8000e60:	4610      	mov	r0, r2
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	6811      	ldr	r1, [r2, #0]
 8000e66:	ea43 0200 	orr.w	r2, r3, r0
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	440b      	add	r3, r1
 8000e70:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000e74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3318      	adds	r3, #24
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	6811      	ldr	r1, [r2, #0]
 8000e88:	f043 0201 	orr.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3318      	adds	r3, #24
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	440b      	add	r3, r1
 8000e94:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e00e      	b.n	8000eb8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e006      	b.n	8000eb8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
  }
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3724      	adds	r7, #36	; 0x24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d003      	beq.n	8000ee8 <HAL_CAN_GetRxMessage+0x24>
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	f040 80f3 	bne.w	80010ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10e      	bne.n	8000f0c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d116      	bne.n	8000f2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e0e7      	b.n	80010dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d107      	bne.n	8000f2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e0d8      	b.n	80010dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	331b      	adds	r3, #27
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	4413      	add	r3, r2
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0204 	and.w	r2, r3, #4
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10c      	bne.n	8000f62 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	331b      	adds	r3, #27
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0d5b      	lsrs	r3, r3, #21
 8000f58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	e00b      	b.n	8000f7a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	331b      	adds	r3, #27
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	4413      	add	r3, r2
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	331b      	adds	r3, #27
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	4413      	add	r3, r2
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0202 	and.w	r2, r3, #2
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	331b      	adds	r3, #27
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 020f 	and.w	r2, r3, #15
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	331b      	adds	r3, #27
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	331b      	adds	r3, #27
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	4413      	add	r3, r2
 8000fcc:	3304      	adds	r3, #4
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	0a1a      	lsrs	r2, r3, #8
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0c1a      	lsrs	r2, r3, #16
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	3302      	adds	r3, #2
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	4413      	add	r3, r2
 800102c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	0e1a      	lsrs	r2, r3, #24
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3303      	adds	r3, #3
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4413      	add	r3, r2
 8001046:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	3304      	adds	r3, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	0a1a      	lsrs	r2, r3, #8
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3305      	adds	r3, #5
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	0c1a      	lsrs	r2, r3, #16
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3306      	adds	r3, #6
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4413      	add	r3, r2
 8001092:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0e1a      	lsrs	r2, r3, #24
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3307      	adds	r3, #7
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d108      	bne.n	80010ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	e007      	b.n	80010ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0220 	orr.w	r2, r2, #32
 80010c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e006      	b.n	80010dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
  }
}
 80010dc:	4618      	mov	r0, r3
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d002      	beq.n	8001106 <HAL_CAN_ActivateNotification+0x1e>
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d109      	bne.n	800111a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6959      	ldr	r1, [r3, #20]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e006      	b.n	8001128 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
  }
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d07c      	beq.n	8001274 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d023      	beq.n	80011cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2201      	movs	r2, #1
 800118a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f983 	bl	80014a2 <HAL_CAN_TxMailbox0CompleteCallback>
 800119c:	e016      	b.n	80011cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
 80011b0:	e00c      	b.n	80011cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
 80011c4:	e002      	b.n	80011cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f989 	bl	80014de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d024      	beq.n	8001220 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f963 	bl	80014b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80011f0:	e016      	b.n	8001220 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	e00c      	b.n	8001220 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
 8001218:	e002      	b.n	8001220 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f969 	bl	80014f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d024      	beq.n	8001274 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001232:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f943 	bl	80014ca <HAL_CAN_TxMailbox2CompleteCallback>
 8001244:	e016      	b.n	8001274 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
 8001258:	e00c      	b.n	8001274 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	e002      	b.n	8001274 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f949 	bl	8001506 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2210      	movs	r2, #16
 8001296:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2208      	movs	r2, #8
 80012b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f930 	bl	800151a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff f8a4 	bl	8000420 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2210      	movs	r2, #16
 80012fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2208      	movs	r2, #8
 8001316:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f912 	bl	8001542 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f8f9 	bl	800152e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2210      	movs	r2, #16
 8001356:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f8fc 	bl	8001556 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00b      	beq.n	8001380 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2208      	movs	r2, #8
 8001378:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f8f5 	bl	800156a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d07b      	beq.n	8001482 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d072      	beq.n	800147a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d008      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d043      	beq.n	800147a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d03e      	beq.n	800147a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001402:	2b60      	cmp	r3, #96	; 0x60
 8001404:	d02b      	beq.n	800145e <HAL_CAN_IRQHandler+0x32a>
 8001406:	2b60      	cmp	r3, #96	; 0x60
 8001408:	d82e      	bhi.n	8001468 <HAL_CAN_IRQHandler+0x334>
 800140a:	2b50      	cmp	r3, #80	; 0x50
 800140c:	d022      	beq.n	8001454 <HAL_CAN_IRQHandler+0x320>
 800140e:	2b50      	cmp	r3, #80	; 0x50
 8001410:	d82a      	bhi.n	8001468 <HAL_CAN_IRQHandler+0x334>
 8001412:	2b40      	cmp	r3, #64	; 0x40
 8001414:	d019      	beq.n	800144a <HAL_CAN_IRQHandler+0x316>
 8001416:	2b40      	cmp	r3, #64	; 0x40
 8001418:	d826      	bhi.n	8001468 <HAL_CAN_IRQHandler+0x334>
 800141a:	2b30      	cmp	r3, #48	; 0x30
 800141c:	d010      	beq.n	8001440 <HAL_CAN_IRQHandler+0x30c>
 800141e:	2b30      	cmp	r3, #48	; 0x30
 8001420:	d822      	bhi.n	8001468 <HAL_CAN_IRQHandler+0x334>
 8001422:	2b10      	cmp	r3, #16
 8001424:	d002      	beq.n	800142c <HAL_CAN_IRQHandler+0x2f8>
 8001426:	2b20      	cmp	r3, #32
 8001428:	d005      	beq.n	8001436 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800142a:	e01d      	b.n	8001468 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001434:	e019      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800143e:	e014      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	f043 0320 	orr.w	r3, r3, #32
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001448:	e00f      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001452:	e00a      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800145c:	e005      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001466:	e000      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            break;
 8001468:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699a      	ldr	r2, [r3, #24]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001478:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2204      	movs	r2, #4
 8001480:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f872 	bl	800157e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	; (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff3e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff31 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	e160      	b.n	8001a8a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8152 	beq.w	8001a84 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d005      	beq.n	80017f8 <HAL_GPIO_Init+0x40>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d130      	bne.n	800185a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800182e:	2201      	movs	r2, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	f003 0201 	and.w	r2, r3, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b03      	cmp	r3, #3
 8001864:	d017      	beq.n	8001896 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d123      	bne.n	80018ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	6939      	ldr	r1, [r7, #16]
 80018e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0203 	and.w	r2, r3, #3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80ac 	beq.w	8001a84 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192c:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a5d      	ldr	r2, [pc, #372]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001944:	4a59      	ldr	r2, [pc, #356]	; (8001aac <HAL_GPIO_Init+0x2f4>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800196e:	d025      	beq.n	80019bc <HAL_GPIO_Init+0x204>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_GPIO_Init+0x2f8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d01f      	beq.n	80019b8 <HAL_GPIO_Init+0x200>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a4e      	ldr	r2, [pc, #312]	; (8001ab4 <HAL_GPIO_Init+0x2fc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d019      	beq.n	80019b4 <HAL_GPIO_Init+0x1fc>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d013      	beq.n	80019b0 <HAL_GPIO_Init+0x1f8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x304>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00d      	beq.n	80019ac <HAL_GPIO_Init+0x1f4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <HAL_GPIO_Init+0x308>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x1f0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <HAL_GPIO_Init+0x30c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_GPIO_Init+0x1ec>
 80019a0:	2306      	movs	r3, #6
 80019a2:	e00c      	b.n	80019be <HAL_GPIO_Init+0x206>
 80019a4:	2307      	movs	r3, #7
 80019a6:	e00a      	b.n	80019be <HAL_GPIO_Init+0x206>
 80019a8:	2305      	movs	r3, #5
 80019aa:	e008      	b.n	80019be <HAL_GPIO_Init+0x206>
 80019ac:	2304      	movs	r3, #4
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x206>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e004      	b.n	80019be <HAL_GPIO_Init+0x206>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x206>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_GPIO_Init+0x206>
 80019bc:	2300      	movs	r3, #0
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	f002 0203 	and.w	r2, r2, #3
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	4093      	lsls	r3, r2
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ce:	4937      	ldr	r1, [pc, #220]	; (8001aac <HAL_GPIO_Init+0x2f4>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <HAL_GPIO_Init+0x310>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a00:	4a31      	ldr	r2, [pc, #196]	; (8001ac8 <HAL_GPIO_Init+0x310>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a06:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_GPIO_Init+0x310>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a2a:	4a27      	ldr	r2, [pc, #156]	; (8001ac8 <HAL_GPIO_Init+0x310>)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_GPIO_Init+0x310>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a54:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <HAL_GPIO_Init+0x310>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_GPIO_Init+0x310>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_GPIO_Init+0x310>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f47f ae97 	bne.w	80017c8 <HAL_GPIO_Init+0x10>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	48000400 	.word	0x48000400
 8001ab4:	48000800 	.word	0x48000800
 8001ab8:	48000c00 	.word	0x48000c00
 8001abc:	48001000 	.word	0x48001000
 8001ac0:	48001400 	.word	0x48001400
 8001ac4:	48001800 	.word	0x48001800
 8001ac8:	40010400 	.word	0x40010400

08001acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001adc:	787b      	ldrb	r3, [r7, #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	041a      	lsls	r2, r3, #16
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43d9      	mvns	r1, r3
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd3e 	bl	80005d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f000 bf01 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8160 	beq.w	8001e4a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b8a:	4bae      	ldr	r3, [pc, #696]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d00c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b96:	4bab      	ldr	r3, [pc, #684]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d159      	bne.n	8001c56 <HAL_RCC_OscConfig+0xf6>
 8001ba2:	4ba8      	ldr	r3, [pc, #672]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d152      	bne.n	8001c56 <HAL_RCC_OscConfig+0xf6>
 8001bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bc4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_RCC_OscConfig+0x82>
 8001bdc:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0xae>
 8001be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bfe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c0a:	4b8e      	ldr	r3, [pc, #568]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c12:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c16:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c1a:	fa92 f2a2 	rbit	r2, r2
 8001c1e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c22:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c26:	fab2 f282 	clz	r2, r2
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f042 0220 	orr.w	r2, r2, #32
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f002 021f 	and.w	r2, r2, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8102 	beq.w	8001e48 <HAL_RCC_OscConfig+0x2e8>
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 80fc 	bne.w	8001e48 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f000 be93 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d106      	bne.n	8001c70 <HAL_RCC_OscConfig+0x110>
 8001c62:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a77      	ldr	r2, [pc, #476]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e030      	b.n	8001cd2 <HAL_RCC_OscConfig+0x172>
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x134>
 8001c7a:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a71      	ldr	r2, [pc, #452]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e01e      	b.n	8001cd2 <HAL_RCC_OscConfig+0x172>
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x15a>
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a67      	ldr	r2, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a64      	ldr	r2, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x172>
 8001cba:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a61      	ldr	r2, [pc, #388]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a5e      	ldr	r2, [pc, #376]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d059      	beq.n	8001d90 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fe02 	bl	80008e4 <HAL_GetTick>
 8001ce0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce6:	f7fe fdfd 	bl	80008e4 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d902      	bls.n	8001cfc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f000 be40 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
 8001cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d00:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001d10:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d102      	bne.n	8001d2e <HAL_RCC_OscConfig+0x1ce>
 8001d28:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x1fa>
 8001d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d32:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d4a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d5e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d62:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d66:	fa92 f2a2 	rbit	r2, r2
 8001d6a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d6e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ab      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x186>
 8001d8e:	e05c      	b.n	8001e4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fda8 	bl	80008e4 <HAL_GetTick>
 8001d94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9a:	f7fe fda3 	bl	80008e4 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d902      	bls.n	8001db0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	f000 bde6 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
 8001db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001dc4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_OscConfig+0x282>
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	e015      	b.n	8001e0e <HAL_RCC_OscConfig+0x2ae>
 8001de2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001dfe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e12:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e16:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e1a:	fa92 f2a2 	rbit	r2, r2
 8001e1e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001e22:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e26:	fab2 f282 	clz	r2, r2
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f042 0220 	orr.w	r2, r2, #32
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f002 021f 	and.w	r2, r2, #31
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ab      	bne.n	8001d9a <HAL_RCC_OscConfig+0x23a>
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_OscConfig+0x2ea>
 8001e44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8170 	beq.w	800213a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e5a:	4bd0      	ldr	r3, [pc, #832]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e66:	4bcd      	ldr	r3, [pc, #820]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d16d      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3ee>
 8001e72:	4bca      	ldr	r3, [pc, #808]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7e:	d166      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3ee>
 8001e80:	2302      	movs	r3, #2
 8001e82:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001e92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x350>
 8001eaa:	4bbc      	ldr	r3, [pc, #752]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e013      	b.n	8001ed8 <HAL_RCC_OscConfig+0x378>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ec8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ed4:	4bb1      	ldr	r3, [pc, #708]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ede:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ee2:	fa92 f2a2 	rbit	r2, r2
 8001ee6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001eea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001eee:	fab2 f282 	clz	r2, r2
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f042 0220 	orr.w	r2, r2, #32
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f002 021f 	and.w	r2, r2, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3ba>
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d002      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f000 bd31 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4ba0      	ldr	r3, [pc, #640]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	21f8      	movs	r1, #248	; 0xf8
 8001f2a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f32:	fa91 f1a1 	rbit	r1, r1
 8001f36:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001f3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f3e:	fab1 f181 	clz	r1, r1
 8001f42:	b2c9      	uxtb	r1, r1
 8001f44:	408b      	lsls	r3, r1
 8001f46:	4995      	ldr	r1, [pc, #596]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4c:	e0f5      	b.n	800213a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8085 	beq.w	8002064 <HAL_RCC_OscConfig+0x504>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001f6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe fcad 	bl	80008e4 <HAL_GetTick>
 8001f8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f90:	f7fe fca8 	bl	80008e4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d902      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f000 bceb 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001fb8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x476>
 8001fd0:	4b72      	ldr	r3, [pc, #456]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e013      	b.n	8001ffe <HAL_RCC_OscConfig+0x49e>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ffa:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2202      	movs	r2, #2
 8002000:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002004:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002008:	fa92 f2a2 	rbit	r2, r2
 800200c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002010:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0af      	beq.n	8001f90 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b5a      	ldr	r3, [pc, #360]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	21f8      	movs	r1, #248	; 0xf8
 8002040:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002048:	fa91 f1a1 	rbit	r1, r1
 800204c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002050:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002054:	fab1 f181 	clz	r1, r1
 8002058:	b2c9      	uxtb	r1, r1
 800205a:	408b      	lsls	r3, r1
 800205c:	494f      	ldr	r1, [pc, #316]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
 8002062:	e06a      	b.n	800213a <HAL_RCC_OscConfig+0x5da>
 8002064:	2301      	movs	r3, #1
 8002066:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002076:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002084:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe fc28 	bl	80008e4 <HAL_GetTick>
 8002094:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209a:	f7fe fc23 	bl	80008e4 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d902      	bls.n	80020b0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f000 bc66 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80020c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_OscConfig+0x580>
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e013      	b.n	8002108 <HAL_RCC_OscConfig+0x5a8>
 80020e0:	2302      	movs	r3, #2
 80020e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2202      	movs	r2, #2
 800210a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800210e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800211a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f042 0220 	orr.w	r2, r2, #32
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f002 021f 	and.w	r2, r2, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1af      	bne.n	800209a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80da 	beq.w	80022fe <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d069      	beq.n	8002228 <HAL_RCC_OscConfig+0x6c8>
 8002154:	2301      	movs	r3, #1
 8002156:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002166:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x640>)
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	461a      	mov	r2, r3
 800217a:	2301      	movs	r3, #1
 800217c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe fbb1 	bl	80008e4 <HAL_GetTick>
 8002182:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e00d      	b.n	80021a4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe fbac 	bl	80008e4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d905      	bls.n	80021a4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e3ef      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 800219c:	40021000 	.word	0x40021000
 80021a0:	10908120 	.word	0x10908120
 80021a4:	2302      	movs	r3, #2
 80021a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021d4:	2202      	movs	r2, #2
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e8:	4ba4      	ldr	r3, [pc, #656]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80021ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021f0:	2102      	movs	r1, #2
 80021f2:	6019      	str	r1, [r3, #0]
 80021f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f1a3 	rbit	r1, r3
 80021fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002202:	6019      	str	r1, [r3, #0]
  return result;
 8002204:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0b0      	beq.n	8002188 <HAL_RCC_OscConfig+0x628>
 8002226:	e06a      	b.n	80022fe <HAL_RCC_OscConfig+0x79e>
 8002228:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fa93 f2a3 	rbit	r2, r3
 800223a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800223e:	601a      	str	r2, [r3, #0]
  return result;
 8002240:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002244:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4b8c      	ldr	r3, [pc, #560]	; (8002480 <HAL_RCC_OscConfig+0x920>)
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	461a      	mov	r2, r3
 8002256:	2300      	movs	r3, #0
 8002258:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7fe fb43 	bl	80008e4 <HAL_GetTick>
 800225e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002262:	e009      	b.n	8002278 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002264:	f7fe fb3e 	bl	80008e4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e381      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002278:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800227c:	2202      	movs	r2, #2
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022ac:	2202      	movs	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	4b6e      	ldr	r3, [pc, #440]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80022c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022c8:	2102      	movs	r1, #2
 80022ca:	6019      	str	r1, [r3, #0]
 80022cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	fa93 f1a3 	rbit	r1, r3
 80022d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022da:	6019      	str	r1, [r3, #0]
  return result;
 80022dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1b2      	bne.n	8002264 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8157 	beq.w	80025bc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002314:	4b59      	ldr	r3, [pc, #356]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d112      	bne.n	8002346 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002320:	4b56      	ldr	r3, [pc, #344]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a55      	ldr	r2, [pc, #340]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232a:	61d3      	str	r3, [r2, #28]
 800232c:	4b53      	ldr	r3, [pc, #332]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002334:	f107 030c 	add.w	r3, r7, #12
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_RCC_OscConfig+0x924>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11a      	bne.n	8002388 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002352:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_RCC_OscConfig+0x924>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <HAL_RCC_OscConfig+0x924>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7fe fac1 	bl	80008e4 <HAL_GetTick>
 8002362:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	e009      	b.n	800237c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7fe fabc 	bl	80008e4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e2ff      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_OscConfig+0x924>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ef      	beq.n	8002368 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d106      	bne.n	80023a0 <HAL_RCC_OscConfig+0x840>
 8002392:	4b3a      	ldr	r3, [pc, #232]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a39      	ldr	r2, [pc, #228]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e02f      	b.n	8002400 <HAL_RCC_OscConfig+0x8a0>
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x864>
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a33      	ldr	r2, [pc, #204]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a30      	ldr	r2, [pc, #192]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	e01d      	b.n	8002400 <HAL_RCC_OscConfig+0x8a0>
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x888>
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a2a      	ldr	r2, [pc, #168]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0x8a0>
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a20      	ldr	r2, [pc, #128]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d06a      	beq.n	80024e0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7fe fa6b 	bl	80008e4 <HAL_GetTick>
 800240e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fa66 	bl	80008e4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e2a7      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 800242c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002430:	2202      	movs	r2, #2
 8002432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002448:	2202      	movs	r2, #2
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800245a:	601a      	str	r2, [r3, #0]
  return result;
 800245c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002460:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d108      	bne.n	8002488 <HAL_RCC_OscConfig+0x928>
 8002476:	4b01      	ldr	r3, [pc, #4]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	e013      	b.n	80024a4 <HAL_RCC_OscConfig+0x944>
 800247c:	40021000 	.word	0x40021000
 8002480:	10908120 	.word	0x10908120
 8002484:	40007000 	.word	0x40007000
 8002488:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800248c:	2202      	movs	r2, #2
 800248e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	4bc0      	ldr	r3, [pc, #768]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024a8:	2102      	movs	r1, #2
 80024aa:	6011      	str	r1, [r2, #0]
 80024ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	fa92 f1a2 	rbit	r1, r2
 80024b6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024ba:	6011      	str	r1, [r2, #0]
  return result;
 80024bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f002 021f 	and.w	r2, r2, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d09a      	beq.n	8002414 <HAL_RCC_OscConfig+0x8b4>
 80024de:	e063      	b.n	80025a8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7fe fa00 	bl	80008e4 <HAL_GetTick>
 80024e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00b      	b.n	8002502 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe f9fb 	bl	80008e4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e23c      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002502:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002530:	601a      	str	r2, [r3, #0]
  return result;
 8002532:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002536:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0x9f2>
 800254c:	4b95      	ldr	r3, [pc, #596]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	e00d      	b.n	800256e <HAL_RCC_OscConfig+0xa0e>
 8002552:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	4b8e      	ldr	r3, [pc, #568]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002572:	2102      	movs	r1, #2
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	fa92 f1a2 	rbit	r1, r2
 8002580:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002584:	6011      	str	r1, [r2, #0]
  return result;
 8002586:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1a0      	bne.n	80024ea <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025a8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	4b7c      	ldr	r3, [pc, #496]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4a7b      	ldr	r2, [pc, #492]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 81d9 	beq.w	800297a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	f000 81a6 	beq.w	8002922 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	f040 811e 	bne.w	800281e <HAL_RCC_OscConfig+0xcbe>
 80025e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025fa:	601a      	str	r2, [r3, #0]
  return result;
 80025fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002600:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800260c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	461a      	mov	r2, r3
 8002614:	2300      	movs	r3, #0
 8002616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe f964 	bl	80008e4 <HAL_GetTick>
 800261c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	e009      	b.n	8002636 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe f95f 	bl	80008e4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1a2      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002636:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800263a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800264e:	601a      	str	r2, [r3, #0]
  return result;
 8002650:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002654:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_RCC_OscConfig+0xb10>
 800266a:	4b4e      	ldr	r3, [pc, #312]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	e01b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb48>
 8002670:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800268e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026b0:	6011      	str	r1, [r2, #0]
 80026b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	fa92 f1a2 	rbit	r1, r2
 80026bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026c0:	6011      	str	r1, [r2, #0]
  return result;
 80026c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f002 021f 	and.w	r2, r2, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d19e      	bne.n	8002622 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e4:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f023 020f 	bic.w	r2, r3, #15
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	492c      	ldr	r1, [pc, #176]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a19      	ldr	r1, [r3, #32]
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	430b      	orrs	r3, r1
 800270e:	4925      	ldr	r1, [pc, #148]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800271c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	fa93 f2a3 	rbit	r2, r3
 8002728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800272c:	601a      	str	r2, [r3, #0]
  return result;
 800272e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002732:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800273e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	461a      	mov	r2, r3
 8002746:	2301      	movs	r3, #1
 8002748:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe f8cb 	bl	80008e4 <HAL_GetTick>
 800274e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002752:	e009      	b.n	8002768 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe f8c6 	bl	80008e4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e109      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002768:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800276c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fa93 f2a3 	rbit	r2, r3
 800277c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002780:	601a      	str	r2, [r3, #0]
  return result;
 8002782:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002786:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0xc48>
 800279c:	4b01      	ldr	r3, [pc, #4]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	e01e      	b.n	80027e0 <HAL_RCC_OscConfig+0xc80>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	fa92 f1a2 	rbit	r1, r2
 80027f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027f8:	6011      	str	r1, [r2, #0]
  return result;
 80027fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	fab2 f282 	clz	r2, r2
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	f042 0220 	orr.w	r2, r2, #32
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f002 021f 	and.w	r2, r2, #31
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f202 	lsl.w	r2, r1, r2
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d09b      	beq.n	8002754 <HAL_RCC_OscConfig+0xbf4>
 800281c:	e0ad      	b.n	800297a <HAL_RCC_OscConfig+0xe1a>
 800281e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002822:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002836:	601a      	str	r2, [r3, #0]
  return result;
 8002838:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800283c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002848:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	2300      	movs	r3, #0
 8002852:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe f846 	bl	80008e4 <HAL_GetTick>
 8002858:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	e009      	b.n	8002872 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe f841 	bl	80008e4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e084      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288a:	601a      	str	r2, [r3, #0]
  return result;
 800288c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002890:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_OscConfig+0xd4c>
 80028a6:	4b38      	ldr	r3, [pc, #224]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	e01b      	b.n	80028e4 <HAL_RCC_OscConfig+0xd84>
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f107 0320 	add.w	r3, r7, #32
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f107 0318 	add.w	r3, r7, #24
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f107 0214 	add.w	r2, r7, #20
 80028e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028ec:	6011      	str	r1, [r2, #0]
 80028ee:	f107 0214 	add.w	r2, r7, #20
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	fa92 f1a2 	rbit	r1, r2
 80028f8:	f107 0210 	add.w	r2, r7, #16
 80028fc:	6011      	str	r1, [r2, #0]
  return result;
 80028fe:	f107 0210 	add.w	r2, r7, #16
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f042 0220 	orr.w	r2, r2, #32
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f002 021f 	and.w	r2, r2, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d19e      	bne.n	800285e <HAL_RCC_OscConfig+0xcfe>
 8002920:	e02b      	b.n	800297a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e025      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002940:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002944:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	429a      	cmp	r2, r3
 8002950:	d111      	bne.n	8002976 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002952:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002956:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002960:	429a      	cmp	r2, r3
 8002962:	d108      	bne.n	8002976 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002968:	f003 020f 	and.w	r2, r3, #15
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000

0800298c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b09e      	sub	sp, #120	; 0x78
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e162      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b90      	ldr	r3, [pc, #576]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d910      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b8d      	ldr	r3, [pc, #564]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	498b      	ldr	r1, [pc, #556]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b89      	ldr	r3, [pc, #548]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e14a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b82      	ldr	r3, [pc, #520]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	497f      	ldr	r1, [pc, #508]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80dc 	beq.w	8002bb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d13c      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xf6>
 8002a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xa6>
 8002a2c:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	e00f      	b.n	8002a52 <HAL_RCC_ClockConfig+0xc6>
 8002a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8002a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a44:	663b      	str	r3, [r7, #96]	; 0x60
 8002a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a56:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a5a:	fa92 f2a2 	rbit	r2, r2
 8002a5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a62:	fab2 f282 	clz	r2, r2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f042 0220 	orr.w	r2, r2, #32
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f002 021f 	and.w	r2, r2, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d17b      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0f3      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d13c      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x178>
 8002a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d102      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x128>
 8002aae:	4b4f      	ldr	r3, [pc, #316]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	e00f      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x148>
 8002ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad0:	4b46      	ldr	r3, [pc, #280]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002adc:	fa92 f2a2 	rbit	r2, r2
 8002ae0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f042 0220 	orr.w	r2, r2, #32
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f002 021f 	and.w	r2, r2, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d13a      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b2      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
 8002b04:	2302      	movs	r3, #2
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x1a0>
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	e00d      	b.n	8002b48 <HAL_RCC_ClockConfig+0x1bc>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	2302      	movs	r3, #2
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2202      	movs	r2, #2
 8002b4a:	61ba      	str	r2, [r7, #24]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	fa92 f2a2 	rbit	r2, r2
 8002b52:	617a      	str	r2, [r7, #20]
  return result;
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	fab2 f282 	clz	r2, r2
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f042 0220 	orr.w	r2, r2, #32
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f002 021f 	and.w	r2, r2, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e079      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f023 0203 	bic.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	491a      	ldr	r1, [pc, #104]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b88:	f7fd feac 	bl	80008e4 <HAL_GetTick>
 8002b8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7fd fea8 	bl	80008e4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e061      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 020c 	and.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d1eb      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d214      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 0207 	bic.w	r2, r3, #7
 8002bce:	4906      	ldr	r1, [pc, #24]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e040      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	491a      	ldr	r1, [pc, #104]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4912      	ldr	r1, [pc, #72]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c2e:	f000 f829 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c32:	4601      	mov	r1, r0
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c3c:	22f0      	movs	r2, #240	; 0xf0
 8002c3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	fa92 f2a2 	rbit	r2, r2
 8002c46:	60fa      	str	r2, [r7, #12]
  return result;
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	fab2 f282 	clz	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	40d3      	lsrs	r3, r2
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x2ec>)
 8002c54:	5cd3      	ldrb	r3, [r2, r3]
 8002c56:	fa21 f303 	lsr.w	r3, r1, r3
 8002c5a:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <HAL_RCC_ClockConfig+0x2f0>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_RCC_ClockConfig+0x2f4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fdfa 	bl	800085c <HAL_InitTick>
  
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3778      	adds	r7, #120	; 0x78
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08003a4c 	.word	0x08003a4c
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000004 	.word	0x20000004

08002c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b08b      	sub	sp, #44	; 0x2c
 8002c88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x36>
 8002cb2:	e03f      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cb6:	623b      	str	r3, [r7, #32]
      break;
 8002cb8:	e03f      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cc0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cc4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	fa92 f2a2 	rbit	r2, r2
 8002ccc:	607a      	str	r2, [r7, #4]
  return result;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	fab2 f282 	clz	r2, r2
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	40d3      	lsrs	r3, r2
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cde:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	fa92 f2a2 	rbit	r2, r2
 8002cf0:	60fa      	str	r2, [r7, #12]
  return result;
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	fab2 f282 	clz	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	40d3      	lsrs	r3, r2
 8002cfc:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d0c:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fb02 f303 	mul.w	r3, r2, r3
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	e007      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	623b      	str	r3, [r7, #32]
      break;
 8002d32:	e002      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d36:	623b      	str	r3, [r7, #32]
      break;
 8002d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	372c      	adds	r7, #44	; 0x2c
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	007a1200 	.word	0x007a1200
 8002d50:	08003a64 	.word	0x08003a64
 8002d54:	08003a74 	.word	0x08003a74

08002d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000000 	.word	0x20000000

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d76:	f7ff ffef 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	fa92 f2a2 	rbit	r2, r2
 8002d90:	603a      	str	r2, [r7, #0]
  return result;
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	fab2 f282 	clz	r2, r2
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	40d3      	lsrs	r3, r2
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08003a5c 	.word	0x08003a5c

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dba:	f7ff ffcd 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002dc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002dcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	fa92 f2a2 	rbit	r2, r2
 8002dd4:	603a      	str	r2, [r7, #0]
  return result;
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	fab2 f282 	clz	r2, r2
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	40d3      	lsrs	r3, r2
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08003a5c 	.word	0x08003a5c

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b092      	sub	sp, #72	; 0x48
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80d4 	beq.w	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1c:	4b4e      	ldr	r3, [pc, #312]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10e      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	4a4a      	ldr	r2, [pc, #296]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e32:	61d3      	str	r3, [r2, #28]
 8002e34:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b45      	ldr	r3, [pc, #276]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a41      	ldr	r2, [pc, #260]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fd fd41 	bl	80008e4 <HAL_GetTick>
 8002e62:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fd fd3d 	bl	80008e4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	; 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1d6      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e84:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8084 	beq.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d07c      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2301      	movs	r3, #1
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ed6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04b      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fd fced 	bl	80008e4 <HAL_GetTick>
 8002f0a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fd fce9 	bl	80008e4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e180      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002f24:	2302      	movs	r3, #2
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	2302      	movs	r3, #2
 8002f32:	623b      	str	r3, [r7, #32]
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	61fb      	str	r3, [r7, #28]
  return result;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d108      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f52:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	e00d      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	10908100 	.word	0x10908100
 8002f64:	2302      	movs	r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	4ba0      	ldr	r3, [pc, #640]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2202      	movs	r2, #2
 8002f76:	613a      	str	r2, [r7, #16]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	fa92 f2a2 	rbit	r2, r2
 8002f7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	fab2 f282 	clz	r2, r2
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	f002 021f 	and.w	r2, r2, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0b7      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f9e:	4b95      	ldr	r3, [pc, #596]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4992      	ldr	r1, [pc, #584]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb8:	4b8e      	ldr	r3, [pc, #568]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4a8d      	ldr	r2, [pc, #564]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fd0:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f023 0203 	bic.w	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4985      	ldr	r1, [pc, #532]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fee:	4b81      	ldr	r3, [pc, #516]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	497e      	ldr	r1, [pc, #504]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800300c:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4976      	ldr	r1, [pc, #472]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302a:	4b72      	ldr	r3, [pc, #456]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f023 0210 	bic.w	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	496f      	ldr	r1, [pc, #444]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	4967      	ldr	r1, [pc, #412]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f023 0220 	bic.w	r2, r3, #32
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4960      	ldr	r1, [pc, #384]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003084:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	4958      	ldr	r1, [pc, #352]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030a2:	4b54      	ldr	r3, [pc, #336]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	4951      	ldr	r1, [pc, #324]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030c0:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4949      	ldr	r1, [pc, #292]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030de:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4942      	ldr	r1, [pc, #264]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	493a      	ldr	r1, [pc, #232]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800311a:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	4933      	ldr	r1, [pc, #204]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003128:	4313      	orrs	r3, r2
 800312a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003138:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	492b      	ldr	r1, [pc, #172]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003156:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4924      	ldr	r1, [pc, #144]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003174:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	491c      	ldr	r1, [pc, #112]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	4915      	ldr	r1, [pc, #84]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	490d      	ldr	r1, [pc, #52]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031da:	4906      	ldr	r1, [pc, #24]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80031ec:	4b01      	ldr	r3, [pc, #4]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	e002      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	490b      	ldr	r1, [pc, #44]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003202:	4313      	orrs	r3, r2
 8003204:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	4904      	ldr	r1, [pc, #16]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003220:	4313      	orrs	r3, r2
 8003222:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3748      	adds	r7, #72	; 0x48
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e040      	b.n	80032c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fa7c 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f82c 	bl	80032d0 <UART_SetConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e022      	b.n	80032c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9f6 	bl	800367c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800329e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fa7d 	bl	80037c0 <UART_CheckIdleState>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4bab      	ldr	r3, [pc, #684]	; (80035a8 <UART_SetConfig+0x2d8>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	6979      	ldr	r1, [r7, #20]
 8003304:	430b      	orrs	r3, r1
 8003306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a99      	ldr	r2, [pc, #612]	; (80035ac <UART_SetConfig+0x2dc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d120      	bne.n	800338e <UART_SetConfig+0xbe>
 800334c:	4b98      	ldr	r3, [pc, #608]	; (80035b0 <UART_SetConfig+0x2e0>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b03      	cmp	r3, #3
 8003356:	d817      	bhi.n	8003388 <UART_SetConfig+0xb8>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <UART_SetConfig+0x90>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003371 	.word	0x08003371
 8003364:	0800337d 	.word	0x0800337d
 8003368:	08003383 	.word	0x08003383
 800336c:	08003377 	.word	0x08003377
 8003370:	2301      	movs	r3, #1
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e0b5      	b.n	80034e2 <UART_SetConfig+0x212>
 8003376:	2302      	movs	r3, #2
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e0b2      	b.n	80034e2 <UART_SetConfig+0x212>
 800337c:	2304      	movs	r3, #4
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e0af      	b.n	80034e2 <UART_SetConfig+0x212>
 8003382:	2308      	movs	r3, #8
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e0ac      	b.n	80034e2 <UART_SetConfig+0x212>
 8003388:	2310      	movs	r3, #16
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e0a9      	b.n	80034e2 <UART_SetConfig+0x212>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a88      	ldr	r2, [pc, #544]	; (80035b4 <UART_SetConfig+0x2e4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d124      	bne.n	80033e2 <UART_SetConfig+0x112>
 8003398:	4b85      	ldr	r3, [pc, #532]	; (80035b0 <UART_SetConfig+0x2e0>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033a4:	d011      	beq.n	80033ca <UART_SetConfig+0xfa>
 80033a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033aa:	d817      	bhi.n	80033dc <UART_SetConfig+0x10c>
 80033ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033b0:	d011      	beq.n	80033d6 <UART_SetConfig+0x106>
 80033b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033b6:	d811      	bhi.n	80033dc <UART_SetConfig+0x10c>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <UART_SetConfig+0xf4>
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c0:	d006      	beq.n	80033d0 <UART_SetConfig+0x100>
 80033c2:	e00b      	b.n	80033dc <UART_SetConfig+0x10c>
 80033c4:	2300      	movs	r3, #0
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e08b      	b.n	80034e2 <UART_SetConfig+0x212>
 80033ca:	2302      	movs	r3, #2
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e088      	b.n	80034e2 <UART_SetConfig+0x212>
 80033d0:	2304      	movs	r3, #4
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e085      	b.n	80034e2 <UART_SetConfig+0x212>
 80033d6:	2308      	movs	r3, #8
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e082      	b.n	80034e2 <UART_SetConfig+0x212>
 80033dc:	2310      	movs	r3, #16
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e07f      	b.n	80034e2 <UART_SetConfig+0x212>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a74      	ldr	r2, [pc, #464]	; (80035b8 <UART_SetConfig+0x2e8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d124      	bne.n	8003436 <UART_SetConfig+0x166>
 80033ec:	4b70      	ldr	r3, [pc, #448]	; (80035b0 <UART_SetConfig+0x2e0>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033f8:	d011      	beq.n	800341e <UART_SetConfig+0x14e>
 80033fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033fe:	d817      	bhi.n	8003430 <UART_SetConfig+0x160>
 8003400:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003404:	d011      	beq.n	800342a <UART_SetConfig+0x15a>
 8003406:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800340a:	d811      	bhi.n	8003430 <UART_SetConfig+0x160>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <UART_SetConfig+0x148>
 8003410:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x154>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x160>
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e061      	b.n	80034e2 <UART_SetConfig+0x212>
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e05e      	b.n	80034e2 <UART_SetConfig+0x212>
 8003424:	2304      	movs	r3, #4
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e05b      	b.n	80034e2 <UART_SetConfig+0x212>
 800342a:	2308      	movs	r3, #8
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e058      	b.n	80034e2 <UART_SetConfig+0x212>
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e055      	b.n	80034e2 <UART_SetConfig+0x212>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a60      	ldr	r2, [pc, #384]	; (80035bc <UART_SetConfig+0x2ec>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d124      	bne.n	800348a <UART_SetConfig+0x1ba>
 8003440:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <UART_SetConfig+0x2e0>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800344c:	d011      	beq.n	8003472 <UART_SetConfig+0x1a2>
 800344e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003452:	d817      	bhi.n	8003484 <UART_SetConfig+0x1b4>
 8003454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003458:	d011      	beq.n	800347e <UART_SetConfig+0x1ae>
 800345a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345e:	d811      	bhi.n	8003484 <UART_SetConfig+0x1b4>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <UART_SetConfig+0x19c>
 8003464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003468:	d006      	beq.n	8003478 <UART_SetConfig+0x1a8>
 800346a:	e00b      	b.n	8003484 <UART_SetConfig+0x1b4>
 800346c:	2300      	movs	r3, #0
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e037      	b.n	80034e2 <UART_SetConfig+0x212>
 8003472:	2302      	movs	r3, #2
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e034      	b.n	80034e2 <UART_SetConfig+0x212>
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e031      	b.n	80034e2 <UART_SetConfig+0x212>
 800347e:	2308      	movs	r3, #8
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e02e      	b.n	80034e2 <UART_SetConfig+0x212>
 8003484:	2310      	movs	r3, #16
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e02b      	b.n	80034e2 <UART_SetConfig+0x212>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a4c      	ldr	r2, [pc, #304]	; (80035c0 <UART_SetConfig+0x2f0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d124      	bne.n	80034de <UART_SetConfig+0x20e>
 8003494:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <UART_SetConfig+0x2e0>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800349c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034a0:	d011      	beq.n	80034c6 <UART_SetConfig+0x1f6>
 80034a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034a6:	d817      	bhi.n	80034d8 <UART_SetConfig+0x208>
 80034a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ac:	d011      	beq.n	80034d2 <UART_SetConfig+0x202>
 80034ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034b2:	d811      	bhi.n	80034d8 <UART_SetConfig+0x208>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <UART_SetConfig+0x1f0>
 80034b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034bc:	d006      	beq.n	80034cc <UART_SetConfig+0x1fc>
 80034be:	e00b      	b.n	80034d8 <UART_SetConfig+0x208>
 80034c0:	2300      	movs	r3, #0
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e00d      	b.n	80034e2 <UART_SetConfig+0x212>
 80034c6:	2302      	movs	r3, #2
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e00a      	b.n	80034e2 <UART_SetConfig+0x212>
 80034cc:	2304      	movs	r3, #4
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e007      	b.n	80034e2 <UART_SetConfig+0x212>
 80034d2:	2308      	movs	r3, #8
 80034d4:	77fb      	strb	r3, [r7, #31]
 80034d6:	e004      	b.n	80034e2 <UART_SetConfig+0x212>
 80034d8:	2310      	movs	r3, #16
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e001      	b.n	80034e2 <UART_SetConfig+0x212>
 80034de:	2310      	movs	r3, #16
 80034e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	d16d      	bne.n	80035c8 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80034ec:	7ffb      	ldrb	r3, [r7, #31]
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d827      	bhi.n	8003542 <UART_SetConfig+0x272>
 80034f2:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <UART_SetConfig+0x228>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	08003525 	.word	0x08003525
 8003500:	0800352d 	.word	0x0800352d
 8003504:	08003543 	.word	0x08003543
 8003508:	08003533 	.word	0x08003533
 800350c:	08003543 	.word	0x08003543
 8003510:	08003543 	.word	0x08003543
 8003514:	08003543 	.word	0x08003543
 8003518:	0800353b 	.word	0x0800353b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7ff fc28 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8003520:	61b8      	str	r0, [r7, #24]
        break;
 8003522:	e013      	b.n	800354c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003524:	f7ff fc46 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8003528:	61b8      	str	r0, [r7, #24]
        break;
 800352a:	e00f      	b.n	800354c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <UART_SetConfig+0x2f4>)
 800352e:	61bb      	str	r3, [r7, #24]
        break;
 8003530:	e00c      	b.n	800354c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003532:	f7ff fba7 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8003536:	61b8      	str	r0, [r7, #24]
        break;
 8003538:	e008      	b.n	800354c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	61bb      	str	r3, [r7, #24]
        break;
 8003540:	e004      	b.n	800354c <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	77bb      	strb	r3, [r7, #30]
        break;
 800354a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8086 	beq.w	8003660 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	005a      	lsls	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	441a      	add	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d916      	bls.n	80035a0 <UART_SetConfig+0x2d0>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d212      	bcs.n	80035a0 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f023 030f 	bic.w	r3, r3, #15
 8003582:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	b29a      	uxth	r2, r3
 8003590:	89fb      	ldrh	r3, [r7, #14]
 8003592:	4313      	orrs	r3, r2
 8003594:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	89fa      	ldrh	r2, [r7, #14]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	e05f      	b.n	8003660 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	77bb      	strb	r3, [r7, #30]
 80035a4:	e05c      	b.n	8003660 <UART_SetConfig+0x390>
 80035a6:	bf00      	nop
 80035a8:	efff69f3 	.word	0xefff69f3
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40004400 	.word	0x40004400
 80035b8:	40004800 	.word	0x40004800
 80035bc:	40004c00 	.word	0x40004c00
 80035c0:	40005000 	.word	0x40005000
 80035c4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80035c8:	7ffb      	ldrb	r3, [r7, #31]
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d827      	bhi.n	800361e <UART_SetConfig+0x34e>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <UART_SetConfig+0x304>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	08003601 	.word	0x08003601
 80035dc:	08003609 	.word	0x08003609
 80035e0:	0800361f 	.word	0x0800361f
 80035e4:	0800360f 	.word	0x0800360f
 80035e8:	0800361f 	.word	0x0800361f
 80035ec:	0800361f 	.word	0x0800361f
 80035f0:	0800361f 	.word	0x0800361f
 80035f4:	08003617 	.word	0x08003617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f8:	f7ff fbba 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 80035fc:	61b8      	str	r0, [r7, #24]
        break;
 80035fe:	e013      	b.n	8003628 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003600:	f7ff fbd8 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8003604:	61b8      	str	r0, [r7, #24]
        break;
 8003606:	e00f      	b.n	8003628 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <UART_SetConfig+0x3a8>)
 800360a:	61bb      	str	r3, [r7, #24]
        break;
 800360c:	e00c      	b.n	8003628 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360e:	f7ff fb39 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8003612:	61b8      	str	r0, [r7, #24]
        break;
 8003614:	e008      	b.n	8003628 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	61bb      	str	r3, [r7, #24]
        break;
 800361c:	e004      	b.n	8003628 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	77bb      	strb	r3, [r7, #30]
        break;
 8003626:	bf00      	nop
    }

    if (pclk != 0U)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d018      	beq.n	8003660 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	085a      	lsrs	r2, r3, #1
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	441a      	add	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	b29b      	uxth	r3, r3
 8003642:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b0f      	cmp	r3, #15
 8003648:	d908      	bls.n	800365c <UART_SetConfig+0x38c>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003650:	d204      	bcs.n	800365c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	e001      	b.n	8003660 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800366c:	7fbb      	ldrb	r3, [r7, #30]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	007a1200 	.word	0x007a1200

0800367c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01a      	beq.n	8003792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377a:	d10a      	bne.n	8003792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  }
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037d0:	f7fd f888 	bl	80008e4 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d10e      	bne.n	8003802 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f82d 	bl	8003852 <UART_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e023      	b.n	800384a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d10e      	bne.n	800382e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f817 	bl	8003852 <UART_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e00d      	b.n	800384a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b09c      	sub	sp, #112	; 0x70
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003862:	e0a5      	b.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	f000 80a1 	beq.w	80039b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fd f839 	bl	80008e4 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <UART_WaitOnFlagUntilTimeout+0x32>
 800387e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003880:	2b00      	cmp	r3, #0
 8003882:	d13e      	bne.n	8003902 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003898:	667b      	str	r3, [r7, #100]	; 0x64
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e6      	bne.n	8003884 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3308      	adds	r3, #8
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	663b      	str	r3, [r7, #96]	; 0x60
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80038d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e5      	bne.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e067      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d04f      	beq.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391e:	d147      	bne.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003928:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800393e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
 800394a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800394e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e6      	bne.n	800392a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	613b      	str	r3, [r7, #16]
   return(result);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	66bb      	str	r3, [r7, #104]	; 0x68
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800397c:	623a      	str	r2, [r7, #32]
 800397e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	69f9      	ldr	r1, [r7, #28]
 8003982:	6a3a      	ldr	r2, [r7, #32]
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	61bb      	str	r3, [r7, #24]
   return(result);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e5      	bne.n	800395c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e010      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69da      	ldr	r2, [r3, #28]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	f43f af4a 	beq.w	8003864 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3770      	adds	r7, #112	; 0x70
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <__libc_init_array>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	4d0d      	ldr	r5, [pc, #52]	; (8003a14 <__libc_init_array+0x38>)
 80039e0:	4c0d      	ldr	r4, [pc, #52]	; (8003a18 <__libc_init_array+0x3c>)
 80039e2:	1b64      	subs	r4, r4, r5
 80039e4:	10a4      	asrs	r4, r4, #2
 80039e6:	2600      	movs	r6, #0
 80039e8:	42a6      	cmp	r6, r4
 80039ea:	d109      	bne.n	8003a00 <__libc_init_array+0x24>
 80039ec:	4d0b      	ldr	r5, [pc, #44]	; (8003a1c <__libc_init_array+0x40>)
 80039ee:	4c0c      	ldr	r4, [pc, #48]	; (8003a20 <__libc_init_array+0x44>)
 80039f0:	f000 f820 	bl	8003a34 <_init>
 80039f4:	1b64      	subs	r4, r4, r5
 80039f6:	10a4      	asrs	r4, r4, #2
 80039f8:	2600      	movs	r6, #0
 80039fa:	42a6      	cmp	r6, r4
 80039fc:	d105      	bne.n	8003a0a <__libc_init_array+0x2e>
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a04:	4798      	blx	r3
 8003a06:	3601      	adds	r6, #1
 8003a08:	e7ee      	b.n	80039e8 <__libc_init_array+0xc>
 8003a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0e:	4798      	blx	r3
 8003a10:	3601      	adds	r6, #1
 8003a12:	e7f2      	b.n	80039fa <__libc_init_array+0x1e>
 8003a14:	08003a84 	.word	0x08003a84
 8003a18:	08003a84 	.word	0x08003a84
 8003a1c:	08003a84 	.word	0x08003a84
 8003a20:	08003a88 	.word	0x08003a88

08003a24 <memset>:
 8003a24:	4402      	add	r2, r0
 8003a26:	4603      	mov	r3, r0
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d100      	bne.n	8003a2e <memset+0xa>
 8003a2c:	4770      	bx	lr
 8003a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a32:	e7f9      	b.n	8003a28 <memset+0x4>

08003a34 <_init>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr

08003a40 <_fini>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr
