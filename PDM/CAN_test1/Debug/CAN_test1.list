
CAN_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003abc  08003abc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003abc  08003abc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003abc  08003abc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000520  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000052c  2000052c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c162  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c27  00000000  00000000  0002c19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000768  00000000  00000000  0002e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8f7  00000000  00000000  0002ed50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b977  00000000  00000000  0004e647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bea9d  00000000  00000000  00059fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00118a5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fbc  00000000  00000000  00118ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a6c 	.word	0x08003a6c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003a6c 	.word	0x08003a6c

080001d4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80001da:	4b25      	ldr	r3, [pc, #148]	; (8000270 <MX_CAN_Init+0x9c>)
 80001dc:	4a25      	ldr	r2, [pc, #148]	; (8000274 <MX_CAN_Init+0xa0>)
 80001de:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80001e0:	4b23      	ldr	r3, [pc, #140]	; (8000270 <MX_CAN_Init+0x9c>)
 80001e2:	2212      	movs	r2, #18
 80001e4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80001e6:	4b22      	ldr	r3, [pc, #136]	; (8000270 <MX_CAN_Init+0x9c>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001ec:	4b20      	ldr	r3, [pc, #128]	; (8000270 <MX_CAN_Init+0x9c>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80001f2:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <MX_CAN_Init+0x9c>)
 80001f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80001f8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <MX_CAN_Init+0x9c>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_CAN_Init+0x9c>)
 8000202:	2200      	movs	r2, #0
 8000204:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000206:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <MX_CAN_Init+0x9c>)
 8000208:	2200      	movs	r2, #0
 800020a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_CAN_Init+0x9c>)
 800020e:	2200      	movs	r2, #0
 8000210:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000212:	4b17      	ldr	r3, [pc, #92]	; (8000270 <MX_CAN_Init+0x9c>)
 8000214:	2200      	movs	r2, #0
 8000216:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <MX_CAN_Init+0x9c>)
 800021a:	2200      	movs	r2, #0
 800021c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_CAN_Init+0x9c>)
 8000220:	2200      	movs	r2, #0
 8000222:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000224:	4812      	ldr	r0, [pc, #72]	; (8000270 <MX_CAN_Init+0x9c>)
 8000226:	f000 fb75 	bl	8000914 <HAL_CAN_Init>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000230:	f000 f9ea 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000234:	2301      	movs	r3, #1
 8000236:	623b      	str	r3, [r7, #32]
//  canfilterconfig.FilterBank = 10;
  canfilterconfig.FilterBank = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800023c:	2300      	movs	r3, #0
 800023e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000244:	2300      	movs	r3, #0
 8000246:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000250:	2300      	movs	r3, #0
 8000252:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000254:	2301      	movs	r3, #1
 8000256:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800025c:	463b      	mov	r3, r7
 800025e:	4619      	mov	r1, r3
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <MX_CAN_Init+0x9c>)
 8000262:	f000 fc52 	bl	8000b0a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000266:	bf00      	nop
 8000268:	3728      	adds	r7, #40	; 0x28
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000028 	.word	0x20000028
 8000274:	40006400 	.word	0x40006400

08000278 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a20      	ldr	r2, [pc, #128]	; (8000318 <HAL_CAN_MspInit+0xa0>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d139      	bne.n	800030e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800029a:	4b20      	ldr	r3, [pc, #128]	; (800031c <HAL_CAN_MspInit+0xa4>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	4a1f      	ldr	r2, [pc, #124]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002a4:	61d3      	str	r3, [r2, #28]
 80002a6:	4b1d      	ldr	r3, [pc, #116]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002ae:	613b      	str	r3, [r7, #16]
 80002b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	4b1a      	ldr	r3, [pc, #104]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a19      	ldr	r2, [pc, #100]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002bc:	6153      	str	r3, [r2, #20]
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <HAL_CAN_MspInit+0xa4>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002d0:	2302      	movs	r3, #2
 80002d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d8:	2303      	movs	r3, #3
 80002da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80002dc:	2309      	movs	r3, #9
 80002de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	4619      	mov	r1, r3
 80002e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ea:	f001 fa71 	bl	80017d0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	2014      	movs	r0, #20
 80002f4:	f001 fa35 	bl	8001762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80002f8:	2014      	movs	r0, #20
 80002fa:	f001 fa4e 	bl	800179a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80002fe:	2200      	movs	r2, #0
 8000300:	2100      	movs	r1, #0
 8000302:	2015      	movs	r0, #21
 8000304:	f001 fa2d 	bl	8001762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000308:	2015      	movs	r0, #21
 800030a:	f001 fa46 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800030e:	bf00      	nop
 8000310:	3728      	adds	r7, #40	; 0x28
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40006400 	.word	0x40006400
 800031c:	40021000 	.word	0x40021000

08000320 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08a      	sub	sp, #40	; 0x28
 8000324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4b38      	ldr	r3, [pc, #224]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a37      	ldr	r2, [pc, #220]	; (8000418 <MX_GPIO_Init+0xf8>)
 800033c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b35      	ldr	r3, [pc, #212]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800034e:	4b32      	ldr	r3, [pc, #200]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a31      	ldr	r2, [pc, #196]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b2f      	ldr	r3, [pc, #188]	; (8000418 <MX_GPIO_Init+0xf8>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a2b      	ldr	r2, [pc, #172]	; (8000418 <MX_GPIO_Init+0xf8>)
 800036c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b29      	ldr	r3, [pc, #164]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a25      	ldr	r2, [pc, #148]	; (8000418 <MX_GPIO_Init+0xf8>)
 8000384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b23      	ldr	r3, [pc, #140]	; (8000418 <MX_GPIO_Init+0xf8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2120      	movs	r1, #32
 800039a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039e:	f001 fba1 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn_Pin;
 80003a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4619      	mov	r1, r3
 80003b8:	4818      	ldr	r0, [pc, #96]	; (800041c <MX_GPIO_Init+0xfc>)
 80003ba:	f001 fa09 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003be:	230c      	movs	r3, #12
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003c2:	2302      	movs	r3, #2
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2300      	movs	r3, #0
 80003cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003ce:	2307      	movs	r3, #7
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	4619      	mov	r1, r3
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003dc:	f001 f9f8 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003e0:	2320      	movs	r3, #32
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e4:	2301      	movs	r3, #1
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	4619      	mov	r1, r3
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fa:	f001 f9e9 	bl	80017d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	2028      	movs	r0, #40	; 0x28
 8000404:	f001 f9ad 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000408:	2028      	movs	r0, #40	; 0x28
 800040a:	f001 f9c6 	bl	800179a <HAL_NVIC_EnableIRQ>

}
 800040e:	bf00      	nop
 8000410:	3728      	adds	r7, #40	; 0x28
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	48000800 	.word	0x48000800

08000420 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t count = 0;

char rcvData[1024];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800042a:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800042c:	2100      	movs	r1, #0
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f000 fd54 	bl	8000edc <HAL_CAN_GetRxMessage>

    strcat(rcvData, RxData);
 8000434:	4906      	ldr	r1, [pc, #24]	; (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000436:	4808      	ldr	r0, [pc, #32]	; (8000458 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000438:	f003 fb08 	bl	8003a4c <strcat>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800043c:	2120      	movs	r1, #32
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f001 fb67 	bl	8001b14 <HAL_GPIO_TogglePin>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000468 	.word	0x20000468
 8000454:	20000488 	.word	0x20000488
 8000458:	20000050 	.word	0x20000050

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000460:	f000 f9f2 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f810 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000468:	f7ff ff5a 	bl	8000320 <MX_GPIO_Init>
  MX_CAN_Init();
 800046c:	f7ff feb2 	bl	80001d4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000470:	f000 f94c 	bl	800070c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <main+0x28>)
 8000476:	f000 fc12 	bl	8000c9e <HAL_CAN_Start>

  //Activate notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800047a:	2102      	movs	r1, #2
 800047c:	4801      	ldr	r0, [pc, #4]	; (8000484 <main+0x28>)
 800047e:	f000 fe3f 	bl	8001100 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000482:	e7fe      	b.n	8000482 <main+0x26>
 8000484:	20000028 	.word	0x20000028

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b0a6      	sub	sp, #152	; 0x98
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f003 fad0 	bl	8003a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2258      	movs	r2, #88	; 0x58
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f003 fac2 	bl	8003a3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b8:	2302      	movs	r3, #2
 80004ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004bc:	2301      	movs	r3, #1
 80004be:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c0:	2310      	movs	r3, #16
 80004c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c6:	2302      	movs	r3, #2
 80004c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 fb46 	bl	8001b78 <HAL_RCC_OscConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004f2:	f000 f889 	bl	8000608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	230f      	movs	r3, #15
 80004f8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fa:	2302      	movs	r3, #2
 80004fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000506:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000510:	2102      	movs	r1, #2
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fa46 	bl	80029a4 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800051e:	f000 f873 	bl	8000608 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000522:	2301      	movs	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4618      	mov	r0, r3
 800052e:	f002 fc6f 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000538:	f000 f866 	bl	8000608 <Error_Handler>
  }
}
 800053c:	bf00      	nop
 800053e:	3798      	adds	r7, #152	; 0x98
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <SendControlMessage>:

/* USER CODE BEGIN 4 */
void SendControlMessage(StateMessage state)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	TxHeader.DLC = 2; // Data length in bits
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SendControlMessage+0x94>)
 8000550:	2202      	movs	r2, #2
 8000552:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000554:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <SendControlMessage+0x94>)
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SendControlMessage+0x94>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <SendControlMessage+0x94>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x103; // Arbitration_ID
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <SendControlMessage+0x94>)
 8000568:	f240 1203 	movw	r2, #259	; 0x103
 800056c:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <SendControlMessage+0x94>)
 8000570:	2200      	movs	r2, #0
 8000572:	751a      	strb	r2, [r3, #20]


	if (state == REQUEST)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b03      	cmp	r3, #3
 8000578:	d103      	bne.n	8000582 <SendControlMessage+0x3e>
	{
		TxData[0] = 0x02;
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <SendControlMessage+0x98>)
 800057c:	2202      	movs	r2, #2
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	e01b      	b.n	80005ba <SendControlMessage+0x76>
	}
	else
	{
		TxData[0] = 0x01;
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <SendControlMessage+0x98>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]

		switch(state)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d00e      	beq.n	80005ac <SendControlMessage+0x68>
 800058e:	2b02      	cmp	r3, #2
 8000590:	dc10      	bgt.n	80005b4 <SendControlMessage+0x70>
 8000592:	2b00      	cmp	r3, #0
 8000594:	d002      	beq.n	800059c <SendControlMessage+0x58>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d004      	beq.n	80005a4 <SendControlMessage+0x60>
 800059a:	e00b      	b.n	80005b4 <SendControlMessage+0x70>
		{
		case WAKEUP:
			TxData[1] = 0x01;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <SendControlMessage+0x98>)
 800059e:	2201      	movs	r2, #1
 80005a0:	705a      	strb	r2, [r3, #1]
			break;
 80005a2:	e00a      	b.n	80005ba <SendControlMessage+0x76>
		case START:
			TxData[1] = 0x02;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <SendControlMessage+0x98>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	705a      	strb	r2, [r3, #1]
			break;
 80005aa:	e006      	b.n	80005ba <SendControlMessage+0x76>
		case LOCK:
			TxData[1] = 0x03;
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <SendControlMessage+0x98>)
 80005ae:	2203      	movs	r2, #3
 80005b0:	705a      	strb	r2, [r3, #1]
			break;
 80005b2:	e002      	b.n	80005ba <SendControlMessage+0x76>
		default:
			TxData[1] = 0x00;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <SendControlMessage+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	705a      	strb	r2, [r3, #1]
		}
	}

	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox[0]) != HAL_OK)
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <SendControlMessage+0x9c>)
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SendControlMessage+0x98>)
 80005be:	4906      	ldr	r1, [pc, #24]	; (80005d8 <SendControlMessage+0x94>)
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <SendControlMessage+0xa0>)
 80005c2:	f000 fbb0 	bl	8000d26 <HAL_CAN_AddTxMessage>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SendControlMessage+0x8c>
	{
		Error_Handler();
 80005cc:	f000 f81c 	bl	8000608 <Error_Handler>
	}
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000470 	.word	0x20000470
 80005dc:	20000450 	.word	0x20000450
 80005e0:	20000458 	.word	0x20000458
 80005e4:	20000028 	.word	0x20000028

080005e8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Btn_Pin)
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005f8:	d102      	bne.n	8000600 <HAL_GPIO_EXTI_Callback+0x18>
	{
		SendControlMessage(WAKEUP);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffa2 	bl	8000544 <SendControlMessage>
	}
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x44>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <HAL_MspInit+0x44>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x44>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_MspInit+0x44>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <HAL_MspInit+0x44>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_MspInit+0x44>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800064a:	2007      	movs	r0, #7
 800064c:	f001 f87e 	bl	800174c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000

0800065c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <NMI_Handler+0x4>

08000662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <HardFault_Handler+0x4>

08000668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <MemManage_Handler+0x4>

0800066e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <BusFault_Handler+0x4>

08000674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <UsageFault_Handler+0x4>

0800067a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a8:	f000 f914 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80006b6:	f000 fd49 	bl	800114c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000028 	.word	0x20000028

080006c4 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <CAN_RX1_IRQHandler+0x10>)
 80006ca:	f000 fd3f 	bl	800114c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000028 	.word	0x20000028

080006d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Pin);
 80006dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006e0:	f001 fa32 	bl	8001b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART1_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000718:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART1_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART1_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART1_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000750:	f002 fd7c 	bl	800324c <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f7ff ff55 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200004a4 	.word	0x200004a4
 8000768:	40013800 	.word	0x40013800

0800076c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <HAL_UART_MspInit+0x7c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d127      	bne.n	80007de <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_UART_MspInit+0x80>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <HAL_UART_MspInit+0x80>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <HAL_UART_MspInit+0x80>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_UART_MspInit+0x80>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <HAL_UART_MspInit+0x80>)
 80007ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_UART_MspInit+0x80>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007be:	2330      	movs	r3, #48	; 0x30
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007ce:	2307      	movs	r3, #7
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <HAL_UART_MspInit+0x84>)
 80007da:	f000 fff9 	bl	80017d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40013800 	.word	0x40013800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000800 	.word	0x48000800

080007f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800082c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490e      	ldr	r1, [pc, #56]	; (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0b      	ldr	r4, [pc, #44]	; (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800081e:	f7ff ff63 	bl	80006e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f003 f8e7 	bl	80039f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000826:	f7ff fe19 	bl	800045c <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800082c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000838:	08003ac4 	.word	0x08003ac4
  ldr r2, =_sbss
 800083c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000840:	2000052c 	.word	0x2000052c

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 ff77 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff fed6 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 ff8f 	bl	80017b6 <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 ff57 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_IncTick+0x20>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x24>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_IncTick+0x24>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000528 	.word	0x20000528

080008fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_GetTick+0x14>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000528 	.word	0x20000528

08000914 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e0ed      	b.n	8000b02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d102      	bne.n	8000938 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fca0 	bl	8000278 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f042 0201 	orr.w	r2, r2, #1
 8000946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000948:	f7ff ffd8 	bl	80008fc <HAL_GetTick>
 800094c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800094e:	e012      	b.n	8000976 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000950:	f7ff ffd4 	bl	80008fc <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b0a      	cmp	r3, #10
 800095c:	d90b      	bls.n	8000976 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2205      	movs	r2, #5
 800096e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e0c5      	b.n	8000b02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0e5      	beq.n	8000950 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f022 0202 	bic.w	r2, r2, #2
 8000992:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000994:	f7ff ffb2 	bl	80008fc <HAL_GetTick>
 8000998:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800099a:	e012      	b.n	80009c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800099c:	f7ff ffae 	bl	80008fc <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	2b0a      	cmp	r3, #10
 80009a8:	d90b      	bls.n	80009c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2205      	movs	r2, #5
 80009ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e09f      	b.n	8000b02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1e5      	bne.n	800099c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7e1b      	ldrb	r3, [r3, #24]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d108      	bne.n	80009ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	e007      	b.n	80009fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7e5b      	ldrb	r3, [r3, #25]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d108      	bne.n	8000a14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	e007      	b.n	8000a24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7e9b      	ldrb	r3, [r3, #26]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d108      	bne.n	8000a3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f042 0220 	orr.w	r2, r2, #32
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e007      	b.n	8000a4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 0220 	bic.w	r2, r2, #32
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	7edb      	ldrb	r3, [r3, #27]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d108      	bne.n	8000a68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f022 0210 	bic.w	r2, r2, #16
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e007      	b.n	8000a78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f042 0210 	orr.w	r2, r2, #16
 8000a76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7f1b      	ldrb	r3, [r3, #28]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d108      	bne.n	8000a92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0208 	orr.w	r2, r2, #8
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	e007      	b.n	8000aa2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0208 	bic.w	r2, r2, #8
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7f5b      	ldrb	r3, [r3, #29]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d108      	bne.n	8000abc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f042 0204 	orr.w	r2, r2, #4
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e007      	b.n	8000acc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 0204 	bic.w	r2, r2, #4
 8000aca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	ea42 0103 	orr.w	r1, r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	1e5a      	subs	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2201      	movs	r2, #1
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b087      	sub	sp, #28
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b20:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b22:	7cfb      	ldrb	r3, [r7, #19]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d003      	beq.n	8000b30 <HAL_CAN_ConfigFilter+0x26>
 8000b28:	7cfb      	ldrb	r3, [r7, #19]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	f040 80aa 	bne.w	8000c84 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b36:	f043 0201 	orr.w	r2, r3, #1
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f003 031f 	and.w	r3, r3, #31
 8000b48:	2201      	movs	r2, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d123      	bne.n	8000bb2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	401a      	ands	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3248      	adds	r2, #72	; 0x48
 8000b92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ba6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ba8:	6979      	ldr	r1, [r7, #20]
 8000baa:	3348      	adds	r3, #72	; 0x48
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	440b      	add	r3, r1
 8000bb0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d122      	bne.n	8000c00 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3248      	adds	r2, #72	; 0x48
 8000be0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bf4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bf6:	6979      	ldr	r1, [r7, #20]
 8000bf8:	3348      	adds	r3, #72	; 0x48
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	440b      	add	r3, r1
 8000bfe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d109      	bne.n	8000c1c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c1a:	e007      	b.n	8000c2c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	431a      	orrs	r2, r3
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d109      	bne.n	8000c48 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c46:	e007      	b.n	8000c58 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d107      	bne.n	8000c70 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c76:	f023 0201 	bic.w	r2, r3, #1
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	e006      	b.n	8000c92 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
  }
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	371c      	adds	r7, #28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d12e      	bne.n	8000d10 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f022 0201 	bic.w	r2, r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cca:	f7ff fe17 	bl	80008fc <HAL_GetTick>
 8000cce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cd0:	e012      	b.n	8000cf8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cd2:	f7ff fe13 	bl	80008fc <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b0a      	cmp	r3, #10
 8000cde:	d90b      	bls.n	8000cf8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2205      	movs	r2, #5
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e012      	b.n	8000d1e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1e5      	bne.n	8000cd2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e006      	b.n	8000d1e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
  }
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b089      	sub	sp, #36	; 0x24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d44:	7ffb      	ldrb	r3, [r7, #31]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d003      	beq.n	8000d52 <HAL_CAN_AddTxMessage+0x2c>
 8000d4a:	7ffb      	ldrb	r3, [r7, #31]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	f040 80b8 	bne.w	8000ec2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10a      	bne.n	8000d72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 80a0 	beq.w	8000eb2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	0e1b      	lsrs	r3, r3, #24
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d907      	bls.n	8000d92 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e09e      	b.n	8000ed0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d92:	2201      	movs	r2, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10d      	bne.n	8000dc0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	6809      	ldr	r1, [r1, #0]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3318      	adds	r3, #24
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	440b      	add	r3, r1
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e00f      	b.n	8000de0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dd0:	68f9      	ldr	r1, [r7, #12]
 8000dd2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000dd4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3318      	adds	r3, #24
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	440b      	add	r3, r1
 8000dde:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	3318      	adds	r3, #24
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	440b      	add	r3, r1
 8000df0:	3304      	adds	r3, #4
 8000df2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	7d1b      	ldrb	r3, [r3, #20]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d111      	bne.n	8000e20 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3318      	adds	r3, #24
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	4413      	add	r3, r2
 8000e08:	3304      	adds	r3, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	6811      	ldr	r1, [r2, #0]
 8000e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3318      	adds	r3, #24
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3307      	adds	r3, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	061a      	lsls	r2, r3, #24
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3306      	adds	r3, #6
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	041b      	lsls	r3, r3, #16
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3305      	adds	r3, #5
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	3204      	adds	r2, #4
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	4610      	mov	r0, r2
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	6811      	ldr	r1, [r2, #0]
 8000e48:	ea43 0200 	orr.w	r2, r3, r0
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	011b      	lsls	r3, r3, #4
 8000e50:	440b      	add	r3, r1
 8000e52:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3303      	adds	r3, #3
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	061a      	lsls	r2, r3, #24
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3302      	adds	r3, #2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	4313      	orrs	r3, r2
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	7812      	ldrb	r2, [r2, #0]
 8000e78:	4610      	mov	r0, r2
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	6811      	ldr	r1, [r2, #0]
 8000e7e:	ea43 0200 	orr.w	r2, r3, r0
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	440b      	add	r3, r1
 8000e88:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000e8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3318      	adds	r3, #24
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	6811      	ldr	r1, [r2, #0]
 8000ea0:	f043 0201 	orr.w	r2, r3, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3318      	adds	r3, #24
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	440b      	add	r3, r1
 8000eac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e00e      	b.n	8000ed0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e006      	b.n	8000ed0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
  }
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3724      	adds	r7, #36	; 0x24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d003      	beq.n	8000f00 <HAL_CAN_GetRxMessage+0x24>
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	f040 80f3 	bne.w	80010e6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10e      	bne.n	8000f24 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d116      	bne.n	8000f42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e0e7      	b.n	80010f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d107      	bne.n	8000f42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0d8      	b.n	80010f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	331b      	adds	r3, #27
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0204 	and.w	r2, r3, #4
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10c      	bne.n	8000f7a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	331b      	adds	r3, #27
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	4413      	add	r3, r2
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	0d5b      	lsrs	r3, r3, #21
 8000f70:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e00b      	b.n	8000f92 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	331b      	adds	r3, #27
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	4413      	add	r3, r2
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	331b      	adds	r3, #27
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0202 	and.w	r2, r3, #2
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	331b      	adds	r3, #27
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 020f 	and.w	r2, r3, #15
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	331b      	adds	r3, #27
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	4413      	add	r3, r2
 8000fcc:	3304      	adds	r3, #4
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	331b      	adds	r3, #27
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0c1b      	lsrs	r3, r3, #16
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	4413      	add	r3, r2
 8001010:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	0a1a      	lsrs	r2, r3, #8
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0c1a      	lsrs	r2, r3, #16
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3302      	adds	r3, #2
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	4413      	add	r3, r2
 8001044:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	0e1a      	lsrs	r2, r3, #24
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	3303      	adds	r3, #3
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3304      	adds	r3, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0a1a      	lsrs	r2, r3, #8
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	3305      	adds	r3, #5
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	0c1a      	lsrs	r2, r3, #16
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3306      	adds	r3, #6
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4413      	add	r3, r2
 80010aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0e1a      	lsrs	r2, r3, #24
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	3307      	adds	r3, #7
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d108      	bne.n	80010d2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0220 	orr.w	r2, r2, #32
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	e007      	b.n	80010e2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0220 	orr.w	r2, r2, #32
 80010e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e006      	b.n	80010f4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
  }
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001110:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d002      	beq.n	800111e <HAL_CAN_ActivateNotification+0x1e>
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d109      	bne.n	8001132 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6959      	ldr	r1, [r3, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e006      	b.n	8001140 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
  }
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d07c      	beq.n	800128c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d023      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2201      	movs	r2, #1
 80011a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f983 	bl	80014ba <HAL_CAN_TxMailbox0CompleteCallback>
 80011b4:	e016      	b.n	80011e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
 80011c8:	e00c      	b.n	80011e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
 80011dc:	e002      	b.n	80011e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f989 	bl	80014f6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d024      	beq.n	8001238 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f963 	bl	80014ce <HAL_CAN_TxMailbox1CompleteCallback>
 8001208:	e016      	b.n	8001238 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
 800121c:	e00c      	b.n	8001238 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001224:	2b00      	cmp	r3, #0
 8001226:	d004      	beq.n	8001232 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
 8001230:	e002      	b.n	8001238 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f969 	bl	800150a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d024      	beq.n	800128c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800124a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f943 	bl	80014e2 <HAL_CAN_TxMailbox2CompleteCallback>
 800125c:	e016      	b.n	800128c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
 8001270:	e00c      	b.n	800128c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
 8001284:	e002      	b.n	800128c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f949 	bl	800151e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00c      	beq.n	80012b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2210      	movs	r2, #16
 80012ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2208      	movs	r2, #8
 80012ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f930 	bl	8001532 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff f898 	bl	8000420 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00c      	beq.n	8001314 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2210      	movs	r2, #16
 8001312:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00b      	beq.n	8001336 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2208      	movs	r2, #8
 800132e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f912 	bl	800155a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	d009      	beq.n	8001354 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f8f9 	bl	8001546 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2210      	movs	r2, #16
 800136e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f8fc 	bl	800156e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2208      	movs	r2, #8
 8001390:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f8f5 	bl	8001582 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d07b      	beq.n	800149a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d072      	beq.n	8001492 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d008      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d008      	beq.n	80013e4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d008      	beq.n	8001400 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001406:	2b00      	cmp	r3, #0
 8001408:	d043      	beq.n	8001492 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001410:	2b00      	cmp	r3, #0
 8001412:	d03e      	beq.n	8001492 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800141a:	2b60      	cmp	r3, #96	; 0x60
 800141c:	d02b      	beq.n	8001476 <HAL_CAN_IRQHandler+0x32a>
 800141e:	2b60      	cmp	r3, #96	; 0x60
 8001420:	d82e      	bhi.n	8001480 <HAL_CAN_IRQHandler+0x334>
 8001422:	2b50      	cmp	r3, #80	; 0x50
 8001424:	d022      	beq.n	800146c <HAL_CAN_IRQHandler+0x320>
 8001426:	2b50      	cmp	r3, #80	; 0x50
 8001428:	d82a      	bhi.n	8001480 <HAL_CAN_IRQHandler+0x334>
 800142a:	2b40      	cmp	r3, #64	; 0x40
 800142c:	d019      	beq.n	8001462 <HAL_CAN_IRQHandler+0x316>
 800142e:	2b40      	cmp	r3, #64	; 0x40
 8001430:	d826      	bhi.n	8001480 <HAL_CAN_IRQHandler+0x334>
 8001432:	2b30      	cmp	r3, #48	; 0x30
 8001434:	d010      	beq.n	8001458 <HAL_CAN_IRQHandler+0x30c>
 8001436:	2b30      	cmp	r3, #48	; 0x30
 8001438:	d822      	bhi.n	8001480 <HAL_CAN_IRQHandler+0x334>
 800143a:	2b10      	cmp	r3, #16
 800143c:	d002      	beq.n	8001444 <HAL_CAN_IRQHandler+0x2f8>
 800143e:	2b20      	cmp	r3, #32
 8001440:	d005      	beq.n	800144e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001442:	e01d      	b.n	8001480 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800144c:	e019      	b.n	8001482 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001456:	e014      	b.n	8001482 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001460:	e00f      	b.n	8001482 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800146a:	e00a      	b.n	8001482 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001474:	e005      	b.n	8001482 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800147e:	e000      	b.n	8001482 <HAL_CAN_IRQHandler+0x336>
            break;
 8001480:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001490:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2204      	movs	r2, #4
 8001498:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f872 	bl	8001596 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015de:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	60d3      	str	r3, [r2, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db0b      	blt.n	800163a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	f003 021f 	and.w	r2, r3, #31
 8001628:	4907      	ldr	r1, [pc, #28]	; (8001648 <__NVIC_EnableIRQ+0x38>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	2001      	movs	r0, #1
 8001632:	fa00 f202 	lsl.w	r2, r0, r2
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff8e 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff29 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff3e 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff8e 	bl	80016a0 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5d 	bl	800164c <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff31 	bl	8001610 <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffa2 	bl	8001708 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	e160      	b.n	8001aa2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8152 	beq.w	8001a9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d005      	beq.n	8001810 <HAL_GPIO_Init+0x40>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d130      	bne.n	8001872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001846:	2201      	movs	r2, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 0201 	and.w	r2, r3, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b03      	cmp	r3, #3
 800187c:	d017      	beq.n	80018ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d123      	bne.n	8001902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	6939      	ldr	r1, [r7, #16]
 80018fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0203 	and.w	r2, r3, #3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80ac 	beq.w	8001a9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001944:	4b5e      	ldr	r3, [pc, #376]	; (8001ac0 <HAL_GPIO_Init+0x2f0>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a5d      	ldr	r2, [pc, #372]	; (8001ac0 <HAL_GPIO_Init+0x2f0>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b5b      	ldr	r3, [pc, #364]	; (8001ac0 <HAL_GPIO_Init+0x2f0>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800195c:	4a59      	ldr	r2, [pc, #356]	; (8001ac4 <HAL_GPIO_Init+0x2f4>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001986:	d025      	beq.n	80019d4 <HAL_GPIO_Init+0x204>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4f      	ldr	r2, [pc, #316]	; (8001ac8 <HAL_GPIO_Init+0x2f8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d01f      	beq.n	80019d0 <HAL_GPIO_Init+0x200>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4e      	ldr	r2, [pc, #312]	; (8001acc <HAL_GPIO_Init+0x2fc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d019      	beq.n	80019cc <HAL_GPIO_Init+0x1fc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4d      	ldr	r2, [pc, #308]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_GPIO_Init+0x1f8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x304>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00d      	beq.n	80019c4 <HAL_GPIO_Init+0x1f4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_GPIO_Init+0x308>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <HAL_GPIO_Init+0x1f0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x30c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_GPIO_Init+0x1ec>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e00c      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019bc:	2307      	movs	r3, #7
 80019be:	e00a      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c0:	2305      	movs	r3, #5
 80019c2:	e008      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c4:	2304      	movs	r3, #4
 80019c6:	e006      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c8:	2303      	movs	r3, #3
 80019ca:	e004      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_GPIO_Init+0x206>
 80019d4:	2300      	movs	r3, #0
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	f002 0203 	and.w	r2, r2, #3
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	4093      	lsls	r3, r2
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e6:	4937      	ldr	r1, [pc, #220]	; (8001ac4 <HAL_GPIO_Init+0x2f4>)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f4:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a18:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a1e:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a42:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f47f ae97 	bne.w	80017e0 <HAL_GPIO_Init+0x10>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	48000800 	.word	0x48000800
 8001ad0:	48000c00 	.word	0x48000c00
 8001ad4:	48001000 	.word	0x48001000
 8001ad8:	48001400 	.word	0x48001400
 8001adc:	48001800 	.word	0x48001800
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43d9      	mvns	r1, r3
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	400b      	ands	r3, r1
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fd3e 	bl	80005e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f000 bf01 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8160 	beq.w	8001e62 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ba2:	4bae      	ldr	r3, [pc, #696]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d00c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bae:	4bab      	ldr	r3, [pc, #684]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d159      	bne.n	8001c6e <HAL_RCC_OscConfig+0xf6>
 8001bba:	4ba8      	ldr	r3, [pc, #672]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d152      	bne.n	8001c6e <HAL_RCC_OscConfig+0xf6>
 8001bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bcc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bdc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_OscConfig+0x82>
 8001bf4:	4b99      	ldr	r3, [pc, #612]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	e015      	b.n	8001c26 <HAL_RCC_OscConfig+0xae>
 8001bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c12:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c16:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c22:	4b8e      	ldr	r3, [pc, #568]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c2a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c2e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c32:	fa92 f2a2 	rbit	r2, r2
 8001c36:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c3a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c3e:	fab2 f282 	clz	r2, r2
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f042 0220 	orr.w	r2, r2, #32
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	f002 021f 	and.w	r2, r2, #31
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8102 	beq.w	8001e60 <HAL_RCC_OscConfig+0x2e8>
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 80fc 	bne.w	8001e60 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f000 be93 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c78:	d106      	bne.n	8001c88 <HAL_RCC_OscConfig+0x110>
 8001c7a:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a77      	ldr	r2, [pc, #476]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e030      	b.n	8001cea <HAL_RCC_OscConfig+0x172>
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x134>
 8001c92:	4b72      	ldr	r3, [pc, #456]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a71      	ldr	r2, [pc, #452]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01e      	b.n	8001cea <HAL_RCC_OscConfig+0x172>
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x15a>
 8001cb8:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a67      	ldr	r2, [pc, #412]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a64      	ldr	r2, [pc, #400]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x172>
 8001cd2:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a61      	ldr	r2, [pc, #388]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d059      	beq.n	8001da8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fe02 	bl	80008fc <HAL_GetTick>
 8001cf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfe:	f7fe fdfd 	bl	80008fc <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d902      	bls.n	8001d14 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	f000 be40 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
 8001d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d18:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001d28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x1ce>
 8001d40:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	e015      	b.n	8001d72 <HAL_RCC_OscConfig+0x1fa>
 8001d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d62:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d76:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d7a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d7e:	fa92 f2a2 	rbit	r2, r2
 8001d82:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d8a:	fab2 f282 	clz	r2, r2
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	f042 0220 	orr.w	r2, r2, #32
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f002 021f 	and.w	r2, r2, #31
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ab      	beq.n	8001cfe <HAL_RCC_OscConfig+0x186>
 8001da6:	e05c      	b.n	8001e62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7fe fda8 	bl	80008fc <HAL_GetTick>
 8001dac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db2:	f7fe fda3 	bl	80008fc <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d902      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	f000 bde6 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ddc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0x282>
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x2ae>
 8001dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e2a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e2e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e32:	fa92 f2a2 	rbit	r2, r2
 8001e36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001e3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e3e:	fab2 f282 	clz	r2, r2
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f042 0220 	orr.w	r2, r2, #32
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f002 021f 	and.w	r2, r2, #31
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ab      	bne.n	8001db2 <HAL_RCC_OscConfig+0x23a>
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_OscConfig+0x2ea>
 8001e5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8170 	beq.w	8002152 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e72:	4bd0      	ldr	r3, [pc, #832]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e7e:	4bcd      	ldr	r3, [pc, #820]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d16d      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3ee>
 8001e8a:	4bca      	ldr	r3, [pc, #808]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e96:	d166      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3ee>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001eaa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d102      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x350>
 8001ec2:	4bbc      	ldr	r3, [pc, #752]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0x378>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ee0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001eec:	4bb1      	ldr	r3, [pc, #708]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ef6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001efa:	fa92 f2a2 	rbit	r2, r2
 8001efe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f06:	fab2 f282 	clz	r2, r2
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f042 0220 	orr.w	r2, r2, #32
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	f002 021f 	and.w	r2, r2, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3ba>
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d002      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f000 bd31 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4ba0      	ldr	r3, [pc, #640]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	21f8      	movs	r1, #248	; 0xf8
 8001f42:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f4a:	fa91 f1a1 	rbit	r1, r1
 8001f4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001f52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f56:	fab1 f181 	clz	r1, r1
 8001f5a:	b2c9      	uxtb	r1, r1
 8001f5c:	408b      	lsls	r3, r1
 8001f5e:	4995      	ldr	r1, [pc, #596]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f64:	e0f5      	b.n	8002152 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8085 	beq.w	800207c <HAL_RCC_OscConfig+0x504>
 8001f72:	2301      	movs	r3, #1
 8001f74:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001f84:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fcad 	bl	80008fc <HAL_GetTick>
 8001fa2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa8:	f7fe fca8 	bl	80008fc <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d902      	bls.n	8001fbe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f000 bceb 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001fd0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_OscConfig+0x476>
 8001fe8:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	e013      	b.n	8002016 <HAL_RCC_OscConfig+0x49e>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002000:	2302      	movs	r3, #2
 8002002:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002006:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002012:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2202      	movs	r2, #2
 8002018:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800201c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002020:	fa92 f2a2 	rbit	r2, r2
 8002024:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002028:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800202c:	fab2 f282 	clz	r2, r2
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	f042 0220 	orr.w	r2, r2, #32
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	f002 021f 	and.w	r2, r2, #31
 800203c:	2101      	movs	r1, #1
 800203e:	fa01 f202 	lsl.w	r2, r1, r2
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0af      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	21f8      	movs	r1, #248	; 0xf8
 8002058:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002060:	fa91 f1a1 	rbit	r1, r1
 8002064:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002068:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800206c:	fab1 f181 	clz	r1, r1
 8002070:	b2c9      	uxtb	r1, r1
 8002072:	408b      	lsls	r3, r1
 8002074:	494f      	ldr	r1, [pc, #316]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
 800207a:	e06a      	b.n	8002152 <HAL_RCC_OscConfig+0x5da>
 800207c:	2301      	movs	r3, #1
 800207e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800208e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800209c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	461a      	mov	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe fc28 	bl	80008fc <HAL_GetTick>
 80020ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b2:	f7fe fc23 	bl	80008fc <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d902      	bls.n	80020c8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	f000 bc66 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
 80020c8:	2302      	movs	r3, #2
 80020ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80020da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_OscConfig+0x580>
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e013      	b.n	8002120 <HAL_RCC_OscConfig+0x5a8>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002110:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	2202      	movs	r2, #2
 8002122:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002126:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800212a:	fa92 f2a2 	rbit	r2, r2
 800212e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002132:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002136:	fab2 f282 	clz	r2, r2
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	f002 021f 	and.w	r2, r2, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f202 	lsl.w	r2, r1, r2
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1af      	bne.n	80020b2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80da 	beq.w	8002316 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d069      	beq.n	8002240 <HAL_RCC_OscConfig+0x6c8>
 800216c:	2301      	movs	r3, #1
 800216e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800217e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x640>)
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	461a      	mov	r2, r3
 8002192:	2301      	movs	r3, #1
 8002194:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe fbb1 	bl	80008fc <HAL_GetTick>
 800219a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	e00d      	b.n	80021bc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fbac 	bl	80008fc <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d905      	bls.n	80021bc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e3ef      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 80021b4:	40021000 	.word	0x40021000
 80021b8:	10908120 	.word	0x10908120
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021d4:	2202      	movs	r2, #2
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021ec:	2202      	movs	r2, #2
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002200:	4ba4      	ldr	r3, [pc, #656]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002204:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002208:	2102      	movs	r1, #2
 800220a:	6019      	str	r1, [r3, #0]
 800220c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f1a3 	rbit	r1, r3
 8002216:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800221a:	6019      	str	r1, [r3, #0]
  return result;
 800221c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	2101      	movs	r1, #1
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0b0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x628>
 800223e:	e06a      	b.n	8002316 <HAL_RCC_OscConfig+0x79e>
 8002240:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002256:	601a      	str	r2, [r3, #0]
  return result;
 8002258:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800225c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x920>)
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	461a      	mov	r2, r3
 800226e:	2300      	movs	r3, #0
 8002270:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7fe fb43 	bl	80008fc <HAL_GetTick>
 8002276:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227a:	e009      	b.n	8002290 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227c:	f7fe fb3e 	bl	80008fc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e381      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 8002290:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022ac:	2202      	movs	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022c4:	2202      	movs	r2, #2
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	4b6e      	ldr	r3, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80022da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022e0:	2102      	movs	r1, #2
 80022e2:	6019      	str	r1, [r3, #0]
 80022e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f1a3 	rbit	r1, r3
 80022ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022f2:	6019      	str	r1, [r3, #0]
  return result;
 80022f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1b2      	bne.n	800227c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8157 	beq.w	80025d4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d112      	bne.n	800235e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	4b56      	ldr	r3, [pc, #344]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	4a55      	ldr	r2, [pc, #340]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002342:	61d3      	str	r3, [r2, #28]
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b4f      	ldr	r3, [pc, #316]	; (800249c <HAL_RCC_OscConfig+0x924>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11a      	bne.n	80023a0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_RCC_OscConfig+0x924>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_RCC_OscConfig+0x924>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7fe fac1 	bl	80008fc <HAL_GetTick>
 800237a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	e009      	b.n	8002394 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002380:	f7fe fabc 	bl	80008fc <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e2ff      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_OscConfig+0x924>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ef      	beq.n	8002380 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d106      	bne.n	80023b8 <HAL_RCC_OscConfig+0x840>
 80023aa:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a39      	ldr	r2, [pc, #228]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	e02f      	b.n	8002418 <HAL_RCC_OscConfig+0x8a0>
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x864>
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a33      	ldr	r2, [pc, #204]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a30      	ldr	r2, [pc, #192]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0x8a0>
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x888>
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a2a      	ldr	r2, [pc, #168]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a27      	ldr	r2, [pc, #156]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x8a0>
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a23      	ldr	r2, [pc, #140]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a20      	ldr	r2, [pc, #128]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002412:	f023 0304 	bic.w	r3, r3, #4
 8002416:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d06a      	beq.n	80024f8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7fe fa6b 	bl	80008fc <HAL_GetTick>
 8002426:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7fe fa66 	bl	80008fc <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e2a7      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 8002444:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002448:	2202      	movs	r2, #2
 800244a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002460:	2202      	movs	r2, #2
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002472:	601a      	str	r2, [r3, #0]
  return result;
 8002474:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002478:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_OscConfig+0x928>
 800248e:	4b01      	ldr	r3, [pc, #4]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	e013      	b.n	80024bc <HAL_RCC_OscConfig+0x944>
 8002494:	40021000 	.word	0x40021000
 8002498:	10908120 	.word	0x10908120
 800249c:	40007000 	.word	0x40007000
 80024a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024a4:	2202      	movs	r2, #2
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	4bc0      	ldr	r3, [pc, #768]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024c0:	2102      	movs	r1, #2
 80024c2:	6011      	str	r1, [r2, #0]
 80024c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	fa92 f1a2 	rbit	r1, r2
 80024ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024d2:	6011      	str	r1, [r2, #0]
  return result;
 80024d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	fab2 f282 	clz	r2, r2
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	f002 021f 	and.w	r2, r2, #31
 80024ea:	2101      	movs	r1, #1
 80024ec:	fa01 f202 	lsl.w	r2, r1, r2
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d09a      	beq.n	800242c <HAL_RCC_OscConfig+0x8b4>
 80024f6:	e063      	b.n	80025c0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7fe fa00 	bl	80008fc <HAL_GetTick>
 80024fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe f9fb 	bl	80008fc <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e23c      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 800251a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002536:	2202      	movs	r2, #2
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002548:	601a      	str	r2, [r3, #0]
  return result;
 800254a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800254e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d102      	bne.n	800256a <HAL_RCC_OscConfig+0x9f2>
 8002564:	4b95      	ldr	r3, [pc, #596]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	e00d      	b.n	8002586 <HAL_RCC_OscConfig+0xa0e>
 800256a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800256e:	2202      	movs	r2, #2
 8002570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	4b8e      	ldr	r3, [pc, #568]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800258a:	2102      	movs	r1, #2
 800258c:	6011      	str	r1, [r2, #0]
 800258e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	fa92 f1a2 	rbit	r1, r2
 8002598:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800259c:	6011      	str	r1, [r2, #0]
  return result;
 800259e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	fab2 f282 	clz	r2, r2
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f002 021f 	and.w	r2, r2, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1a0      	bne.n	8002502 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025c0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c8:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4a7b      	ldr	r2, [pc, #492]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80025ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 81d9 	beq.w	8002992 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	f000 81a6 	beq.w	800293a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	f040 811e 	bne.w	8002836 <HAL_RCC_OscConfig+0xcbe>
 80025fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002612:	601a      	str	r2, [r3, #0]
  return result;
 8002614:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002618:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002624:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	461a      	mov	r2, r3
 800262c:	2300      	movs	r3, #0
 800262e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe f964 	bl	80008fc <HAL_GetTick>
 8002634:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	e009      	b.n	800264e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe f95f 	bl	80008fc <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1a2      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 800264e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fa93 f2a3 	rbit	r2, r3
 8002662:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002666:	601a      	str	r2, [r3, #0]
  return result;
 8002668:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800266c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d102      	bne.n	8002688 <HAL_RCC_OscConfig+0xb10>
 8002682:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	e01b      	b.n	80026c0 <HAL_RCC_OscConfig+0xb48>
 8002688:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800268c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	fa93 f2a3 	rbit	r2, r3
 80026b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026c8:	6011      	str	r1, [r2, #0]
 80026ca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	fa92 f1a2 	rbit	r1, r2
 80026d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026d8:	6011      	str	r1, [r2, #0]
  return result;
 80026da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f042 0220 	orr.w	r2, r2, #32
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f002 021f 	and.w	r2, r2, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d19e      	bne.n	800263a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f023 020f 	bic.w	r2, r3, #15
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	492c      	ldr	r1, [pc, #176]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 800270c:	4313      	orrs	r3, r2
 800270e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a19      	ldr	r1, [r3, #32]
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	430b      	orrs	r3, r1
 8002726:	4925      	ldr	r1, [pc, #148]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002744:	601a      	str	r2, [r3, #0]
  return result;
 8002746:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800274a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002756:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	461a      	mov	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe f8cb 	bl	80008fc <HAL_GetTick>
 8002766:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276a:	e009      	b.n	8002780 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe f8c6 	bl	80008fc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e109      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 8002780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002784:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fa93 f2a3 	rbit	r2, r3
 8002794:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002798:	601a      	str	r2, [r3, #0]
  return result;
 800279a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800279e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <HAL_RCC_OscConfig+0xc48>
 80027b4:	4b01      	ldr	r3, [pc, #4]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e01e      	b.n	80027f8 <HAL_RCC_OscConfig+0xc80>
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	fa93 f2a3 	rbit	r2, r3
 80027d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002800:	6011      	str	r1, [r2, #0]
 8002802:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	fa92 f1a2 	rbit	r1, r2
 800280c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002810:	6011      	str	r1, [r2, #0]
  return result;
 8002812:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d09b      	beq.n	800276c <HAL_RCC_OscConfig+0xbf4>
 8002834:	e0ad      	b.n	8002992 <HAL_RCC_OscConfig+0xe1a>
 8002836:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800283a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800283e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800284e:	601a      	str	r2, [r3, #0]
  return result;
 8002850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002854:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002860:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	461a      	mov	r2, r3
 8002868:	2300      	movs	r3, #0
 800286a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe f846 	bl	80008fc <HAL_GetTick>
 8002870:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002874:	e009      	b.n	800288a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe f841 	bl	80008fc <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e084      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 800288a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	fa93 f2a3 	rbit	r2, r3
 800289e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028a2:	601a      	str	r2, [r3, #0]
  return result;
 80028a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0xd4c>
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	e01b      	b.n	80028fc <HAL_RCC_OscConfig+0xd84>
 80028c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f107 0320 	add.w	r3, r7, #32
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f107 0318 	add.w	r3, r7, #24
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f107 0214 	add.w	r2, r7, #20
 8002900:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	f107 0214 	add.w	r2, r7, #20
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	fa92 f1a2 	rbit	r1, r2
 8002910:	f107 0210 	add.w	r2, r7, #16
 8002914:	6011      	str	r1, [r2, #0]
  return result;
 8002916:	f107 0210 	add.w	r2, r7, #16
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d19e      	bne.n	8002876 <HAL_RCC_OscConfig+0xcfe>
 8002938:	e02b      	b.n	8002992 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e025      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002958:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800295c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	429a      	cmp	r2, r3
 8002968:	d111      	bne.n	800298e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800296a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800296e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002978:	429a      	cmp	r2, r3
 800297a:	d108      	bne.n	800298e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800297c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002980:	f003 020f 	and.w	r2, r3, #15
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b09e      	sub	sp, #120	; 0x78
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e162      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b90      	ldr	r3, [pc, #576]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b8d      	ldr	r3, [pc, #564]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	498b      	ldr	r1, [pc, #556]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e14a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	497f      	ldr	r1, [pc, #508]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80dc 	beq.w	8002bd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d13c      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xf6>
 8002a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xa6>
 8002a44:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e00f      	b.n	8002a6a <HAL_RCC_ClockConfig+0xc6>
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a66:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f002 021f 	and.w	r2, r2, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d17b      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0f3      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d13c      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x178>
 8002aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_ClockConfig+0x128>
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e00f      	b.n	8002aec <HAL_RCC_ClockConfig+0x148>
 8002acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f042 0220 	orr.w	r2, r2, #32
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f002 021f 	and.w	r2, r2, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d13a      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b2      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1a0>
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e00d      	b.n	8002b60 <HAL_RCC_ClockConfig+0x1bc>
 8002b44:	2302      	movs	r3, #2
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	2302      	movs	r3, #2
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2202      	movs	r2, #2
 8002b62:	61ba      	str	r2, [r7, #24]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	fa92 f2a2 	rbit	r2, r2
 8002b6a:	617a      	str	r2, [r7, #20]
  return result;
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f002 021f 	and.w	r2, r2, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e079      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	491a      	ldr	r1, [pc, #104]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7fd feac 	bl	80008fc <HAL_GetTick>
 8002ba4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fd fea8 	bl	80008fc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e061      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d214      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	4906      	ldr	r1, [pc, #24]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e040      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
 8002c00:	40022000 	.word	0x40022000
 8002c04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	491a      	ldr	r1, [pc, #104]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4912      	ldr	r1, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c46:	f000 f829 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	fa92 f2a2 	rbit	r2, r2
 8002c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	40d3      	lsrs	r3, r2
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x2ec>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_RCC_ClockConfig+0x2f0>)
 8002c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_RCC_ClockConfig+0x2f4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fdfa 	bl	8000874 <HAL_InitTick>
  
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3778      	adds	r7, #120	; 0x78
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08003a84 	.word	0x08003a84
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b08b      	sub	sp, #44	; 0x2c
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x30>
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cca:	e03f      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cce:	623b      	str	r3, [r7, #32]
      break;
 8002cd0:	e03f      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cd8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cdc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	fa92 f2a2 	rbit	r2, r2
 8002ce4:	607a      	str	r2, [r7, #4]
  return result;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	fab2 f282 	clz	r2, r2
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	40d3      	lsrs	r3, r2
 8002cf0:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	220f      	movs	r2, #15
 8002d00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	60fa      	str	r2, [r7, #12]
  return result;
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	40d3      	lsrs	r3, r2
 8002d14:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d24:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e007      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	623b      	str	r3, [r7, #32]
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d4e:	623b      	str	r3, [r7, #32]
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	372c      	adds	r7, #44	; 0x2c
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	08003a9c 	.word	0x08003a9c
 8002d6c:	08003aac 	.word	0x08003aac

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d8e:	f7ff ffef 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d92:	4601      	mov	r1, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002da0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	fa92 f2a2 	rbit	r2, r2
 8002da8:	603a      	str	r2, [r7, #0]
  return result;
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	fab2 f282 	clz	r2, r2
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	40d3      	lsrs	r3, r2
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08003a94 	.word	0x08003a94

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dd2:	f7ff ffcd 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002de0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002de4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	fa92 f2a2 	rbit	r2, r2
 8002dec:	603a      	str	r2, [r7, #0]
  return result;
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	40d3      	lsrs	r3, r2
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08003a94 	.word	0x08003a94

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b092      	sub	sp, #72	; 0x48
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80d4 	beq.w	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e34:	4b4e      	ldr	r3, [pc, #312]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10e      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e40:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	4a4a      	ldr	r2, [pc, #296]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	61d3      	str	r3, [r2, #28]
 8002e4c:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a41      	ldr	r2, [pc, #260]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fd fd41 	bl	80008fc <HAL_GetTick>
 8002e7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fd fd3d 	bl	80008fc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1d6      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e9c:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8084 	beq.w	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d07c      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ebc:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f0e:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f12:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d04b      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fd fced 	bl	80008fc <HAL_GetTick>
 8002f22:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fd fce9 	bl	80008fc <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e180      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	2302      	movs	r3, #2
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	61fb      	str	r3, [r7, #28]
  return result;
 8002f54:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d108      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f6a:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	e00d      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40007000 	.word	0x40007000
 8002f78:	10908100 	.word	0x10908100
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	4ba0      	ldr	r3, [pc, #640]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	613a      	str	r2, [r7, #16]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	60fa      	str	r2, [r7, #12]
  return result;
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f002 021f 	and.w	r2, r2, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0b7      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002fb6:	4b95      	ldr	r3, [pc, #596]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4992      	ldr	r1, [pc, #584]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b8e      	ldr	r3, [pc, #568]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4a8d      	ldr	r2, [pc, #564]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe8:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f023 0203 	bic.w	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4985      	ldr	r1, [pc, #532]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003006:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	497e      	ldr	r1, [pc, #504]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003024:	4b79      	ldr	r3, [pc, #484]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	4976      	ldr	r1, [pc, #472]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003042:	4b72      	ldr	r3, [pc, #456]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f023 0210 	bic.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	496f      	ldr	r1, [pc, #444]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003060:	4b6a      	ldr	r3, [pc, #424]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	4967      	ldr	r1, [pc, #412]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f023 0220 	bic.w	r2, r3, #32
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4960      	ldr	r1, [pc, #384]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800309c:	4b5b      	ldr	r3, [pc, #364]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	4958      	ldr	r1, [pc, #352]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030ba:	4b54      	ldr	r3, [pc, #336]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	4951      	ldr	r1, [pc, #324]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030d8:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4949      	ldr	r1, [pc, #292]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030f6:	4b45      	ldr	r3, [pc, #276]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4942      	ldr	r1, [pc, #264]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003114:	4b3d      	ldr	r3, [pc, #244]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	493a      	ldr	r1, [pc, #232]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	4933      	ldr	r1, [pc, #204]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	492b      	ldr	r1, [pc, #172]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800316e:	4b27      	ldr	r3, [pc, #156]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4924      	ldr	r1, [pc, #144]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800318c:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	491c      	ldr	r1, [pc, #112]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	4915      	ldr	r1, [pc, #84]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	490d      	ldr	r1, [pc, #52]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f2:	4906      	ldr	r1, [pc, #24]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003218:	490b      	ldr	r1, [pc, #44]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800321a:	4313      	orrs	r3, r2
 800321c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003236:	4904      	ldr	r1, [pc, #16]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003238:	4313      	orrs	r3, r2
 800323a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3748      	adds	r7, #72	; 0x48
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e040      	b.n	80032e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fa7c 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f82c 	bl	80032e8 <UART_SetConfig>
 8003290:	4603      	mov	r3, r0
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e022      	b.n	80032e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f9f6 	bl	8003694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa7d 	bl	80037d8 <UART_CheckIdleState>
 80032de:	4603      	mov	r3, r0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4bab      	ldr	r3, [pc, #684]	; (80035c0 <UART_SetConfig+0x2d8>)
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6979      	ldr	r1, [r7, #20]
 800331c:	430b      	orrs	r3, r1
 800331e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a99      	ldr	r2, [pc, #612]	; (80035c4 <UART_SetConfig+0x2dc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d120      	bne.n	80033a6 <UART_SetConfig+0xbe>
 8003364:	4b98      	ldr	r3, [pc, #608]	; (80035c8 <UART_SetConfig+0x2e0>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b03      	cmp	r3, #3
 800336e:	d817      	bhi.n	80033a0 <UART_SetConfig+0xb8>
 8003370:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <UART_SetConfig+0x90>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	08003389 	.word	0x08003389
 800337c:	08003395 	.word	0x08003395
 8003380:	0800339b 	.word	0x0800339b
 8003384:	0800338f 	.word	0x0800338f
 8003388:	2301      	movs	r3, #1
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e0b5      	b.n	80034fa <UART_SetConfig+0x212>
 800338e:	2302      	movs	r3, #2
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e0b2      	b.n	80034fa <UART_SetConfig+0x212>
 8003394:	2304      	movs	r3, #4
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e0af      	b.n	80034fa <UART_SetConfig+0x212>
 800339a:	2308      	movs	r3, #8
 800339c:	77fb      	strb	r3, [r7, #31]
 800339e:	e0ac      	b.n	80034fa <UART_SetConfig+0x212>
 80033a0:	2310      	movs	r3, #16
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e0a9      	b.n	80034fa <UART_SetConfig+0x212>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a88      	ldr	r2, [pc, #544]	; (80035cc <UART_SetConfig+0x2e4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d124      	bne.n	80033fa <UART_SetConfig+0x112>
 80033b0:	4b85      	ldr	r3, [pc, #532]	; (80035c8 <UART_SetConfig+0x2e0>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033bc:	d011      	beq.n	80033e2 <UART_SetConfig+0xfa>
 80033be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033c2:	d817      	bhi.n	80033f4 <UART_SetConfig+0x10c>
 80033c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c8:	d011      	beq.n	80033ee <UART_SetConfig+0x106>
 80033ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ce:	d811      	bhi.n	80033f4 <UART_SetConfig+0x10c>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <UART_SetConfig+0xf4>
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d006      	beq.n	80033e8 <UART_SetConfig+0x100>
 80033da:	e00b      	b.n	80033f4 <UART_SetConfig+0x10c>
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e08b      	b.n	80034fa <UART_SetConfig+0x212>
 80033e2:	2302      	movs	r3, #2
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e088      	b.n	80034fa <UART_SetConfig+0x212>
 80033e8:	2304      	movs	r3, #4
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e085      	b.n	80034fa <UART_SetConfig+0x212>
 80033ee:	2308      	movs	r3, #8
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e082      	b.n	80034fa <UART_SetConfig+0x212>
 80033f4:	2310      	movs	r3, #16
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e07f      	b.n	80034fa <UART_SetConfig+0x212>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a74      	ldr	r2, [pc, #464]	; (80035d0 <UART_SetConfig+0x2e8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d124      	bne.n	800344e <UART_SetConfig+0x166>
 8003404:	4b70      	ldr	r3, [pc, #448]	; (80035c8 <UART_SetConfig+0x2e0>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800340c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003410:	d011      	beq.n	8003436 <UART_SetConfig+0x14e>
 8003412:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003416:	d817      	bhi.n	8003448 <UART_SetConfig+0x160>
 8003418:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800341c:	d011      	beq.n	8003442 <UART_SetConfig+0x15a>
 800341e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003422:	d811      	bhi.n	8003448 <UART_SetConfig+0x160>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <UART_SetConfig+0x148>
 8003428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800342c:	d006      	beq.n	800343c <UART_SetConfig+0x154>
 800342e:	e00b      	b.n	8003448 <UART_SetConfig+0x160>
 8003430:	2300      	movs	r3, #0
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e061      	b.n	80034fa <UART_SetConfig+0x212>
 8003436:	2302      	movs	r3, #2
 8003438:	77fb      	strb	r3, [r7, #31]
 800343a:	e05e      	b.n	80034fa <UART_SetConfig+0x212>
 800343c:	2304      	movs	r3, #4
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e05b      	b.n	80034fa <UART_SetConfig+0x212>
 8003442:	2308      	movs	r3, #8
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e058      	b.n	80034fa <UART_SetConfig+0x212>
 8003448:	2310      	movs	r3, #16
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e055      	b.n	80034fa <UART_SetConfig+0x212>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a60      	ldr	r2, [pc, #384]	; (80035d4 <UART_SetConfig+0x2ec>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d124      	bne.n	80034a2 <UART_SetConfig+0x1ba>
 8003458:	4b5b      	ldr	r3, [pc, #364]	; (80035c8 <UART_SetConfig+0x2e0>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003460:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003464:	d011      	beq.n	800348a <UART_SetConfig+0x1a2>
 8003466:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800346a:	d817      	bhi.n	800349c <UART_SetConfig+0x1b4>
 800346c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003470:	d011      	beq.n	8003496 <UART_SetConfig+0x1ae>
 8003472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003476:	d811      	bhi.n	800349c <UART_SetConfig+0x1b4>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <UART_SetConfig+0x19c>
 800347c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003480:	d006      	beq.n	8003490 <UART_SetConfig+0x1a8>
 8003482:	e00b      	b.n	800349c <UART_SetConfig+0x1b4>
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e037      	b.n	80034fa <UART_SetConfig+0x212>
 800348a:	2302      	movs	r3, #2
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e034      	b.n	80034fa <UART_SetConfig+0x212>
 8003490:	2304      	movs	r3, #4
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e031      	b.n	80034fa <UART_SetConfig+0x212>
 8003496:	2308      	movs	r3, #8
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e02e      	b.n	80034fa <UART_SetConfig+0x212>
 800349c:	2310      	movs	r3, #16
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e02b      	b.n	80034fa <UART_SetConfig+0x212>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a4c      	ldr	r2, [pc, #304]	; (80035d8 <UART_SetConfig+0x2f0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d124      	bne.n	80034f6 <UART_SetConfig+0x20e>
 80034ac:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <UART_SetConfig+0x2e0>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80034b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034b8:	d011      	beq.n	80034de <UART_SetConfig+0x1f6>
 80034ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034be:	d817      	bhi.n	80034f0 <UART_SetConfig+0x208>
 80034c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034c4:	d011      	beq.n	80034ea <UART_SetConfig+0x202>
 80034c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ca:	d811      	bhi.n	80034f0 <UART_SetConfig+0x208>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <UART_SetConfig+0x1f0>
 80034d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d4:	d006      	beq.n	80034e4 <UART_SetConfig+0x1fc>
 80034d6:	e00b      	b.n	80034f0 <UART_SetConfig+0x208>
 80034d8:	2300      	movs	r3, #0
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e00d      	b.n	80034fa <UART_SetConfig+0x212>
 80034de:	2302      	movs	r3, #2
 80034e0:	77fb      	strb	r3, [r7, #31]
 80034e2:	e00a      	b.n	80034fa <UART_SetConfig+0x212>
 80034e4:	2304      	movs	r3, #4
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e007      	b.n	80034fa <UART_SetConfig+0x212>
 80034ea:	2308      	movs	r3, #8
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e004      	b.n	80034fa <UART_SetConfig+0x212>
 80034f0:	2310      	movs	r3, #16
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e001      	b.n	80034fa <UART_SetConfig+0x212>
 80034f6:	2310      	movs	r3, #16
 80034f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003502:	d16d      	bne.n	80035e0 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003504:	7ffb      	ldrb	r3, [r7, #31]
 8003506:	2b08      	cmp	r3, #8
 8003508:	d827      	bhi.n	800355a <UART_SetConfig+0x272>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0x228>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	08003535 	.word	0x08003535
 8003514:	0800353d 	.word	0x0800353d
 8003518:	08003545 	.word	0x08003545
 800351c:	0800355b 	.word	0x0800355b
 8003520:	0800354b 	.word	0x0800354b
 8003524:	0800355b 	.word	0x0800355b
 8003528:	0800355b 	.word	0x0800355b
 800352c:	0800355b 	.word	0x0800355b
 8003530:	08003553 	.word	0x08003553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003534:	f7ff fc28 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003538:	61b8      	str	r0, [r7, #24]
        break;
 800353a:	e013      	b.n	8003564 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800353c:	f7ff fc46 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8003540:	61b8      	str	r0, [r7, #24]
        break;
 8003542:	e00f      	b.n	8003564 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <UART_SetConfig+0x2f4>)
 8003546:	61bb      	str	r3, [r7, #24]
        break;
 8003548:	e00c      	b.n	8003564 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354a:	f7ff fba7 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 800354e:	61b8      	str	r0, [r7, #24]
        break;
 8003550:	e008      	b.n	8003564 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003556:	61bb      	str	r3, [r7, #24]
        break;
 8003558:	e004      	b.n	8003564 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	77bb      	strb	r3, [r7, #30]
        break;
 8003562:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8086 	beq.w	8003678 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	005a      	lsls	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	441a      	add	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	b29b      	uxth	r3, r3
 8003582:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	d916      	bls.n	80035b8 <UART_SetConfig+0x2d0>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d212      	bcs.n	80035b8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f023 030f 	bic.w	r3, r3, #15
 800359a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	89fb      	ldrh	r3, [r7, #14]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	89fa      	ldrh	r2, [r7, #14]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	e05f      	b.n	8003678 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	77bb      	strb	r3, [r7, #30]
 80035bc:	e05c      	b.n	8003678 <UART_SetConfig+0x390>
 80035be:	bf00      	nop
 80035c0:	efff69f3 	.word	0xefff69f3
 80035c4:	40013800 	.word	0x40013800
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40004400 	.word	0x40004400
 80035d0:	40004800 	.word	0x40004800
 80035d4:	40004c00 	.word	0x40004c00
 80035d8:	40005000 	.word	0x40005000
 80035dc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80035e0:	7ffb      	ldrb	r3, [r7, #31]
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d827      	bhi.n	8003636 <UART_SetConfig+0x34e>
 80035e6:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <UART_SetConfig+0x304>)
 80035e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ec:	08003611 	.word	0x08003611
 80035f0:	08003619 	.word	0x08003619
 80035f4:	08003621 	.word	0x08003621
 80035f8:	08003637 	.word	0x08003637
 80035fc:	08003627 	.word	0x08003627
 8003600:	08003637 	.word	0x08003637
 8003604:	08003637 	.word	0x08003637
 8003608:	08003637 	.word	0x08003637
 800360c:	0800362f 	.word	0x0800362f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003610:	f7ff fbba 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003614:	61b8      	str	r0, [r7, #24]
        break;
 8003616:	e013      	b.n	8003640 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003618:	f7ff fbd8 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 800361c:	61b8      	str	r0, [r7, #24]
        break;
 800361e:	e00f      	b.n	8003640 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <UART_SetConfig+0x3a8>)
 8003622:	61bb      	str	r3, [r7, #24]
        break;
 8003624:	e00c      	b.n	8003640 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003626:	f7ff fb39 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 800362a:	61b8      	str	r0, [r7, #24]
        break;
 800362c:	e008      	b.n	8003640 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800362e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003632:	61bb      	str	r3, [r7, #24]
        break;
 8003634:	e004      	b.n	8003640 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	77bb      	strb	r3, [r7, #30]
        break;
 800363e:	bf00      	nop
    }

    if (pclk != 0U)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d018      	beq.n	8003678 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	085a      	lsrs	r2, r3, #1
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	441a      	add	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	b29b      	uxth	r3, r3
 800365a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	d908      	bls.n	8003674 <UART_SetConfig+0x38c>
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d204      	bcs.n	8003674 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	e001      	b.n	8003678 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003684:	7fbb      	ldrb	r3, [r7, #30]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	007a1200 	.word	0x007a1200

08003694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d10a      	bne.n	80037aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd f888 	bl	80008fc <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10e      	bne.n	800381a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f82d 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e023      	b.n	8003862 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10e      	bne.n	8003846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f817 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00d      	b.n	8003862 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b09c      	sub	sp, #112	; 0x70
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	e0a5      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	f000 80a1 	beq.w	80039c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fd f839 	bl	80008fc <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <UART_WaitOnFlagUntilTimeout+0x32>
 8003896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003898:	2b00      	cmp	r3, #0
 800389a:	d13e      	bne.n	800391a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038b0:	667b      	str	r3, [r7, #100]	; 0x64
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e6      	bne.n	800389c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	663b      	str	r3, [r7, #96]	; 0x60
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3308      	adds	r3, #8
 80038ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80038f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e5      	bne.n	80038ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e067      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d04f      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003936:	d147      	bne.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003940:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
 8003962:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e6      	bne.n	8003942 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	613b      	str	r3, [r7, #16]
   return(result);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	66bb      	str	r3, [r7, #104]	; 0x68
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3308      	adds	r3, #8
 8003992:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003994:	623a      	str	r2, [r7, #32]
 8003996:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	69f9      	ldr	r1, [r7, #28]
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e010      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	f43f af4a 	beq.w	800387c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3770      	adds	r7, #112	; 0x70
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <__libc_init_array>:
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	4d0d      	ldr	r5, [pc, #52]	; (8003a2c <__libc_init_array+0x38>)
 80039f8:	4c0d      	ldr	r4, [pc, #52]	; (8003a30 <__libc_init_array+0x3c>)
 80039fa:	1b64      	subs	r4, r4, r5
 80039fc:	10a4      	asrs	r4, r4, #2
 80039fe:	2600      	movs	r6, #0
 8003a00:	42a6      	cmp	r6, r4
 8003a02:	d109      	bne.n	8003a18 <__libc_init_array+0x24>
 8003a04:	4d0b      	ldr	r5, [pc, #44]	; (8003a34 <__libc_init_array+0x40>)
 8003a06:	4c0c      	ldr	r4, [pc, #48]	; (8003a38 <__libc_init_array+0x44>)
 8003a08:	f000 f830 	bl	8003a6c <_init>
 8003a0c:	1b64      	subs	r4, r4, r5
 8003a0e:	10a4      	asrs	r4, r4, #2
 8003a10:	2600      	movs	r6, #0
 8003a12:	42a6      	cmp	r6, r4
 8003a14:	d105      	bne.n	8003a22 <__libc_init_array+0x2e>
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1c:	4798      	blx	r3
 8003a1e:	3601      	adds	r6, #1
 8003a20:	e7ee      	b.n	8003a00 <__libc_init_array+0xc>
 8003a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a26:	4798      	blx	r3
 8003a28:	3601      	adds	r6, #1
 8003a2a:	e7f2      	b.n	8003a12 <__libc_init_array+0x1e>
 8003a2c:	08003abc 	.word	0x08003abc
 8003a30:	08003abc 	.word	0x08003abc
 8003a34:	08003abc 	.word	0x08003abc
 8003a38:	08003ac0 	.word	0x08003ac0

08003a3c <memset>:
 8003a3c:	4402      	add	r2, r0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d100      	bne.n	8003a46 <memset+0xa>
 8003a44:	4770      	bx	lr
 8003a46:	f803 1b01 	strb.w	r1, [r3], #1
 8003a4a:	e7f9      	b.n	8003a40 <memset+0x4>

08003a4c <strcat>:
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	4602      	mov	r2, r0
 8003a50:	7814      	ldrb	r4, [r2, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	3201      	adds	r2, #1
 8003a56:	2c00      	cmp	r4, #0
 8003a58:	d1fa      	bne.n	8003a50 <strcat+0x4>
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d1f9      	bne.n	8003a5c <strcat+0x10>
 8003a68:	bd10      	pop	{r4, pc}
	...

08003a6c <_init>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

08003a78 <_fini>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr
