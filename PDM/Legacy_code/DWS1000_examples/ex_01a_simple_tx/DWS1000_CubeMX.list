
DWS1000_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008928  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08008ad8  08008ad8  00018ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800901c  0800901c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009c8  20000000  08009028  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000209c8  2**0
                  CONTENTS
  8 .bss          000003ec  200009c8  200009c8  000209c8  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000db4  20000db4  000209c8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00024789  00000000  00000000  000209f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004498  00000000  00000000  00045181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000158fb  00000000  00000000  00049619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0005ef18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002470  00000000  00000000  0005ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287b9  00000000  00000000  00062400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af60  00000000  00000000  0008abb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e348b  00000000  00000000  000a5b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00188fa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab8  00000000  00000000  00188ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200009c8 	.word	0x200009c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008ac0 	.word	0x08008ac0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200009cc 	.word	0x200009cc
 80001ec:	08008ac0 	.word	0x08008ac0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x30>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ed2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eda:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f82d 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f002 fdba 	bl	8003a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f002 fcaa 	bl	8003840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000eec:	2000      	movs	r0, #0
 8000eee:	bd08      	pop	{r3, pc}
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_IncTick+0x10>)
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_IncTick+0x14>)
 8000ef8:	6811      	ldr	r1, [r2, #0]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	440b      	add	r3, r1
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000b84 	.word	0x20000b84
 8000f08:	20000000 	.word	0x20000000

08000f0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f0c:	4b01      	ldr	r3, [pc, #4]	; (8000f14 <HAL_GetTick+0x8>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000b84 	.word	0x20000b84

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b538      	push	{r3, r4, r5, lr}
 8000f1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff fff6 	bl	8000f0c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f20:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f22:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000f24:	d002      	beq.n	8000f2c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_Delay+0x20>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	1b43      	subs	r3, r0, r5
 8000f32:	42a3      	cmp	r3, r4
 8000f34:	d3fa      	bcc.n	8000f2c <HAL_Delay+0x14>
  {
  }
}
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
 8000f38:	20000000 	.word	0x20000000

08000f3c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4908      	ldr	r1, [pc, #32]	; (8000f60 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8000f3e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f42:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f44:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000f48:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f58:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8000f5c:	60cb      	str	r3, [r1, #12]
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_NVIC_SetPriority+0x68>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6e:	f1c3 0507 	rsb	r5, r3, #7
 8000f72:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f74:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	bf28      	it	cs
 8000f7a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7c:	2c06      	cmp	r4, #6
 8000f7e:	d919      	bls.n	8000fb4 <HAL_NVIC_SetPriority+0x50>
 8000f80:	3b03      	subs	r3, #3
 8000f82:	f04f 34ff 	mov.w	r4, #4294967295
 8000f86:	409c      	lsls	r4, r3
 8000f88:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 34ff 	mov.w	r4, #4294967295
 8000f90:	40ac      	lsls	r4, r5
 8000f92:	ea21 0104 	bic.w	r1, r1, r4
 8000f96:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f98:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	db0c      	blt.n	8000fba <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000fa4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000fa8:	0109      	lsls	r1, r1, #4
 8000faa:	b2c9      	uxtb	r1, r1
 8000fac:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000fb0:	bc30      	pop	{r4, r5}
 8000fb2:	4770      	bx	lr
 8000fb4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	e7e8      	b.n	8000f8c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_NVIC_SetPriority+0x6c>)
 8000fbc:	f000 000f 	and.w	r0, r0, #15
 8000fc0:	0109      	lsls	r1, r1, #4
 8000fc2:	4403      	add	r3, r0
 8000fc4:	b2c9      	uxtb	r1, r1
 8000fc6:	7619      	strb	r1, [r3, #24]
 8000fc8:	bc30      	pop	{r4, r5}
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	e000ecfc 	.word	0xe000ecfc

08000fd4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	db07      	blt.n	8000fe8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd8:	f000 011f 	and.w	r1, r0, #31
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_NVIC_EnableIRQ+0x18>)
 8000fde:	0940      	lsrs	r0, r0, #5
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	408b      	lsls	r3, r1
 8000fe4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	db0d      	blt.n	8001010 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff4:	0943      	lsrs	r3, r0, #5
 8000ff6:	4907      	ldr	r1, [pc, #28]	; (8001014 <HAL_NVIC_DisableIRQ+0x24>)
 8000ff8:	3320      	adds	r3, #32
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f000 001f 	and.w	r0, r0, #31
 8001000:	fa02 f000 	lsl.w	r0, r2, r0
 8001004:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800100c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001018:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800101c:	2b02      	cmp	r3, #2
 800101e:	d003      	beq.n	8001028 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001024:	2001      	movs	r0, #1
 8001026:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001028:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800102a:	2305      	movs	r3, #5
 800102c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001030:	6813      	ldr	r3, [r2, #0]
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001038:	2000      	movs	r0, #0
}
 800103a:	4770      	bx	lr

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001040:	2300      	movs	r3, #0
 8001042:	680e      	ldr	r6, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001044:	f8df 8268 	ldr.w	r8, [pc, #616]	; 80012b0 <HAL_GPIO_Init+0x274>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	f8df e268 	ldr.w	lr, [pc, #616]	; 80012b4 <HAL_GPIO_Init+0x278>
{
 800104c:	b083      	sub	sp, #12
 800104e:	e003      	b.n	8001058 <HAL_GPIO_Init+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001050:	3301      	adds	r3, #1
 8001052:	2b10      	cmp	r3, #16
 8001054:	f000 80ab 	beq.w	80011ae <HAL_GPIO_Init+0x172>
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	409a      	lsls	r2, r3
    if(iocurrent == ioposition)
 800105c:	ea32 0406 	bics.w	r4, r2, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001060:	ea02 0c06 	and.w	ip, r2, r6
    if(iocurrent == ioposition)
 8001064:	d1f4      	bne.n	8001050 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001066:	684d      	ldr	r5, [r1, #4]
 8001068:	f025 0a10 	bic.w	sl, r5, #16
 800106c:	f1ba 0f02 	cmp.w	sl, #2
 8001070:	f000 80a0 	beq.w	80011b4 <HAL_GPIO_Init+0x178>
      temp = GPIOx->MODER;
 8001074:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001078:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800107c:	2403      	movs	r4, #3
 800107e:	fa04 f409 	lsl.w	r4, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001082:	f005 0703 	and.w	r7, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001086:	ea2b 0b04 	bic.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108a:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108e:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001092:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001096:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109a:	ea6f 0404 	mvn.w	r4, r4
      GPIOx->MODER = temp;
 800109e:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a0:	f240 80ae 	bls.w	8001200 <HAL_GPIO_Init+0x1c4>
      temp = GPIOx->PUPDR;
 80010a4:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a6:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a8:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010aa:	fa02 f209 	lsl.w	r2, r2, r9
 80010ae:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b0:	00ef      	lsls	r7, r5, #3
      GPIOx->PUPDR = temp;
 80010b2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b4:	d5cc      	bpl.n	8001050 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2200      	movs	r2, #0
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 80010be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010c2:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
 80010c6:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 80010ca:	f023 0403 	bic.w	r4, r3, #3
 80010ce:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80010d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80010d6:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 80010da:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010dc:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80010e2:	f8d4 9008 	ldr.w	r9, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e6:	00bf      	lsls	r7, r7, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	40ba      	lsls	r2, r7
 80010ec:	ea29 0a02 	bic.w	sl, r9, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f0:	4a69      	ldr	r2, [pc, #420]	; (8001298 <HAL_GPIO_Init+0x25c>)
 80010f2:	4290      	cmp	r0, r2
 80010f4:	d02e      	beq.n	8001154 <HAL_GPIO_Init+0x118>
 80010f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010fa:	4290      	cmp	r0, r2
 80010fc:	f000 8093 	beq.w	8001226 <HAL_GPIO_Init+0x1ea>
 8001100:	4a66      	ldr	r2, [pc, #408]	; (800129c <HAL_GPIO_Init+0x260>)
 8001102:	4290      	cmp	r0, r2
 8001104:	f000 8096 	beq.w	8001234 <HAL_GPIO_Init+0x1f8>
 8001108:	4a65      	ldr	r2, [pc, #404]	; (80012a0 <HAL_GPIO_Init+0x264>)
 800110a:	4290      	cmp	r0, r2
 800110c:	f000 8099 	beq.w	8001242 <HAL_GPIO_Init+0x206>
 8001110:	4a64      	ldr	r2, [pc, #400]	; (80012a4 <HAL_GPIO_Init+0x268>)
 8001112:	4290      	cmp	r0, r2
 8001114:	f000 809c 	beq.w	8001250 <HAL_GPIO_Init+0x214>
 8001118:	4a63      	ldr	r2, [pc, #396]	; (80012a8 <HAL_GPIO_Init+0x26c>)
 800111a:	4290      	cmp	r0, r2
 800111c:	f000 80a6 	beq.w	800126c <HAL_GPIO_Init+0x230>
 8001120:	4a62      	ldr	r2, [pc, #392]	; (80012ac <HAL_GPIO_Init+0x270>)
 8001122:	4290      	cmp	r0, r2
 8001124:	f000 80a9 	beq.w	800127a <HAL_GPIO_Init+0x23e>
 8001128:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80012b8 <HAL_GPIO_Init+0x27c>
 800112c:	4548      	cmp	r0, r9
 800112e:	f000 8096 	beq.w	800125e <HAL_GPIO_Init+0x222>
 8001132:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80012bc <HAL_GPIO_Init+0x280>
 8001136:	4548      	cmp	r0, r9
 8001138:	f000 80a6 	beq.w	8001288 <HAL_GPIO_Init+0x24c>
 800113c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80012c0 <HAL_GPIO_Init+0x284>
 8001140:	4548      	cmp	r0, r9
 8001142:	bf0c      	ite	eq
 8001144:	f04f 0909 	moveq.w	r9, #9
 8001148:	f04f 090a 	movne.w	r9, #10
 800114c:	fa09 f707 	lsl.w	r7, r9, r7
 8001150:	ea4a 0a07 	orr.w	sl, sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	f8c4 a008 	str.w	sl, [r4, #8]
        temp = EXTI->IMR;
 8001158:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~((uint32_t)iocurrent);
 800115c:	ea6f 070c 	mvn.w	r7, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001160:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001162:	bf54      	ite	pl
 8001164:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8001166:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->IMR = temp;
 800116a:	f8ce 2000 	str.w	r2, [lr]

        temp = EXTI->EMR;
 800116e:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001172:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001174:	bf54      	ite	pl
 8001176:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001178:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800117c:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001180:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001184:	02ea      	lsls	r2, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001186:	bf54      	ite	pl
 8001188:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800118a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800118e:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR;
 8001192:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001196:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001198:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800119c:	bf54      	ite	pl
 800119e:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80011a0:	ea4c 0202 	orrmi.w	r2, ip, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a4:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 80011a6:	f8ce 200c 	str.w	r2, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	f47f af55 	bne.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ae:	b003      	add	sp, #12
 80011b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80011b8:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011bc:	f003 0707 	and.w	r7, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80011c0:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c4:	00bf      	lsls	r7, r7, #2
 80011c6:	f04f 0b0f 	mov.w	fp, #15
 80011ca:	fa0b fb07 	lsl.w	fp, fp, r7
 80011ce:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d2:	690c      	ldr	r4, [r1, #16]
 80011d4:	40bc      	lsls	r4, r7
 80011d6:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	f8c9 4020 	str.w	r4, [r9, #32]
      temp = GPIOx->MODER;
 80011de:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e2:	ea4f 0943 	mov.w	r9, r3, lsl #1
 80011e6:	2403      	movs	r4, #3
 80011e8:	fa04 f409 	lsl.w	r4, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ec:	f005 0703 	and.w	r7, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f0:	ea2a 0a04 	bic.w	sl, sl, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f4:	fa07 f709 	lsl.w	r7, r7, r9
 80011f8:	ea47 070a 	orr.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fc:	43e4      	mvns	r4, r4
      GPIOx->MODER = temp;
 80011fe:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001200:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001202:	ea07 0a04 	and.w	sl, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	68cf      	ldr	r7, [r1, #12]
 8001208:	fa07 f709 	lsl.w	r7, r7, r9
 800120c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001210:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001212:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001216:	f3c5 1700 	ubfx	r7, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121a:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800121e:	409f      	lsls	r7, r3
 8001220:	4317      	orrs	r7, r2
        GPIOx->OTYPER = temp;
 8001222:	6047      	str	r7, [r0, #4]
 8001224:	e73e      	b.n	80010a4 <HAL_GPIO_Init+0x68>
 8001226:	f04f 0901 	mov.w	r9, #1
 800122a:	fa09 f707 	lsl.w	r7, r9, r7
 800122e:	ea4a 0a07 	orr.w	sl, sl, r7
 8001232:	e78f      	b.n	8001154 <HAL_GPIO_Init+0x118>
 8001234:	f04f 0902 	mov.w	r9, #2
 8001238:	fa09 f707 	lsl.w	r7, r9, r7
 800123c:	ea4a 0a07 	orr.w	sl, sl, r7
 8001240:	e788      	b.n	8001154 <HAL_GPIO_Init+0x118>
 8001242:	f04f 0903 	mov.w	r9, #3
 8001246:	fa09 f707 	lsl.w	r7, r9, r7
 800124a:	ea4a 0a07 	orr.w	sl, sl, r7
 800124e:	e781      	b.n	8001154 <HAL_GPIO_Init+0x118>
 8001250:	f04f 0904 	mov.w	r9, #4
 8001254:	fa09 f707 	lsl.w	r7, r9, r7
 8001258:	ea4a 0a07 	orr.w	sl, sl, r7
 800125c:	e77a      	b.n	8001154 <HAL_GPIO_Init+0x118>
 800125e:	f04f 0907 	mov.w	r9, #7
 8001262:	fa09 f707 	lsl.w	r7, r9, r7
 8001266:	ea4a 0a07 	orr.w	sl, sl, r7
 800126a:	e773      	b.n	8001154 <HAL_GPIO_Init+0x118>
 800126c:	f04f 0905 	mov.w	r9, #5
 8001270:	fa09 f707 	lsl.w	r7, r9, r7
 8001274:	ea4a 0a07 	orr.w	sl, sl, r7
 8001278:	e76c      	b.n	8001154 <HAL_GPIO_Init+0x118>
 800127a:	f04f 0906 	mov.w	r9, #6
 800127e:	fa09 f707 	lsl.w	r7, r9, r7
 8001282:	ea4a 0a07 	orr.w	sl, sl, r7
 8001286:	e765      	b.n	8001154 <HAL_GPIO_Init+0x118>
 8001288:	f04f 0908 	mov.w	r9, #8
 800128c:	fa09 f707 	lsl.w	r7, r9, r7
 8001290:	ea4a 0a07 	orr.w	sl, sl, r7
 8001294:	e75e      	b.n	8001154 <HAL_GPIO_Init+0x118>
 8001296:	bf00      	nop
 8001298:	40020000 	.word	0x40020000
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40021400 	.word	0x40021400
 80012ac:	40021800 	.word	0x40021800
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40013c00 	.word	0x40013c00
 80012b8:	40021c00 	.word	0x40021c00
 80012bc:	40022000 	.word	0x40022000
 80012c0:	40022400 	.word	0x40022400

080012c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012c4:	6903      	ldr	r3, [r0, #16]
 80012c6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012c8:	bf14      	ite	ne
 80012ca:	2001      	movne	r0, #1
 80012cc:	2000      	moveq	r0, #0
 80012ce:	4770      	bx	lr

080012d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d0:	b902      	cbnz	r2, 80012d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d2:	0409      	lsls	r1, r1, #16
 80012d4:	6181      	str	r1, [r0, #24]
  }
}
 80012d6:	4770      	bx	lr

080012d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80012da:	6951      	ldr	r1, [r2, #20]
 80012dc:	4201      	tst	r1, r0
 80012de:	d100      	bne.n	80012e2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80012e0:	4770      	bx	lr
{
 80012e2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012e4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e6:	f002 fe09 	bl	8003efc <HAL_GPIO_EXTI_Callback>
  }
}
 80012ea:	bd08      	pop	{r3, pc}
 80012ec:	40013c00 	.word	0x40013c00

080012f0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	2800      	cmp	r0, #0
 80012f2:	f000 8160 	beq.w	80015b6 <HAL_RCC_OscConfig+0x2c6>
{
 80012f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	6803      	ldr	r3, [r0, #0]
 80012fc:	07dd      	lsls	r5, r3, #31
{
 80012fe:	b082      	sub	sp, #8
 8001300:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001302:	d52f      	bpl.n	8001364 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001304:	49ad      	ldr	r1, [pc, #692]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 8001306:	688a      	ldr	r2, [r1, #8]
 8001308:	f002 020c 	and.w	r2, r2, #12
 800130c:	2a04      	cmp	r2, #4
 800130e:	f000 80ec 	beq.w	80014ea <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001312:	688a      	ldr	r2, [r1, #8]
 8001314:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001318:	2a08      	cmp	r2, #8
 800131a:	f000 80e2 	beq.w	80014e2 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131e:	6863      	ldr	r3, [r4, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	f000 80eb 	beq.w	80014fe <HAL_RCC_OscConfig+0x20e>
 8001328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132c:	f000 8150 	beq.w	80015d0 <HAL_RCC_OscConfig+0x2e0>
 8001330:	4da2      	ldr	r5, [pc, #648]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 8001332:	682a      	ldr	r2, [r5, #0]
 8001334:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001338:	602a      	str	r2, [r5, #0]
 800133a:	682a      	ldr	r2, [r5, #0]
 800133c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001340:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 80e0 	bne.w	8001508 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fde0 	bl	8000f0c <HAL_GetTick>
 800134c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	e005      	b.n	800135c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fddc 	bl	8000f0c <HAL_GetTick>
 8001354:	1b80      	subs	r0, r0, r6
 8001356:	2864      	cmp	r0, #100	; 0x64
 8001358:	f200 8100 	bhi.w	800155c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	039b      	lsls	r3, r3, #14
 8001360:	d4f6      	bmi.n	8001350 <HAL_RCC_OscConfig+0x60>
 8001362:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001364:	079f      	lsls	r7, r3, #30
 8001366:	d528      	bpl.n	80013ba <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001368:	4a94      	ldr	r2, [pc, #592]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 800136a:	6891      	ldr	r1, [r2, #8]
 800136c:	f011 0f0c 	tst.w	r1, #12
 8001370:	f000 809a 	beq.w	80014a8 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001374:	6891      	ldr	r1, [r2, #8]
 8001376:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	2908      	cmp	r1, #8
 800137c:	f000 8090 	beq.w	80014a0 <HAL_RCC_OscConfig+0x1b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001380:	68e3      	ldr	r3, [r4, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8106 	beq.w	8001594 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001388:	4b8d      	ldr	r3, [pc, #564]	; (80015c0 <HAL_RCC_OscConfig+0x2d0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4e8c      	ldr	r6, [pc, #560]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_ENABLE();
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001390:	f7ff fdbc 	bl	8000f0c <HAL_GetTick>
 8001394:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001396:	e005      	b.n	80013a4 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fdb8 	bl	8000f0c <HAL_GetTick>
 800139c:	1b40      	subs	r0, r0, r5
 800139e:	2802      	cmp	r0, #2
 80013a0:	f200 80dc 	bhi.w	800155c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	6833      	ldr	r3, [r6, #0]
 80013a6:	0798      	lsls	r0, r3, #30
 80013a8:	d5f6      	bpl.n	8001398 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	6833      	ldr	r3, [r6, #0]
 80013ac:	6922      	ldr	r2, [r4, #16]
 80013ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013b6:	6033      	str	r3, [r6, #0]
 80013b8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	071a      	lsls	r2, r3, #28
 80013bc:	d45c      	bmi.n	8001478 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013be:	0758      	lsls	r0, r3, #29
 80013c0:	d53a      	bpl.n	8001438 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4a7e      	ldr	r2, [pc, #504]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 80013c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013c6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80013ca:	f040 8088 	bne.w	80014de <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013e2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e4:	4e77      	ldr	r6, [pc, #476]	; (80015c4 <HAL_RCC_OscConfig+0x2d4>)
 80013e6:	6833      	ldr	r3, [r6, #0]
 80013e8:	05d9      	lsls	r1, r3, #23
 80013ea:	f140 80a7 	bpl.w	800153c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ee:	68a3      	ldr	r3, [r4, #8]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f000 80b7 	beq.w	8001564 <HAL_RCC_OscConfig+0x274>
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	f000 8126 	beq.w	8001648 <HAL_RCC_OscConfig+0x358>
 80013fc:	4e6f      	ldr	r6, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 80013fe:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	6732      	str	r2, [r6, #112]	; 0x70
 8001406:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001408:	f022 0204 	bic.w	r2, r2, #4
 800140c:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 80ad 	bne.w	800156e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001414:	f7ff fd7a 	bl	8000f0c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800141c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	e005      	b.n	800142c <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fd74 	bl	8000f0c <HAL_GetTick>
 8001424:	1bc0      	subs	r0, r0, r7
 8001426:	4540      	cmp	r0, r8
 8001428:	f200 8098 	bhi.w	800155c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800142e:	0798      	lsls	r0, r3, #30
 8001430:	d4f6      	bmi.n	8001420 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001432:	2d00      	cmp	r5, #0
 8001434:	f040 80d6 	bne.w	80015e4 <HAL_RCC_OscConfig+0x2f4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001438:	69a3      	ldr	r3, [r4, #24]
 800143a:	b1cb      	cbz	r3, 8001470 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800143c:	4d5f      	ldr	r5, [pc, #380]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 800143e:	68aa      	ldr	r2, [r5, #8]
 8001440:	f002 020c 	and.w	r2, r2, #12
 8001444:	2a08      	cmp	r2, #8
 8001446:	d036      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001448:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_RCC_OscConfig+0x2d8>)
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001452:	f000 80cd 	beq.w	80015f0 <HAL_RCC_OscConfig+0x300>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fd59 	bl	8000f0c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800145c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	e004      	b.n	800146a <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fd54 	bl	8000f0c <HAL_GetTick>
 8001464:	1b40      	subs	r0, r0, r5
 8001466:	2802      	cmp	r0, #2
 8001468:	d878      	bhi.n	800155c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	019b      	lsls	r3, r3, #6
 800146e:	d4f7      	bmi.n	8001460 <HAL_RCC_OscConfig+0x170>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001470:	2000      	movs	r0, #0
}
 8001472:	b002      	add	sp, #8
 8001474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001478:	6963      	ldr	r3, [r4, #20]
 800147a:	b303      	cbz	r3, 80014be <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	4e4f      	ldr	r6, [pc, #316]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_ENABLE();
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001484:	f7ff fd42 	bl	8000f0c <HAL_GetTick>
 8001488:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e004      	b.n	8001496 <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fd3e 	bl	8000f0c <HAL_GetTick>
 8001490:	1b40      	subs	r0, r0, r5
 8001492:	2802      	cmp	r0, #2
 8001494:	d862      	bhi.n	800155c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001498:	079b      	lsls	r3, r3, #30
 800149a:	d5f7      	bpl.n	800148c <HAL_RCC_OscConfig+0x19c>
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	e78e      	b.n	80013be <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a0:	6852      	ldr	r2, [r2, #4]
 80014a2:	0256      	lsls	r6, r2, #9
 80014a4:	f53f af6c 	bmi.w	8001380 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a8:	4a44      	ldr	r2, [pc, #272]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	0795      	lsls	r5, r2, #30
 80014ae:	d539      	bpl.n	8001524 <HAL_RCC_OscConfig+0x234>
 80014b0:	68e2      	ldr	r2, [r4, #12]
 80014b2:	2a01      	cmp	r2, #1
 80014b4:	d036      	beq.n	8001524 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
}
 80014b8:	b002      	add	sp, #8
 80014ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80014be:	4a43      	ldr	r2, [pc, #268]	; (80015cc <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	4e3e      	ldr	r6, [pc, #248]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_DISABLE();
 80014c2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80014c4:	f7ff fd22 	bl	8000f0c <HAL_GetTick>
 80014c8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ca:	e004      	b.n	80014d6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fd1e 	bl	8000f0c <HAL_GetTick>
 80014d0:	1b40      	subs	r0, r0, r5
 80014d2:	2802      	cmp	r0, #2
 80014d4:	d842      	bhi.n	800155c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80014d8:	079f      	lsls	r7, r3, #30
 80014da:	d4f7      	bmi.n	80014cc <HAL_RCC_OscConfig+0x1dc>
 80014dc:	e7de      	b.n	800149c <HAL_RCC_OscConfig+0x1ac>
    FlagStatus       pwrclkchanged = RESET;
 80014de:	2500      	movs	r5, #0
 80014e0:	e780      	b.n	80013e4 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	684a      	ldr	r2, [r1, #4]
 80014e4:	0250      	lsls	r0, r2, #9
 80014e6:	f57f af1a 	bpl.w	800131e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ea:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	0391      	lsls	r1, r2, #14
 80014f0:	f57f af38 	bpl.w	8001364 <HAL_RCC_OscConfig+0x74>
 80014f4:	6862      	ldr	r2, [r4, #4]
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	f47f af34 	bne.w	8001364 <HAL_RCC_OscConfig+0x74>
 80014fc:	e7db      	b.n	80014b6 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fe:	4a2f      	ldr	r2, [pc, #188]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001508:	f7ff fd00 	bl	8000f0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150c:	4e2b      	ldr	r6, [pc, #172]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800150e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001510:	e004      	b.n	800151c <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001512:	f7ff fcfb 	bl	8000f0c <HAL_GetTick>
 8001516:	1b40      	subs	r0, r0, r5
 8001518:	2864      	cmp	r0, #100	; 0x64
 800151a:	d81f      	bhi.n	800155c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151c:	6833      	ldr	r3, [r6, #0]
 800151e:	039a      	lsls	r2, r3, #14
 8001520:	d5f7      	bpl.n	8001512 <HAL_RCC_OscConfig+0x222>
 8001522:	e71e      	b.n	8001362 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4925      	ldr	r1, [pc, #148]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 8001526:	6920      	ldr	r0, [r4, #16]
 8001528:	680a      	ldr	r2, [r1, #0]
 800152a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800152e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001532:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001534:	071a      	lsls	r2, r3, #28
 8001536:	f57f af42 	bpl.w	80013be <HAL_RCC_OscConfig+0xce>
 800153a:	e79d      	b.n	8001478 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153c:	6833      	ldr	r3, [r6, #0]
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001544:	f7ff fce2 	bl	8000f0c <HAL_GetTick>
 8001548:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	6833      	ldr	r3, [r6, #0]
 800154c:	05da      	lsls	r2, r3, #23
 800154e:	f53f af4e 	bmi.w	80013ee <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff fcdb 	bl	8000f0c <HAL_GetTick>
 8001556:	1bc0      	subs	r0, r0, r7
 8001558:	2802      	cmp	r0, #2
 800155a:	d9f6      	bls.n	800154a <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 800155c:	2003      	movs	r0, #3
}
 800155e:	b002      	add	sp, #8
 8001560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
 8001566:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800156e:	f7ff fccd 	bl	8000f0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	4f12      	ldr	r7, [pc, #72]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001574:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	e004      	b.n	8001586 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fcc6 	bl	8000f0c <HAL_GetTick>
 8001580:	1b80      	subs	r0, r0, r6
 8001582:	4540      	cmp	r0, r8
 8001584:	d8ea      	bhi.n	800155c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001588:	079b      	lsls	r3, r3, #30
 800158a:	d5f7      	bpl.n	800157c <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 800158c:	2d00      	cmp	r5, #0
 800158e:	f43f af53 	beq.w	8001438 <HAL_RCC_OscConfig+0x148>
 8001592:	e027      	b.n	80015e4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_HSI_DISABLE();
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_RCC_OscConfig+0x2d0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	4e09      	ldr	r6, [pc, #36]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_DISABLE();
 8001598:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800159a:	f7ff fcb7 	bl	8000f0c <HAL_GetTick>
 800159e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a0:	e004      	b.n	80015ac <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fcb3 	bl	8000f0c <HAL_GetTick>
 80015a6:	1b40      	subs	r0, r0, r5
 80015a8:	2802      	cmp	r0, #2
 80015aa:	d8d7      	bhi.n	800155c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ac:	6833      	ldr	r3, [r6, #0]
 80015ae:	0799      	lsls	r1, r3, #30
 80015b0:	d4f7      	bmi.n	80015a2 <HAL_RCC_OscConfig+0x2b2>
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	e701      	b.n	80013ba <HAL_RCC_OscConfig+0xca>
    return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	42470000 	.word	0x42470000
 80015c4:	40007000 	.word	0x40007000
 80015c8:	42470060 	.word	0x42470060
 80015cc:	42470e80 	.word	0x42470e80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_RCC_OscConfig+0x36c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015e0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e2:	e791      	b.n	8001508 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_RCC_OscConfig+0x36c>)
 80015e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	e723      	b.n	8001438 <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc8c 	bl	8000f0c <HAL_GetTick>
 80015f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e004      	b.n	8001602 <HAL_RCC_OscConfig+0x312>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fc88 	bl	8000f0c <HAL_GetTick>
 80015fc:	1b80      	subs	r0, r0, r6
 80015fe:	2802      	cmp	r0, #2
 8001600:	d8ac      	bhi.n	800155c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	682b      	ldr	r3, [r5, #0]
 8001604:	0199      	lsls	r1, r3, #6
 8001606:	d4f7      	bmi.n	80015f8 <HAL_RCC_OscConfig+0x308>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001608:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800160c:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001610:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001612:	4333      	orrs	r3, r6
 8001614:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001618:	0852      	lsrs	r2, r2, #1
 800161a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800161e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001620:	490f      	ldr	r1, [pc, #60]	; (8001660 <HAL_RCC_OscConfig+0x370>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4e0e      	ldr	r6, [pc, #56]	; (800165c <HAL_RCC_OscConfig+0x36c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001628:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800162c:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800162e:	f7ff fc6d 	bl	8000f0c <HAL_GetTick>
 8001632:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001634:	e004      	b.n	8001640 <HAL_RCC_OscConfig+0x350>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff fc69 	bl	8000f0c <HAL_GetTick>
 800163a:	1b00      	subs	r0, r0, r4
 800163c:	2802      	cmp	r0, #2
 800163e:	d88d      	bhi.n	800155c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001640:	6833      	ldr	r3, [r6, #0]
 8001642:	019a      	lsls	r2, r3, #6
 8001644:	d5f7      	bpl.n	8001636 <HAL_RCC_OscConfig+0x346>
 8001646:	e713      	b.n	8001470 <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <HAL_RCC_OscConfig+0x36c>)
 800164a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800164c:	f042 0204 	orr.w	r2, r2, #4
 8001650:	671a      	str	r2, [r3, #112]	; 0x70
 8001652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001654:	f042 0201 	orr.w	r2, r2, #1
 8001658:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800165a:	e788      	b.n	800156e <HAL_RCC_OscConfig+0x27e>
 800165c:	40023800 	.word	0x40023800
 8001660:	42470060 	.word	0x42470060

08001664 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001664:	4917      	ldr	r1, [pc, #92]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001666:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001668:	688b      	ldr	r3, [r1, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b04      	cmp	r3, #4
 8001670:	d01b      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x46>
 8001672:	2b08      	cmp	r3, #8
 8001674:	d117      	bne.n	80016a6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001676:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001678:	684b      	ldr	r3, [r1, #4]
 800167a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800167e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001682:	d114      	bne.n	80016ae <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001684:	6849      	ldr	r1, [r1, #4]
 8001686:	4810      	ldr	r0, [pc, #64]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001688:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800168c:	fba1 0100 	umull	r0, r1, r1, r0
 8001690:	f7ff fa9a 	bl	8000bc8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800169c:	3301      	adds	r3, #1
 800169e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80016a0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80016a4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80016a8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <HAL_RCC_GetSysClockFreq+0x68>)
}
 80016ac:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ae:	684b      	ldr	r3, [r1, #4]
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <HAL_RCC_GetSysClockFreq+0x68>)
 80016b2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80016b6:	fba3 0100 	umull	r0, r1, r3, r0
 80016ba:	2300      	movs	r3, #0
 80016bc:	f7ff fa84 	bl	8000bc8 <__aeabi_uldivmod>
 80016c0:	e7e8      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x30>
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	007a1200 	.word	0x007a1200

080016d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80016d0:	2800      	cmp	r0, #0
 80016d2:	f000 8086 	beq.w	80017e2 <HAL_RCC_ClockConfig+0x112>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d6:	4a47      	ldr	r2, [pc, #284]	; (80017f4 <HAL_RCC_ClockConfig+0x124>)
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	428b      	cmp	r3, r1
{
 80016e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016e4:	460d      	mov	r5, r1
 80016e6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e8:	d209      	bcs.n	80016fe <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	b2cb      	uxtb	r3, r1
 80016ec:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	6813      	ldr	r3, [r2, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d002      	beq.n	80016fe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
}
 80016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	0798      	lsls	r0, r3, #30
 8001702:	d514      	bpl.n	800172e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	0759      	lsls	r1, r3, #29
 8001706:	d504      	bpl.n	8001712 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001708:	493b      	ldr	r1, [pc, #236]	; (80017f8 <HAL_RCC_ClockConfig+0x128>)
 800170a:	688a      	ldr	r2, [r1, #8]
 800170c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001710:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001712:	071a      	lsls	r2, r3, #28
 8001714:	d504      	bpl.n	8001720 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001716:	4938      	ldr	r1, [pc, #224]	; (80017f8 <HAL_RCC_ClockConfig+0x128>)
 8001718:	688a      	ldr	r2, [r1, #8]
 800171a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800171e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4935      	ldr	r1, [pc, #212]	; (80017f8 <HAL_RCC_ClockConfig+0x128>)
 8001722:	68a0      	ldr	r0, [r4, #8]
 8001724:	688a      	ldr	r2, [r1, #8]
 8001726:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800172a:	4302      	orrs	r2, r0
 800172c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172e:	07df      	lsls	r7, r3, #31
 8001730:	d521      	bpl.n	8001776 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	6862      	ldr	r2, [r4, #4]
 8001734:	2a01      	cmp	r2, #1
 8001736:	d056      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x116>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001738:	1e93      	subs	r3, r2, #2
 800173a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <HAL_RCC_ClockConfig+0x128>)
 800173e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001740:	d94c      	bls.n	80017dc <HAL_RCC_ClockConfig+0x10c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	0799      	lsls	r1, r3, #30
 8001744:	d5d8      	bpl.n	80016f8 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001746:	4e2c      	ldr	r6, [pc, #176]	; (80017f8 <HAL_RCC_ClockConfig+0x128>)
 8001748:	68b3      	ldr	r3, [r6, #8]
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	4313      	orrs	r3, r2
 8001750:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001752:	f7ff fbdb 	bl	8000f0c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001756:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800175a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175c:	e004      	b.n	8001768 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175e:	f7ff fbd5 	bl	8000f0c <HAL_GetTick>
 8001762:	1bc0      	subs	r0, r0, r7
 8001764:	4540      	cmp	r0, r8
 8001766:	d843      	bhi.n	80017f0 <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001768:	68b3      	ldr	r3, [r6, #8]
 800176a:	6862      	ldr	r2, [r4, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001774:	d1f3      	bne.n	800175e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001776:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_RCC_ClockConfig+0x124>)
 8001778:	6813      	ldr	r3, [r2, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	42ab      	cmp	r3, r5
 8001780:	d906      	bls.n	8001790 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	b2eb      	uxtb	r3, r5
 8001784:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	42ab      	cmp	r3, r5
 800178e:	d1b3      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	075a      	lsls	r2, r3, #29
 8001794:	d506      	bpl.n	80017a4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001796:	4918      	ldr	r1, [pc, #96]	; (80017f8 <HAL_RCC_ClockConfig+0x128>)
 8001798:	68e0      	ldr	r0, [r4, #12]
 800179a:	688a      	ldr	r2, [r1, #8]
 800179c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80017a0:	4302      	orrs	r2, r0
 80017a2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	071b      	lsls	r3, r3, #28
 80017a6:	d507      	bpl.n	80017b8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a8:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <HAL_RCC_ClockConfig+0x128>)
 80017aa:	6921      	ldr	r1, [r4, #16]
 80017ac:	6893      	ldr	r3, [r2, #8]
 80017ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017b6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017b8:	f7ff ff54 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_RCC_ClockConfig+0x128>)
 80017be:	4c0f      	ldr	r4, [pc, #60]	; (80017fc <HAL_RCC_ClockConfig+0x12c>)
 80017c0:	6892      	ldr	r2, [r2, #8]
 80017c2:	490f      	ldr	r1, [pc, #60]	; (8001800 <HAL_RCC_ClockConfig+0x130>)
 80017c4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80017c8:	4603      	mov	r3, r0
 80017ca:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017cc:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ce:	40d3      	lsrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017d2:	f002 f943 	bl	8003a5c <HAL_InitTick>
  return HAL_OK;
 80017d6:	2000      	movs	r0, #0
}
 80017d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017dc:	0198      	lsls	r0, r3, #6
 80017de:	d4b2      	bmi.n	8001746 <HAL_RCC_ClockConfig+0x76>
 80017e0:	e78a      	b.n	80016f8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
}
 80017e4:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <HAL_RCC_ClockConfig+0x128>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	039e      	lsls	r6, r3, #14
 80017ec:	d4ab      	bmi.n	8001746 <HAL_RCC_ClockConfig+0x76>
 80017ee:	e783      	b.n	80016f8 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80017f0:	2003      	movs	r0, #3
 80017f2:	e782      	b.n	80016fa <HAL_RCC_ClockConfig+0x2a>
 80017f4:	40023c00 	.word	0x40023c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	08008b8c 	.word	0x08008b8c
 8001800:	20000018 	.word	0x20000018

08001804 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001808:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800180a:	4905      	ldr	r1, [pc, #20]	; (8001820 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800180c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001810:	6808      	ldr	r0, [r1, #0]
 8001812:	5cd3      	ldrb	r3, [r2, r3]
}
 8001814:	40d8      	lsrs	r0, r3
 8001816:	4770      	bx	lr
 8001818:	40023800 	.word	0x40023800
 800181c:	08008b9c 	.word	0x08008b9c
 8001820:	20000018 	.word	0x20000018

08001824 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001828:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800182a:	4905      	ldr	r1, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800182c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001830:	6808      	ldr	r0, [r1, #0]
 8001832:	5cd3      	ldrb	r3, [r2, r3]
}
 8001834:	40d8      	lsrs	r0, r3
 8001836:	4770      	bx	lr
 8001838:	40023800 	.word	0x40023800
 800183c:	08008b9c 	.word	0x08008b9c
 8001840:	20000018 	.word	0x20000018

08001844 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001846:	220f      	movs	r2, #15
 8001848:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	f002 0203 	and.w	r2, r2, #3
 8001850:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001858:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001860:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	08db      	lsrs	r3, r3, #3
{
 8001866:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001868:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800186c:	4c05      	ldr	r4, [pc, #20]	; (8001884 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800186e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001870:	6823      	ldr	r3, [r4, #0]
}
 8001872:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	600b      	str	r3, [r1, #0]
}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40023c00 	.word	0x40023c00

08001888 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800188c:	4607      	mov	r7, r0
 800188e:	460d      	mov	r5, r1
 8001890:	4616      	mov	r6, r2
 8001892:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	e001      	b.n	800189c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001898:	1c73      	adds	r3, r6, #1
 800189a:	d106      	bne.n	80018aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800189c:	6894      	ldr	r4, [r2, #8]
 800189e:	ea35 0304 	bics.w	r3, r5, r4
 80018a2:	d0f9      	beq.n	8001898 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80018a4:	2000      	movs	r0, #0
}
 80018a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80018aa:	f7ff fb2f 	bl	8000f0c <HAL_GetTick>
 80018ae:	eba0 0008 	sub.w	r0, r0, r8
 80018b2:	4286      	cmp	r6, r0
 80018b4:	d8ee      	bhi.n	8001894 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018b6:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018ba:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018bc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80018c4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018c6:	d013      	beq.n	80018f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80018c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80018ce:	d107      	bne.n	80018e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
          SPI_RESET_CRC(hspi);
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018de:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80018e0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80018e2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80018e4:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80018e8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80018ec:	2003      	movs	r0, #3
 80018ee:	e7da      	b.n	80018a6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x1e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80018f6:	d002      	beq.n	80018fe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x76>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80018f8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80018fc:	d1e4      	bne.n	80018c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
          __HAL_SPI_DISABLE(hspi);
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	e7df      	b.n	80018c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>

08001908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001908:	b570      	push	{r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800190a:	4c16      	ldr	r4, [pc, #88]	; (8001964 <SPI_EndRxTxTransaction+0x5c>)
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <SPI_EndRxTxTransaction+0x60>)
 800190e:	6825      	ldr	r5, [r4, #0]
 8001910:	fba3 3505 	umull	r3, r5, r3, r5
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001914:	6843      	ldr	r3, [r0, #4]
{
 8001916:	b082      	sub	sp, #8
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001918:	0d6d      	lsrs	r5, r5, #21
 800191a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800191e:	fb06 f505 	mul.w	r5, r6, r5
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001926:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001928:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800192a:	d107      	bne.n	800193c <SPI_EndRxTxTransaction+0x34>
 800192c:	e00c      	b.n	8001948 <SPI_EndRxTxTransaction+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800192e:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001930:	6822      	ldr	r2, [r4, #0]
      count--;
 8001932:	3b01      	subs	r3, #1
 8001934:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001936:	6893      	ldr	r3, [r2, #8]
 8001938:	061b      	lsls	r3, r3, #24
 800193a:	d502      	bpl.n	8001942 <SPI_EndRxTxTransaction+0x3a>
      if (count == 0U)
 800193c:	9b01      	ldr	r3, [sp, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f5      	bne.n	800192e <SPI_EndRxTxTransaction+0x26>
  }

  return HAL_OK;
 8001942:	2000      	movs	r0, #0
}
 8001944:	b002      	add	sp, #8
 8001946:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001948:	4613      	mov	r3, r2
 800194a:	460a      	mov	r2, r1
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	f7ff ff9b 	bl	8001888 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001952:	2800      	cmp	r0, #0
 8001954:	d0f5      	beq.n	8001942 <SPI_EndRxTxTransaction+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001956:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001958:	f043 0320 	orr.w	r3, r3, #32
 800195c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800195e:	2003      	movs	r0, #3
 8001960:	e7f0      	b.n	8001944 <SPI_EndRxTxTransaction+0x3c>
 8001962:	bf00      	nop
 8001964:	20000018 	.word	0x20000018
 8001968:	165e9f81 	.word	0x165e9f81

0800196c <HAL_SPI_Init>:
  if (hspi == NULL)
 800196c:	2800      	cmp	r0, #0
 800196e:	d03b      	beq.n	80019e8 <HAL_SPI_Init+0x7c>
{
 8001970:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001972:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800197a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800197e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001980:	b362      	cbz	r2, 80019dc <HAL_SPI_Init+0x70>
 8001982:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001984:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001988:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800198c:	432b      	orrs	r3, r5
 800198e:	4313      	orrs	r3, r2
 8001990:	6962      	ldr	r2, [r4, #20]
 8001992:	69e5      	ldr	r5, [r4, #28]
 8001994:	6a26      	ldr	r6, [r4, #32]
 8001996:	430b      	orrs	r3, r1
 8001998:	4313      	orrs	r3, r2
 800199a:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800199c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800199e:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 80019a0:	2502      	movs	r5, #2
 80019a2:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019a6:	4333      	orrs	r3, r6
 80019a8:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 80019ac:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019ae:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80019b0:	0c12      	lsrs	r2, r2, #16
 80019b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80019b4:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019b8:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80019ba:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 80019bc:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 80019c0:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019c2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80019c4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019c6:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019c8:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80019ce:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019d0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019d2:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019d4:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  return HAL_OK;
 80019d8:	4610      	mov	r0, r2
}
 80019da:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80019dc:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80019e0:	f001 ff4a 	bl	8003878 <HAL_SPI_MspInit>
 80019e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80019e6:	e7cd      	b.n	8001984 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
}
 80019ea:	4770      	bx	lr

080019ec <HAL_SPI_Transmit>:
{
 80019ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80019f2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80019f6:	2801      	cmp	r0, #1
{
 80019f8:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80019fa:	d062      	beq.n	8001ac2 <HAL_SPI_Transmit+0xd6>
 80019fc:	461d      	mov	r5, r3
 80019fe:	2301      	movs	r3, #1
 8001a00:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001a04:	4688      	mov	r8, r1
 8001a06:	4617      	mov	r7, r2
 8001a08:	f7ff fa80 	bl	8000f0c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001a0c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001a10:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001a12:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001a14:	b2d8      	uxtb	r0, r3
 8001a16:	d009      	beq.n	8001a2c <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8001a18:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001a1a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001a1c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001a1e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a22:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001a26:	b002      	add	sp, #8
 8001a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8001a2c:	f1b8 0f00 	cmp.w	r8, #0
 8001a30:	d0f3      	beq.n	8001a1a <HAL_SPI_Transmit+0x2e>
 8001a32:	2f00      	cmp	r7, #0
 8001a34:	d0f1      	beq.n	8001a1a <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a36:	2303      	movs	r3, #3
 8001a38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a3c:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a3e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001a46:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001a4a:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a4c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001a4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8001a50:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8001a52:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8001a54:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a56:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001a5a:	bf02      	ittt	eq
 8001a5c:	681a      	ldreq	r2, [r3, #0]
 8001a5e:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001a62:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	0652      	lsls	r2, r2, #25
 8001a68:	d403      	bmi.n	8001a72 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a70:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a72:	68e2      	ldr	r2, [r4, #12]
 8001a74:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a78:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a7a:	d026      	beq.n	8001aca <HAL_SPI_Transmit+0xde>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a7c:	2a00      	cmp	r2, #0
 8001a7e:	d04b      	beq.n	8001b18 <HAL_SPI_Transmit+0x12c>
 8001a80:	2f01      	cmp	r7, #1
 8001a82:	d049      	beq.n	8001b18 <HAL_SPI_Transmit+0x12c>
    while (hspi->TxXferCount > 0U)
 8001a84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	b973      	cbnz	r3, 8001aa8 <HAL_SPI_Transmit+0xbc>
 8001a8a:	e050      	b.n	8001b2e <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001a92:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a96:	3a01      	subs	r2, #1
 8001a98:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a9a:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8001a9c:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a9e:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001aa0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d042      	beq.n	8001b2e <HAL_SPI_Transmit+0x142>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	0792      	lsls	r2, r2, #30
 8001aae:	d4ed      	bmi.n	8001a8c <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ab0:	f7ff fa2c 	bl	8000f0c <HAL_GetTick>
 8001ab4:	1b80      	subs	r0, r0, r6
 8001ab6:	42a8      	cmp	r0, r5
 8001ab8:	d3f2      	bcc.n	8001aa0 <HAL_SPI_Transmit+0xb4>
 8001aba:	1c6b      	adds	r3, r5, #1
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_SPI_Transmit+0xb4>
          errorcode = HAL_TIMEOUT;
 8001abe:	2003      	movs	r0, #3
 8001ac0:	e7ab      	b.n	8001a1a <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8001ac2:	2002      	movs	r0, #2
}
 8001ac4:	b002      	add	sp, #8
 8001ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aca:	2a00      	cmp	r2, #0
 8001acc:	d145      	bne.n	8001b5a <HAL_SPI_Transmit+0x16e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ace:	4641      	mov	r1, r8
 8001ad0:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001ad4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001ad6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ad8:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001ada:	3a01      	subs	r2, #1
 8001adc:	b292      	uxth	r2, r2
 8001ade:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001ae0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	b96a      	cbnz	r2, 8001b02 <HAL_SPI_Transmit+0x116>
 8001ae6:	e022      	b.n	8001b2e <HAL_SPI_Transmit+0x142>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ae8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001aea:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001aee:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8001af0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001af2:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001afa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	b1b3      	cbz	r3, 8001b2e <HAL_SPI_Transmit+0x142>
 8001b00:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	0790      	lsls	r0, r2, #30
 8001b06:	d4ef      	bmi.n	8001ae8 <HAL_SPI_Transmit+0xfc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b08:	f7ff fa00 	bl	8000f0c <HAL_GetTick>
 8001b0c:	1b80      	subs	r0, r0, r6
 8001b0e:	42a8      	cmp	r0, r5
 8001b10:	d3f3      	bcc.n	8001afa <HAL_SPI_Transmit+0x10e>
 8001b12:	1c69      	adds	r1, r5, #1
 8001b14:	d0f1      	beq.n	8001afa <HAL_SPI_Transmit+0x10e>
 8001b16:	e7d2      	b.n	8001abe <HAL_SPI_Transmit+0xd2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b18:	f898 2000 	ldrb.w	r2, [r8]
 8001b1c:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001b1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b20:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b26:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8001b28:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b2a:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001b2c:	e7aa      	b.n	8001a84 <HAL_SPI_Transmit+0x98>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b2e:	4632      	mov	r2, r6
 8001b30:	4629      	mov	r1, r5
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff fee8 	bl	8001908 <SPI_EndRxTxTransaction>
 8001b38:	b108      	cbz	r0, 8001b3e <HAL_SPI_Transmit+0x152>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b3e:	68a3      	ldr	r3, [r4, #8]
 8001b40:	b933      	cbnz	r3, 8001b50 <HAL_SPI_Transmit+0x164>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b42:	6822      	ldr	r2, [r4, #0]
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	68d3      	ldr	r3, [r2, #12]
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	6893      	ldr	r3, [r2, #8]
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b50:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001b52:	3800      	subs	r0, #0
 8001b54:	bf18      	it	ne
 8001b56:	2001      	movne	r0, #1
error:
 8001b58:	e75f      	b.n	8001a1a <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b5a:	2f01      	cmp	r7, #1
 8001b5c:	d1c0      	bne.n	8001ae0 <HAL_SPI_Transmit+0xf4>
 8001b5e:	e7b6      	b.n	8001ace <HAL_SPI_Transmit+0xe2>

08001b60 <HAL_SPI_GetState>:
  return hspi->State;
 8001b60:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop

08001b68 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b68:	6a03      	ldr	r3, [r0, #32]
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6203      	str	r3, [r0, #32]
{
 8001b70:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b72:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b74:	4c12      	ldr	r4, [pc, #72]	; (8001bc0 <TIM_OC1_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8001b76:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b78:	6982      	ldr	r2, [r0, #24]
  tmpccer |= OC_Config->OCPolarity;
 8001b7a:	688e      	ldr	r6, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8001b7c:	680d      	ldr	r5, [r1, #0]
  tmpccer &= ~TIM_CCER_CC1P;
 8001b7e:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b82:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b86:	42a0      	cmp	r0, r4
  tmpccer |= OC_Config->OCPolarity;
 8001b88:	ea43 0306 	orr.w	r3, r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8001b8c:	ea42 0205 	orr.w	r2, r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b90:	d009      	beq.n	8001ba6 <TIM_OC1_SetConfig+0x3e>
 8001b92:	4d0c      	ldr	r5, [pc, #48]	; (8001bc4 <TIM_OC1_SetConfig+0x5c>)
 8001b94:	42a8      	cmp	r0, r5
 8001b96:	d006      	beq.n	8001ba6 <TIM_OC1_SetConfig+0x3e>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b98:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001b9a:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b9c:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8001ba0:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001ba2:	6203      	str	r3, [r0, #32]
}
 8001ba4:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8001ba6:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ba8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001bac:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bae:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bb2:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bb6:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bbc:	4327      	orrs	r7, r4
 8001bbe:	e7eb      	b.n	8001b98 <TIM_OC1_SetConfig+0x30>
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bc8:	6a03      	ldr	r3, [r0, #32]
 8001bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bce:	6203      	str	r3, [r0, #32]
{
 8001bd0:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bd2:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bd4:	4c13      	ldr	r4, [pc, #76]	; (8001c24 <TIM_OC3_SetConfig+0x5c>)
  tmpcr2 =  TIMx->CR2;
 8001bd6:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001bd8:	69c2      	ldr	r2, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bda:	688e      	ldr	r6, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8001bdc:	680d      	ldr	r5, [r1, #0]
  tmpccer &= ~TIM_CCER_CC3P;
 8001bde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001be2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001be6:	42a0      	cmp	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001be8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8001bec:	ea42 0205 	orr.w	r2, r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bf0:	d009      	beq.n	8001c06 <TIM_OC3_SetConfig+0x3e>
 8001bf2:	4d0d      	ldr	r5, [pc, #52]	; (8001c28 <TIM_OC3_SetConfig+0x60>)
 8001bf4:	42a8      	cmp	r0, r5
 8001bf6:	d006      	beq.n	8001c06 <TIM_OC3_SetConfig+0x3e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001bf8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001bfa:	6047      	str	r7, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001bfc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001bfe:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8001c00:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001c02:	6203      	str	r3, [r0, #32]
}
 8001c04:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c06:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c0c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c10:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c14:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c18:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c1e:	ea47 1704 	orr.w	r7, r7, r4, lsl #4
 8001c22:	e7e9      	b.n	8001bf8 <TIM_OC3_SetConfig+0x30>
 8001c24:	40010000 	.word	0x40010000
 8001c28:	40010400 	.word	0x40010400

08001c2c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c2c:	6a03      	ldr	r3, [r0, #32]
 8001c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c32:	6203      	str	r3, [r0, #32]
{
 8001c34:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c36:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c38:	4f0f      	ldr	r7, [pc, #60]	; (8001c78 <TIM_OC4_SetConfig+0x4c>)
  tmpcr2 =  TIMx->CR2;
 8001c3a:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c3c:	69c2      	ldr	r2, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c3e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c40:	680c      	ldr	r4, [r1, #0]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c46:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c4a:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c4c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c50:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c54:	d009      	beq.n	8001c6a <TIM_OC4_SetConfig+0x3e>
 8001c56:	4c09      	ldr	r4, [pc, #36]	; (8001c7c <TIM_OC4_SetConfig+0x50>)
 8001c58:	42a0      	cmp	r0, r4
 8001c5a:	d006      	beq.n	8001c6a <TIM_OC4_SetConfig+0x3e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c5c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c5e:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c60:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001c62:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8001c64:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001c66:	6203      	str	r3, [r0, #32]
}
 8001c68:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c6a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c6c:	f426 4680 	bic.w	r6, r6, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c70:	ea46 1684 	orr.w	r6, r6, r4, lsl #6
 8001c74:	e7f2      	b.n	8001c5c <TIM_OC4_SetConfig+0x30>
 8001c76:	bf00      	nop
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40010400 	.word	0x40010400

08001c80 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c80:	6802      	ldr	r2, [r0, #0]
{
 8001c82:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 8001c84:	6893      	ldr	r3, [r2, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001c86:	e9d1 4000 	ldrd	r4, r0, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001c8e:	4303      	orrs	r3, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001c90:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001c94:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001c96:	2860      	cmp	r0, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8001c98:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8001c9a:	d028      	beq.n	8001cee <TIM_SlaveTimer_SetConfig+0x6e>
 8001c9c:	d817      	bhi.n	8001cce <TIM_SlaveTimer_SetConfig+0x4e>
 8001c9e:	2840      	cmp	r0, #64	; 0x40
 8001ca0:	d03a      	beq.n	8001d18 <TIM_SlaveTimer_SetConfig+0x98>
 8001ca2:	2850      	cmp	r0, #80	; 0x50
 8001ca4:	d120      	bne.n	8001ce8 <TIM_SlaveTimer_SetConfig+0x68>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ca6:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ca8:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001caa:	6888      	ldr	r0, [r1, #8]
 8001cac:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cae:	f025 0501 	bic.w	r5, r5, #1
 8001cb2:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cb4:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cb6:	f024 010a 	bic.w	r1, r4, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8001cbe:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cc0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cc4:	6193      	str	r3, [r2, #24]
  return HAL_OK;
 8001cc6:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8001cc8:	6211      	str	r1, [r2, #32]
}
 8001cca:	bc70      	pop	{r4, r5, r6}
 8001ccc:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8001cce:	2870      	cmp	r0, #112	; 0x70
 8001cd0:	d10a      	bne.n	8001ce8 <TIM_SlaveTimer_SetConfig+0x68>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cd2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8001cd6:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8001cd8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cda:	4323      	orrs	r3, r4
 8001cdc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ce0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ce4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ce6:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 8001ce8:	2000      	movs	r0, #0
}
 8001cea:	bc70      	pop	{r4, r5, r6}
 8001cec:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cee:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cf0:	688c      	ldr	r4, [r1, #8]
 8001cf2:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cf4:	f020 0010 	bic.w	r0, r0, #16
 8001cf8:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cfa:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8001cfc:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cfe:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d06:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d0a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001d0e:	6191      	str	r1, [r2, #24]
  return HAL_OK;
 8001d10:	2000      	movs	r0, #0
}
 8001d12:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8001d14:	6213      	str	r3, [r2, #32]
}
 8001d16:	4770      	bx	lr
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001d18:	2c05      	cmp	r4, #5
 8001d1a:	d00f      	beq.n	8001d3c <TIM_SlaveTimer_SetConfig+0xbc>
      tmpccer = htim->Instance->CCER;
 8001d1c:	6a14      	ldr	r4, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001d1e:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001d20:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001d22:	f020 0001 	bic.w	r0, r0, #1
 8001d26:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001d28:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001d2e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001d32:	6193      	str	r3, [r2, #24]
  return HAL_OK;
 8001d34:	2000      	movs	r0, #0
      htim->Instance->CCER = tmpccer;
 8001d36:	6214      	str	r4, [r2, #32]
}
 8001d38:	bc70      	pop	{r4, r5, r6}
 8001d3a:	4770      	bx	lr
        return HAL_ERROR;
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	e7c4      	b.n	8001cca <TIM_SlaveTimer_SetConfig+0x4a>

08001d40 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d40:	6803      	ldr	r3, [r0, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d50:	2a06      	cmp	r2, #6
 8001d52:	d003      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIM_OC_MspInit>:
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <HAL_TIM_SlaveConfigSynchro>:
{
 8001d64:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001d66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d01e      	beq.n	8001dac <HAL_TIM_SlaveConfigSynchro+0x48>
 8001d6e:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8001d72:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001d76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	f7ff ff80 	bl	8001c80 <TIM_SlaveTimer_SetConfig>
 8001d80:	b968      	cbnz	r0, 8001d9e <HAL_TIM_SlaveConfigSynchro+0x3a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d8a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d92:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d98:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d9c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(htim);
 8001d9e:	2300      	movs	r3, #0
      htim->State = HAL_TIM_STATE_READY;
 8001da0:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001da4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8001da8:	4628      	mov	r0, r5
}
 8001daa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001dac:	2002      	movs	r0, #2
}
 8001dae:	bd38      	pop	{r3, r4, r5, pc}

08001db0 <HAL_TIM_OC_DelayElapsedCallback>:
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop

08001db4 <HAL_TIM_IC_CaptureCallback>:
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop

08001db8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop

08001dbc <HAL_TIM_TriggerCallback>:
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop

08001dc0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc0:	6803      	ldr	r3, [r0, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	0791      	lsls	r1, r2, #30
{
 8001dc6:	b510      	push	{r4, lr}
 8001dc8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dca:	d502      	bpl.n	8001dd2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	0792      	lsls	r2, r2, #30
 8001dd0:	d45f      	bmi.n	8001e92 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	0750      	lsls	r0, r2, #29
 8001dd6:	d502      	bpl.n	8001dde <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	0751      	lsls	r1, r2, #29
 8001ddc:	d446      	bmi.n	8001e6c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	0712      	lsls	r2, r2, #28
 8001de2:	d502      	bpl.n	8001dea <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	0710      	lsls	r0, r2, #28
 8001de8:	d42e      	bmi.n	8001e48 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	06d2      	lsls	r2, r2, #27
 8001dee:	d502      	bpl.n	8001df6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	06d0      	lsls	r0, r2, #27
 8001df4:	d418      	bmi.n	8001e28 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	07d1      	lsls	r1, r2, #31
 8001dfa:	d502      	bpl.n	8001e02 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	07d2      	lsls	r2, r2, #31
 8001e00:	d45d      	bmi.n	8001ebe <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	0610      	lsls	r0, r2, #24
 8001e06:	d502      	bpl.n	8001e0e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	0611      	lsls	r1, r2, #24
 8001e0c:	d45f      	bmi.n	8001ece <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	0652      	lsls	r2, r2, #25
 8001e12:	d502      	bpl.n	8001e1a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	0650      	lsls	r0, r2, #25
 8001e18:	d461      	bmi.n	8001ede <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	0691      	lsls	r1, r2, #26
 8001e1e:	d502      	bpl.n	8001e26 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	0692      	lsls	r2, r2, #26
 8001e24:	d443      	bmi.n	8001eae <HAL_TIM_IRQHandler+0xee>
}
 8001e26:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e28:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e2c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e2e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e30:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001e38:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e3a:	d064      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3c:	f7ff ffba 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e40:	2200      	movs	r2, #0
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	7722      	strb	r2, [r4, #28]
 8001e46:	e7d6      	b.n	8001df6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e48:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e4c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e4e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e58:	d152      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	f7ff ffa9 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff ffaa 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e64:	2200      	movs	r2, #0
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	7722      	strb	r2, [r4, #28]
 8001e6a:	e7be      	b.n	8001dea <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e6c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e70:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e72:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e74:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7e:	d13c      	bne.n	8001efa <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e80:	f7ff ff96 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	4620      	mov	r0, r4
 8001e86:	f7ff ff97 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	7722      	strb	r2, [r4, #28]
 8001e90:	e7a5      	b.n	8001dde <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e92:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e96:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e98:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	079b      	lsls	r3, r3, #30
 8001ea0:	d025      	beq.n	8001eee <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	f7ff ff87 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	7722      	strb	r2, [r4, #28]
 8001eac:	e791      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eae:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001eb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb4:	611a      	str	r2, [r3, #16]
}
 8001eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001eba:	f000 b973 	b.w	80021a4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ebe:	f06f 0201 	mvn.w	r2, #1
 8001ec2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f001 fcb1 	bl	800382c <HAL_TIM_PeriodElapsedCallback>
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	e799      	b.n	8001e02 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ece:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f000 f967 	bl	80021a8 <HAL_TIMEx_BreakCallback>
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	e797      	b.n	8001e0e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ede:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ee2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff ff69 	bl	8001dbc <HAL_TIM_TriggerCallback>
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	e795      	b.n	8001e1a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	f7ff ff5f 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7ff ff60 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ef8:	e7d5      	b.n	8001ea6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	f7ff ff5b 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001efe:	e7c4      	b.n	8001e8a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f00:	f7ff ff58 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e7ae      	b.n	8001e64 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	f7ff ff53 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7ff ff54 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f10:	e796      	b.n	8001e40 <HAL_TIM_IRQHandler+0x80>
 8001f12:	bf00      	nop

08001f14 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f14:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8001f16:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f18:	4290      	cmp	r0, r2
{
 8001f1a:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f1c:	d043      	beq.n	8001fa6 <TIM_Base_SetConfig+0x92>
 8001f1e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f22:	d034      	beq.n	8001f8e <TIM_Base_SetConfig+0x7a>
 8001f24:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f28:	4290      	cmp	r0, r2
 8001f2a:	d030      	beq.n	8001f8e <TIM_Base_SetConfig+0x7a>
 8001f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f30:	4290      	cmp	r0, r2
 8001f32:	d02c      	beq.n	8001f8e <TIM_Base_SetConfig+0x7a>
 8001f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f38:	4290      	cmp	r0, r2
 8001f3a:	d028      	beq.n	8001f8e <TIM_Base_SetConfig+0x7a>
 8001f3c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f40:	4290      	cmp	r0, r2
 8001f42:	d030      	beq.n	8001fa6 <TIM_Base_SetConfig+0x92>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f44:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001f48:	4290      	cmp	r0, r2
 8001f4a:	d024      	beq.n	8001f96 <TIM_Base_SetConfig+0x82>
 8001f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f50:	4290      	cmp	r0, r2
 8001f52:	d020      	beq.n	8001f96 <TIM_Base_SetConfig+0x82>
 8001f54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f58:	4290      	cmp	r0, r2
 8001f5a:	d01c      	beq.n	8001f96 <TIM_Base_SetConfig+0x82>
 8001f5c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001f60:	4290      	cmp	r0, r2
 8001f62:	d018      	beq.n	8001f96 <TIM_Base_SetConfig+0x82>
 8001f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d014      	beq.n	8001f96 <TIM_Base_SetConfig+0x82>
 8001f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f70:	4290      	cmp	r0, r2
 8001f72:	d010      	beq.n	8001f96 <TIM_Base_SetConfig+0x82>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f74:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f76:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8001f78:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f7e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001f80:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8001f82:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f84:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f86:	6282      	str	r2, [r0, #40]	; 0x28
}
 8001f88:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8001f8a:	6143      	str	r3, [r0, #20]
}
 8001f8c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001f8e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f94:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f96:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f98:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f9a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8001f9c:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa2:	4333      	orrs	r3, r6
 8001fa4:	e7e9      	b.n	8001f7a <TIM_Base_SetConfig+0x66>
    tmpcr1 |= Structure->CounterMode;
 8001fa6:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa8:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001faa:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fb0:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fb6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fbc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001fbe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc0:	688b      	ldr	r3, [r1, #8]
 8001fc2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001fc4:	680b      	ldr	r3, [r1, #0]
 8001fc6:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc8:	690b      	ldr	r3, [r1, #16]
 8001fca:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001fcc:	2301      	movs	r3, #1
}
 8001fce:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8001fd0:	6143      	str	r3, [r0, #20]
}
 8001fd2:	4770      	bx	lr
 8001fd4:	40010000 	.word	0x40010000

08001fd8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001fd8:	b1c0      	cbz	r0, 800200c <HAL_TIM_Base_Init+0x34>
{
 8001fda:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001fdc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fe6:	b163      	cbz	r3, 8002002 <HAL_TIM_Base_Init+0x2a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fea:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff0:	f851 0b04 	ldr.w	r0, [r1], #4
 8001ff4:	f7ff ff8e 	bl	8001f14 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ffe:	2000      	movs	r0, #0
}
 8002000:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002002:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002006:	f001 fc6f 	bl	80038e8 <HAL_TIM_Base_MspInit>
 800200a:	e7ed      	b.n	8001fe8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800200c:	2001      	movs	r0, #1
}
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8002010:	b1c0      	cbz	r0, 8002044 <HAL_TIM_OC_Init+0x34>
{
 8002012:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002014:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002018:	4604      	mov	r4, r0
 800201a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800201e:	b163      	cbz	r3, 800203a <HAL_TIM_OC_Init+0x2a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002022:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002028:	f851 0b04 	ldr.w	r0, [r1], #4
 800202c:	f7ff ff72 	bl	8001f14 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002030:	2301      	movs	r3, #1
 8002032:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002036:	2000      	movs	r0, #0
}
 8002038:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800203a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800203e:	f7ff fe8f 	bl	8001d60 <HAL_TIM_OC_MspInit>
 8002042:	e7ed      	b.n	8002020 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 8002044:	2001      	movs	r0, #1
}
 8002046:	4770      	bx	lr

08002048 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002048:	6a03      	ldr	r3, [r0, #32]
 800204a:	f023 0310 	bic.w	r3, r3, #16
 800204e:	6203      	str	r3, [r0, #32]
{
 8002050:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8002052:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002054:	4c13      	ldr	r4, [pc, #76]	; (80020a4 <TIM_OC2_SetConfig+0x5c>)
  tmpcr2 =  TIMx->CR2;
 8002056:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002058:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800205a:	688e      	ldr	r6, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800205c:	680d      	ldr	r5, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 800205e:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002062:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002066:	42a0      	cmp	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002068:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800206c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002070:	d009      	beq.n	8002086 <TIM_OC2_SetConfig+0x3e>
 8002072:	4d0d      	ldr	r5, [pc, #52]	; (80020a8 <TIM_OC2_SetConfig+0x60>)
 8002074:	42a8      	cmp	r0, r5
 8002076:	d006      	beq.n	8002086 <TIM_OC2_SetConfig+0x3e>
  TIMx->CCR2 = OC_Config->Pulse;
 8002078:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800207a:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800207c:	6182      	str	r2, [r0, #24]
}
 800207e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8002080:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002082:	6203      	str	r3, [r0, #32]
}
 8002084:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002086:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800208c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002090:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002094:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002098:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800209a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800209e:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 80020a2:	e7e9      	b.n	8002078 <TIM_OC2_SetConfig+0x30>
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80020ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d028      	beq.n	8002106 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80020b8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80020c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 80020c4:	2a0c      	cmp	r2, #12
 80020c6:	d80b      	bhi.n	80020e0 <HAL_TIM_OC_ConfigChannel+0x34>
 80020c8:	e8df f002 	tbb	[pc, r2]
 80020cc:	0a0a0a07 	.word	0x0a0a0a07
 80020d0:	0a0a0a15 	.word	0x0a0a0a15
 80020d4:	0a0a0a19 	.word	0x0a0a0a19
 80020d8:	11          	.byte	0x11
 80020d9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020da:	6820      	ldr	r0, [r4, #0]
 80020dc:	f7ff fd44 	bl	8001b68 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80020e0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80020e2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80020e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80020e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80020ec:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020ee:	6820      	ldr	r0, [r4, #0]
 80020f0:	f7ff fd9c 	bl	8001c2c <TIM_OC4_SetConfig>
      break;
 80020f4:	e7f4      	b.n	80020e0 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020f6:	6820      	ldr	r0, [r4, #0]
 80020f8:	f7ff ffa6 	bl	8002048 <TIM_OC2_SetConfig>
      break;
 80020fc:	e7f0      	b.n	80020e0 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020fe:	6820      	ldr	r0, [r4, #0]
 8002100:	f7ff fd62 	bl	8001bc8 <TIM_OC3_SetConfig>
      break;
 8002104:	e7ec      	b.n	80020e0 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 8002106:	2002      	movs	r0, #2
}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop

0800210c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800210c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002110:	2a01      	cmp	r2, #1
 8002112:	d01a      	beq.n	800214a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
{
 8002114:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002116:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002118:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800211a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800211e:	e9d1 6500 	ldrd	r6, r5, [r1]
 8002122:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 8002124:	6860      	ldr	r0, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002126:	68a2      	ldr	r2, [r4, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002128:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800212c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002130:	4331      	orrs	r1, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002132:	432a      	orrs	r2, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002134:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 8002136:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8002138:	6061      	str	r1, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800213a:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800213c:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002140:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c

  return HAL_OK;
 8002144:	4628      	mov	r0, r5
}
 8002146:	bc70      	pop	{r4, r5, r6}
 8002148:	4770      	bx	lr
  __HAL_LOCK(htim);
 800214a:	2002      	movs	r0, #2
}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002150:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d022      	beq.n	800219e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8002158:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800215a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800215e:	4604      	mov	r4, r0
 8002160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002164:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002168:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800216a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800216e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002174:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002178:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800217a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800217e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002184:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002186:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002188:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800218a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800218e:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8002190:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8002192:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002194:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 8002198:	4608      	mov	r0, r1
}
 800219a:	bc30      	pop	{r4, r5}
 800219c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800219e:	2002      	movs	r0, #2
}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop

080021a4 <HAL_TIMEx_CommutCallback>:
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop

080021a8 <HAL_TIMEx_BreakCallback>:
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ac:	6802      	ldr	r2, [r0, #0]
 80021ae:	6911      	ldr	r1, [r2, #16]
{
 80021b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021b4:	68c5      	ldr	r5, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021b6:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021b8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 80021bc:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021be:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021c0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021c2:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 80021c4:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021c6:	6965      	ldr	r5, [r4, #20]
 80021c8:	4303      	orrs	r3, r0
 80021ca:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80021cc:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021d0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 80021d2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021d6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80021d8:	430b      	orrs	r3, r1
 80021da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021dc:	6953      	ldr	r3, [r2, #20]
 80021de:	69a1      	ldr	r1, [r4, #24]
 80021e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e4:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021ea:	6153      	str	r3, [r2, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021ec:	4b9b      	ldr	r3, [pc, #620]	; (800245c <UART_SetConfig+0x2b0>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ee:	f000 809a 	beq.w	8002326 <UART_SetConfig+0x17a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d059      	beq.n	80022aa <UART_SetConfig+0xfe>
 80021f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d055      	beq.n	80022aa <UART_SetConfig+0xfe>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021fe:	f7ff fb01 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002202:	4f97      	ldr	r7, [pc, #604]	; (8002460 <UART_SetConfig+0x2b4>)
 8002204:	6863      	ldr	r3, [r4, #4]
 8002206:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800220a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fbb0 f3f3 	udiv	r3, r0, r3
 8002214:	fba7 2303 	umull	r2, r3, r7, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	011d      	lsls	r5, r3, #4
 800221c:	f7ff faf2 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002220:	6866      	ldr	r6, [r4, #4]
 8002222:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002226:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800222a:	00b6      	lsls	r6, r6, #2
 800222c:	fbb0 f6f6 	udiv	r6, r0, r6
 8002230:	f7ff fae8 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002234:	6863      	ldr	r3, [r4, #4]
 8002236:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800223a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fbb0 f3f3 	udiv	r3, r0, r3
 8002244:	fba7 2303 	umull	r2, r3, r7, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800224e:	fb09 6313 	mls	r3, r9, r3, r6
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	3332      	adds	r3, #50	; 0x32
 8002256:	fba7 2303 	umull	r2, r3, r7, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002260:	f7ff fad0 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002264:	6862      	ldr	r2, [r4, #4]
 8002266:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800226a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800226e:	0093      	lsls	r3, r2, #2
 8002270:	fbb0 f8f3 	udiv	r8, r0, r3
 8002274:	f7ff fac6 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002278:	e9d4 2300 	ldrd	r2, r3, [r4]
 800227c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002280:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	fba7 1303 	umull	r1, r3, r7, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	fb09 8313 	mls	r3, r9, r3, r8
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	3332      	adds	r3, #50	; 0x32
 8002298:	fba7 1303 	umull	r1, r3, r7, r3
 800229c:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80022a0:	4333      	orrs	r3, r6
 80022a2:	442b      	add	r3, r5
 80022a4:	6093      	str	r3, [r2, #8]
    }
  }
}
 80022a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022aa:	f7ff fabb 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 80022ae:	4f6c      	ldr	r7, [pc, #432]	; (8002460 <UART_SetConfig+0x2b4>)
 80022b0:	6863      	ldr	r3, [r4, #4]
 80022b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c0:	fba7 2303 	umull	r2, r3, r7, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	011d      	lsls	r5, r3, #4
 80022c8:	f7ff faac 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 80022cc:	6866      	ldr	r6, [r4, #4]
 80022ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022d6:	00b6      	lsls	r6, r6, #2
 80022d8:	fbb0 f6f6 	udiv	r6, r0, r6
 80022dc:	f7ff faa2 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 80022e0:	6863      	ldr	r3, [r4, #4]
 80022e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f0:	fba7 2303 	umull	r2, r3, r7, r3
 80022f4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	fb09 6313 	mls	r3, r9, r3, r6
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	3332      	adds	r3, #50	; 0x32
 8002302:	fba7 2303 	umull	r2, r3, r7, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800230c:	f7ff fa8a 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 8002310:	6862      	ldr	r2, [r4, #4]
 8002312:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002316:	0093      	lsls	r3, r2, #2
 8002318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800231c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002320:	f7ff fa80 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 8002324:	e7a8      	b.n	8002278 <UART_SetConfig+0xcc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002326:	429a      	cmp	r2, r3
 8002328:	d059      	beq.n	80023de <UART_SetConfig+0x232>
 800232a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232e:	429a      	cmp	r2, r3
 8002330:	d055      	beq.n	80023de <UART_SetConfig+0x232>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002332:	f7ff fa67 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002336:	4f4a      	ldr	r7, [pc, #296]	; (8002460 <UART_SetConfig+0x2b4>)
 8002338:	6863      	ldr	r3, [r4, #4]
 800233a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800233e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fbb0 f3f3 	udiv	r3, r0, r3
 8002348:	fba7 2303 	umull	r2, r3, r7, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	011e      	lsls	r6, r3, #4
 8002350:	f7ff fa58 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002354:	6865      	ldr	r5, [r4, #4]
 8002356:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800235a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800235e:	006d      	lsls	r5, r5, #1
 8002360:	fbb0 f5f5 	udiv	r5, r0, r5
 8002364:	f7ff fa4e 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002368:	6863      	ldr	r3, [r4, #4]
 800236a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800236e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fbb0 f3f3 	udiv	r3, r0, r3
 8002378:	fba7 2303 	umull	r2, r3, r7, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002382:	fb09 5313 	mls	r3, r9, r3, r5
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	3332      	adds	r3, #50	; 0x32
 800238a:	fba7 2303 	umull	r2, r3, r7, r3
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002394:	f7ff fa36 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002398:	6862      	ldr	r2, [r4, #4]
 800239a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800239e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023a2:	0053      	lsls	r3, r2, #1
 80023a4:	fbb0 f8f3 	udiv	r8, r0, r3
 80023a8:	f7ff fa2c 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 80023ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80023b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	fba7 1303 	umull	r1, r3, r7, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	fb09 8313 	mls	r3, r9, r3, r8
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	3332      	adds	r3, #50	; 0x32
 80023cc:	fba7 1303 	umull	r1, r3, r7, r3
 80023d0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80023d4:	4433      	add	r3, r6
 80023d6:	442b      	add	r3, r5
 80023d8:	6093      	str	r3, [r2, #8]
}
 80023da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80023de:	f7ff fa21 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 80023e2:	4f1f      	ldr	r7, [pc, #124]	; (8002460 <UART_SetConfig+0x2b4>)
 80023e4:	6863      	ldr	r3, [r4, #4]
 80023e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f4:	fba7 2303 	umull	r2, r3, r7, r3
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	011e      	lsls	r6, r3, #4
 80023fc:	f7ff fa12 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 8002400:	6865      	ldr	r5, [r4, #4]
 8002402:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002406:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800240a:	006d      	lsls	r5, r5, #1
 800240c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002410:	f7ff fa08 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 8002414:	6863      	ldr	r3, [r4, #4]
 8002416:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800241a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fbb0 f3f3 	udiv	r3, r0, r3
 8002424:	fba7 2303 	umull	r2, r3, r7, r3
 8002428:	f04f 0964 	mov.w	r9, #100	; 0x64
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	fb09 5313 	mls	r3, r9, r3, r5
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	3332      	adds	r3, #50	; 0x32
 8002436:	fba7 2303 	umull	r2, r3, r7, r3
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002440:	f7ff f9f0 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 8002444:	6862      	ldr	r2, [r4, #4]
 8002446:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800244a:	0053      	lsls	r3, r2, #1
 800244c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002450:	fbb0 f8f3 	udiv	r8, r0, r3
 8002454:	f7ff f9e6 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 8002458:	e7a8      	b.n	80023ac <UART_SetConfig+0x200>
 800245a:	bf00      	nop
 800245c:	40011000 	.word	0x40011000
 8002460:	51eb851f 	.word	0x51eb851f

08002464 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002468:	4607      	mov	r7, r0
 800246a:	460e      	mov	r6, r1
 800246c:	4690      	mov	r8, r2
 800246e:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	e001      	b.n	8002478 <UART_WaitOnFlagUntilTimeout.constprop.0+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8002474:	1c6a      	adds	r2, r5, #1
 8002476:	d106      	bne.n	8002486 <UART_WaitOnFlagUntilTimeout.constprop.0+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002478:	681c      	ldr	r4, [r3, #0]
 800247a:	ea36 0204 	bics.w	r2, r6, r4
 800247e:	d1f9      	bne.n	8002474 <UART_WaitOnFlagUntilTimeout.constprop.0+0x10>
  return HAL_OK;
 8002480:	2000      	movs	r0, #0
}
 8002482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002486:	b135      	cbz	r5, 8002496 <UART_WaitOnFlagUntilTimeout.constprop.0+0x32>
 8002488:	f7fe fd40 	bl	8000f0c <HAL_GetTick>
 800248c:	eba0 0008 	sub.w	r0, r0, r8
 8002490:	4285      	cmp	r5, r0
 8002492:	d2ed      	bcs.n	8002470 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
 8002494:	683b      	ldr	r3, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800249c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249e:	695a      	ldr	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80024a0:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a2:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 80024a6:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a8:	615a      	str	r2, [r3, #20]
        __HAL_UNLOCK(huart);
 80024aa:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80024ac:	f887 1039 	strb.w	r1, [r7, #57]	; 0x39
        __HAL_UNLOCK(huart);
 80024b0:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 80024b4:	f887 103a 	strb.w	r1, [r7, #58]	; 0x3a
        return HAL_TIMEOUT;
 80024b8:	e7e3      	b.n	8002482 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>
 80024ba:	bf00      	nop

080024bc <HAL_UART_Init>:
  if (huart == NULL)
 80024bc:	b360      	cbz	r0, 8002518 <HAL_UART_Init+0x5c>
{
 80024be:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80024c0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024c4:	4604      	mov	r4, r0
 80024c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024ca:	b303      	cbz	r3, 800250e <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80024cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024ce:	2324      	movs	r3, #36	; 0x24
 80024d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80024d4:	68d3      	ldr	r3, [r2, #12]
 80024d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024da:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024dc:	4620      	mov	r0, r4
 80024de:	f7ff fe65 	bl	80021ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024f2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80024f4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80024f8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80024fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024fe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002500:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002502:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002506:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 800250a:	4628      	mov	r0, r5
}
 800250c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800250e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002512:	f001 fa35 	bl	8003980 <HAL_UART_MspInit>
 8002516:	e7d9      	b.n	80024cc <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
}
 800251a:	4770      	bx	lr

0800251c <HAL_UART_Transmit>:
{
 800251c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002520:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002522:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002526:	2820      	cmp	r0, #32
 8002528:	d154      	bne.n	80025d4 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 800252a:	460f      	mov	r7, r1
 800252c:	2900      	cmp	r1, #0
 800252e:	d04c      	beq.n	80025ca <HAL_UART_Transmit+0xae>
 8002530:	4615      	mov	r5, r2
 8002532:	2a00      	cmp	r2, #0
 8002534:	d049      	beq.n	80025ca <HAL_UART_Transmit+0xae>
 8002536:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8002538:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800253c:	2b01      	cmp	r3, #1
 800253e:	d049      	beq.n	80025d4 <HAL_UART_Transmit+0xb8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002540:	2300      	movs	r3, #0
 8002542:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8002544:	2201      	movs	r2, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002546:	2321      	movs	r3, #33	; 0x21
 8002548:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_LOCK(huart);
 800254c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8002550:	f7fe fcdc 	bl	8000f0c <HAL_GetTick>
    huart->TxXferCount = Size;
 8002554:	84e5      	strh	r5, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002556:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 8002558:	84a5      	strh	r5, [r4, #36]	; 0x24
    while (huart->TxXferCount > 0U)
 800255a:	b29b      	uxth	r3, r3
    tickstart = HAL_GetTick();
 800255c:	4681      	mov	r9, r0
    while (huart->TxXferCount > 0U)
 800255e:	b95b      	cbnz	r3, 8002578 <HAL_UART_Transmit+0x5c>
 8002560:	e026      	b.n	80025b0 <HAL_UART_Transmit+0x94>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	f7ff ff7f 	bl	8002464 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002566:	2800      	cmp	r0, #0
 8002568:	d137      	bne.n	80025da <HAL_UART_Transmit+0xbe>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	f817 2b01 	ldrb.w	r2, [r7], #1
 8002570:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002572:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002574:	b29b      	uxth	r3, r3
 8002576:	b1db      	cbz	r3, 80025b0 <HAL_UART_Transmit+0x94>
      huart->TxXferCount--;
 8002578:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800257a:	68a6      	ldr	r6, [r4, #8]
      huart->TxXferCount--;
 800257c:	3d01      	subs	r5, #1
 800257e:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002580:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002584:	4643      	mov	r3, r8
 8002586:	464a      	mov	r2, r9
 8002588:	f04f 0180 	mov.w	r1, #128	; 0x80
 800258c:	4620      	mov	r0, r4
      huart->TxXferCount--;
 800258e:	84e5      	strh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002590:	d1e7      	bne.n	8002562 <HAL_UART_Transmit+0x46>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	f7ff ff67 	bl	8002464 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002596:	bb00      	cbnz	r0, 80025da <HAL_UART_Transmit+0xbe>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002598:	883b      	ldrh	r3, [r7, #0]
 800259a:	6821      	ldr	r1, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800259c:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800259e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a2:	604b      	str	r3, [r1, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80025a4:	b9a2      	cbnz	r2, 80025d0 <HAL_UART_Transmit+0xb4>
    while (huart->TxXferCount > 0U)
 80025a6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80025a8:	b29b      	uxth	r3, r3
          pData += 2U;
 80025aa:	3702      	adds	r7, #2
    while (huart->TxXferCount > 0U)
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e3      	bne.n	8002578 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025b0:	4643      	mov	r3, r8
 80025b2:	464a      	mov	r2, r9
 80025b4:	2140      	movs	r1, #64	; 0x40
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7ff ff54 	bl	8002464 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80025bc:	b968      	cbnz	r0, 80025da <HAL_UART_Transmit+0xbe>
    huart->gState = HAL_UART_STATE_READY;
 80025be:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80025c0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80025c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80025c8:	e000      	b.n	80025cc <HAL_UART_Transmit+0xb0>
      return  HAL_ERROR;
 80025ca:	2001      	movs	r0, #1
}
 80025cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pData += 1U;
 80025d0:	3701      	adds	r7, #1
 80025d2:	e7ce      	b.n	8002572 <HAL_UART_Transmit+0x56>
    return HAL_BUSY;
 80025d4:	2002      	movs	r0, #2
}
 80025d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
}
 80025dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080025e0 <HAL_UART_TxCpltCallback>:
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <HAL_UART_RxCpltCallback>:
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop

080025e8 <UART_Receive_IT.part.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80025e8:	b508      	push	{r3, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025ea:	6883      	ldr	r3, [r0, #8]
 80025ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f0:	d017      	beq.n	8002622 <UART_Receive_IT.part.0+0x3a>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025f2:	6903      	ldr	r3, [r0, #16]
 80025f4:	b173      	cbz	r3, 8002614 <UART_Receive_IT.part.0+0x2c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025f6:	6803      	ldr	r3, [r0, #0]
 80025f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	1c51      	adds	r1, r2, #1
 80025fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002602:	6281      	str	r1, [r0, #40]	; 0x28
 8002604:	7013      	strb	r3, [r2, #0]
    if (--huart->RxXferCount == 0U)
 8002606:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002608:	3b01      	subs	r3, #1
 800260a:	b29b      	uxth	r3, r3
 800260c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800260e:	b19b      	cbz	r3, 8002638 <UART_Receive_IT.part.0+0x50>
}
 8002610:	2000      	movs	r0, #0
 8002612:	bd08      	pop	{r3, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002614:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002616:	6802      	ldr	r2, [r0, #0]
 8002618:	1c59      	adds	r1, r3, #1
 800261a:	6852      	ldr	r2, [r2, #4]
 800261c:	6281      	str	r1, [r0, #40]	; 0x28
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e7f1      	b.n	8002606 <UART_Receive_IT.part.0+0x1e>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002622:	6902      	ldr	r2, [r0, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002624:	6a83      	ldr	r3, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002626:	b9da      	cbnz	r2, 8002660 <UART_Receive_IT.part.0+0x78>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002628:	6802      	ldr	r2, [r0, #0]
 800262a:	6852      	ldr	r2, [r2, #4]
 800262c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002630:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8002634:	6283      	str	r3, [r0, #40]	; 0x28
 8002636:	e7e6      	b.n	8002606 <UART_Receive_IT.part.0+0x1e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002638:	6803      	ldr	r3, [r0, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	f022 0220 	bic.w	r2, r2, #32
 8002640:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002648:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800264a:	695a      	ldr	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800264c:	2120      	movs	r1, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002654:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002658:	f7ff ffc4 	bl	80025e4 <HAL_UART_RxCpltCallback>
}
 800265c:	2000      	movs	r0, #0
 800265e:	bd08      	pop	{r3, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002660:	6802      	ldr	r2, [r0, #0]
 8002662:	6852      	ldr	r2, [r2, #4]
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 800266a:	6283      	str	r3, [r0, #40]	; 0x28
 800266c:	e7cb      	b.n	8002606 <UART_Receive_IT.part.0+0x1e>
 800266e:	bf00      	nop

08002670 <HAL_UART_ErrorCallback>:
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop

08002674 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002674:	6803      	ldr	r3, [r0, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
{
 8002678:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800267a:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800267c:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800267e:	6959      	ldr	r1, [r3, #20]
{
 8002680:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002682:	d10c      	bne.n	800269e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002684:	0696      	lsls	r6, r2, #26
 8002686:	d501      	bpl.n	800268c <HAL_UART_IRQHandler+0x18>
 8002688:	06a9      	lsls	r1, r5, #26
 800268a:	d44d      	bmi.n	8002728 <HAL_UART_IRQHandler+0xb4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800268c:	0610      	lsls	r0, r2, #24
 800268e:	d501      	bpl.n	8002694 <HAL_UART_IRQHandler+0x20>
 8002690:	0629      	lsls	r1, r5, #24
 8002692:	d451      	bmi.n	8002738 <HAL_UART_IRQHandler+0xc4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002694:	0656      	lsls	r6, r2, #25
 8002696:	d501      	bpl.n	800269c <HAL_UART_IRQHandler+0x28>
 8002698:	0668      	lsls	r0, r5, #25
 800269a:	d469      	bmi.n	8002770 <HAL_UART_IRQHandler+0xfc>
}
 800269c:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800269e:	f001 0101 	and.w	r1, r1, #1
 80026a2:	f405 7090 	and.w	r0, r5, #288	; 0x120
 80026a6:	4308      	orrs	r0, r1
 80026a8:	d0f0      	beq.n	800268c <HAL_UART_IRQHandler+0x18>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026aa:	07d6      	lsls	r6, r2, #31
 80026ac:	d505      	bpl.n	80026ba <HAL_UART_IRQHandler+0x46>
 80026ae:	05e8      	lsls	r0, r5, #23
 80026b0:	d503      	bpl.n	80026ba <HAL_UART_IRQHandler+0x46>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80026b4:	f040 0001 	orr.w	r0, r0, #1
 80026b8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ba:	0756      	lsls	r6, r2, #29
 80026bc:	d529      	bpl.n	8002712 <HAL_UART_IRQHandler+0x9e>
 80026be:	b161      	cbz	r1, 80026da <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c2:	0790      	lsls	r0, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026c4:	f041 0102 	orr.w	r1, r1, #2
 80026c8:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ca:	f140 8083 	bpl.w	80027d4 <HAL_UART_IRQHandler+0x160>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80026d0:	f041 0104 	orr.w	r1, r1, #4
 80026d4:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d6:	0711      	lsls	r1, r2, #28
 80026d8:	d421      	bmi.n	800271e <HAL_UART_IRQHandler+0xaa>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80026dc:	2900      	cmp	r1, #0
 80026de:	d0dd      	beq.n	800269c <HAL_UART_IRQHandler+0x28>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026e0:	0692      	lsls	r2, r2, #26
 80026e2:	d509      	bpl.n	80026f8 <HAL_UART_IRQHandler+0x84>
 80026e4:	06ae      	lsls	r6, r5, #26
 80026e6:	d507      	bpl.n	80026f8 <HAL_UART_IRQHandler+0x84>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026e8:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 80026ec:	2a22      	cmp	r2, #34	; 0x22
 80026ee:	d103      	bne.n	80026f8 <HAL_UART_IRQHandler+0x84>
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff ff79 	bl	80025e8 <UART_Receive_IT.part.0>
 80026f6:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026f8:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026fa:	6be5      	ldr	r5, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026fc:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002700:	f005 0508 	and.w	r5, r5, #8
 8002704:	4315      	orrs	r5, r2
 8002706:	d13e      	bne.n	8002786 <HAL_UART_IRQHandler+0x112>
        HAL_UART_ErrorCallback(huart);
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff ffb1 	bl	8002670 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270e:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8002710:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002712:	0796      	lsls	r6, r2, #30
 8002714:	d457      	bmi.n	80027c6 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002716:	0710      	lsls	r0, r2, #28
 8002718:	d5df      	bpl.n	80026da <HAL_UART_IRQHandler+0x66>
 800271a:	2900      	cmp	r1, #0
 800271c:	d0dd      	beq.n	80026da <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800271e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002720:	f041 0108 	orr.w	r1, r1, #8
 8002724:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002726:	e7d8      	b.n	80026da <HAL_UART_IRQHandler+0x66>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002728:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800272c:	2b22      	cmp	r3, #34	; 0x22
 800272e:	d1b5      	bne.n	800269c <HAL_UART_IRQHandler+0x28>
}
 8002730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002734:	f7ff bf58 	b.w	80025e8 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002738:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800273c:	2a21      	cmp	r2, #33	; 0x21
 800273e:	d1ad      	bne.n	800269c <HAL_UART_IRQHandler+0x28>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002740:	68a2      	ldr	r2, [r4, #8]
 8002742:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002746:	6a22      	ldr	r2, [r4, #32]
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002748:	d047      	beq.n	80027da <HAL_UART_IRQHandler+0x166>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800274a:	1c51      	adds	r1, r2, #1
 800274c:	6221      	str	r1, [r4, #32]
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002752:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002754:	3a01      	subs	r2, #1
 8002756:	b292      	uxth	r2, r2
 8002758:	84e2      	strh	r2, [r4, #38]	; 0x26
 800275a:	2a00      	cmp	r2, #0
 800275c:	d19e      	bne.n	800269c <HAL_UART_IRQHandler+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002764:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800276c:	60da      	str	r2, [r3, #12]
}
 800276e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002770:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002772:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002778:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800277a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800277c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002780:	f7ff ff2e 	bl	80025e0 <HAL_UART_TxCpltCallback>
}
 8002784:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800278c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278e:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002790:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	0655      	lsls	r5, r2, #25
 80027a0:	d514      	bpl.n	80027cc <HAL_UART_IRQHandler+0x158>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a2:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80027a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027aa:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80027ac:	b170      	cbz	r0, 80027cc <HAL_UART_IRQHandler+0x158>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_UART_IRQHandler+0x180>)
 80027b0:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b2:	f7fe fc31 	bl	8001018 <HAL_DMA_Abort_IT>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	f43f af70 	beq.w	800269c <HAL_UART_IRQHandler+0x28>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80027be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80027c4:	4718      	bx	r3
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027c6:	2900      	cmp	r1, #0
 80027c8:	d181      	bne.n	80026ce <HAL_UART_IRQHandler+0x5a>
 80027ca:	e786      	b.n	80026da <HAL_UART_IRQHandler+0x66>
            HAL_UART_ErrorCallback(huart);
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7ff ff4f 	bl	8002670 <HAL_UART_ErrorCallback>
}
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027d4:	0711      	lsls	r1, r2, #28
 80027d6:	d4a2      	bmi.n	800271e <HAL_UART_IRQHandler+0xaa>
 80027d8:	e77f      	b.n	80026da <HAL_UART_IRQHandler+0x66>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027da:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027dc:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027de:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80027e2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027e4:	b910      	cbnz	r0, 80027ec <HAL_UART_IRQHandler+0x178>
        huart->pTxBuffPtr += 2U;
 80027e6:	3202      	adds	r2, #2
 80027e8:	6222      	str	r2, [r4, #32]
 80027ea:	e7b2      	b.n	8002752 <HAL_UART_IRQHandler+0xde>
        huart->pTxBuffPtr += 1U;
 80027ec:	3201      	adds	r2, #1
 80027ee:	6222      	str	r2, [r4, #32]
 80027f0:	e7af      	b.n	8002752 <HAL_UART_IRQHandler+0xde>
 80027f2:	bf00      	nop
 80027f4:	080027f9 	.word	0x080027f9

080027f8 <UART_DMAAbortOnError>:
{
 80027f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002800:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002802:	f7ff ff35 	bl	8002670 <HAL_UART_ErrorCallback>
}
 8002806:	bd08      	pop	{r3, pc}

08002808 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8002808:	b500      	push	{lr}
 800280a:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800280c:	b951      	cbnz	r1, 8002824 <dwt_writetodevice+0x1c>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800280e:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8002812:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8002816:	a901      	add	r1, sp, #4
 8002818:	2001      	movs	r0, #1
 800281a:	f001 fa21 	bl	8003c60 <writetospi>
} // end dwt_writetodevice()
 800281e:	b003      	add	sp, #12
 8002820:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002824:	f060 003f 	orn	r0, r0, #63	; 0x3f
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002828:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800282a:	f88d 0004 	strb.w	r0, [sp, #4]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800282e:	d808      	bhi.n	8002842 <dwt_writetodevice+0x3a>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002830:	f88d 1005 	strb.w	r1, [sp, #5]
 8002834:	2002      	movs	r0, #2
    writetospi(cnt,header,length,buffer);
 8002836:	a901      	add	r1, sp, #4
 8002838:	f001 fa12 	bl	8003c60 <writetospi>
} // end dwt_writetodevice()
 800283c:	b003      	add	sp, #12
 800283e:	f85d fb04 	ldr.w	pc, [sp], #4
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002842:	f061 007f 	orn	r0, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002846:	09c9      	lsrs	r1, r1, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002848:	f88d 0005 	strb.w	r0, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800284c:	f88d 1006 	strb.w	r1, [sp, #6]
 8002850:	2003      	movs	r0, #3
    writetospi(cnt,header,length,buffer);
 8002852:	a901      	add	r1, sp, #4
 8002854:	f001 fa04 	bl	8003c60 <writetospi>
} // end dwt_writetodevice()
 8002858:	b003      	add	sp, #12
 800285a:	f85d fb04 	ldr.w	pc, [sp], #4
 800285e:	bf00      	nop

08002860 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8002860:	b500      	push	{lr}
 8002862:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002864:	b941      	cbnz	r1, 8002878 <dwt_readfromdevice+0x18>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002866:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800286a:	a901      	add	r1, sp, #4
 800286c:	2001      	movs	r0, #1
 800286e:	f001 fa2d 	bl	8003ccc <readfromspi>
} // end dwt_readfromdevice()
 8002872:	b003      	add	sp, #12
 8002874:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002878:	f040 0040 	orr.w	r0, r0, #64	; 0x40
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800287c:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800287e:	f88d 0004 	strb.w	r0, [sp, #4]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002882:	d808      	bhi.n	8002896 <dwt_readfromdevice+0x36>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002884:	f88d 1005 	strb.w	r1, [sp, #5]
 8002888:	2002      	movs	r0, #2
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800288a:	a901      	add	r1, sp, #4
 800288c:	f001 fa1e 	bl	8003ccc <readfromspi>
} // end dwt_readfromdevice()
 8002890:	b003      	add	sp, #12
 8002892:	f85d fb04 	ldr.w	pc, [sp], #4
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002896:	f061 007f 	orn	r0, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800289a:	09c9      	lsrs	r1, r1, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800289c:	f88d 0005 	strb.w	r0, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80028a0:	f88d 1006 	strb.w	r1, [sp, #6]
 80028a4:	2003      	movs	r0, #3
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80028a6:	a901      	add	r1, sp, #4
 80028a8:	f001 fa10 	bl	8003ccc <readfromspi>
} // end dwt_readfromdevice()
 80028ac:	b003      	add	sp, #12
 80028ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80028b2:	bf00      	nop

080028b4 <dwt_readrxdata>:
{
 80028b4:	b410      	push	{r4}
 80028b6:	460c      	mov	r4, r1
 80028b8:	4603      	mov	r3, r0
 80028ba:	4611      	mov	r1, r2
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 80028bc:	2011      	movs	r0, #17
 80028be:	4622      	mov	r2, r4
}
 80028c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 80028c4:	f7ff bfcc 	b.w	8002860 <dwt_readfromdevice>

080028c8 <dwt_readdevid>:
{
 80028c8:	b530      	push	{r4, r5, lr}
 80028ca:	b083      	sub	sp, #12
{
    uint32  regval = 0 ;
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80028cc:	2100      	movs	r1, #0
 80028ce:	ad01      	add	r5, sp, #4
 80028d0:	4608      	mov	r0, r1
 80028d2:	2204      	movs	r2, #4
 80028d4:	462b      	mov	r3, r5
 80028d6:	f7ff ffc3 	bl	8002860 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 80028da:	f10d 0207 	add.w	r2, sp, #7
    uint32  regval = 0 ;
 80028de:	2000      	movs	r0, #0
    {
        regval = (regval << 8) + buffer[j] ;
 80028e0:	7814      	ldrb	r4, [r2, #0]
    for (j = 3 ; j >= 0 ; j --)
 80028e2:	42aa      	cmp	r2, r5
        regval = (regval << 8) + buffer[j] ;
 80028e4:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 80028e8:	f102 32ff 	add.w	r2, r2, #4294967295
 80028ec:	d1f8      	bne.n	80028e0 <dwt_readdevid+0x18>
}
 80028ee:	b003      	add	sp, #12
 80028f0:	bd30      	pop	{r4, r5, pc}
 80028f2:	bf00      	nop

080028f4 <dwt_read32bitoffsetreg>:
{
 80028f4:	b530      	push	{r4, r5, lr}
 80028f6:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80028f8:	ad01      	add	r5, sp, #4
 80028fa:	b280      	uxth	r0, r0
 80028fc:	2204      	movs	r2, #4
 80028fe:	b289      	uxth	r1, r1
 8002900:	462b      	mov	r3, r5
 8002902:	f7ff ffad 	bl	8002860 <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
 8002906:	f10d 0207 	add.w	r2, sp, #7
    uint32  regval = 0 ;
 800290a:	2000      	movs	r0, #0
        regval = (regval << 8) + buffer[j] ;
 800290c:	7814      	ldrb	r4, [r2, #0]
    for (j = 3 ; j >= 0 ; j --)
 800290e:	42aa      	cmp	r2, r5
        regval = (regval << 8) + buffer[j] ;
 8002910:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8002914:	f102 32ff 	add.w	r2, r2, #4294967295
 8002918:	d1f8      	bne.n	800290c <dwt_read32bitoffsetreg+0x18>
    }
    return regval ;

} // end dwt_read32bitoffsetreg()
 800291a:	b003      	add	sp, #12
 800291c:	bd30      	pop	{r4, r5, pc}
 800291e:	bf00      	nop

08002920 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8002920:	b510      	push	{r4, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	4614      	mov	r4, r2
    {
        buffer[j] = regval & 0xff ;
        regval >>= 8 ;
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002926:	b280      	uxth	r0, r0
 8002928:	b289      	uxth	r1, r1
 800292a:	ab01      	add	r3, sp, #4
 800292c:	2204      	movs	r2, #4
        buffer[j] = regval & 0xff ;
 800292e:	9401      	str	r4, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002930:	f7ff ff6a 	bl	8002808 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8002934:	b002      	add	sp, #8
 8002936:	bd10      	pop	{r4, pc}

08002938 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8002938:	b530      	push	{r4, r5, lr}
 800293a:	b083      	sub	sp, #12
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800293c:	ad01      	add	r5, sp, #4
{
 800293e:	4604      	mov	r4, r0
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002940:	462b      	mov	r3, r5
 8002942:	2202      	movs	r2, #2
 8002944:	2104      	movs	r1, #4
 8002946:	202d      	movs	r0, #45	; 0x2d
    buffer[0] = regval & 0xFF;
 8002948:	f8ad 4004 	strh.w	r4, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800294c:	f7ff ff5c 	bl	8002808 <dwt_writetodevice>

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8002950:	2403      	movs	r4, #3
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002952:	462b      	mov	r3, r5
 8002954:	2201      	movs	r2, #1
 8002956:	2106      	movs	r1, #6
 8002958:	202d      	movs	r0, #45	; 0x2d
 800295a:	f88d 4004 	strb.w	r4, [sp, #4]
 800295e:	f7ff ff53 	bl	8002808 <dwt_writetodevice>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8002962:	2400      	movs	r4, #0
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002964:	462b      	mov	r3, r5
 8002966:	2201      	movs	r2, #1
 8002968:	2106      	movs	r1, #6
 800296a:	202d      	movs	r0, #45	; 0x2d
 800296c:	f88d 4004 	strb.w	r4, [sp, #4]
 8002970:	f7ff ff4a 	bl	8002808 <dwt_writetodevice>
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002974:	2204      	movs	r2, #4
 8002976:	202d      	movs	r0, #45	; 0x2d
 8002978:	462b      	mov	r3, r5
 800297a:	210a      	movs	r1, #10
 800297c:	f7ff ff70 	bl	8002860 <dwt_readfromdevice>
    uint32  regval = 0 ;
 8002980:	4620      	mov	r0, r4
 8002982:	f10d 0207 	add.w	r2, sp, #7
        regval = (regval << 8) + buffer[j] ;
 8002986:	7813      	ldrb	r3, [r2, #0]
    for (j = 3 ; j >= 0 ; j --)
 8002988:	42aa      	cmp	r2, r5
        regval = (regval << 8) + buffer[j] ;
 800298a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 800298e:	f102 32ff 	add.w	r2, r2, #4294967295
 8002992:	d1f8      	bne.n	8002986 <_dwt_otpread+0x4e>
    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);

    // Return the 32bit of read data
    return ret_data;
}
 8002994:	b003      	add	sp, #12
 8002996:	bd30      	pop	{r4, r5, pc}

08002998 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8002998:	b510      	push	{r4, lr}
 800299a:	b082      	sub	sp, #8
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800299c:	f10d 0307 	add.w	r3, sp, #7
 80029a0:	2400      	movs	r4, #0
 80029a2:	2201      	movs	r2, #1
 80029a4:	2102      	movs	r1, #2
 80029a6:	202c      	movs	r0, #44	; 0x2c
 80029a8:	f88d 4007 	strb.w	r4, [sp, #7]
 80029ac:	f7ff ff2c 	bl	8002808 <dwt_writetodevice>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80029b0:	2102      	movs	r1, #2
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80029b2:	f10d 0307 	add.w	r3, sp, #7
 80029b6:	2201      	movs	r2, #1
 80029b8:	202c      	movs	r0, #44	; 0x2c
 80029ba:	f88d 1007 	strb.w	r1, [sp, #7]
 80029be:	f7ff ff23 	bl	8002808 <dwt_writetodevice>
}
 80029c2:	b002      	add	sp, #8
 80029c4:	bd10      	pop	{r4, pc}
 80029c6:	bf00      	nop

080029c8 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80029c8:	b530      	push	{r4, r5, lr}
 80029ca:	b083      	sub	sp, #12
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80029cc:	ab01      	add	r3, sp, #4
{
 80029ce:	4604      	mov	r4, r0
 80029d0:	256d      	movs	r5, #109	; 0x6d
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80029d2:	2201      	movs	r2, #1
 80029d4:	f640 0106 	movw	r1, #2054	; 0x806
 80029d8:	202e      	movs	r0, #46	; 0x2e
 80029da:	f88d 5004 	strb.w	r5, [sp, #4]
 80029de:	f7ff ff13 	bl	8002808 <dwt_writetodevice>
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80029e2:	ab01      	add	r3, sp, #4
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register

    if(prfIndex)
 80029e4:	b15c      	cbz	r4, 80029fe <_dwt_configlde+0x36>
    buffer[0] = regval & 0xFF;
 80029e6:	f240 6407 	movw	r4, #1543	; 0x607
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80029ea:	2202      	movs	r2, #2
 80029ec:	f641 0106 	movw	r1, #6150	; 0x1806
 80029f0:	202e      	movs	r0, #46	; 0x2e
    buffer[0] = regval & 0xFF;
 80029f2:	f8ad 4004 	strh.w	r4, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80029f6:	f7ff ff07 	bl	8002808 <dwt_writetodevice>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 80029fa:	b003      	add	sp, #12
 80029fc:	bd30      	pop	{r4, r5, pc}
    buffer[0] = regval & 0xFF;
 80029fe:	f241 6407 	movw	r4, #5639	; 0x1607
 8002a02:	e7f2      	b.n	80029ea <_dwt_configlde+0x22>

08002a04 <dwt_configure>:
{
 8002a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8 chan = config->chan ;
 8002a08:	7807      	ldrb	r7, [r0, #0]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8002a0a:	4ba8      	ldr	r3, [pc, #672]	; (8002cac <dwt_configure+0x2a8>)
 8002a0c:	7942      	ldrb	r2, [r0, #5]
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8002a0e:	4da8      	ldr	r5, [pc, #672]	; (8002cb0 <dwt_configure+0x2ac>)
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8002a10:	f890 8001 	ldrb.w	r8, [r0, #1]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8002a14:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8002a18:	6829      	ldr	r1, [r5, #0]
    if(DWT_BR_110K == config->dataRate)
 8002a1a:	79c3      	ldrb	r3, [r0, #7]
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8002a1c:	690a      	ldr	r2, [r1, #16]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8002a1e:	2f04      	cmp	r7, #4
 8002a20:	bf18      	it	ne
 8002a22:	f1a7 0a07 	subne.w	sl, r7, #7
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8002a26:	f108 38ff 	add.w	r8, r8, #4294967295
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8002a2a:	bf18      	it	ne
 8002a2c:	faba fa8a 	clzne	sl, sl
{
 8002a30:	b082      	sub	sp, #8
 8002a32:	4604      	mov	r4, r0
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8002a34:	fa5f f888 	uxtb.w	r8, r8
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8002a38:	bf14      	ite	ne
 8002a3a:	ea4f 1a5a 	movne.w	sl, sl, lsr #5
 8002a3e:	f04f 0a01 	moveq.w	sl, #1
    if(DWT_BR_110K == config->dataRate)
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 8114 	bne.w	8002c70 <dwt_configure+0x26c>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8002a48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8002a4c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8002a50:	610a      	str	r2, [r1, #16]
    pdw1000local->longFrames = config->phrMode ;
 8002a52:	7a23      	ldrb	r3, [r4, #8]
 8002a54:	728b      	strb	r3, [r1, #10]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8002a56:	041e      	lsls	r6, r3, #16
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8002a58:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8002a5c:	f406 3640 	and.w	r6, r6, #196608	; 0x30000
 8002a60:	4316      	orrs	r6, r2
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002a62:	2204      	movs	r2, #4
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8002a64:	610e      	str	r6, [r1, #16]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002a66:	eb0d 0302 	add.w	r3, sp, r2
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	2100      	movs	r1, #0
        buffer[j] = regval & 0xff ;
 8002a6e:	9601      	str	r6, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002a70:	f7ff feca 	bl	8002808 <dwt_writetodevice>
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002a74:	ab01      	add	r3, sp, #4
 8002a76:	2202      	movs	r2, #2
 8002a78:	f642 0104 	movw	r1, #10244	; 0x2804
 8002a7c:	202e      	movs	r0, #46	; 0x2e
    buffer[0] = regval & 0xFF;
 8002a7e:	f8ad 9004 	strh.w	r9, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002a82:	f7ff fec1 	bl	8002808 <dwt_writetodevice>
    _dwt_configlde(prfIndex);
 8002a86:	4640      	mov	r0, r8
 8002a88:	f7ff ff9e 	bl	80029c8 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8002a8c:	4b89      	ldr	r3, [pc, #548]	; (8002cb4 <dwt_configure+0x2b0>)
 8002a8e:	4a8a      	ldr	r2, [pc, #552]	; (8002cb8 <dwt_configure+0x2b4>)
 8002a90:	5dde      	ldrb	r6, [r3, r7]
 8002a92:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        buffer[j] = regval & 0xff ;
 8002a96:	9201      	str	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002a98:	ab01      	add	r3, sp, #4
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	2107      	movs	r1, #7
 8002a9e:	202b      	movs	r0, #43	; 0x2b
 8002aa0:	f7ff feb2 	bl	8002808 <dwt_writetodevice>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8002aa4:	4a85      	ldr	r2, [pc, #532]	; (8002cbc <dwt_configure+0x2b8>)
 8002aa6:	5d92      	ldrb	r2, [r2, r6]
 8002aa8:	f88d 2004 	strb.w	r2, [sp, #4]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002aac:	ab01      	add	r3, sp, #4
 8002aae:	2201      	movs	r2, #1
 8002ab0:	210b      	movs	r1, #11
 8002ab2:	202b      	movs	r0, #43	; 0x2b
 8002ab4:	f7ff fea8 	bl	8002808 <dwt_writetodevice>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8002ab8:	4a81      	ldr	r2, [pc, #516]	; (8002cc0 <dwt_configure+0x2bc>)
 8002aba:	f812 200a 	ldrb.w	r2, [r2, sl]
 8002abe:	f88d 2004 	strb.w	r2, [sp, #4]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002ac2:	ab01      	add	r3, sp, #4
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	210b      	movs	r1, #11
 8002ac8:	2028      	movs	r0, #40	; 0x28
 8002aca:	f7ff fe9d 	bl	8002808 <dwt_writetodevice>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8002ace:	4a7d      	ldr	r2, [pc, #500]	; (8002cc4 <dwt_configure+0x2c0>)
 8002ad0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        buffer[j] = regval & 0xff ;
 8002ad4:	9201      	str	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002ad6:	ab01      	add	r3, sp, #4
 8002ad8:	2204      	movs	r2, #4
 8002ada:	210c      	movs	r1, #12
 8002adc:	2028      	movs	r0, #40	; 0x28
 8002ade:	f7ff fe93 	bl	8002808 <dwt_writetodevice>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8002ae2:	79e2      	ldrb	r2, [r4, #7]
 8002ae4:	79a3      	ldrb	r3, [r4, #6]
 8002ae6:	4978      	ldr	r1, [pc, #480]	; (8002cc8 <dwt_configure+0x2c4>)
 8002ae8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002aec:	2202      	movs	r2, #2
 8002aee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    buffer[0] = regval & 0xFF;
 8002af2:	f8ad 3004 	strh.w	r3, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002af6:	4611      	mov	r1, r2
 8002af8:	ab01      	add	r3, sp, #4
 8002afa:	2027      	movs	r0, #39	; 0x27
 8002afc:	f7ff fe84 	bl	8002808 <dwt_writetodevice>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8002b00:	4a72      	ldr	r2, [pc, #456]	; (8002ccc <dwt_configure+0x2c8>)
 8002b02:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
    buffer[0] = regval & 0xFF;
 8002b06:	f8ad 2004 	strh.w	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002b0a:	ab01      	add	r3, sp, #4
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	2104      	movs	r1, #4
 8002b10:	2027      	movs	r0, #39	; 0x27
 8002b12:	f7ff fe79 	bl	8002808 <dwt_writetodevice>
    if(config->dataRate == DWT_BR_110K)
 8002b16:	79e3      	ldrb	r3, [r4, #7]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80bd 	beq.w	8002c98 <dwt_configure+0x294>
        if(config->txPreambLength == DWT_PLEN_64)
 8002b1e:	78a3      	ldrb	r3, [r4, #2]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	f000 8094 	beq.w	8002c4e <dwt_configure+0x24a>
    buffer[0] = regval & 0xFF;
 8002b26:	2620      	movs	r6, #32
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002b28:	ab01      	add	r3, sp, #4
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	2106      	movs	r1, #6
 8002b2e:	2027      	movs	r0, #39	; 0x27
    buffer[0] = regval & 0xFF;
 8002b30:	f8ad 6004 	strh.w	r6, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002b34:	f7ff fe68 	bl	8002808 <dwt_writetodevice>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8002b38:	2628      	movs	r6, #40	; 0x28
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002b3a:	ab01      	add	r3, sp, #4
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	2126      	movs	r1, #38	; 0x26
 8002b40:	2027      	movs	r0, #39	; 0x27
 8002b42:	f88d 6004 	strb.w	r6, [sp, #4]
 8002b46:	f7ff fe5f 	bl	8002808 <dwt_writetodevice>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8002b4a:	78e2      	ldrb	r2, [r4, #3]
 8002b4c:	4960      	ldr	r1, [pc, #384]	; (8002cd0 <dwt_configure+0x2cc>)
 8002b4e:	eb02 0288 	add.w	r2, r2, r8, lsl #2
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002b52:	ab01      	add	r3, sp, #4
 8002b54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
        buffer[j] = regval & 0xff ;
 8002b58:	9201      	str	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	2027      	movs	r0, #39	; 0x27
 8002b60:	f7ff fe52 	bl	8002808 <dwt_writetodevice>
    if(config->sfdTO == 0)
 8002b64:	8963      	ldrh	r3, [r4, #10]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d07b      	beq.n	8002c62 <dwt_configure+0x25e>
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	ea4f 2c13 	mov.w	ip, r3, lsr #8
        buffer[j] = regval & 0xff ;
 8002b70:	4e58      	ldr	r6, [pc, #352]	; (8002cd4 <dwt_configure+0x2d0>)
    buffer[0] = regval & 0xFF;
 8002b72:	f88d 2004 	strb.w	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002b76:	ab01      	add	r3, sp, #4
 8002b78:	2202      	movs	r2, #2
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	2027      	movs	r0, #39	; 0x27
    buffer[1] = regval >> 8 ;
 8002b7e:	f88d c005 	strb.w	ip, [sp, #5]
    buffer[0] = regval & 0xFF;
 8002b82:	eb06 0848 	add.w	r8, r6, r8, lsl #1
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002b86:	f7ff fe3f 	bl	8002808 <dwt_writetodevice>
        buffer[j] = regval & 0xff ;
 8002b8a:	6833      	ldr	r3, [r6, #0]
 8002b8c:	9301      	str	r3, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002b8e:	2204      	movs	r2, #4
 8002b90:	ab01      	add	r3, sp, #4
 8002b92:	210c      	movs	r1, #12
 8002b94:	2023      	movs	r0, #35	; 0x23
 8002b96:	f7ff fe37 	bl	8002808 <dwt_writetodevice>
    buffer[0] = regval & 0xFF;
 8002b9a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8002b9e:	f8ad 2004 	strh.w	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	ab01      	add	r3, sp, #4
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	2023      	movs	r0, #35	; 0x23
 8002baa:	f7ff fe2d 	bl	8002808 <dwt_writetodevice>
    if(config->nsSFD)
 8002bae:	79a1      	ldrb	r1, [r4, #6]
 8002bb0:	2900      	cmp	r1, #0
 8002bb2:	d161      	bne.n	8002c78 <dwt_configure+0x274>
 8002bb4:	460a      	mov	r2, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002bb6:	7866      	ldrb	r6, [r4, #1]
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8002bb8:	f894 c005 	ldrb.w	ip, [r4, #5]
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8002bbc:	7920      	ldrb	r0, [r4, #4]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002bbe:	f007 030f 	and.w	r3, r7, #15
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002bc2:	04b6      	lsls	r6, r6, #18
 8002bc4:	f406 2640 	and.w	r6, r6, #786432	; 0xc0000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002bc8:	ea43 63cc 	orr.w	r3, r3, ip, lsl #27
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8002bcc:	0580      	lsls	r0, r0, #22
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002bce:	4333      	orrs	r3, r6
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002bd0:	013f      	lsls	r7, r7, #4
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8002bd2:	f000 60f8 	and.w	r0, r0, #130023424	; 0x7c00000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002bd6:	b2ff      	uxtb	r7, r7
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002bd8:	4318      	orrs	r0, r3
 8002bda:	4338      	orrs	r0, r7
 8002bdc:	4308      	orrs	r0, r1
        buffer[j] = regval & 0xff ;
 8002bde:	2600      	movs	r6, #0
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002be0:	4310      	orrs	r0, r2
        regval >>= 8 ;
 8002be2:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8002be6:	0e07      	lsrs	r7, r0, #24
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002be8:	4631      	mov	r1, r6
 8002bea:	ab01      	add	r3, sp, #4
        buffer[j] = regval & 0xff ;
 8002bec:	f88d 0004 	strb.w	r0, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	201f      	movs	r0, #31
        buffer[j] = regval & 0xff ;
 8002bf4:	f88d c006 	strb.w	ip, [sp, #6]
 8002bf8:	f88d 7007 	strb.w	r7, [sp, #7]
 8002bfc:	f88d 6005 	strb.w	r6, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002c00:	f7ff fe02 	bl	8002808 <dwt_writetodevice>
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8002c04:	7860      	ldrb	r0, [r4, #1]
 8002c06:	78a2      	ldrb	r2, [r4, #2]
 8002c08:	79e3      	ldrb	r3, [r4, #7]
 8002c0a:	6829      	ldr	r1, [r5, #0]
 8002c0c:	4302      	orrs	r2, r0
 8002c0e:	035b      	lsls	r3, r3, #13
 8002c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c14:	60cb      	str	r3, [r1, #12]
        regval >>= 8 ;
 8002c16:	0a1d      	lsrs	r5, r3, #8
 8002c18:	0c1c      	lsrs	r4, r3, #16
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002c1a:	4631      	mov	r1, r6
 8002c1c:	ab01      	add	r3, sp, #4
 8002c1e:	2204      	movs	r2, #4
 8002c20:	2008      	movs	r0, #8
        buffer[j] = regval & 0xff ;
 8002c22:	f88d 4006 	strb.w	r4, [sp, #6]
 8002c26:	f88d 6004 	strb.w	r6, [sp, #4]
 8002c2a:	f88d 6007 	strb.w	r6, [sp, #7]
 8002c2e:	f88d 5005 	strb.w	r5, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002c32:	2442      	movs	r4, #66	; 0x42
 8002c34:	f7ff fde8 	bl	8002808 <dwt_writetodevice>
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002c38:	4631      	mov	r1, r6
 8002c3a:	ab01      	add	r3, sp, #4
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	200d      	movs	r0, #13
 8002c40:	f88d 4004 	strb.w	r4, [sp, #4]
 8002c44:	f7ff fde0 	bl	8002808 <dwt_writetodevice>
} // end dwt_configure()
 8002c48:	b002      	add	sp, #8
 8002c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    buffer[0] = regval & 0xFF;
 8002c4e:	2610      	movs	r6, #16
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002c50:	ab01      	add	r3, sp, #4
 8002c52:	2202      	movs	r2, #2
 8002c54:	2106      	movs	r1, #6
 8002c56:	2027      	movs	r0, #39	; 0x27
    buffer[0] = regval & 0xFF;
 8002c58:	f8ad 6004 	strh.w	r6, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002c5c:	f7ff fdd4 	bl	8002808 <dwt_writetodevice>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8002c60:	e76b      	b.n	8002b3a <dwt_configure+0x136>
        config->sfdTO = DWT_SFDTOC_DEF;
 8002c62:	f241 0341 	movw	r3, #4161	; 0x1041
 8002c66:	8163      	strh	r3, [r4, #10]
 8002c68:	f04f 0c10 	mov.w	ip, #16
 8002c6c:	2241      	movs	r2, #65	; 0x41
 8002c6e:	e77f      	b.n	8002b70 <dwt_configure+0x16c>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8002c70:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002c74:	610a      	str	r2, [r1, #16]
 8002c76:	e6ec      	b.n	8002a52 <dwt_configure+0x4e>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8002c78:	4917      	ldr	r1, [pc, #92]	; (8002cd8 <dwt_configure+0x2d4>)
 8002c7a:	79e2      	ldrb	r2, [r4, #7]
 8002c7c:	5c8a      	ldrb	r2, [r1, r2]
 8002c7e:	f88d 2004 	strb.w	r2, [sp, #4]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002c82:	2100      	movs	r1, #0
 8002c84:	2201      	movs	r2, #1
 8002c86:	ab01      	add	r3, sp, #4
 8002c88:	2021      	movs	r0, #33	; 0x21
 8002c8a:	f7ff fdbd 	bl	8002808 <dwt_writetodevice>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8002c8e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002c92:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002c96:	e78e      	b.n	8002bb6 <dwt_configure+0x1b2>
    buffer[0] = regval & 0xFF;
 8002c98:	2664      	movs	r6, #100	; 0x64
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002c9a:	ab01      	add	r3, sp, #4
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	2106      	movs	r1, #6
 8002ca0:	2027      	movs	r0, #39	; 0x27
    buffer[0] = regval & 0xFF;
 8002ca2:	f8ad 6004 	strh.w	r6, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002ca6:	f7ff fdaf 	bl	8002808 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002caa:	e74e      	b.n	8002b4a <dwt_configure+0x146>
 8002cac:	08008ad8 	.word	0x08008ad8
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	08008b84 	.word	0x08008b84
 8002cb8:	08008b54 	.word	0x08008b54
 8002cbc:	08008b4c 	.word	0x08008b4c
 8002cc0:	08008b48 	.word	0x08008b48
 8002cc4:	08008b6c 	.word	0x08008b6c
 8002cc8:	08008b30 	.word	0x08008b30
 8002ccc:	08008b2c 	.word	0x08008b2c
 8002cd0:	08008b0c 	.word	0x08008b0c
 8002cd4:	08008b40 	.word	0x08008b40
 8002cd8:	08008b3c 	.word	0x08008b3c

08002cdc <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8002cdc:	b530      	push	{r4, r5, lr}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	4604      	mov	r4, r0
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002ce2:	2536      	movs	r5, #54	; 0x36
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8002ce4:	466b      	mov	r3, sp
 8002ce6:	a901      	add	r1, sp, #4
 8002ce8:	2202      	movs	r2, #2
 8002cea:	2001      	movs	r0, #1
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002cec:	f88d 5004 	strb.w	r5, [sp, #4]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8002cf0:	f000 ffec 	bl	8003ccc <readfromspi>
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    switch(clocks)
 8002cf4:	2c0e      	cmp	r4, #14
 8002cf6:	d812      	bhi.n	8002d1e <_dwt_enableclocks+0x42>
 8002cf8:	e8df f004 	tbb	[pc, r4]
 8002cfc:	1135082c 	.word	0x1135082c
 8002d00:	3e111111 	.word	0x3e111111
 8002d04:	5611114d 	.word	0x5611114d
 8002d08:	645d      	.short	0x645d
 8002d0a:	27          	.byte	0x27
 8002d0b:	00          	.byte	0x00
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
            reg[1] = reg[1] & 0xfe;
 8002d0c:	f89d 3001 	ldrb.w	r3, [sp, #1]
            reg[0] = 0x00 ;
 8002d10:	2200      	movs	r2, #0
            reg[1] = reg[1] & 0xfe;
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	f88d 3001 	strb.w	r3, [sp, #1]
            reg[0] = 0x00 ;
 8002d1a:	f88d 2000 	strb.w	r2, [sp]
    writetospi(cnt,header,length,buffer);
 8002d1e:	2201      	movs	r2, #1
 8002d20:	466b      	mov	r3, sp
 8002d22:	a901      	add	r1, sp, #4
 8002d24:	4610      	mov	r0, r2
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002d26:	24b6      	movs	r4, #182	; 0xb6
 8002d28:	f88d 4004 	strb.w	r4, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8002d2c:	f000 ff98 	bl	8003c60 <writetospi>
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002d30:	f44f 74fb 	mov.w	r4, #502	; 0x1f6
    writetospi(cnt,header,length,buffer);
 8002d34:	a901      	add	r1, sp, #4
 8002d36:	f10d 0301 	add.w	r3, sp, #1
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2002      	movs	r0, #2
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002d3e:	f8ad 4004 	strh.w	r4, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8002d42:	f000 ff8d 	bl	8003c60 <writetospi>

    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);

} // end _dwt_enableclocks()
 8002d46:	b003      	add	sp, #12
 8002d48:	bd30      	pop	{r4, r5, pc}
            reg[0] = 0x01;
 8002d4a:	f240 3301 	movw	r3, #769	; 0x301
 8002d4e:	f8ad 3000 	strh.w	r3, [sp]
        break;
 8002d52:	e7e4      	b.n	8002d1e <_dwt_enableclocks+0x42>
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8002d54:	f89d 3000 	ldrb.w	r3, [sp]
 8002d58:	f023 0303 	bic.w	r3, r3, #3
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	f88d 3000 	strb.w	r3, [sp]
        break;
 8002d64:	e7db      	b.n	8002d1e <_dwt_enableclocks+0x42>
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8002d66:	f89d 3000 	ldrb.w	r3, [sp]
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	f88d 3000 	strb.w	r3, [sp]
        break;
 8002d76:	e7d2      	b.n	8002d1e <_dwt_enableclocks+0x42>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002d78:	f89d 3000 	ldrb.w	r3, [sp]
            reg[1] = 0x80 | reg[1];
 8002d7c:	f89d 2001 	ldrb.w	r2, [sp, #1]
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002d80:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002d84:	f043 0348 	orr.w	r3, r3, #72	; 0x48
            reg[1] = 0x80 | reg[1];
 8002d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002d8c:	f88d 3000 	strb.w	r3, [sp]
            reg[1] = 0x80 | reg[1];
 8002d90:	f88d 2001 	strb.w	r2, [sp, #1]
        break;
 8002d94:	e7c3      	b.n	8002d1e <_dwt_enableclocks+0x42>
            reg[0] = reg[0] & 0xb3;
 8002d96:	f8bd 3000 	ldrh.w	r3, [sp]
 8002d9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d9e:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002da2:	f8ad 3000 	strh.w	r3, [sp]
        break;
 8002da6:	e7ba      	b.n	8002d1e <_dwt_enableclocks+0x42>
            reg[1] = 0x02 | reg[1];
 8002da8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	f88d 3001 	strb.w	r3, [sp, #1]
        break;
 8002db4:	e7b3      	b.n	8002d1e <_dwt_enableclocks+0x42>
            reg[1] = reg[1] & 0xfd;
 8002db6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002dba:	f023 0302 	bic.w	r3, r3, #2
 8002dbe:	f88d 3001 	strb.w	r3, [sp, #1]
        break;
 8002dc2:	e7ac      	b.n	8002d1e <_dwt_enableclocks+0x42>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002dc4:	f89d 3000 	ldrb.w	r3, [sp]
 8002dc8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002dcc:	f043 0320 	orr.w	r3, r3, #32
 8002dd0:	f88d 3000 	strb.w	r3, [sp]
        break;
 8002dd4:	e7a3      	b.n	8002d1e <_dwt_enableclocks+0x42>
 8002dd6:	bf00      	nop

08002dd8 <_dwt_loaducodefromrom>:
{
 8002dd8:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_LDE);
 8002dda:	200e      	movs	r0, #14
{
 8002ddc:	b082      	sub	sp, #8
    _dwt_enableclocks(FORCE_LDE);
 8002dde:	f7ff ff7d 	bl	8002cdc <_dwt_enableclocks>
    buffer[0] = regval & 0xFF;
 8002de2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002de6:	ab01      	add	r3, sp, #4
 8002de8:	2202      	movs	r2, #2
 8002dea:	2106      	movs	r1, #6
 8002dec:	202d      	movs	r0, #45	; 0x2d
    buffer[0] = regval & 0xFF;
 8002dee:	f8ad 4004 	strh.w	r4, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002df2:	f7ff fd09 	bl	8002808 <dwt_writetodevice>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8002df6:	2001      	movs	r0, #1
 8002df8:	f000 ff30 	bl	8003c5c <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f7ff ff6d 	bl	8002cdc <_dwt_enableclocks>
}
 8002e02:	b002      	add	sp, #8
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop

08002e08 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8002e08:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8002e0a:	2000      	movs	r0, #0
{
 8002e0c:	b082      	sub	sp, #8
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8002e0e:	f7ff ff65 	bl	8002cdc <_dwt_enableclocks>
    buffer[0] = regval & 0xFF;
 8002e12:	2400      	movs	r4, #0
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002e14:	ab01      	add	r3, sp, #4
 8002e16:	2202      	movs	r2, #2
 8002e18:	2104      	movs	r1, #4
 8002e1a:	2036      	movs	r0, #54	; 0x36
    buffer[0] = regval & 0xFF;
 8002e1c:	f8ad 4004 	strh.w	r4, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002e20:	f7ff fcf2 	bl	8002808 <dwt_writetodevice>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
}
 8002e24:	b002      	add	sp, #8
 8002e26:	bd10      	pop	{r4, pc}

08002e28 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8002e28:	b500      	push	{lr}
 8002e2a:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002e2c:	f10d 0307 	add.w	r3, sp, #7
 8002e30:	2201      	movs	r2, #1
 8002e32:	2103      	movs	r1, #3
 8002e34:	200f      	movs	r0, #15
 8002e36:	f7ff fd13 	bl	8002860 <dwt_readfromdevice>
    return regval ;
 8002e3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002e3e:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
 8002e42:	061b      	lsls	r3, r3, #24
 8002e44:	d402      	bmi.n	8002e4c <dwt_syncrxbufptrs+0x24>
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    }
}
 8002e46:	b003      	add	sp, #12
 8002e48:	f85d fb04 	ldr.w	pc, [sp], #4
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8002e4c:	2201      	movs	r2, #1
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002e4e:	f10d 0307 	add.w	r3, sp, #7
 8002e52:	2103      	movs	r1, #3
 8002e54:	200d      	movs	r0, #13
 8002e56:	f88d 2007 	strb.w	r2, [sp, #7]
 8002e5a:	f7ff fcd5 	bl	8002808 <dwt_writetodevice>
}
 8002e5e:	b003      	add	sp, #12
 8002e60:	f85d fb04 	ldr.w	pc, [sp], #4

08002e64 <dwt_forcetrxoff>:
{
 8002e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e66:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002e68:	ad01      	add	r5, sp, #4
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	2100      	movs	r1, #0
 8002e70:	200e      	movs	r0, #14
 8002e72:	f7ff fcf5 	bl	8002860 <dwt_readfromdevice>
    uint32  regval = 0 ;
 8002e76:	2400      	movs	r4, #0
 8002e78:	f10d 0207 	add.w	r2, sp, #7
        regval = (regval << 8) + buffer[j] ;
 8002e7c:	7813      	ldrb	r3, [r2, #0]
    for (j = 3 ; j >= 0 ; j --)
 8002e7e:	4295      	cmp	r5, r2
        regval = (regval << 8) + buffer[j] ;
 8002e80:	eb03 2404 	add.w	r4, r3, r4, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8002e84:	f102 32ff 	add.w	r2, r2, #4294967295
 8002e88:	d1f8      	bne.n	8002e7c <dwt_forcetrxoff+0x18>
    stat = decamutexon() ;
 8002e8a:	f000 fed7 	bl	8003c3c <decamutexon>
        buffer[j] = regval & 0xff ;
 8002e8e:	2600      	movs	r6, #0
    stat = decamutexon() ;
 8002e90:	4607      	mov	r7, r0
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002e92:	4631      	mov	r1, r6
 8002e94:	462b      	mov	r3, r5
 8002e96:	2204      	movs	r2, #4
 8002e98:	200e      	movs	r0, #14
        buffer[j] = regval & 0xff ;
 8002e9a:	9601      	str	r6, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002e9c:	f7ff fcb4 	bl	8002808 <dwt_writetodevice>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8002ea0:	f04f 0c40 	mov.w	ip, #64	; 0x40
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002ea4:	4631      	mov	r1, r6
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	200d      	movs	r0, #13
 8002eac:	f88d c004 	strb.w	ip, [sp, #4]
 8002eb0:	f7ff fcaa 	bl	8002808 <dwt_writetodevice>
        buffer[j] = regval & 0xff ;
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <dwt_forcetrxoff+0x84>)
 8002eb6:	9301      	str	r3, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002eb8:	4631      	mov	r1, r6
 8002eba:	462b      	mov	r3, r5
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	200f      	movs	r0, #15
 8002ec0:	f7ff fca2 	bl	8002808 <dwt_writetodevice>
    dwt_syncrxbufptrs();
 8002ec4:	f7ff ffb0 	bl	8002e28 <dwt_syncrxbufptrs>
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002ec8:	462b      	mov	r3, r5
 8002eca:	4631      	mov	r1, r6
 8002ecc:	2204      	movs	r2, #4
 8002ece:	200e      	movs	r0, #14
        buffer[j] = regval & 0xff ;
 8002ed0:	9401      	str	r4, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002ed2:	f7ff fc99 	bl	8002808 <dwt_writetodevice>
    decamutexoff(stat) ;
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	f000 febc 	bl	8003c54 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <dwt_forcetrxoff+0x88>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	755e      	strb	r6, [r3, #21]
} // end deviceforcetrxoff()
 8002ee2:	b003      	add	sp, #12
 8002ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	2427fff8 	.word	0x2427fff8
 8002eec:	20000008 	.word	0x20000008

08002ef0 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8002ef0:	b530      	push	{r4, r5, lr}
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8002ef2:	0743      	lsls	r3, r0, #29
{
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	4604      	mov	r4, r0
    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8002ef8:	d527      	bpl.n	8002f4a <dwt_rxenable+0x5a>
        dwt_syncrxbufptrs();
    }

    temp = (uint16)SYS_CTRL_RXENAB ;

    if (mode & DWT_START_RX_DELAYED)
 8002efa:	f014 0501 	ands.w	r5, r4, #1
 8002efe:	d017      	beq.n	8002f30 <dwt_rxenable+0x40>
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002f00:	ab01      	add	r3, sp, #4
    buffer[0] = regval & 0xFF;
 8002f02:	f44f 7540 	mov.w	r5, #768	; 0x300
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002f06:	2202      	movs	r2, #2
 8002f08:	2100      	movs	r1, #0
 8002f0a:	200d      	movs	r0, #13
    buffer[0] = regval & 0xFF;
 8002f0c:	f8ad 5004 	strh.w	r5, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002f10:	f7ff fc7a 	bl	8002808 <dwt_writetodevice>
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002f14:	ab01      	add	r3, sp, #4
 8002f16:	2201      	movs	r2, #1
 8002f18:	2103      	movs	r1, #3
 8002f1a:	200f      	movs	r0, #15
 8002f1c:	f7ff fca0 	bl	8002860 <dwt_readfromdevice>
    return regval ;
 8002f20:	f89d 5004 	ldrb.w	r5, [sp, #4]
    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);

    if (mode & DWT_START_RX_DELAYED) // check for errors
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8002f24:	f015 0508 	ands.w	r5, r5, #8
 8002f28:	d112      	bne.n	8002f50 <dwt_rxenable+0x60>
            return DWT_ERROR; // return warning indication
        }
    }

    return DWT_SUCCESS;
} // end dwt_rxenable()
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	b003      	add	sp, #12
 8002f2e:	bd30      	pop	{r4, r5, pc}
    buffer[0] = regval & 0xFF;
 8002f30:	f44f 7480 	mov.w	r4, #256	; 0x100
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002f34:	ab01      	add	r3, sp, #4
 8002f36:	2202      	movs	r2, #2
 8002f38:	4629      	mov	r1, r5
 8002f3a:	200d      	movs	r0, #13
    buffer[0] = regval & 0xFF;
 8002f3c:	f8ad 4004 	strh.w	r4, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002f40:	f7ff fc62 	bl	8002808 <dwt_writetodevice>
} // end dwt_rxenable()
 8002f44:	4628      	mov	r0, r5
 8002f46:	b003      	add	sp, #12
 8002f48:	bd30      	pop	{r4, r5, pc}
        dwt_syncrxbufptrs();
 8002f4a:	f7ff ff6d 	bl	8002e28 <dwt_syncrxbufptrs>
 8002f4e:	e7d4      	b.n	8002efa <dwt_rxenable+0xa>
            dwt_forcetrxoff(); // turn the delayed receive off
 8002f50:	f7ff ff88 	bl	8002e64 <dwt_forcetrxoff>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8002f54:	f014 0102 	ands.w	r1, r4, #2
 8002f58:	d002      	beq.n	8002f60 <dwt_rxenable+0x70>
            return DWT_ERROR; // return warning indication
 8002f5a:	f04f 35ff 	mov.w	r5, #4294967295
 8002f5e:	e7e4      	b.n	8002f2a <dwt_rxenable+0x3a>
    buffer[0] = regval & 0xFF;
 8002f60:	f44f 7480 	mov.w	r4, #256	; 0x100
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002f64:	ab01      	add	r3, sp, #4
 8002f66:	2202      	movs	r2, #2
 8002f68:	200d      	movs	r0, #13
    buffer[0] = regval & 0xFF;
 8002f6a:	f8ad 4004 	strh.w	r4, [sp, #4]
            return DWT_ERROR; // return warning indication
 8002f6e:	f04f 35ff 	mov.w	r5, #4294967295
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002f72:	f7ff fc49 	bl	8002808 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002f76:	e7d8      	b.n	8002f2a <dwt_rxenable+0x3a>

08002f78 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8002f78:	b530      	push	{r4, r5, lr}
    buffer[0] = regval & 0xFF;
 8002f7a:	2400      	movs	r4, #0
{
 8002f7c:	b083      	sub	sp, #12
    _dwt_disablesequencing();
 8002f7e:	f7ff ff43 	bl	8002e08 <_dwt_disablesequencing>
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002f82:	4621      	mov	r1, r4
 8002f84:	ab01      	add	r3, sp, #4
 8002f86:	2202      	movs	r2, #2
 8002f88:	202c      	movs	r0, #44	; 0x2c
    buffer[0] = regval & 0xFF;
 8002f8a:	f8ad 4004 	strh.w	r4, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002f8e:	f7ff fc3b 	bl	8002808 <dwt_writetodevice>
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002f92:	ab01      	add	r3, sp, #4
 8002f94:	2201      	movs	r2, #1
 8002f96:	2106      	movs	r1, #6
 8002f98:	202c      	movs	r0, #44	; 0x2c
 8002f9a:	f88d 4004 	strb.w	r4, [sp, #4]
 8002f9e:	f7ff fc33 	bl	8002808 <dwt_writetodevice>
    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
    // Upload the new configuration
    _dwt_aonarrayupload();
 8002fa2:	f7ff fcf9 	bl	8002998 <_dwt_aonarrayupload>
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002fa6:	ab01      	add	r3, sp, #4
 8002fa8:	2201      	movs	r2, #1
 8002faa:	2103      	movs	r1, #3
 8002fac:	2036      	movs	r0, #54	; 0x36
 8002fae:	f88d 4004 	strb.w	r4, [sp, #4]
 8002fb2:	f7ff fc29 	bl	8002808 <dwt_writetodevice>
    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f000 fe50 	bl	8003c5c <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8002fbc:	25f0      	movs	r5, #240	; 0xf0
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002fbe:	ab01      	add	r3, sp, #4
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	2036      	movs	r0, #54	; 0x36
 8002fc6:	f88d 5004 	strb.w	r5, [sp, #4]
 8002fca:	f7ff fc1d 	bl	8002808 <dwt_writetodevice>

    pdw1000local->wait4resp = 0;
 8002fce:	4b02      	ldr	r3, [pc, #8]	; (8002fd8 <dwt_softreset+0x60>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	755c      	strb	r4, [r3, #21]
}
 8002fd4:	b003      	add	sp, #12
 8002fd6:	bd30      	pop	{r4, r5, pc}
 8002fd8:	20000008 	.word	0x20000008

08002fdc <dwt_initialise>:
{
 8002fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8002fe0:	4f9c      	ldr	r7, [pc, #624]	; (8003254 <dwt_initialise+0x278>)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2400      	movs	r4, #0
    pdw1000local->cbRxOk = NULL;
 8002fe6:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
    pdw1000local->cbRxErr = NULL;
 8002fea:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8002fee:	615c      	str	r4, [r3, #20]
{
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	4606      	mov	r6, r0
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8002ff4:	f7ff fc68 	bl	80028c8 <dwt_readdevid>
 8002ff8:	4b97      	ldr	r3, [pc, #604]	; (8003258 <dwt_initialise+0x27c>)
 8002ffa:	4298      	cmp	r0, r3
 8002ffc:	f040 8126 	bne.w	800324c <dwt_initialise+0x270>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8003000:	f016 0802 	ands.w	r8, r6, #2
 8003004:	f000 8095 	beq.w	8003132 <dwt_initialise+0x156>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8003008:	f016 09f8 	ands.w	r9, r6, #248	; 0xf8
 800300c:	f000 80ff 	beq.w	800320e <dwt_initialise+0x232>
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8003010:	ad01      	add	r5, sp, #4
 8003012:	4621      	mov	r1, r4
 8003014:	462b      	mov	r3, r5
 8003016:	2404      	movs	r4, #4
 8003018:	2201      	movs	r2, #1
 800301a:	2024      	movs	r0, #36	; 0x24
 800301c:	f88d 4004 	strb.w	r4, [sp, #4]
 8003020:	f7ff fbf2 	bl	8002808 <dwt_writetodevice>
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8003024:	f10d 0407 	add.w	r4, sp, #7
 8003028:	462b      	mov	r3, r5
 800302a:	2130      	movs	r1, #48	; 0x30
 800302c:	2204      	movs	r2, #4
 800302e:	2028      	movs	r0, #40	; 0x28
 8003030:	f7ff fc16 	bl	8002860 <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
 8003034:	4623      	mov	r3, r4
    uint32  regval = 0 ;
 8003036:	2100      	movs	r1, #0
        regval = (regval << 8) + buffer[j] ;
 8003038:	7818      	ldrb	r0, [r3, #0]
    for (j = 3 ; j >= 0 ; j --)
 800303a:	429d      	cmp	r5, r3
        regval = (regval << 8) + buffer[j] ;
 800303c:	eb00 2101 	add.w	r1, r0, r1, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8003040:	f103 33ff 	add.w	r3, r3, #4294967295
 8003044:	d1f8      	bne.n	8003038 <dwt_initialise+0x5c>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8003046:	f1b1 3f88 	cmp.w	r1, #2290649224	; 0x88888888
 800304a:	d004      	beq.n	8003056 <dwt_initialise+0x7a>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	8ad3      	ldrh	r3, [r2, #22]
 8003050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003054:	82d3      	strh	r3, [r2, #22]
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8003056:	f006 030a 	and.w	r3, r6, #10
 800305a:	2b0a      	cmp	r3, #10
 800305c:	f000 80ec 	beq.w	8003238 <dwt_initialise+0x25c>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8003060:	f8d7 9000 	ldr.w	r9, [r7]
 8003064:	2300      	movs	r3, #0
 8003066:	f889 300b 	strb.w	r3, [r9, #11]
    if(DWT_READ_OTP_PID & config)
 800306a:	f016 0310 	ands.w	r3, r6, #16
 800306e:	f040 808f 	bne.w	8003190 <dwt_initialise+0x1b4>
        pdw1000local->partID = 0;
 8003072:	f8c9 3000 	str.w	r3, [r9]
    if(DWT_READ_OTP_LID & config)
 8003076:	f016 0320 	ands.w	r3, r6, #32
 800307a:	f040 8094 	bne.w	80031a6 <dwt_initialise+0x1ca>
        pdw1000local->lotID = 0;
 800307e:	f8c9 3004 	str.w	r3, [r9, #4]
    if(DWT_READ_OTP_BAT & config)
 8003082:	f016 0340 	ands.w	r3, r6, #64	; 0x40
 8003086:	f040 8097 	bne.w	80031b8 <dwt_initialise+0x1dc>
        pdw1000local->vBatP = 0;
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	7213      	strb	r3, [r2, #8]
    if(DWT_READ_OTP_TMP & config)
 800308e:	f016 0380 	ands.w	r3, r6, #128	; 0x80
 8003092:	f040 809a 	bne.w	80031ca <dwt_initialise+0x1ee>
        pdw1000local->tempP = 0;
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	7253      	strb	r3, [r2, #9]
    if(!(DWT_DW_WAKE_UP & config))
 800309a:	f1b8 0f00 	cmp.w	r8, #0
 800309e:	d140      	bne.n	8003122 <dwt_initialise+0x146>
        if(DWT_LOADUCODE & config)
 80030a0:	07f1      	lsls	r1, r6, #31
 80030a2:	f140 809d 	bpl.w	80031e0 <dwt_initialise+0x204>
            _dwt_loaducodefromrom();
 80030a6:	f7ff fe97 	bl	8002dd8 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	8ad3      	ldrh	r3, [r2, #22]
 80030ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030b2:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80030b4:	2001      	movs	r0, #1
 80030b6:	f7ff fe11 	bl	8002cdc <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80030ba:	f04f 0800 	mov.w	r8, #0
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80030be:	462b      	mov	r3, r5
 80030c0:	2201      	movs	r2, #1
 80030c2:	210a      	movs	r1, #10
 80030c4:	202c      	movs	r0, #44	; 0x2c
 80030c6:	f88d 8004 	strb.w	r8, [sp, #4]
 80030ca:	f7ff fb9d 	bl	8002808 <dwt_writetodevice>
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80030ce:	2204      	movs	r2, #4
 80030d0:	4641      	mov	r1, r8
 80030d2:	4610      	mov	r0, r2
 80030d4:	462b      	mov	r3, r5
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80030d6:	683e      	ldr	r6, [r7, #0]
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80030d8:	f7ff fbc2 	bl	8002860 <dwt_readfromdevice>
    uint32  regval = 0 ;
 80030dc:	4641      	mov	r1, r8
 80030de:	4622      	mov	r2, r4
        regval = (regval << 8) + buffer[j] ;
 80030e0:	7810      	ldrb	r0, [r2, #0]
    for (j = 3 ; j >= 0 ; j --)
 80030e2:	42aa      	cmp	r2, r5
        regval = (regval << 8) + buffer[j] ;
 80030e4:	eb00 2101 	add.w	r1, r0, r1, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 80030e8:	f102 32ff 	add.w	r2, r2, #4294967295
 80030ec:	d1f8      	bne.n	80030e0 <dwt_initialise+0x104>
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80030ee:	683f      	ldr	r7, [r7, #0]
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80030f0:	6131      	str	r1, [r6, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80030f2:	8a7b      	ldrh	r3, [r7, #18]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	72bb      	strb	r3, [r7, #10]
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80030fa:	2204      	movs	r2, #4
 80030fc:	2100      	movs	r1, #0
 80030fe:	462b      	mov	r3, r5
 8003100:	2008      	movs	r0, #8
 8003102:	f7ff fbad 	bl	8002860 <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
 8003106:	4622      	mov	r2, r4
    uint32  regval = 0 ;
 8003108:	2100      	movs	r1, #0
        regval = (regval << 8) + buffer[j] ;
 800310a:	7810      	ldrb	r0, [r2, #0]
    for (j = 3 ; j >= 0 ; j --)
 800310c:	4295      	cmp	r5, r2
        regval = (regval << 8) + buffer[j] ;
 800310e:	eb00 2101 	add.w	r1, r0, r1, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8003112:	f102 32ff 	add.w	r2, r2, #4294967295
 8003116:	d1f8      	bne.n	800310a <dwt_initialise+0x12e>
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8003118:	60f9      	str	r1, [r7, #12]
    return DWT_SUCCESS ;
 800311a:	2000      	movs	r0, #0
} // end dwt_initialise()
 800311c:	b003      	add	sp, #12
 800311e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8003122:	0772      	lsls	r2, r6, #29
 8003124:	d4c6      	bmi.n	80030b4 <dwt_initialise+0xd8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	8ad3      	ldrh	r3, [r2, #22]
 800312a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800312e:	82d3      	strh	r3, [r2, #22]
 8003130:	e7c0      	b.n	80030b4 <dwt_initialise+0xd8>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8003132:	f7ff ff21 	bl	8002f78 <dwt_softreset>
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8003136:	ad01      	add	r5, sp, #4
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8003138:	4640      	mov	r0, r8
 800313a:	f7ff fdcf 	bl	8002cdc <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800313e:	2404      	movs	r4, #4
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8003140:	462b      	mov	r3, r5
 8003142:	2201      	movs	r2, #1
 8003144:	4641      	mov	r1, r8
 8003146:	2024      	movs	r0, #36	; 0x24
 8003148:	f88d 4004 	strb.w	r4, [sp, #4]
 800314c:	f7ff fb5c 	bl	8002808 <dwt_writetodevice>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8003150:	4620      	mov	r0, r4
 8003152:	f7ff fbf1 	bl	8002938 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
 8003156:	f010 0fff 	tst.w	r0, #255	; 0xff
 800315a:	d15e      	bne.n	800321a <dwt_initialise+0x23e>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800315c:	201e      	movs	r0, #30
 800315e:	f7ff fbeb 	bl	8002938 <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8003168:	72da      	strb	r2, [r3, #11]
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800316a:	06c3      	lsls	r3, r0, #27
 800316c:	d133      	bne.n	80031d6 <dwt_initialise+0x1fa>
 800316e:	2470      	movs	r4, #112	; 0x70
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8003170:	462b      	mov	r3, r5
 8003172:	2201      	movs	r2, #1
 8003174:	210e      	movs	r1, #14
 8003176:	202b      	movs	r0, #43	; 0x2b
 8003178:	f88d 4004 	strb.w	r4, [sp, #4]
 800317c:	f7ff fb44 	bl	8002808 <dwt_writetodevice>
    if(DWT_READ_OTP_PID & config)
 8003180:	f016 0310 	ands.w	r3, r6, #16
 8003184:	f8d7 9000 	ldr.w	r9, [r7]
 8003188:	f10d 0407 	add.w	r4, sp, #7
 800318c:	f43f af71 	beq.w	8003072 <dwt_initialise+0x96>
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8003190:	2006      	movs	r0, #6
 8003192:	f7ff fbd1 	bl	8002938 <_dwt_otpread>
    if(DWT_READ_OTP_LID & config)
 8003196:	f016 0320 	ands.w	r3, r6, #32
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800319a:	f8c9 0000 	str.w	r0, [r9]
 800319e:	f8d7 9000 	ldr.w	r9, [r7]
    if(DWT_READ_OTP_LID & config)
 80031a2:	f43f af6c 	beq.w	800307e <dwt_initialise+0xa2>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80031a6:	2007      	movs	r0, #7
 80031a8:	f7ff fbc6 	bl	8002938 <_dwt_otpread>
    if(DWT_READ_OTP_BAT & config)
 80031ac:	f016 0340 	ands.w	r3, r6, #64	; 0x40
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80031b0:	f8c9 0004 	str.w	r0, [r9, #4]
    if(DWT_READ_OTP_BAT & config)
 80031b4:	f43f af69 	beq.w	800308a <dwt_initialise+0xae>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 80031b8:	2008      	movs	r0, #8
 80031ba:	f7ff fbbd 	bl	8002938 <_dwt_otpread>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	7218      	strb	r0, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
 80031c2:	f016 0380 	ands.w	r3, r6, #128	; 0x80
 80031c6:	f43f af66 	beq.w	8003096 <dwt_initialise+0xba>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80031ca:	2009      	movs	r0, #9
 80031cc:	f7ff fbb4 	bl	8002938 <_dwt_otpread>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	7258      	strb	r0, [r3, #9]
 80031d4:	e761      	b.n	800309a <dwt_initialise+0xbe>
 80031d6:	f000 001f 	and.w	r0, r0, #31
 80031da:	f040 0460 	orr.w	r4, r0, #96	; 0x60
 80031de:	e7c7      	b.n	8003170 <dwt_initialise+0x194>
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80031e0:	462b      	mov	r3, r5
 80031e2:	2202      	movs	r2, #2
 80031e4:	2105      	movs	r1, #5
 80031e6:	2036      	movs	r0, #54	; 0x36
 80031e8:	f7ff fb3a 	bl	8002860 <dwt_readfromdevice>
    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80031ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80031f0:	f89d 6004 	ldrb.w	r6, [sp, #4]
 80031f4:	eb06 2603 	add.w	r6, r6, r3, lsl #8
            rega &= 0xFDFF ; // Clear LDERUN bit
 80031f8:	f426 7600 	bic.w	r6, r6, #512	; 0x200
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80031fc:	462b      	mov	r3, r5
 80031fe:	2202      	movs	r2, #2
 8003200:	2105      	movs	r1, #5
 8003202:	2036      	movs	r0, #54	; 0x36
    buffer[0] = regval & 0xFF;
 8003204:	f8ad 6004 	strh.w	r6, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8003208:	f7ff fafe 	bl	8002808 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800320c:	e752      	b.n	80030b4 <dwt_initialise+0xd8>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800320e:	4648      	mov	r0, r9
 8003210:	f7ff fd64 	bl	8002cdc <_dwt_enableclocks>
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8003214:	ad01      	add	r5, sp, #4
 8003216:	4649      	mov	r1, r9
 8003218:	e6fc      	b.n	8003014 <dwt_initialise+0x38>
 800321a:	462b      	mov	r3, r5
 800321c:	2201      	movs	r2, #1
 800321e:	2402      	movs	r4, #2
 8003220:	2112      	movs	r1, #18
 8003222:	202d      	movs	r0, #45	; 0x2d
 8003224:	f88d 4004 	strb.w	r4, [sp, #4]
 8003228:	f7ff faee 	bl	8002808 <dwt_writetodevice>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	8ad3      	ldrh	r3, [r2, #22]
 8003230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003234:	82d3      	strh	r3, [r2, #22]
 8003236:	e791      	b.n	800315c <dwt_initialise+0x180>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8003238:	201e      	movs	r0, #30
 800323a:	f7ff fb7d 	bl	8002938 <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800323e:	f8d7 9000 	ldr.w	r9, [r7]
 8003242:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003246:	f889 000b 	strb.w	r0, [r9, #11]
    if(!(DWT_DW_WAKE_UP & config))
 800324a:	e70e      	b.n	800306a <dwt_initialise+0x8e>
        return DWT_ERROR ;
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	e764      	b.n	800311c <dwt_initialise+0x140>
 8003252:	bf00      	nop
 8003254:	20000008 	.word	0x20000008
 8003258:	deca0130 	.word	0xdeca0130

0800325c <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 800325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Display application name. */
    stdio_write(APP_NAME);
 8003260:	4850      	ldr	r0, [pc, #320]	; (80033a4 <dw_main+0x148>)
{
 8003262:	b08f      	sub	sp, #60	; 0x3c
    stdio_write(APP_NAME);
 8003264:	f000 fec0 	bl	8003fe8 <stdio_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8003268:	f000 fdce 	bl	8003e08 <reset_DW1000>
    port_set_dw1000_slowrate();
 800326c:	f000 fe2e 	bl	8003ecc <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8003270:	2000      	movs	r0, #0
 8003272:	f7ff feb3 	bl	8002fdc <dwt_initialise>
 8003276:	3001      	adds	r0, #1
 8003278:	f000 8090 	beq.w	800339c <dw_main+0x140>
    {
        stdio_write("INIT FAILED");
        while (1)
        { };
    }
    port_set_dw1000_fastrate();
 800327c:	f000 fe32 	bl	8003ee4 <port_set_dw1000_fastrate>

    /* Configure DW1000. */
    dwt_configure(&config);
 8003280:	4849      	ldr	r0, [pc, #292]	; (80033a8 <dw_main+0x14c>)
 8003282:	4c4a      	ldr	r4, [pc, #296]	; (80033ac <dw_main+0x150>)
        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
    	char buffer[50];
	   uint32_t ac = dwt_readdevid();
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8003284:	f8df a168 	ldr.w	sl, [pc, #360]	; 80033f0 <dw_main+0x194>
        {
        	stdio_write("Waiting for frame!\r\n");
 8003288:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80033f4 <dw_main+0x198>
    dwt_configure(&config);
 800328c:	f7ff fbba 	bl	8002a04 <dwt_configure>
 8003290:	f1a4 087e 	sub.w	r8, r4, #126	; 0x7e
            rx_buffer[i] = 0;
 8003294:	2500      	movs	r5, #0
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8003296:	4e46      	ldr	r6, [pc, #280]	; (80033b0 <dw_main+0x154>)
{
 8003298:	4633      	mov	r3, r6
            rx_buffer[i] = 0;
 800329a:	f803 5f01 	strb.w	r5, [r3, #1]!
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 800329e:	42a3      	cmp	r3, r4
 80032a0:	d1fb      	bne.n	800329a <dw_main+0x3e>
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7ff fe24 	bl	8002ef0 <dwt_rxenable>

		   ac = dwt_readdevid();

		   sprintf(buffer, "device id is 0x%8x\r\n", (unsigned int)ac);
 80032a8:	4f42      	ldr	r7, [pc, #264]	; (80033b4 <dw_main+0x158>)
	   uint32_t ac = dwt_readdevid();
 80032aa:	f7ff fb0d 	bl	80028c8 <dwt_readdevid>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 80032ae:	e00b      	b.n	80032c8 <dw_main+0x6c>
        	stdio_write("Waiting for frame!\r\n");
 80032b0:	f000 fe9a 	bl	8003fe8 <stdio_write>
		   ac = dwt_readdevid();
 80032b4:	f7ff fb08 	bl	80028c8 <dwt_readdevid>
		   sprintf(buffer, "device id is 0x%8x\r\n", (unsigned int)ac);
 80032b8:	4639      	mov	r1, r7
		   ac = dwt_readdevid();
 80032ba:	4602      	mov	r2, r0
		   sprintf(buffer, "device id is 0x%8x\r\n", (unsigned int)ac);
 80032bc:	a801      	add	r0, sp, #4
 80032be:	f000 ff07 	bl	80040d0 <sprintf>
		   stdio_write(buffer);
 80032c2:	a801      	add	r0, sp, #4
 80032c4:	f000 fe90 	bl	8003fe8 <stdio_write>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 80032c8:	2100      	movs	r1, #0
 80032ca:	200f      	movs	r0, #15
 80032cc:	f7ff fb12 	bl	80028f4 <dwt_read32bitoffsetreg>
 80032d0:	4603      	mov	r3, r0
 80032d2:	ea13 0f0a 	tst.w	r3, sl
        	stdio_write("Waiting for frame!\r\n");
 80032d6:	4648      	mov	r0, r9
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 80032d8:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
 80032dc:	d0e8      	beq.n	80032b0 <dw_main+0x54>
        };

        if (status_reg & SYS_STATUS_RXFCG)
 80032de:	f413 4780 	ands.w	r7, r3, #16384	; 0x4000
 80032e2:	d022      	beq.n	800332a <dw_main+0xce>
        {
            stdio_write("Frame received!\r\n");
 80032e4:	4834      	ldr	r0, [pc, #208]	; (80033b8 <dw_main+0x15c>)
 80032e6:	f000 fe7f 	bl	8003fe8 <stdio_write>
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 80032ea:	2100      	movs	r1, #0
 80032ec:	2010      	movs	r0, #16
 80032ee:	f7ff fb01 	bl	80028f4 <dwt_read32bitoffsetreg>
            sprintf(len, "%u", (unsigned int)frame_len);
 80032f2:	4932      	ldr	r1, [pc, #200]	; (80033bc <dw_main+0x160>)
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 80032f4:	f3c0 0209 	ubfx	r2, r0, #0, #10
            sprintf(len, "%u", (unsigned int)frame_len);
 80032f8:	4831      	ldr	r0, [pc, #196]	; (80033c0 <dw_main+0x164>)
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 80032fa:	f8a8 2084 	strh.w	r2, [r8, #132]	; 0x84
            sprintf(len, "%u", (unsigned int)frame_len);
 80032fe:	f000 fee7 	bl	80040d0 <sprintf>
            stdio_write(len);
 8003302:	482f      	ldr	r0, [pc, #188]	; (80033c0 <dw_main+0x164>)
 8003304:	f000 fe70 	bl	8003fe8 <stdio_write>

            if (frame_len <= FRAME_LEN_MAX)
 8003308:	f8b8 1084 	ldrh.w	r1, [r8, #132]	; 0x84
 800330c:	297f      	cmp	r1, #127	; 0x7f
 800330e:	d92a      	bls.n	8003366 <dw_main+0x10a>
				rx_char_buffer[FRAME_LEN_MAX -1] = '\0';

				stdio_write(rx_char_buffer);
			}
			else {
				stdio_write("Frame TOO long\r\n");
 8003310:	482c      	ldr	r0, [pc, #176]	; (80033c4 <dw_main+0x168>)
 8003312:	f000 fe69 	bl	8003fe8 <stdio_write>
			}

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8003316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800331a:	2100      	movs	r1, #0
 800331c:	200f      	movs	r0, #15
 800331e:	f7ff faff 	bl	8002920 <dwt_write32bitoffsetreg>
			stdio_write("CLEARED - Status error: ");
			sprintf(status, "%lu", status_reg);
			stdio_write(status);
	   }

       stdio_write("NEXT-FRAME\r\n");
 8003322:	4829      	ldr	r0, [pc, #164]	; (80033c8 <dw_main+0x16c>)
 8003324:	f000 fe60 	bl	8003fe8 <stdio_write>
    {
 8003328:	e7b5      	b.n	8003296 <dw_main+0x3a>
			stdio_write("Status error: ");
 800332a:	4828      	ldr	r0, [pc, #160]	; (80033cc <dw_main+0x170>)
 800332c:	f000 fe5c 	bl	8003fe8 <stdio_write>
			sprintf(status, "%lu", status_reg);
 8003330:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
 8003334:	4926      	ldr	r1, [pc, #152]	; (80033d0 <dw_main+0x174>)
 8003336:	4827      	ldr	r0, [pc, #156]	; (80033d4 <dw_main+0x178>)
 8003338:	f000 feca 	bl	80040d0 <sprintf>
			stdio_write(status);
 800333c:	4825      	ldr	r0, [pc, #148]	; (80033d4 <dw_main+0x178>)
 800333e:	f000 fe53 	bl	8003fe8 <stdio_write>
			dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8003342:	4639      	mov	r1, r7
 8003344:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <dw_main+0x17c>)
 8003346:	200f      	movs	r0, #15
 8003348:	f7ff faea 	bl	8002920 <dwt_write32bitoffsetreg>
			stdio_write("CLEARED - Status error: ");
 800334c:	4823      	ldr	r0, [pc, #140]	; (80033dc <dw_main+0x180>)
 800334e:	f000 fe4b 	bl	8003fe8 <stdio_write>
			sprintf(status, "%lu", status_reg);
 8003352:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
 8003356:	491e      	ldr	r1, [pc, #120]	; (80033d0 <dw_main+0x174>)
 8003358:	481e      	ldr	r0, [pc, #120]	; (80033d4 <dw_main+0x178>)
 800335a:	f000 feb9 	bl	80040d0 <sprintf>
			stdio_write(status);
 800335e:	481d      	ldr	r0, [pc, #116]	; (80033d4 <dw_main+0x178>)
 8003360:	f000 fe42 	bl	8003fe8 <stdio_write>
 8003364:	e7dd      	b.n	8003322 <dw_main+0xc6>
            	dwt_readrxdata(rx_buffer, frame_len, 0);
 8003366:	481e      	ldr	r0, [pc, #120]	; (80033e0 <dw_main+0x184>)
					sprintf(rx_char_buffer + i, "%ui", rx_buffer[i]);
 8003368:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80033f8 <dw_main+0x19c>
            	dwt_readrxdata(rx_buffer, frame_len, 0);
 800336c:	2200      	movs	r2, #0
 800336e:	f100 0790 	add.w	r7, r0, #144	; 0x90
 8003372:	f7ff fa9f 	bl	80028b4 <dwt_readrxdata>
				stdio_write("Data: ");
 8003376:	481b      	ldr	r0, [pc, #108]	; (80033e4 <dw_main+0x188>)
 8003378:	f000 fe36 	bl	8003fe8 <stdio_write>
					sprintf(rx_char_buffer + i, "%ui", rx_buffer[i]);
 800337c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8003380:	4638      	mov	r0, r7
 8003382:	4659      	mov	r1, fp
 8003384:	f000 fea4 	bl	80040d0 <sprintf>
				for (i = 0 ; i < FRAME_LEN_MAX; i++)
 8003388:	42a6      	cmp	r6, r4
 800338a:	f107 0701 	add.w	r7, r7, #1
 800338e:	d1f5      	bne.n	800337c <dw_main+0x120>
				stdio_write(rx_char_buffer);
 8003390:	4815      	ldr	r0, [pc, #84]	; (80033e8 <dw_main+0x18c>)
				rx_char_buffer[FRAME_LEN_MAX -1] = '\0';
 8003392:	f888 510e 	strb.w	r5, [r8, #270]	; 0x10e
				stdio_write(rx_char_buffer);
 8003396:	f000 fe27 	bl	8003fe8 <stdio_write>
 800339a:	e7bc      	b.n	8003316 <dw_main+0xba>
        stdio_write("INIT FAILED");
 800339c:	4813      	ldr	r0, [pc, #76]	; (80033ec <dw_main+0x190>)
 800339e:	f000 fe23 	bl	8003fe8 <stdio_write>
        while (1)
 80033a2:	e7fe      	b.n	80033a2 <dw_main+0x146>
 80033a4:	08008ba4 	.word	0x08008ba4
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	20000a9a 	.word	0x20000a9a
 80033b0:	20000a1b 	.word	0x20000a1b
 80033b4:	08008bd8 	.word	0x08008bd8
 80033b8:	08008bf0 	.word	0x08008bf0
 80033bc:	08008c04 	.word	0x08008c04
 80033c0:	20000aa4 	.word	0x20000aa4
 80033c4:	08008c14 	.word	0x08008c14
 80033c8:	08008c58 	.word	0x08008c58
 80033cc:	08008c28 	.word	0x08008c28
 80033d0:	08008c38 	.word	0x08008c38
 80033d4:	20000b2c 	.word	0x20000b2c
 80033d8:	24059000 	.word	0x24059000
 80033dc:	08008c3c 	.word	0x08008c3c
 80033e0:	20000a1c 	.word	0x20000a1c
 80033e4:	08008c08 	.word	0x08008c08
 80033e8:	20000aac 	.word	0x20000aac
 80033ec:	08008bb4 	.word	0x08008bb4
 80033f0:	2405d000 	.word	0x2405d000
 80033f4:	08008bc0 	.word	0x08008bc0
 80033f8:	08008c10 	.word	0x08008c10

080033fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033fe:	2400      	movs	r4, #0
{
 8003400:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003402:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8003406:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800340a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800340e:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	4a1e      	ldr	r2, [pc, #120]	; (800348c <SystemClock_Config+0x90>)
 8003414:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003416:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800341c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003420:	6411      	str	r1, [r2, #64]	; 0x40
 8003422:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003424:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003428:	9201      	str	r2, [sp, #4]
 800342a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800342c:	9402      	str	r4, [sp, #8]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800343c:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800343e:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003440:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003444:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003448:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800344a:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800344c:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800344e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003450:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 288;
 8003452:	f44f 7290 	mov.w	r2, #288	; 0x120
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003456:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003458:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800345a:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLM = 8;
 800345c:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 800345e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8003460:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003462:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003464:	9512      	str	r5, [sp, #72]	; 0x48
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003466:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003468:	f7fd ff42 	bl	80012f0 <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800346c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003470:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003474:	a803      	add	r0, sp, #12
 8003476:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003478:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800347c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800347e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003480:	9603      	str	r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003482:	f7fe f925 	bl	80016d0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8003486:	b014      	add	sp, #80	; 0x50
 8003488:	bd70      	pop	{r4, r5, r6, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40007000 	.word	0x40007000

08003494 <main>:
{
 8003494:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	2400      	movs	r4, #0
{
 800349a:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 800349c:	f7fd fd10 	bl	8000ec0 <HAL_Init>
  SystemClock_Config();
 80034a0:	f7ff ffac 	bl	80033fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80034a8:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ac:	4bc0      	ldr	r3, [pc, #768]	; (80037b0 <main+0x31c>)
 80034ae:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80034b4:	48bf      	ldr	r0, [pc, #764]	; (80037b4 <main+0x320>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034b6:	f8df b334 	ldr.w	fp, [pc, #820]	; 80037ec <main+0x358>
  htim8.Instance = TIM8;
 80034ba:	4dbf      	ldr	r5, [pc, #764]	; (80037b8 <main+0x324>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034bc:	f042 0204 	orr.w	r2, r2, #4
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
 80034c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c4:	f002 0204 	and.w	r2, r2, #4
 80034c8:	9200      	str	r2, [sp, #0]
 80034ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034cc:	9401      	str	r4, [sp, #4]
 80034ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d0:	f042 0220 	orr.w	r2, r2, #32
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
 80034d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d8:	f002 0220 	and.w	r2, r2, #32
 80034dc:	9201      	str	r2, [sp, #4]
 80034de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034e0:	9402      	str	r4, [sp, #8]
 80034e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
 80034ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80034f0:	9202      	str	r2, [sp, #8]
 80034f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f4:	9403      	str	r4, [sp, #12]
 80034f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
 80034fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003500:	f002 0201 	and.w	r2, r2, #1
 8003504:	9203      	str	r2, [sp, #12]
 8003506:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003508:	9404      	str	r4, [sp, #16]
 800350a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350c:	f042 0202 	orr.w	r2, r2, #2
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
 8003512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003514:	f002 0202 	and.w	r2, r2, #2
 8003518:	9204      	str	r2, [sp, #16]
 800351a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800351c:	9405      	str	r4, [sp, #20]
 800351e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
 8003526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003528:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800352c:	9205      	str	r2, [sp, #20]
 800352e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003530:	9406      	str	r4, [sp, #24]
 8003532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003534:	f042 0210 	orr.w	r2, r2, #16
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
 800353a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353c:	f002 0210 	and.w	r2, r2, #16
 8003540:	9206      	str	r2, [sp, #24]
 8003542:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003544:	9407      	str	r4, [sp, #28]
 8003546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003548:	f042 0208 	orr.w	r2, r2, #8
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003556:	4622      	mov	r2, r4
 8003558:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800355c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800355e:	f7fd feb7 	bl	80012d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8003562:	4896      	ldr	r0, [pc, #600]	; (80037bc <main+0x328>)
 8003564:	4622      	mov	r2, r4
 8003566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800356a:	f7fd feb1 	bl	80012d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET);
 800356e:	4894      	ldr	r0, [pc, #592]	; (80037c0 <main+0x32c>)
 8003570:	2201      	movs	r2, #1
 8003572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003576:	f7fd feab 	bl	80012d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800357a:	4622      	mov	r2, r4
 800357c:	4891      	ldr	r0, [pc, #580]	; (80037c4 <main+0x330>)
 800357e:	2140      	movs	r1, #64	; 0x40
 8003580:	f7fd fea6 	bl	80012d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003584:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003588:	488f      	ldr	r0, [pc, #572]	; (80037c8 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800358c:	a916      	add	r1, sp, #88	; 0x58

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003590:	2703      	movs	r7, #3
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003592:	f04f 090b 	mov.w	r9, #11
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003596:	e9cd 8b16 	strd	r8, fp, [sp, #88]	; 0x58
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800359a:	f7fd fd4f 	bl	800103c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800359e:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a0:	4889      	ldr	r0, [pc, #548]	; (80037c8 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a4:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035aa:	e9cd 7919 	strd	r7, r9, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ae:	f7fd fd45 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80035b2:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b4:	4885      	ldr	r0, [pc, #532]	; (80037cc <main+0x338>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80035b6:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b8:	a916      	add	r1, sp, #88	; 0x58

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ba:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035be:	e9cd 7919 	strd	r7, r9, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c6:	f7fd fd39 	bl	800103c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80035ca:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ce:	4879      	ldr	r0, [pc, #484]	; (80037b4 <main+0x320>)
 80035d0:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d2:	e9cd 3a16 	strd	r3, sl, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035da:	f7fd fd2f 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80035de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80035e2:	4876      	ldr	r0, [pc, #472]	; (80037bc <main+0x328>)
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80035e4:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80035e6:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035e8:	e9cd b617 	strd	fp, r6, [sp, #92]	; 0x5c
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80035ec:	f7fd fd26 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035f0:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80035f2:	4872      	ldr	r0, [pc, #456]	; (80037bc <main+0x328>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035f4:	9317      	str	r3, [sp, #92]	; 0x5c
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80035f6:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f8:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 80035fc:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003600:	f7fd fd1c 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO4_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO4_Pin;
 8003604:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003608:	486c      	ldr	r0, [pc, #432]	; (80037bc <main+0x328>)
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO4_Pin;
 800360a:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800360c:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003612:	f7fd fd13 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : M_PIN16_Pin M_PIN17_Pin USB_OverCurrent_Pin GPIO6_Pin
                           GPIO5_Pin */
  GPIO_InitStruct.Pin = M_PIN16_Pin|M_PIN17_Pin|USB_OverCurrent_Pin|GPIO6_Pin
 8003616:	f244 2383 	movw	r3, #17027	; 0x4283
                          |GPIO5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800361a:	486a      	ldr	r0, [pc, #424]	; (80037c4 <main+0x330>)
  GPIO_InitStruct.Pin = M_PIN16_Pin|M_PIN17_Pin|USB_OverCurrent_Pin|GPIO6_Pin
 800361c:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800361e:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003624:	f7fd fd0a 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin GPIO1_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin|GPIO3_Pin;
 8003628:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800362c:	4868      	ldr	r0, [pc, #416]	; (80037d0 <main+0x33c>)
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin|GPIO3_Pin;
 800362e:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003630:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003636:	f7fd fd01 	bl	800103c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800363a:	485e      	ldr	r0, [pc, #376]	; (80037b4 <main+0x320>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800363c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003640:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003642:	e9cd 8616 	strd	r8, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003646:	e9cd 4718 	strd	r4, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800364a:	f7fd fcf7 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 800364e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8003652:	485b      	ldr	r0, [pc, #364]	; (80037c0 <main+0x32c>)
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8003654:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8003656:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	e9cd a417 	strd	sl, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365c:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 800365e:	f7fd fced 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003662:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003664:	4857      	ldr	r0, [pc, #348]	; (80037c4 <main+0x330>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003666:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003668:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	e9cd a417 	strd	sl, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	9419      	str	r4, [sp, #100]	; 0x64
  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003670:	f04f 0a0a 	mov.w	sl, #10
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003674:	f7fd fce2 	bl	800103c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003678:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	4853      	ldr	r0, [pc, #332]	; (80037cc <main+0x338>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800367e:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003680:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003686:	9719      	str	r7, [sp, #100]	; 0x64

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003688:	f44f 7b00 	mov.w	fp, #512	; 0x200
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800368c:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003690:	f7fd fcd4 	bl	800103c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003694:	484d      	ldr	r0, [pc, #308]	; (80037cc <main+0x338>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003696:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800369a:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80036a0:	f7fd fccc 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80036a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036a8:	4846      	ldr	r0, [pc, #280]	; (80037c4 <main+0x330>)
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80036aa:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036ac:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036b2:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b6:	9719      	str	r7, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036b8:	f7fd fcc0 	bl	800103c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80036bc:	4622      	mov	r2, r4
 80036be:	4621      	mov	r1, r4
 80036c0:	2028      	movs	r0, #40	; 0x28
 80036c2:	f7fd fc4f 	bl	8000f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036c6:	2028      	movs	r0, #40	; 0x28
 80036c8:	f7fd fc84 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80036cc:	4841      	ldr	r0, [pc, #260]	; (80037d4 <main+0x340>)
 80036ce:	4942      	ldr	r1, [pc, #264]	; (80037d8 <main+0x344>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036d0:	f8c0 b018 	str.w	fp, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036d4:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80036d8:	2310      	movs	r3, #16
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036da:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80036de:	61c3      	str	r3, [r0, #28]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036e0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036e4:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036e8:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 80036ec:	e9c0 4a0a 	strd	r4, sl, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036f0:	f7fe f93c 	bl	800196c <HAL_SPI_Init>
  huart3.Instance = USART3;
 80036f4:	4839      	ldr	r0, [pc, #228]	; (80037dc <main+0x348>)
 80036f6:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <main+0x34c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036f8:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80036fa:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036fe:	270c      	movs	r7, #12
  huart3.Init.BaudRate = 115200;
 8003700:	e9c0 3900 	strd	r3, r9, [r0]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003704:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003708:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800370c:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800370e:	f7fe fed5 	bl	80024bc <HAL_UART_Init>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003712:	4621      	mov	r1, r4
 8003714:	2220      	movs	r2, #32
 8003716:	a816      	add	r0, sp, #88	; 0x58
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003718:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800371c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003720:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8003724:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8003728:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800372c:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800372e:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003730:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003732:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003734:	f000 fcc4 	bl	80040c0 <memset>
  htim8.Init.Period = 65535;
 8003738:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim8.Instance = TIM8;
 800373c:	4929      	ldr	r1, [pc, #164]	; (80037e4 <main+0x350>)
 800373e:	6029      	str	r1, [r5, #0]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003740:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003744:	4628      	mov	r0, r5
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003746:	e9c5 2303 	strd	r2, r3, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374a:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim8.Init.Prescaler = 0;
 800374e:	606c      	str	r4, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003750:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003752:	f7fe fc41 	bl	8001fd8 <HAL_TIM_Base_Init>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8003756:	4628      	mov	r0, r5
 8003758:	f7fe fc5a 	bl	8002010 <HAL_TIM_OC_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800375c:	2306      	movs	r3, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800375e:	a90a      	add	r1, sp, #40	; 0x28
 8003760:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003762:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8003766:	f7fe fafd 	bl	8001d64 <HAL_TIM_SlaveConfigSynchro>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800376a:	a908      	add	r1, sp, #32
 800376c:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003772:	f7fe fccb 	bl	800210c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003776:	4622      	mov	r2, r4
 8003778:	a90f      	add	r1, sp, #60	; 0x3c
 800377a:	4628      	mov	r0, r5
  huart7.Instance = UART7;
 800377c:	4e1a      	ldr	r6, [pc, #104]	; (80037e8 <main+0x354>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800377e:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.Pulse = 0;
 8003780:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003784:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003788:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800378c:	f7fe fc8e 	bl	80020ac <HAL_TIM_OC_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003790:	a916      	add	r1, sp, #88	; 0x58
 8003792:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003794:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.DeadTime = 0;
 8003798:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800379c:	e9cd 481a 	strd	r4, r8, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037a0:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80037a2:	f7fe fcd5 	bl	8002150 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
 80037a6:	4628      	mov	r0, r5
 80037a8:	f000 f8be 	bl	8003928 <HAL_TIM_MspPostInit>
 80037ac:	e020      	b.n	80037f0 <main+0x35c>
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40020400 	.word	0x40020400
 80037b8:	20000bc8 	.word	0x20000bc8
 80037bc:	40021400 	.word	0x40021400
 80037c0:	40020c00 	.word	0x40020c00
 80037c4:	40021800 	.word	0x40021800
 80037c8:	40020800 	.word	0x40020800
 80037cc:	40020000 	.word	0x40020000
 80037d0:	40021000 	.word	0x40021000
 80037d4:	20000c48 	.word	0x20000c48
 80037d8:	40013000 	.word	0x40013000
 80037dc:	20000c08 	.word	0x20000c08
 80037e0:	40004800 	.word	0x40004800
 80037e4:	40010400 	.word	0x40010400
 80037e8:	20000b88 	.word	0x20000b88
 80037ec:	10110000 	.word	0x10110000
  huart7.Instance = UART7;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <main+0x390>)
 80037f2:	6033      	str	r3, [r6, #0]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80037f4:	4630      	mov	r0, r6
  huart7.Init.StopBits = UART_STOPBITS_1;
 80037f6:	e9c6 4402 	strd	r4, r4, [r6, #8]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80037fa:	e9c6 4704 	strd	r4, r7, [r6, #16]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80037fe:	e9c6 4406 	strd	r4, r4, [r6, #24]
  huart7.Init.BaudRate = 115200;
 8003802:	f8c6 9004 	str.w	r9, [r6, #4]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003806:	f7fe fe59 	bl	80024bc <HAL_UART_Init>
  setup_DW1000RSTnIRQ(0);
 800380a:	4620      	mov	r0, r4
 800380c:	f000 fb20 	bl	8003e50 <setup_DW1000RSTnIRQ>
  stdio_init(&huart7);
 8003810:	4630      	mov	r0, r6
 8003812:	f000 fbe3 	bl	8003fdc <stdio_init>
  stdio_write("before dw_main");
 8003816:	4804      	ldr	r0, [pc, #16]	; (8003828 <main+0x394>)
 8003818:	f000 fbe6 	bl	8003fe8 <stdio_write>
  dw_main();
 800381c:	f7ff fd1e 	bl	800325c <dw_main>
  while (1)
 8003820:	e7fe      	b.n	8003820 <main+0x38c>
 8003822:	bf00      	nop
 8003824:	40007800 	.word	0x40007800
 8003828:	08008c68 	.word	0x08008c68

0800382c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800382c:	4b03      	ldr	r3, [pc, #12]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800382e:	6802      	ldr	r2, [r0, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d000      	beq.n	8003836 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003834:	4770      	bx	lr
    HAL_IncTick();
 8003836:	f7fd bb5d 	b.w	8000ef4 <HAL_IncTick>
 800383a:	bf00      	nop
 800383c:	40001000 	.word	0x40001000

08003840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003840:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_MspInit+0x34>)
 8003844:	2100      	movs	r1, #0
 8003846:	9100      	str	r1, [sp, #0]
 8003848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
 8003850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003852:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003856:	9200      	str	r2, [sp, #0]
 8003858:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	9101      	str	r1, [sp, #4]
 800385c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800386e:	b002      	add	sp, #8
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800

08003878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003878:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 800387a:	6801      	ldr	r1, [r0, #0]
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_SPI_MspInit+0x68>)
{
 800387e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8003882:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003888:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800388c:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 800388e:	d001      	beq.n	8003894 <HAL_SPI_MspInit+0x1c>
#endif

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003890:	b008      	add	sp, #32
 8003892:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003894:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389c:	4811      	ldr	r0, [pc, #68]	; (80038e4 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800389e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80038a2:	6451      	str	r1, [r2, #68]	; 0x44
 80038a4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80038a6:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 80038aa:	9101      	str	r1, [sp, #4]
 80038ac:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ae:	9302      	str	r3, [sp, #8]
 80038b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80038b2:	f041 0101 	orr.w	r1, r1, #1
 80038b6:	6311      	str	r1, [r2, #48]	; 0x30
 80038b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038bc:	f002 0201 	and.w	r2, r2, #1
 80038c0:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038c2:	2305      	movs	r3, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c4:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038c8:	25e0      	movs	r5, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ca:	2402      	movs	r4, #2
 80038cc:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d4:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d6:	f7fd fbb1 	bl	800103c <HAL_GPIO_Init>
}
 80038da:	b008      	add	sp, #32
 80038dc:	bd70      	pop	{r4, r5, r6, pc}
 80038de:	bf00      	nop
 80038e0:	40013000 	.word	0x40013000
 80038e4:	40020000 	.word	0x40020000

080038e8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <HAL_TIM_Base_MspInit+0x3c>)
 80038ea:	6802      	ldr	r2, [r0, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d000      	beq.n	80038f2 <HAL_TIM_Base_MspInit+0xa>
 80038f0:	4770      	bx	lr
{
 80038f2:	b500      	push	{lr}
 80038f4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80038f6:	2200      	movs	r2, #0
 80038f8:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 80038fc:	9201      	str	r2, [sp, #4]
 80038fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003900:	f041 0102 	orr.w	r1, r1, #2
 8003904:	6459      	str	r1, [r3, #68]	; 0x44
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	9301      	str	r3, [sp, #4]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800390e:	4611      	mov	r1, r2
 8003910:	202e      	movs	r0, #46	; 0x2e
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003912:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003914:	f7fd fb26 	bl	8000f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003918:	202e      	movs	r0, #46	; 0x2e
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800391a:	b003      	add	sp, #12
 800391c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003920:	f7fd bb58 	b.w	8000fd4 <HAL_NVIC_EnableIRQ>
 8003924:	40010400 	.word	0x40010400

08003928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003928:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM8)
 800392a:	6801      	ldr	r1, [r0, #0]
 800392c:	4a12      	ldr	r2, [pc, #72]	; (8003978 <HAL_TIM_MspPostInit+0x50>)
{
 800392e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	2300      	movs	r3, #0
  if(htim->Instance==TIM8)
 8003932:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003934:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003938:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800393c:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM8)
 800393e:	d001      	beq.n	8003944 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003940:	b006      	add	sp, #24
 8003942:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003944:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394c:	480b      	ldr	r0, [pc, #44]	; (800397c <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800394e:	f041 0104 	orr.w	r1, r1, #4
 8003952:	6311      	str	r1, [r2, #48]	; 0x30
 8003954:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	9303      	str	r3, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003958:	f002 0204 	and.w	r2, r2, #4
 800395c:	9200      	str	r2, [sp, #0]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003960:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003962:	2540      	movs	r5, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	2402      	movs	r4, #2
 8003966:	e9cd 5401 	strd	r5, r4, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800396a:	9e00      	ldr	r6, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800396e:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003970:	f7fd fb64 	bl	800103c <HAL_GPIO_Init>
}
 8003974:	b006      	add	sp, #24
 8003976:	bd70      	pop	{r4, r5, r6, pc}
 8003978:	40010400 	.word	0x40010400
 800397c:	40020800 	.word	0x40020800

08003980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003980:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART7)
 8003982:	6803      	ldr	r3, [r0, #0]
 8003984:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <HAL_UART_MspInit+0xc8>)
{
 8003986:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	2400      	movs	r4, #0
  if(huart->Instance==UART7)
 800398a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003990:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003994:	9409      	str	r4, [sp, #36]	; 0x24
  if(huart->Instance==UART7)
 8003996:	d004      	beq.n	80039a2 <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <HAL_UART_MspInit+0xcc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d026      	beq.n	80039ec <HAL_UART_MspInit+0x6c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800399e:	b00a      	add	sp, #40	; 0x28
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 80039a2:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <HAL_UART_MspInit+0xd0>)
 80039a4:	9401      	str	r4, [sp, #4]
 80039a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039a8:	482a      	ldr	r0, [pc, #168]	; (8003a54 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_UART7_CLK_ENABLE();
 80039aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
 80039b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039b6:	9201      	str	r2, [sp, #4]
 80039b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80039ba:	9402      	str	r4, [sp, #8]
 80039bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039be:	f042 0220 	orr.w	r2, r2, #32
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039cc:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ce:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039d0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039d2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80039d4:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039d8:	2401      	movs	r4, #1
 80039da:	e9cd 5406 	strd	r5, r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80039de:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80039e2:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039e4:	f7fd fb2a 	bl	800103c <HAL_GPIO_Init>
}
 80039e8:	b00a      	add	sp, #40	; 0x28
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <HAL_UART_MspInit+0xd0>)
 80039ee:	9403      	str	r4, [sp, #12]
 80039f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039f2:	4819      	ldr	r0, [pc, #100]	; (8003a58 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80039f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
 80039fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003a00:	9203      	str	r2, [sp, #12]
 8003a02:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a04:	9404      	str	r4, [sp, #16]
 8003a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a08:	f042 0208 	orr.w	r2, r2, #8
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003a16:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a1c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003a1e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a20:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a22:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a24:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a26:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a28:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a2a:	e9cd 5207 	strd	r5, r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2e:	9e04      	ldr	r6, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a30:	f7fd fb04 	bl	800103c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003a34:	4622      	mov	r2, r4
 8003a36:	4621      	mov	r1, r4
 8003a38:	2027      	movs	r0, #39	; 0x27
 8003a3a:	f7fd fa93 	bl	8000f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a3e:	2027      	movs	r0, #39	; 0x27
 8003a40:	f7fd fac8 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
}
 8003a44:	b00a      	add	sp, #40	; 0x28
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	40007800 	.word	0x40007800
 8003a4c:	40004800 	.word	0x40004800
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40021400 	.word	0x40021400
 8003a58:	40020c00 	.word	0x40020c00

08003a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a5c:	b530      	push	{r4, r5, lr}
 8003a5e:	4601      	mov	r1, r0
 8003a60:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2036      	movs	r0, #54	; 0x36
 8003a66:	f7fd fa7d 	bl	8000f64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a6a:	2036      	movs	r0, #54	; 0x36
 8003a6c:	f7fd fab2 	bl	8000fd4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a70:	2500      	movs	r5, #0
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <HAL_InitTick+0x70>)
 8003a74:	9502      	str	r5, [sp, #8]
 8003a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a78:	4c15      	ldr	r4, [pc, #84]	; (8003ad0 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a7a:	f042 0210 	orr.w	r2, r2, #16
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 0310 	and.w	r3, r3, #16
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a86:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a88:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a8a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a8c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a8e:	f7fd fed9 	bl	8001844 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a92:	f7fd feb7 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003a96:	4a0f      	ldr	r2, [pc, #60]	; (8003ad4 <HAL_InitTick+0x78>)
  htim6.Instance = TIM6;
 8003a98:	490f      	ldr	r1, [pc, #60]	; (8003ad8 <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8003a9a:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a9c:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0c9b      	lsrs	r3, r3, #18
 8003aa4:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003aa6:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003aaa:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aac:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim6.Instance = TIM6;
 8003ab0:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003ab2:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003ab4:	f7fe fa90 	bl	8001fd8 <HAL_TIM_Base_Init>
 8003ab8:	b110      	cbz	r0, 8003ac0 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8003aba:	2001      	movs	r0, #1
}
 8003abc:	b009      	add	sp, #36	; 0x24
 8003abe:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7fe f93d 	bl	8001d40 <HAL_TIM_Base_Start_IT>
}
 8003ac6:	b009      	add	sp, #36	; 0x24
 8003ac8:	bd30      	pop	{r4, r5, pc}
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	20000d64 	.word	0x20000d64
 8003ad4:	431bde83 	.word	0x431bde83
 8003ad8:	40001000 	.word	0x40001000

08003adc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <HardFault_Handler>
 8003ae2:	bf00      	nop

08003ae4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae4:	e7fe      	b.n	8003ae4 <MemManage_Handler>
 8003ae6:	bf00      	nop

08003ae8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ae8:	e7fe      	b.n	8003ae8 <BusFault_Handler>
 8003aea:	bf00      	nop

08003aec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aec:	e7fe      	b.n	8003aec <UsageFault_Handler>
 8003aee:	bf00      	nop

08003af0 <SVC_Handler>:
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <DebugMon_Handler>:
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <PendSV_Handler>:
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop

08003afc <SysTick_Handler>:
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b00:	4801      	ldr	r0, [pc, #4]	; (8003b08 <USART3_IRQHandler+0x8>)
 8003b02:	f7fe bdb7 	b.w	8002674 <HAL_UART_IRQHandler>
 8003b06:	bf00      	nop
 8003b08:	20000c08 	.word	0x20000c08

08003b0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003b0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b12:	f7fd fbe1 	bl	80012d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003b1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b1e:	f7fd bbdb 	b.w	80012d8 <HAL_GPIO_EXTI_IRQHandler>
 8003b22:	bf00      	nop

08003b24 <TIM8_CC_IRQHandler>:
void TIM8_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <TIM8_CC_IRQHandler+0x8>)
 8003b26:	f7fe b94b 	b.w	8001dc0 <HAL_TIM_IRQHandler>
 8003b2a:	bf00      	nop
 8003b2c:	20000bc8 	.word	0x20000bc8

08003b30 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <TIM6_DAC_IRQHandler+0x8>)
 8003b32:	f7fe b945 	b.w	8001dc0 <HAL_TIM_IRQHandler>
 8003b36:	bf00      	nop
 8003b38:	20000d64 	.word	0x20000d64

08003b3c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	4770      	bx	lr

08003b40 <_kill>:

int _kill(int pid, int sig)
{
 8003b40:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003b42:	f000 fa93 	bl	800406c <__errno>
 8003b46:	2316      	movs	r3, #22
 8003b48:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	bd08      	pop	{r3, pc}

08003b50 <_exit>:

void _exit (int status)
{
 8003b50:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003b52:	f000 fa8b 	bl	800406c <__errno>
 8003b56:	2316      	movs	r3, #22
 8003b58:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003b5a:	e7fe      	b.n	8003b5a <_exit+0xa>

08003b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b5c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5e:	1e16      	subs	r6, r2, #0
 8003b60:	dd07      	ble.n	8003b72 <_read+0x16>
 8003b62:	460c      	mov	r4, r1
 8003b64:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003b66:	f3af 8000 	nop.w
 8003b6a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6e:	42a5      	cmp	r5, r4
 8003b70:	d1f9      	bne.n	8003b66 <_read+0xa>
	}

return len;
}
 8003b72:	4630      	mov	r0, r6
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	bf00      	nop

08003b78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b78:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7a:	1e16      	subs	r6, r2, #0
 8003b7c:	dd07      	ble.n	8003b8e <_write+0x16>
 8003b7e:	460c      	mov	r4, r1
 8003b80:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003b82:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003b86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8a:	42a5      	cmp	r5, r4
 8003b8c:	d1f9      	bne.n	8003b82 <_write+0xa>
	}
	return len;
}
 8003b8e:	4630      	mov	r0, r6
 8003b90:	bd70      	pop	{r4, r5, r6, pc}
 8003b92:	bf00      	nop

08003b94 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b94:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <_sbrk+0x34>)
{
 8003b96:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8003b98:	6813      	ldr	r3, [r2, #0]
 8003b9a:	b133      	cbz	r3, 8003baa <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003b9c:	4418      	add	r0, r3
 8003b9e:	4669      	mov	r1, sp
 8003ba0:	4288      	cmp	r0, r1
 8003ba2:	d808      	bhi.n	8003bb6 <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003ba4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <_sbrk+0x38>)
 8003bac:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003bae:	4418      	add	r0, r3
 8003bb0:	4669      	mov	r1, sp
 8003bb2:	4288      	cmp	r0, r1
 8003bb4:	d9f6      	bls.n	8003ba4 <_sbrk+0x10>
		errno = ENOMEM;
 8003bb6:	f000 fa59 	bl	800406c <__errno>
 8003bba:	230c      	movs	r3, #12
 8003bbc:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	bd08      	pop	{r3, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000b3c 	.word	0x20000b3c
 8003bcc:	20000db8 	.word	0x20000db8

08003bd0 <_close>:

int _close(int file)
{
	return -1;
}
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bdc:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003bde:	2000      	movs	r0, #0
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop

08003be4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003be4:	2001      	movs	r0, #1
 8003be6:	4770      	bx	lr

08003be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003be8:	2000      	movs	r0, #0
 8003bea:	4770      	bx	lr

08003bec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bec:	4910      	ldr	r1, [pc, #64]	; (8003c30 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bf0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003bf4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8003bf8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bfa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003bfe:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c00:	4c0d      	ldr	r4, [pc, #52]	; (8003c38 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8003c02:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003c0a:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003c12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c16:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8003c18:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c1a:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c1c:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c24:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8003c26:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c28:	608c      	str	r4, [r1, #8]
#endif
}
 8003c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000ed00 	.word	0xe000ed00
 8003c34:	40023800 	.word	0x40023800
 8003c38:	24003010 	.word	0x24003010

08003c3c <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8003c3c:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8003c3e:	f000 f997 	bl	8003f70 <port_GetEXT_IRQStatus>

	if(s) {
 8003c42:	4604      	mov	r4, r0
 8003c44:	b908      	cbnz	r0, 8003c4a <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
 8003c46:	4620      	mov	r0, r4
 8003c48:	bd10      	pop	{r4, pc}
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8003c4a:	f000 f981 	bl	8003f50 <port_DisableEXT_IRQ>
}
 8003c4e:	4620      	mov	r0, r4
 8003c50:	bd10      	pop	{r4, pc}
 8003c52:	bf00      	nop

08003c54 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8003c54:	b900      	cbnz	r0, 8003c58 <decamutexoff+0x4>
		port_EnableEXT_IRQ();
	}
}
 8003c56:	4770      	bx	lr
		port_EnableEXT_IRQ();
 8003c58:	f000 b982 	b.w	8003f60 <port_EnableEXT_IRQ>

08003c5c <deca_sleep>:
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
	Sleep(time_ms);
 8003c5c:	f000 b8aa 	b.w	8003db4 <Sleep>

08003c60 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8003c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	4682      	mov	sl, r0
 8003c66:	4689      	mov	r9, r1
 8003c68:	4690      	mov	r8, r2
 8003c6a:	461f      	mov	r7, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8003c6c:	f7ff ffe6 	bl	8003c3c <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003c70:	4d14      	ldr	r5, [pc, #80]	; (8003cc4 <writetospi+0x64>)
    stat = decamutexon() ;
 8003c72:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003c74:	4628      	mov	r0, r5
 8003c76:	f7fd ff73 	bl	8001b60 <HAL_SPI_GetState>
 8003c7a:	2801      	cmp	r0, #1
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	d1f9      	bne.n	8003c74 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8003c80:	4811      	ldr	r0, [pc, #68]	; (8003cc8 <writetospi+0x68>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c88:	f7fd fb22 	bl	80012d0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8003c8c:	4652      	mov	r2, sl
 8003c8e:	4649      	mov	r1, r9
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	480b      	ldr	r0, [pc, #44]	; (8003cc4 <writetospi+0x64>)
 8003c96:	f7fd fea9 	bl	80019ec <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9e:	fa1f f288 	uxth.w	r2, r8
 8003ca2:	4639      	mov	r1, r7
 8003ca4:	4807      	ldr	r0, [pc, #28]	; (8003cc4 <writetospi+0x64>)
 8003ca6:	f7fd fea1 	bl	80019ec <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8003caa:	4622      	mov	r2, r4
 8003cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cb0:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <writetospi+0x68>)
 8003cb2:	f7fd fb0d 	bl	80012d0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	f7ff ffcc 	bl	8003c54 <decamutexoff>

    return 0;
} // end writetospi()
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000c48 	.word	0x20000c48
 8003cc8:	40020c00 	.word	0x40020c00

08003ccc <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8003ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd0:	4680      	mov	r8, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	4617      	mov	r7, r2
 8003cd6:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8003cd8:	f7ff ffb0 	bl	8003c3c <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003cdc:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8003d5c <readfromspi+0x90>
    stat = decamutexon() ;
 8003ce0:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003ce2:	4648      	mov	r0, r9
 8003ce4:	f7fd ff3c 	bl	8001b60 <HAL_SPI_GetState>
 8003ce8:	2801      	cmp	r0, #1
 8003cea:	d1fa      	bne.n	8003ce2 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8003cec:	481a      	ldr	r0, [pc, #104]	; (8003d58 <readfromspi+0x8c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cf4:	f7fd faec 	bl	80012d0 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8003cf8:	f1b8 0f00 	cmp.w	r8, #0
 8003cfc:	d00c      	beq.n	8003d18 <readfromspi+0x4c>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8003cfe:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8003d5c <readfromspi+0x90>
 8003d02:	44a0      	add	r8, r4
 8003d04:	2201      	movs	r2, #1
 8003d06:	4621      	mov	r1, r4
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0c:	4414      	add	r4, r2
 8003d0e:	4648      	mov	r0, r9
 8003d10:	f7fd fe6c 	bl	80019ec <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8003d14:	4544      	cmp	r4, r8
 8003d16:	d1f5      	bne.n	8003d04 <readfromspi+0x38>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8003d18:	b18f      	cbz	r7, 8003d3e <readfromspi+0x72>
 8003d1a:	f8df c040 	ldr.w	ip, [pc, #64]	; 8003d5c <readfromspi+0x90>
 8003d1e:	19e8      	adds	r0, r5, r7
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8003d20:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8003d22:	f8dc 2000 	ldr.w	r2, [ip]
 8003d26:	6891      	ldr	r1, [r2, #8]
 8003d28:	0789      	lsls	r1, r1, #30
 8003d2a:	d5fc      	bpl.n	8003d26 <readfromspi+0x5a>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8003d2c:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8003d2e:	6891      	ldr	r1, [r2, #8]
 8003d30:	07cb      	lsls	r3, r1, #31
 8003d32:	d5fc      	bpl.n	8003d2e <readfromspi+0x62>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8003d34:	68d3      	ldr	r3, [r2, #12]
 8003d36:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8003d3a:	4285      	cmp	r5, r0
 8003d3c:	d1f1      	bne.n	8003d22 <readfromspi+0x56>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d44:	4804      	ldr	r0, [pc, #16]	; (8003d58 <readfromspi+0x8c>)
 8003d46:	f7fd fac3 	bl	80012d0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7ff ff82 	bl	8003c54 <decamutexoff>

    return 0;
} // end readfromspi()
 8003d50:	2000      	movs	r0, #0
 8003d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d56:	bf00      	nop
 8003d58:	40020c00 	.word	0x40020c00
 8003d5c:	20000c48 	.word	0x20000c48

08003d60 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep(useconds_t usec)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e012      	b.n	8003d94 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	e004      	b.n	8003d7e <usleep+0x1e>
        {
            __NOP();
 8003d74:	bf00      	nop
            __NOP();
 8003d76:	bf00      	nop
        for(j=0;j<2;j++)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	bfd4      	ite	le
 8003d84:	2301      	movle	r3, #1
 8003d86:	2300      	movgt	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f2      	bne.n	8003d74 <usleep+0x14>
    for(i=0;i<usec;i++)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	bf8c      	ite	hi
 8003d9c:	2301      	movhi	r3, #1
 8003d9e:	2300      	movls	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e3      	bne.n	8003d6e <usleep+0xe>
        }
    }
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fd f8ab 	bl	8000f18 <HAL_Delay>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop

08003dcc <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <EXTI_GetITEnStatus+0x38>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000e100 	.word	0xe000e100

08003e08 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8003e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e12:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003e14:	2311      	movs	r3, #17
 8003e16:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003e1c:	1d3b      	adds	r3, r7, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	480a      	ldr	r0, [pc, #40]	; (8003e4c <reset_DW1000+0x44>)
 8003e22:	f7fd f90b 	bl	800103c <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8003e26:	2200      	movs	r2, #0
 8003e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e2c:	4807      	ldr	r0, [pc, #28]	; (8003e4c <reset_DW1000+0x44>)
 8003e2e:	f7fd fa4f 	bl	80012d0 <HAL_GPIO_WritePin>

    usleep(1);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f7ff ff94 	bl	8003d60 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f000 f809 	bl	8003e50 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8003e3e:	2002      	movs	r0, #2
 8003e40:	f7ff ffb8 	bl	8003db4 <Sleep>
}
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021400 	.word	0x40021400

08003e50 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d015      	beq.n	8003e8a <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8003e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e62:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e64:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <setup_DW1000RSTnIRQ+0x74>)
 8003e66:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003e6c:	f107 030c 	add.w	r3, r7, #12
 8003e70:	4619      	mov	r1, r3
 8003e72:	4815      	ldr	r0, [pc, #84]	; (8003ec8 <setup_DW1000RSTnIRQ+0x78>)
 8003e74:	f7fd f8e2 	bl	800103c <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8003e78:	2006      	movs	r0, #6
 8003e7a:	f7fd f8ab 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2105      	movs	r1, #5
 8003e82:	2006      	movs	r0, #6
 8003e84:	f7fd f86e 	bl	8000f64 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8003e88:	e017      	b.n	8003eba <setup_DW1000RSTnIRQ+0x6a>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8003e8a:	2006      	movs	r0, #6
 8003e8c:	f7fd f8b0 	bl	8000ff0 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8003e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e94:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003e96:	2311      	movs	r3, #17
 8003e98:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4807      	ldr	r0, [pc, #28]	; (8003ec8 <setup_DW1000RSTnIRQ+0x78>)
 8003eaa:	f7fd f8c7 	bl	800103c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003eb4:	4804      	ldr	r0, [pc, #16]	; (8003ec8 <setup_DW1000RSTnIRQ+0x78>)
 8003eb6:	f7fd fa0b 	bl	80012d0 <HAL_GPIO_WritePin>
}
 8003eba:	bf00      	nop
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	10110000 	.word	0x10110000
 8003ec8:	40021400 	.word	0x40021400

08003ecc <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <port_set_dw1000_slowrate+0x14>)
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8003ed6:	4802      	ldr	r0, [pc, #8]	; (8003ee0 <port_set_dw1000_slowrate+0x14>)
 8003ed8:	f7fd fd48 	bl	800196c <HAL_SPI_Init>
}
 8003edc:	bf00      	nop
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000c48 	.word	0x20000c48

08003ee4 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <port_set_dw1000_fastrate+0x14>)
 8003eea:	2208      	movs	r2, #8
 8003eec:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8003eee:	4802      	ldr	r0, [pc, #8]	; (8003ef8 <port_set_dw1000_fastrate+0x14>)
 8003ef0:	f7fd fd3c 	bl	800196c <HAL_SPI_Init>
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000c48 	.word	0x20000c48

08003efc <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RESET_Pin)
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0c:	d103      	bne.n	8003f16 <HAL_GPIO_EXTI_Callback+0x1a>
    {
        signalResetDone = 1;
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <HAL_GPIO_EXTI_Callback+0x30>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 8003f14:	e005      	b.n	8003f22 <HAL_GPIO_EXTI_Callback+0x26>
    else if (GPIO_Pin == DW_IRQn_Pin)
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1c:	d101      	bne.n	8003f22 <HAL_GPIO_EXTI_Callback+0x26>
        process_deca_irq();
 8003f1e:	f000 f807 	bl	8003f30 <process_deca_irq>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000b48 	.word	0x20000b48

08003f30 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8003f34:	e002      	b.n	8003f3c <process_deca_irq+0xc>
    {

        port_deca_isr();
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <process_deca_irq+0x1c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8003f3c:	f000 f820 	bl	8003f80 <port_CheckEXT_IRQ>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f7      	bne.n	8003f36 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000b44 	.word	0x20000b44

08003f50 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8003f54:	2017      	movs	r0, #23
 8003f56:	f000 f82d 	bl	8003fb4 <__NVIC_DisableIRQ>
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop

08003f60 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8003f64:	2017      	movs	r0, #23
 8003f66:	f000 f817 	bl	8003f98 <__NVIC_EnableIRQ>
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop

08003f70 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8003f74:	2017      	movs	r0, #23
 8003f76:	f7ff ff29 	bl	8003dcc <EXTI_GetITEnStatus>
 8003f7a:	4603      	mov	r3, r0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 8003f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <port_CheckEXT_IRQ+0x14>)
 8003f8a:	f7fd f99b 	bl	80012c4 <HAL_GPIO_ReadPin>
 8003f8e:	4603      	mov	r3, r0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40021400 	.word	0x40021400

08003f98 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	db07      	blt.n	8003fac <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f9c:	f000 011f 	and.w	r1, r0, #31
 8003fa0:	4a03      	ldr	r2, [pc, #12]	; (8003fb0 <__NVIC_EnableIRQ+0x18>)
 8003fa2:	0940      	lsrs	r0, r0, #5
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	408b      	lsls	r3, r1
 8003fa8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000e100 	.word	0xe000e100

08003fb4 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	db0d      	blt.n	8003fd4 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb8:	0943      	lsrs	r3, r0, #5
 8003fba:	4907      	ldr	r1, [pc, #28]	; (8003fd8 <__NVIC_DisableIRQ+0x24>)
 8003fbc:	3320      	adds	r3, #32
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f000 001f 	and.w	r0, r0, #31
 8003fc4:	fa02 f000 	lsl.w	r0, r2, r0
 8003fc8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fd0:	f3bf 8f6f 	isb	sy
}
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	e000e100 	.word	0xe000e100

08003fdc <stdio_init>:
 * @brief Initialize stdio on the given UART
 *
 * @param[in] huart Pointer to the STM32 HAL UART peripheral instance
 */
void stdio_init(UART_HandleTypeDef* huart) {
    uart = huart;
 8003fdc:	4b01      	ldr	r3, [pc, #4]	; (8003fe4 <stdio_init+0x8>)
 8003fde:	6018      	str	r0, [r3, #0]
}
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20000b4c 	.word	0x20000b4c

08003fe8 <stdio_write>:
 *
 * @param[in] data Pointer to null terminated string
 * @return Number of bytes transmitted or -1 if an error occurred
 */
inline int stdio_write(const char *data)
{
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	9001      	str	r0, [sp, #4]
    uint16_t len = strlen(data);
 8003fee:	f7fc f8ff 	bl	80001f0 <strlen>
    if (HAL_UART_Transmit(uart, (uint8_t*) data, len, HAL_MAX_DELAY) == HAL_OK) {
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <stdio_write+0x2c>)
 8003ff4:	9901      	ldr	r1, [sp, #4]
    uint16_t len = strlen(data);
 8003ff6:	4604      	mov	r4, r0
    if (HAL_UART_Transmit(uart, (uint8_t*) data, len, HAL_MAX_DELAY) == HAL_OK) {
 8003ff8:	b282      	uxth	r2, r0
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8004000:	f7fe fa8c 	bl	800251c <HAL_UART_Transmit>
 8004004:	b910      	cbnz	r0, 800400c <stdio_write+0x24>
        return len;
 8004006:	b2a0      	uxth	r0, r4
    }
    return -1;
}
 8004008:	b002      	add	sp, #8
 800400a:	bd10      	pop	{r4, pc}
    return -1;
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	e7fa      	b.n	8004008 <stdio_write+0x20>
 8004012:	bf00      	nop
 8004014:	20000b4c 	.word	0x20000b4c

08004018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004050 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800401c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800401e:	e003      	b.n	8004028 <LoopCopyDataInit>

08004020 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004022:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004024:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004026:	3104      	adds	r1, #4

08004028 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004028:	480b      	ldr	r0, [pc, #44]	; (8004058 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800402c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800402e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004030:	d3f6      	bcc.n	8004020 <CopyDataInit>
  ldr  r2, =_sbss
 8004032:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004034:	e002      	b.n	800403c <LoopFillZerobss>

08004036 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004036:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004038:	f842 3b04 	str.w	r3, [r2], #4

0800403c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800403e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004040:	d3f9      	bcc.n	8004036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004042:	f7ff fdd3 	bl	8003bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004046:	f000 f817 	bl	8004078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800404a:	f7ff fa23 	bl	8003494 <main>
  bx  lr    
 800404e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004050:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004054:	08009028 	.word	0x08009028
  ldr  r0, =_sdata
 8004058:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800405c:	200009c8 	.word	0x200009c8
  ldr  r2, =_sbss
 8004060:	200009c8 	.word	0x200009c8
  ldr  r3, = _ebss
 8004064:	20000db4 	.word	0x20000db4

08004068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004068:	e7fe      	b.n	8004068 <ADC_IRQHandler>
	...

0800406c <__errno>:
 800406c:	4b01      	ldr	r3, [pc, #4]	; (8004074 <__errno+0x8>)
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	2000001c 	.word	0x2000001c

08004078 <__libc_init_array>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	4d0d      	ldr	r5, [pc, #52]	; (80040b0 <__libc_init_array+0x38>)
 800407c:	4c0d      	ldr	r4, [pc, #52]	; (80040b4 <__libc_init_array+0x3c>)
 800407e:	1b64      	subs	r4, r4, r5
 8004080:	10a4      	asrs	r4, r4, #2
 8004082:	2600      	movs	r6, #0
 8004084:	42a6      	cmp	r6, r4
 8004086:	d109      	bne.n	800409c <__libc_init_array+0x24>
 8004088:	4d0b      	ldr	r5, [pc, #44]	; (80040b8 <__libc_init_array+0x40>)
 800408a:	4c0c      	ldr	r4, [pc, #48]	; (80040bc <__libc_init_array+0x44>)
 800408c:	f004 fd18 	bl	8008ac0 <_init>
 8004090:	1b64      	subs	r4, r4, r5
 8004092:	10a4      	asrs	r4, r4, #2
 8004094:	2600      	movs	r6, #0
 8004096:	42a6      	cmp	r6, r4
 8004098:	d105      	bne.n	80040a6 <__libc_init_array+0x2e>
 800409a:	bd70      	pop	{r4, r5, r6, pc}
 800409c:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a0:	4798      	blx	r3
 80040a2:	3601      	adds	r6, #1
 80040a4:	e7ee      	b.n	8004084 <__libc_init_array+0xc>
 80040a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040aa:	4798      	blx	r3
 80040ac:	3601      	adds	r6, #1
 80040ae:	e7f2      	b.n	8004096 <__libc_init_array+0x1e>
 80040b0:	0800901c 	.word	0x0800901c
 80040b4:	0800901c 	.word	0x0800901c
 80040b8:	0800901c 	.word	0x0800901c
 80040bc:	08009024 	.word	0x08009024

080040c0 <memset>:
 80040c0:	4402      	add	r2, r0
 80040c2:	4603      	mov	r3, r0
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d100      	bne.n	80040ca <memset+0xa>
 80040c8:	4770      	bx	lr
 80040ca:	f803 1b01 	strb.w	r1, [r3], #1
 80040ce:	e7f9      	b.n	80040c4 <memset+0x4>

080040d0 <sprintf>:
 80040d0:	b40e      	push	{r1, r2, r3}
 80040d2:	b500      	push	{lr}
 80040d4:	b09c      	sub	sp, #112	; 0x70
 80040d6:	ab1d      	add	r3, sp, #116	; 0x74
 80040d8:	9002      	str	r0, [sp, #8]
 80040da:	9006      	str	r0, [sp, #24]
 80040dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040e0:	4809      	ldr	r0, [pc, #36]	; (8004108 <sprintf+0x38>)
 80040e2:	9107      	str	r1, [sp, #28]
 80040e4:	9104      	str	r1, [sp, #16]
 80040e6:	4909      	ldr	r1, [pc, #36]	; (800410c <sprintf+0x3c>)
 80040e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ec:	9105      	str	r1, [sp, #20]
 80040ee:	6800      	ldr	r0, [r0, #0]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	a902      	add	r1, sp, #8
 80040f4:	f000 f80c 	bl	8004110 <_svfprintf_r>
 80040f8:	9b02      	ldr	r3, [sp, #8]
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	b01c      	add	sp, #112	; 0x70
 8004100:	f85d eb04 	ldr.w	lr, [sp], #4
 8004104:	b003      	add	sp, #12
 8004106:	4770      	bx	lr
 8004108:	2000001c 	.word	0x2000001c
 800410c:	ffff0208 	.word	0xffff0208

08004110 <_svfprintf_r>:
 8004110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004114:	ed2d 8b04 	vpush	{d8-d9}
 8004118:	b0cf      	sub	sp, #316	; 0x13c
 800411a:	4689      	mov	r9, r1
 800411c:	4693      	mov	fp, r2
 800411e:	461e      	mov	r6, r3
 8004120:	4682      	mov	sl, r0
 8004122:	f002 f96d 	bl	8006400 <_localeconv_r>
 8004126:	6803      	ldr	r3, [r0, #0]
 8004128:	9313      	str	r3, [sp, #76]	; 0x4c
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc f860 	bl	80001f0 <strlen>
 8004130:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004134:	900e      	str	r0, [sp, #56]	; 0x38
 8004136:	0618      	lsls	r0, r3, #24
 8004138:	d51a      	bpl.n	8004170 <_svfprintf_r+0x60>
 800413a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800413e:	b9bb      	cbnz	r3, 8004170 <_svfprintf_r+0x60>
 8004140:	2140      	movs	r1, #64	; 0x40
 8004142:	4650      	mov	r0, sl
 8004144:	f002 f964 	bl	8006410 <_malloc_r>
 8004148:	f8c9 0000 	str.w	r0, [r9]
 800414c:	f8c9 0010 	str.w	r0, [r9, #16]
 8004150:	b958      	cbnz	r0, 800416a <_svfprintf_r+0x5a>
 8004152:	230c      	movs	r3, #12
 8004154:	f8ca 3000 	str.w	r3, [sl]
 8004158:	f04f 33ff 	mov.w	r3, #4294967295
 800415c:	930f      	str	r3, [sp, #60]	; 0x3c
 800415e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004160:	b04f      	add	sp, #316	; 0x13c
 8004162:	ecbd 8b04 	vpop	{d8-d9}
 8004166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416a:	2340      	movs	r3, #64	; 0x40
 800416c:	f8c9 3014 	str.w	r3, [r9, #20]
 8004170:	ed9f 7b93 	vldr	d7, [pc, #588]	; 80043c0 <_svfprintf_r+0x2b0>
 8004174:	2500      	movs	r5, #0
 8004176:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800417a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800417e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8004182:	ac25      	add	r4, sp, #148	; 0x94
 8004184:	9422      	str	r4, [sp, #136]	; 0x88
 8004186:	9505      	str	r5, [sp, #20]
 8004188:	950a      	str	r5, [sp, #40]	; 0x28
 800418a:	9512      	str	r5, [sp, #72]	; 0x48
 800418c:	9514      	str	r5, [sp, #80]	; 0x50
 800418e:	950f      	str	r5, [sp, #60]	; 0x3c
 8004190:	465b      	mov	r3, fp
 8004192:	461d      	mov	r5, r3
 8004194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004198:	b10a      	cbz	r2, 800419e <_svfprintf_r+0x8e>
 800419a:	2a25      	cmp	r2, #37	; 0x25
 800419c:	d1f9      	bne.n	8004192 <_svfprintf_r+0x82>
 800419e:	ebb5 070b 	subs.w	r7, r5, fp
 80041a2:	d00d      	beq.n	80041c0 <_svfprintf_r+0xb0>
 80041a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80041a6:	443b      	add	r3, r7
 80041a8:	9324      	str	r3, [sp, #144]	; 0x90
 80041aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041ac:	3301      	adds	r3, #1
 80041ae:	2b07      	cmp	r3, #7
 80041b0:	e9c4 b700 	strd	fp, r7, [r4]
 80041b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80041b6:	dc79      	bgt.n	80042ac <_svfprintf_r+0x19c>
 80041b8:	3408      	adds	r4, #8
 80041ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041bc:	443b      	add	r3, r7
 80041be:	930f      	str	r3, [sp, #60]	; 0x3c
 80041c0:	782b      	ldrb	r3, [r5, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f001 8140 	beq.w	8005448 <_svfprintf_r+0x1338>
 80041c8:	2300      	movs	r3, #0
 80041ca:	f04f 32ff 	mov.w	r2, #4294967295
 80041ce:	3501      	adds	r5, #1
 80041d0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80041d4:	9204      	str	r2, [sp, #16]
 80041d6:	9310      	str	r3, [sp, #64]	; 0x40
 80041d8:	4698      	mov	r8, r3
 80041da:	270a      	movs	r7, #10
 80041dc:	212b      	movs	r1, #43	; 0x2b
 80041de:	462a      	mov	r2, r5
 80041e0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80041e4:	9307      	str	r3, [sp, #28]
 80041e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80041e8:	9b07      	ldr	r3, [sp, #28]
 80041ea:	3b20      	subs	r3, #32
 80041ec:	2b5a      	cmp	r3, #90	; 0x5a
 80041ee:	f200 85b4 	bhi.w	8004d5a <_svfprintf_r+0xc4a>
 80041f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80041f6:	007e      	.short	0x007e
 80041f8:	05b205b2 	.word	0x05b205b2
 80041fc:	05b20086 	.word	0x05b20086
 8004200:	05b205b2 	.word	0x05b205b2
 8004204:	05b20065 	.word	0x05b20065
 8004208:	008905b2 	.word	0x008905b2
 800420c:	05b20093 	.word	0x05b20093
 8004210:	00960090 	.word	0x00960090
 8004214:	00b305b2 	.word	0x00b305b2
 8004218:	00b600b6 	.word	0x00b600b6
 800421c:	00b600b6 	.word	0x00b600b6
 8004220:	00b600b6 	.word	0x00b600b6
 8004224:	00b600b6 	.word	0x00b600b6
 8004228:	05b200b6 	.word	0x05b200b6
 800422c:	05b205b2 	.word	0x05b205b2
 8004230:	05b205b2 	.word	0x05b205b2
 8004234:	05b205b2 	.word	0x05b205b2
 8004238:	05b20127 	.word	0x05b20127
 800423c:	00fc00e9 	.word	0x00fc00e9
 8004240:	01270127 	.word	0x01270127
 8004244:	05b20127 	.word	0x05b20127
 8004248:	05b205b2 	.word	0x05b205b2
 800424c:	00c605b2 	.word	0x00c605b2
 8004250:	05b205b2 	.word	0x05b205b2
 8004254:	05b20492 	.word	0x05b20492
 8004258:	05b205b2 	.word	0x05b205b2
 800425c:	05b204d9 	.word	0x05b204d9
 8004260:	05b204fa 	.word	0x05b204fa
 8004264:	051905b2 	.word	0x051905b2
 8004268:	05b205b2 	.word	0x05b205b2
 800426c:	05b205b2 	.word	0x05b205b2
 8004270:	05b205b2 	.word	0x05b205b2
 8004274:	05b205b2 	.word	0x05b205b2
 8004278:	05b20127 	.word	0x05b20127
 800427c:	00fe00e9 	.word	0x00fe00e9
 8004280:	01270127 	.word	0x01270127
 8004284:	00c90127 	.word	0x00c90127
 8004288:	00dd00fe 	.word	0x00dd00fe
 800428c:	00d605b2 	.word	0x00d605b2
 8004290:	046f05b2 	.word	0x046f05b2
 8004294:	04c80494 	.word	0x04c80494
 8004298:	05b200dd 	.word	0x05b200dd
 800429c:	007c04d9 	.word	0x007c04d9
 80042a0:	05b204fc 	.word	0x05b204fc
 80042a4:	053605b2 	.word	0x053605b2
 80042a8:	007c05b2 	.word	0x007c05b2
 80042ac:	aa22      	add	r2, sp, #136	; 0x88
 80042ae:	4649      	mov	r1, r9
 80042b0:	4650      	mov	r0, sl
 80042b2:	f002 fe94 	bl	8006fde <__ssprint_r>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	f040 8132 	bne.w	8004520 <_svfprintf_r+0x410>
 80042bc:	ac25      	add	r4, sp, #148	; 0x94
 80042be:	e77c      	b.n	80041ba <_svfprintf_r+0xaa>
 80042c0:	4650      	mov	r0, sl
 80042c2:	f002 f89d 	bl	8006400 <_localeconv_r>
 80042c6:	6843      	ldr	r3, [r0, #4]
 80042c8:	9314      	str	r3, [sp, #80]	; 0x50
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fb ff90 	bl	80001f0 <strlen>
 80042d0:	9012      	str	r0, [sp, #72]	; 0x48
 80042d2:	4650      	mov	r0, sl
 80042d4:	f002 f894 	bl	8006400 <_localeconv_r>
 80042d8:	6883      	ldr	r3, [r0, #8]
 80042da:	930a      	str	r3, [sp, #40]	; 0x28
 80042dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042de:	212b      	movs	r1, #43	; 0x2b
 80042e0:	b12b      	cbz	r3, 80042ee <_svfprintf_r+0x1de>
 80042e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042e4:	b11b      	cbz	r3, 80042ee <_svfprintf_r+0x1de>
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b10b      	cbz	r3, 80042ee <_svfprintf_r+0x1de>
 80042ea:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 80042ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80042f0:	e775      	b.n	80041de <_svfprintf_r+0xce>
 80042f2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f9      	bne.n	80042ee <_svfprintf_r+0x1de>
 80042fa:	2320      	movs	r3, #32
 80042fc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8004300:	e7f5      	b.n	80042ee <_svfprintf_r+0x1de>
 8004302:	f048 0801 	orr.w	r8, r8, #1
 8004306:	e7f2      	b.n	80042ee <_svfprintf_r+0x1de>
 8004308:	f856 3b04 	ldr.w	r3, [r6], #4
 800430c:	9310      	str	r3, [sp, #64]	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	daed      	bge.n	80042ee <_svfprintf_r+0x1de>
 8004312:	425b      	negs	r3, r3
 8004314:	9310      	str	r3, [sp, #64]	; 0x40
 8004316:	f048 0804 	orr.w	r8, r8, #4
 800431a:	e7e8      	b.n	80042ee <_svfprintf_r+0x1de>
 800431c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8004320:	e7e5      	b.n	80042ee <_svfprintf_r+0x1de>
 8004322:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004324:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004328:	9307      	str	r3, [sp, #28]
 800432a:	2b2a      	cmp	r3, #42	; 0x2a
 800432c:	d113      	bne.n	8004356 <_svfprintf_r+0x246>
 800432e:	f856 0b04 	ldr.w	r0, [r6], #4
 8004332:	920b      	str	r2, [sp, #44]	; 0x2c
 8004334:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8004338:	9304      	str	r3, [sp, #16]
 800433a:	e7d8      	b.n	80042ee <_svfprintf_r+0x1de>
 800433c:	9804      	ldr	r0, [sp, #16]
 800433e:	fb07 3300 	mla	r3, r7, r0, r3
 8004342:	9304      	str	r3, [sp, #16]
 8004344:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004348:	9307      	str	r3, [sp, #28]
 800434a:	9b07      	ldr	r3, [sp, #28]
 800434c:	3b30      	subs	r3, #48	; 0x30
 800434e:	2b09      	cmp	r3, #9
 8004350:	d9f4      	bls.n	800433c <_svfprintf_r+0x22c>
 8004352:	920b      	str	r2, [sp, #44]	; 0x2c
 8004354:	e748      	b.n	80041e8 <_svfprintf_r+0xd8>
 8004356:	2300      	movs	r3, #0
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	e7f6      	b.n	800434a <_svfprintf_r+0x23a>
 800435c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8004360:	e7c5      	b.n	80042ee <_svfprintf_r+0x1de>
 8004362:	2300      	movs	r3, #0
 8004364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004366:	9310      	str	r3, [sp, #64]	; 0x40
 8004368:	9b07      	ldr	r3, [sp, #28]
 800436a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800436c:	3b30      	subs	r3, #48	; 0x30
 800436e:	fb07 3300 	mla	r3, r7, r0, r3
 8004372:	9310      	str	r3, [sp, #64]	; 0x40
 8004374:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004378:	9307      	str	r3, [sp, #28]
 800437a:	3b30      	subs	r3, #48	; 0x30
 800437c:	2b09      	cmp	r3, #9
 800437e:	d9f3      	bls.n	8004368 <_svfprintf_r+0x258>
 8004380:	e7e7      	b.n	8004352 <_svfprintf_r+0x242>
 8004382:	f048 0808 	orr.w	r8, r8, #8
 8004386:	e7b2      	b.n	80042ee <_svfprintf_r+0x1de>
 8004388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b68      	cmp	r3, #104	; 0x68
 800438e:	bf01      	itttt	eq
 8004390:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8004392:	3301      	addeq	r3, #1
 8004394:	930b      	streq	r3, [sp, #44]	; 0x2c
 8004396:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800439a:	bf18      	it	ne
 800439c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 80043a0:	e7a5      	b.n	80042ee <_svfprintf_r+0x1de>
 80043a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b6c      	cmp	r3, #108	; 0x6c
 80043a8:	d105      	bne.n	80043b6 <_svfprintf_r+0x2a6>
 80043aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043ac:	3301      	adds	r3, #1
 80043ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80043b0:	f048 0820 	orr.w	r8, r8, #32
 80043b4:	e79b      	b.n	80042ee <_svfprintf_r+0x1de>
 80043b6:	f048 0810 	orr.w	r8, r8, #16
 80043ba:	e798      	b.n	80042ee <_svfprintf_r+0x1de>
 80043bc:	f3af 8000 	nop.w
	...
 80043c8:	4632      	mov	r2, r6
 80043ca:	2000      	movs	r0, #0
 80043cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80043d0:	9206      	str	r2, [sp, #24]
 80043d2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80043d6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80043da:	2301      	movs	r3, #1
 80043dc:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80043e0:	9003      	str	r0, [sp, #12]
 80043e2:	9304      	str	r3, [sp, #16]
 80043e4:	4606      	mov	r6, r0
 80043e6:	4605      	mov	r5, r0
 80043e8:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 80043ec:	e1b8      	b.n	8004760 <_svfprintf_r+0x650>
 80043ee:	f048 0810 	orr.w	r8, r8, #16
 80043f2:	f018 0f20 	tst.w	r8, #32
 80043f6:	d012      	beq.n	800441e <_svfprintf_r+0x30e>
 80043f8:	3607      	adds	r6, #7
 80043fa:	f026 0307 	bic.w	r3, r6, #7
 80043fe:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8004402:	9306      	str	r3, [sp, #24]
 8004404:	2e00      	cmp	r6, #0
 8004406:	f177 0300 	sbcs.w	r3, r7, #0
 800440a:	da06      	bge.n	800441a <_svfprintf_r+0x30a>
 800440c:	4276      	negs	r6, r6
 800440e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004412:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004416:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800441a:	2301      	movs	r3, #1
 800441c:	e38e      	b.n	8004b3c <_svfprintf_r+0xa2c>
 800441e:	1d33      	adds	r3, r6, #4
 8004420:	f018 0f10 	tst.w	r8, #16
 8004424:	9306      	str	r3, [sp, #24]
 8004426:	d002      	beq.n	800442e <_svfprintf_r+0x31e>
 8004428:	6836      	ldr	r6, [r6, #0]
 800442a:	17f7      	asrs	r7, r6, #31
 800442c:	e7ea      	b.n	8004404 <_svfprintf_r+0x2f4>
 800442e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004432:	6836      	ldr	r6, [r6, #0]
 8004434:	d001      	beq.n	800443a <_svfprintf_r+0x32a>
 8004436:	b236      	sxth	r6, r6
 8004438:	e7f7      	b.n	800442a <_svfprintf_r+0x31a>
 800443a:	f418 7f00 	tst.w	r8, #512	; 0x200
 800443e:	bf18      	it	ne
 8004440:	b276      	sxtbne	r6, r6
 8004442:	e7f2      	b.n	800442a <_svfprintf_r+0x31a>
 8004444:	3607      	adds	r6, #7
 8004446:	f026 0307 	bic.w	r3, r6, #7
 800444a:	ecb3 7b02 	vldmia	r3!, {d7}
 800444e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004452:	9306      	str	r3, [sp, #24]
 8004454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004456:	ee09 3a10 	vmov	s18, r3
 800445a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800445c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004460:	ee09 3a90 	vmov	s19, r3
 8004464:	f04f 32ff 	mov.w	r2, #4294967295
 8004468:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <_svfprintf_r+0x444>)
 800446a:	ec51 0b19 	vmov	r0, r1, d9
 800446e:	f7fc fb6d 	bl	8000b4c <__aeabi_dcmpun>
 8004472:	bb10      	cbnz	r0, 80044ba <_svfprintf_r+0x3aa>
 8004474:	4b37      	ldr	r3, [pc, #220]	; (8004554 <_svfprintf_r+0x444>)
 8004476:	ec51 0b19 	vmov	r0, r1, d9
 800447a:	f04f 32ff 	mov.w	r2, #4294967295
 800447e:	f7fc fb47 	bl	8000b10 <__aeabi_dcmple>
 8004482:	b9d0      	cbnz	r0, 80044ba <_svfprintf_r+0x3aa>
 8004484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004488:	2200      	movs	r2, #0
 800448a:	2300      	movs	r3, #0
 800448c:	f7fc fb36 	bl	8000afc <__aeabi_dcmplt>
 8004490:	b110      	cbz	r0, 8004498 <_svfprintf_r+0x388>
 8004492:	232d      	movs	r3, #45	; 0x2d
 8004494:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8004498:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <_svfprintf_r+0x448>)
 800449a:	4830      	ldr	r0, [pc, #192]	; (800455c <_svfprintf_r+0x44c>)
 800449c:	9b07      	ldr	r3, [sp, #28]
 800449e:	2100      	movs	r1, #0
 80044a0:	2b47      	cmp	r3, #71	; 0x47
 80044a2:	bfd4      	ite	le
 80044a4:	4693      	movle	fp, r2
 80044a6:	4683      	movgt	fp, r0
 80044a8:	2303      	movs	r3, #3
 80044aa:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80044ae:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 80044b2:	2600      	movs	r6, #0
 80044b4:	4633      	mov	r3, r6
 80044b6:	f001 b802 	b.w	80054be <_svfprintf_r+0x13ae>
 80044ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	f7fc fb43 	bl	8000b4c <__aeabi_dcmpun>
 80044c6:	b140      	cbz	r0, 80044da <_svfprintf_r+0x3ca>
 80044c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ca:	4a25      	ldr	r2, [pc, #148]	; (8004560 <_svfprintf_r+0x450>)
 80044cc:	4825      	ldr	r0, [pc, #148]	; (8004564 <_svfprintf_r+0x454>)
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bfbc      	itt	lt
 80044d2:	232d      	movlt	r3, #45	; 0x2d
 80044d4:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80044d8:	e7e0      	b.n	800449c <_svfprintf_r+0x38c>
 80044da:	9b07      	ldr	r3, [sp, #28]
 80044dc:	f023 0320 	bic.w	r3, r3, #32
 80044e0:	2b41      	cmp	r3, #65	; 0x41
 80044e2:	9308      	str	r3, [sp, #32]
 80044e4:	d125      	bne.n	8004532 <_svfprintf_r+0x422>
 80044e6:	2330      	movs	r3, #48	; 0x30
 80044e8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80044ec:	9b07      	ldr	r3, [sp, #28]
 80044ee:	2b61      	cmp	r3, #97	; 0x61
 80044f0:	bf0c      	ite	eq
 80044f2:	2378      	moveq	r3, #120	; 0x78
 80044f4:	2358      	movne	r3, #88	; 0x58
 80044f6:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80044fa:	9b04      	ldr	r3, [sp, #16]
 80044fc:	2b63      	cmp	r3, #99	; 0x63
 80044fe:	f048 0802 	orr.w	r8, r8, #2
 8004502:	dd31      	ble.n	8004568 <_svfprintf_r+0x458>
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	4650      	mov	r0, sl
 8004508:	f001 ff82 	bl	8006410 <_malloc_r>
 800450c:	4683      	mov	fp, r0
 800450e:	2800      	cmp	r0, #0
 8004510:	f040 81fe 	bne.w	8004910 <_svfprintf_r+0x800>
 8004514:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8004520:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004524:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800452a:	bf18      	it	ne
 800452c:	f04f 33ff 	movne.w	r3, #4294967295
 8004530:	e614      	b.n	800415c <_svfprintf_r+0x4c>
 8004532:	9b04      	ldr	r3, [sp, #16]
 8004534:	3301      	adds	r3, #1
 8004536:	f000 81ed 	beq.w	8004914 <_svfprintf_r+0x804>
 800453a:	9b08      	ldr	r3, [sp, #32]
 800453c:	2b47      	cmp	r3, #71	; 0x47
 800453e:	f040 81ec 	bne.w	800491a <_svfprintf_r+0x80a>
 8004542:	9b04      	ldr	r3, [sp, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 81e8 	bne.w	800491a <_svfprintf_r+0x80a>
 800454a:	9303      	str	r3, [sp, #12]
 800454c:	2301      	movs	r3, #1
 800454e:	9304      	str	r3, [sp, #16]
 8004550:	e00d      	b.n	800456e <_svfprintf_r+0x45e>
 8004552:	bf00      	nop
 8004554:	7fefffff 	.word	0x7fefffff
 8004558:	08008c7c 	.word	0x08008c7c
 800455c:	08008c80 	.word	0x08008c80
 8004560:	08008c84 	.word	0x08008c84
 8004564:	08008c88 	.word	0x08008c88
 8004568:	9003      	str	r0, [sp, #12]
 800456a:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800456e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8004572:	9311      	str	r3, [sp, #68]	; 0x44
 8004574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004576:	2b00      	cmp	r3, #0
 8004578:	f280 81d1 	bge.w	800491e <_svfprintf_r+0x80e>
 800457c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800457e:	ee08 3a10 	vmov	s16, r3
 8004582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004584:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004588:	ee08 3a90 	vmov	s17, r3
 800458c:	232d      	movs	r3, #45	; 0x2d
 800458e:	9318      	str	r3, [sp, #96]	; 0x60
 8004590:	9b08      	ldr	r3, [sp, #32]
 8004592:	2b41      	cmp	r3, #65	; 0x41
 8004594:	f040 81e1 	bne.w	800495a <_svfprintf_r+0x84a>
 8004598:	eeb0 0a48 	vmov.f32	s0, s16
 800459c:	eef0 0a68 	vmov.f32	s1, s17
 80045a0:	a81c      	add	r0, sp, #112	; 0x70
 80045a2:	f002 fcc1 	bl	8006f28 <frexp>
 80045a6:	2200      	movs	r2, #0
 80045a8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80045ac:	ec51 0b10 	vmov	r0, r1, d0
 80045b0:	f7fc f832 	bl	8000618 <__aeabi_dmul>
 80045b4:	2200      	movs	r2, #0
 80045b6:	2300      	movs	r3, #0
 80045b8:	4606      	mov	r6, r0
 80045ba:	460f      	mov	r7, r1
 80045bc:	f7fc fa94 	bl	8000ae8 <__aeabi_dcmpeq>
 80045c0:	b108      	cbz	r0, 80045c6 <_svfprintf_r+0x4b6>
 80045c2:	2301      	movs	r3, #1
 80045c4:	931c      	str	r3, [sp, #112]	; 0x70
 80045c6:	4bb4      	ldr	r3, [pc, #720]	; (8004898 <_svfprintf_r+0x788>)
 80045c8:	4ab4      	ldr	r2, [pc, #720]	; (800489c <_svfprintf_r+0x78c>)
 80045ca:	9907      	ldr	r1, [sp, #28]
 80045cc:	2961      	cmp	r1, #97	; 0x61
 80045ce:	bf18      	it	ne
 80045d0:	461a      	movne	r2, r3
 80045d2:	9b04      	ldr	r3, [sp, #16]
 80045d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80045d6:	3b01      	subs	r3, #1
 80045d8:	9305      	str	r3, [sp, #20]
 80045da:	465d      	mov	r5, fp
 80045dc:	4bb0      	ldr	r3, [pc, #704]	; (80048a0 <_svfprintf_r+0x790>)
 80045de:	2200      	movs	r2, #0
 80045e0:	4630      	mov	r0, r6
 80045e2:	4639      	mov	r1, r7
 80045e4:	f7fc f818 	bl	8000618 <__aeabi_dmul>
 80045e8:	460f      	mov	r7, r1
 80045ea:	4606      	mov	r6, r0
 80045ec:	f7fc fac4 	bl	8000b78 <__aeabi_d2iz>
 80045f0:	9019      	str	r0, [sp, #100]	; 0x64
 80045f2:	f7fb ffa7 	bl	8000544 <__aeabi_i2d>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4630      	mov	r0, r6
 80045fc:	4639      	mov	r1, r7
 80045fe:	f7fb fe53 	bl	80002a8 <__aeabi_dsub>
 8004602:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004606:	5c9b      	ldrb	r3, [r3, r2]
 8004608:	f805 3b01 	strb.w	r3, [r5], #1
 800460c:	9b05      	ldr	r3, [sp, #20]
 800460e:	9309      	str	r3, [sp, #36]	; 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	4606      	mov	r6, r0
 8004614:	460f      	mov	r7, r1
 8004616:	d007      	beq.n	8004628 <_svfprintf_r+0x518>
 8004618:	3b01      	subs	r3, #1
 800461a:	9305      	str	r3, [sp, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	2300      	movs	r3, #0
 8004620:	f7fc fa62 	bl	8000ae8 <__aeabi_dcmpeq>
 8004624:	2800      	cmp	r0, #0
 8004626:	d0d9      	beq.n	80045dc <_svfprintf_r+0x4cc>
 8004628:	4b9e      	ldr	r3, [pc, #632]	; (80048a4 <_svfprintf_r+0x794>)
 800462a:	2200      	movs	r2, #0
 800462c:	4630      	mov	r0, r6
 800462e:	4639      	mov	r1, r7
 8004630:	f7fc fa82 	bl	8000b38 <__aeabi_dcmpgt>
 8004634:	b960      	cbnz	r0, 8004650 <_svfprintf_r+0x540>
 8004636:	4b9b      	ldr	r3, [pc, #620]	; (80048a4 <_svfprintf_r+0x794>)
 8004638:	2200      	movs	r2, #0
 800463a:	4630      	mov	r0, r6
 800463c:	4639      	mov	r1, r7
 800463e:	f7fc fa53 	bl	8000ae8 <__aeabi_dcmpeq>
 8004642:	2800      	cmp	r0, #0
 8004644:	f000 8184 	beq.w	8004950 <_svfprintf_r+0x840>
 8004648:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800464a:	07df      	lsls	r7, r3, #31
 800464c:	f140 8180 	bpl.w	8004950 <_svfprintf_r+0x840>
 8004650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004652:	9520      	str	r5, [sp, #128]	; 0x80
 8004654:	7bd9      	ldrb	r1, [r3, #15]
 8004656:	2030      	movs	r0, #48	; 0x30
 8004658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800465a:	1e53      	subs	r3, r2, #1
 800465c:	9320      	str	r3, [sp, #128]	; 0x80
 800465e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8004662:	428b      	cmp	r3, r1
 8004664:	f000 8163 	beq.w	800492e <_svfprintf_r+0x81e>
 8004668:	2b39      	cmp	r3, #57	; 0x39
 800466a:	bf0b      	itete	eq
 800466c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800466e:	3301      	addne	r3, #1
 8004670:	7a9b      	ldrbeq	r3, [r3, #10]
 8004672:	b2db      	uxtbne	r3, r3
 8004674:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004678:	eba5 030b 	sub.w	r3, r5, fp
 800467c:	9305      	str	r3, [sp, #20]
 800467e:	9b08      	ldr	r3, [sp, #32]
 8004680:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004682:	2b47      	cmp	r3, #71	; 0x47
 8004684:	f040 81b1 	bne.w	80049ea <_svfprintf_r+0x8da>
 8004688:	1cee      	adds	r6, r5, #3
 800468a:	db03      	blt.n	8004694 <_svfprintf_r+0x584>
 800468c:	9b04      	ldr	r3, [sp, #16]
 800468e:	42ab      	cmp	r3, r5
 8004690:	f280 81d6 	bge.w	8004a40 <_svfprintf_r+0x930>
 8004694:	9b07      	ldr	r3, [sp, #28]
 8004696:	3b02      	subs	r3, #2
 8004698:	9307      	str	r3, [sp, #28]
 800469a:	9907      	ldr	r1, [sp, #28]
 800469c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80046a0:	f021 0120 	bic.w	r1, r1, #32
 80046a4:	2941      	cmp	r1, #65	; 0x41
 80046a6:	bf08      	it	eq
 80046a8:	320f      	addeq	r2, #15
 80046aa:	f105 33ff 	add.w	r3, r5, #4294967295
 80046ae:	bf06      	itte	eq
 80046b0:	b2d2      	uxtbeq	r2, r2
 80046b2:	2101      	moveq	r1, #1
 80046b4:	2100      	movne	r1, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	931c      	str	r3, [sp, #112]	; 0x70
 80046ba:	bfb8      	it	lt
 80046bc:	f1c5 0301 	rsblt	r3, r5, #1
 80046c0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80046c4:	bfb4      	ite	lt
 80046c6:	222d      	movlt	r2, #45	; 0x2d
 80046c8:	222b      	movge	r2, #43	; 0x2b
 80046ca:	2b09      	cmp	r3, #9
 80046cc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80046d0:	f340 81a4 	ble.w	8004a1c <_svfprintf_r+0x90c>
 80046d4:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 80046d8:	260a      	movs	r6, #10
 80046da:	4611      	mov	r1, r2
 80046dc:	fb93 f5f6 	sdiv	r5, r3, r6
 80046e0:	fb06 3015 	mls	r0, r6, r5, r3
 80046e4:	3030      	adds	r0, #48	; 0x30
 80046e6:	f801 0c01 	strb.w	r0, [r1, #-1]
 80046ea:	4618      	mov	r0, r3
 80046ec:	2863      	cmp	r0, #99	; 0x63
 80046ee:	f102 32ff 	add.w	r2, r2, #4294967295
 80046f2:	462b      	mov	r3, r5
 80046f4:	dcf1      	bgt.n	80046da <_svfprintf_r+0x5ca>
 80046f6:	3330      	adds	r3, #48	; 0x30
 80046f8:	1e88      	subs	r0, r1, #2
 80046fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80046fe:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8004702:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8004706:	4603      	mov	r3, r0
 8004708:	42ab      	cmp	r3, r5
 800470a:	f0c0 8182 	bcc.w	8004a12 <_svfprintf_r+0x902>
 800470e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8004712:	1a52      	subs	r2, r2, r1
 8004714:	42a8      	cmp	r0, r5
 8004716:	bf88      	it	hi
 8004718:	2200      	movhi	r2, #0
 800471a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800471e:	441a      	add	r2, r3
 8004720:	ab1e      	add	r3, sp, #120	; 0x78
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	9a05      	ldr	r2, [sp, #20]
 8004726:	9315      	str	r3, [sp, #84]	; 0x54
 8004728:	2a01      	cmp	r2, #1
 800472a:	4413      	add	r3, r2
 800472c:	9304      	str	r3, [sp, #16]
 800472e:	dc02      	bgt.n	8004736 <_svfprintf_r+0x626>
 8004730:	f018 0f01 	tst.w	r8, #1
 8004734:	d003      	beq.n	800473e <_svfprintf_r+0x62e>
 8004736:	9b04      	ldr	r3, [sp, #16]
 8004738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800473a:	4413      	add	r3, r2
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8004742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004746:	9311      	str	r3, [sp, #68]	; 0x44
 8004748:	2300      	movs	r3, #0
 800474a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800474e:	461d      	mov	r5, r3
 8004750:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004752:	b113      	cbz	r3, 800475a <_svfprintf_r+0x64a>
 8004754:	232d      	movs	r3, #45	; 0x2d
 8004756:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800475a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800475e:	2600      	movs	r6, #0
 8004760:	9b04      	ldr	r3, [sp, #16]
 8004762:	42b3      	cmp	r3, r6
 8004764:	bfb8      	it	lt
 8004766:	4633      	movlt	r3, r6
 8004768:	9311      	str	r3, [sp, #68]	; 0x44
 800476a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800476e:	b113      	cbz	r3, 8004776 <_svfprintf_r+0x666>
 8004770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004772:	3301      	adds	r3, #1
 8004774:	9311      	str	r3, [sp, #68]	; 0x44
 8004776:	f018 0302 	ands.w	r3, r8, #2
 800477a:	9317      	str	r3, [sp, #92]	; 0x5c
 800477c:	bf1e      	ittt	ne
 800477e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8004780:	3302      	addne	r3, #2
 8004782:	9311      	strne	r3, [sp, #68]	; 0x44
 8004784:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8004788:	9318      	str	r3, [sp, #96]	; 0x60
 800478a:	d11f      	bne.n	80047cc <_svfprintf_r+0x6bc>
 800478c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8004790:	1a9f      	subs	r7, r3, r2
 8004792:	2f00      	cmp	r7, #0
 8004794:	dd1a      	ble.n	80047cc <_svfprintf_r+0x6bc>
 8004796:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800479a:	4843      	ldr	r0, [pc, #268]	; (80048a8 <_svfprintf_r+0x798>)
 800479c:	6020      	str	r0, [r4, #0]
 800479e:	2f10      	cmp	r7, #16
 80047a0:	f103 0301 	add.w	r3, r3, #1
 80047a4:	f104 0108 	add.w	r1, r4, #8
 80047a8:	f300 82e6 	bgt.w	8004d78 <_svfprintf_r+0xc68>
 80047ac:	6067      	str	r7, [r4, #4]
 80047ae:	2b07      	cmp	r3, #7
 80047b0:	4417      	add	r7, r2
 80047b2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80047b6:	f340 82f2 	ble.w	8004d9e <_svfprintf_r+0xc8e>
 80047ba:	aa22      	add	r2, sp, #136	; 0x88
 80047bc:	4649      	mov	r1, r9
 80047be:	4650      	mov	r0, sl
 80047c0:	f002 fc0d 	bl	8006fde <__ssprint_r>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	f040 861d 	bne.w	8005404 <_svfprintf_r+0x12f4>
 80047ca:	ac25      	add	r4, sp, #148	; 0x94
 80047cc:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80047d0:	b173      	cbz	r3, 80047f0 <_svfprintf_r+0x6e0>
 80047d2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 80047d6:	6023      	str	r3, [r4, #0]
 80047d8:	2301      	movs	r3, #1
 80047da:	6063      	str	r3, [r4, #4]
 80047dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80047de:	3301      	adds	r3, #1
 80047e0:	9324      	str	r3, [sp, #144]	; 0x90
 80047e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047e4:	3301      	adds	r3, #1
 80047e6:	2b07      	cmp	r3, #7
 80047e8:	9323      	str	r3, [sp, #140]	; 0x8c
 80047ea:	f300 82da 	bgt.w	8004da2 <_svfprintf_r+0xc92>
 80047ee:	3408      	adds	r4, #8
 80047f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047f2:	b16b      	cbz	r3, 8004810 <_svfprintf_r+0x700>
 80047f4:	ab1b      	add	r3, sp, #108	; 0x6c
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	2302      	movs	r3, #2
 80047fa:	6063      	str	r3, [r4, #4]
 80047fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80047fe:	3302      	adds	r3, #2
 8004800:	9324      	str	r3, [sp, #144]	; 0x90
 8004802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004804:	3301      	adds	r3, #1
 8004806:	2b07      	cmp	r3, #7
 8004808:	9323      	str	r3, [sp, #140]	; 0x8c
 800480a:	f300 82d4 	bgt.w	8004db6 <_svfprintf_r+0xca6>
 800480e:	3408      	adds	r4, #8
 8004810:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d11f      	bne.n	8004856 <_svfprintf_r+0x746>
 8004816:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800481a:	1a9f      	subs	r7, r3, r2
 800481c:	2f00      	cmp	r7, #0
 800481e:	dd1a      	ble.n	8004856 <_svfprintf_r+0x746>
 8004820:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004824:	4821      	ldr	r0, [pc, #132]	; (80048ac <_svfprintf_r+0x79c>)
 8004826:	6020      	str	r0, [r4, #0]
 8004828:	2f10      	cmp	r7, #16
 800482a:	f103 0301 	add.w	r3, r3, #1
 800482e:	f104 0108 	add.w	r1, r4, #8
 8004832:	f300 82ca 	bgt.w	8004dca <_svfprintf_r+0xcba>
 8004836:	6067      	str	r7, [r4, #4]
 8004838:	2b07      	cmp	r3, #7
 800483a:	4417      	add	r7, r2
 800483c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8004840:	f340 82d6 	ble.w	8004df0 <_svfprintf_r+0xce0>
 8004844:	aa22      	add	r2, sp, #136	; 0x88
 8004846:	4649      	mov	r1, r9
 8004848:	4650      	mov	r0, sl
 800484a:	f002 fbc8 	bl	8006fde <__ssprint_r>
 800484e:	2800      	cmp	r0, #0
 8004850:	f040 85d8 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004854:	ac25      	add	r4, sp, #148	; 0x94
 8004856:	9b04      	ldr	r3, [sp, #16]
 8004858:	1af6      	subs	r6, r6, r3
 800485a:	2e00      	cmp	r6, #0
 800485c:	dd28      	ble.n	80048b0 <_svfprintf_r+0x7a0>
 800485e:	4f13      	ldr	r7, [pc, #76]	; (80048ac <_svfprintf_r+0x79c>)
 8004860:	6027      	str	r7, [r4, #0]
 8004862:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004866:	2e10      	cmp	r6, #16
 8004868:	f103 0301 	add.w	r3, r3, #1
 800486c:	f104 0108 	add.w	r1, r4, #8
 8004870:	f300 82c0 	bgt.w	8004df4 <_svfprintf_r+0xce4>
 8004874:	6066      	str	r6, [r4, #4]
 8004876:	2b07      	cmp	r3, #7
 8004878:	4416      	add	r6, r2
 800487a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800487e:	f340 82cc 	ble.w	8004e1a <_svfprintf_r+0xd0a>
 8004882:	aa22      	add	r2, sp, #136	; 0x88
 8004884:	4649      	mov	r1, r9
 8004886:	4650      	mov	r0, sl
 8004888:	f002 fba9 	bl	8006fde <__ssprint_r>
 800488c:	2800      	cmp	r0, #0
 800488e:	f040 85b9 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004892:	ac25      	add	r4, sp, #148	; 0x94
 8004894:	e00c      	b.n	80048b0 <_svfprintf_r+0x7a0>
 8004896:	bf00      	nop
 8004898:	08008c9d 	.word	0x08008c9d
 800489c:	08008c8c 	.word	0x08008c8c
 80048a0:	40300000 	.word	0x40300000
 80048a4:	3fe00000 	.word	0x3fe00000
 80048a8:	08008cb0 	.word	0x08008cb0
 80048ac:	08008cc0 	.word	0x08008cc0
 80048b0:	f418 7f80 	tst.w	r8, #256	; 0x100
 80048b4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80048b6:	f040 82b7 	bne.w	8004e28 <_svfprintf_r+0xd18>
 80048ba:	9b04      	ldr	r3, [sp, #16]
 80048bc:	f8c4 b000 	str.w	fp, [r4]
 80048c0:	441e      	add	r6, r3
 80048c2:	6063      	str	r3, [r4, #4]
 80048c4:	9624      	str	r6, [sp, #144]	; 0x90
 80048c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048c8:	3301      	adds	r3, #1
 80048ca:	2b07      	cmp	r3, #7
 80048cc:	9323      	str	r3, [sp, #140]	; 0x8c
 80048ce:	f300 82f0 	bgt.w	8004eb2 <_svfprintf_r+0xda2>
 80048d2:	3408      	adds	r4, #8
 80048d4:	f018 0f04 	tst.w	r8, #4
 80048d8:	f040 8576 	bne.w	80053c8 <_svfprintf_r+0x12b8>
 80048dc:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80048e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80048e2:	428a      	cmp	r2, r1
 80048e4:	bfac      	ite	ge
 80048e6:	189b      	addge	r3, r3, r2
 80048e8:	185b      	addlt	r3, r3, r1
 80048ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80048ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80048ee:	b13b      	cbz	r3, 8004900 <_svfprintf_r+0x7f0>
 80048f0:	aa22      	add	r2, sp, #136	; 0x88
 80048f2:	4649      	mov	r1, r9
 80048f4:	4650      	mov	r0, sl
 80048f6:	f002 fb72 	bl	8006fde <__ssprint_r>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f040 8582 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004900:	2300      	movs	r3, #0
 8004902:	9323      	str	r3, [sp, #140]	; 0x8c
 8004904:	9b03      	ldr	r3, [sp, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 8598 	bne.w	800543c <_svfprintf_r+0x132c>
 800490c:	ac25      	add	r4, sp, #148	; 0x94
 800490e:	e0ed      	b.n	8004aec <_svfprintf_r+0x9dc>
 8004910:	9003      	str	r0, [sp, #12]
 8004912:	e62c      	b.n	800456e <_svfprintf_r+0x45e>
 8004914:	9003      	str	r0, [sp, #12]
 8004916:	2306      	movs	r3, #6
 8004918:	e619      	b.n	800454e <_svfprintf_r+0x43e>
 800491a:	9003      	str	r0, [sp, #12]
 800491c:	e627      	b.n	800456e <_svfprintf_r+0x45e>
 800491e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8004922:	2300      	movs	r3, #0
 8004924:	eeb0 8a47 	vmov.f32	s16, s14
 8004928:	eef0 8a67 	vmov.f32	s17, s15
 800492c:	e62f      	b.n	800458e <_svfprintf_r+0x47e>
 800492e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004932:	e691      	b.n	8004658 <_svfprintf_r+0x548>
 8004934:	f803 0b01 	strb.w	r0, [r3], #1
 8004938:	1aca      	subs	r2, r1, r3
 800493a:	2a00      	cmp	r2, #0
 800493c:	dafa      	bge.n	8004934 <_svfprintf_r+0x824>
 800493e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004942:	3201      	adds	r2, #1
 8004944:	f103 0301 	add.w	r3, r3, #1
 8004948:	bfb8      	it	lt
 800494a:	2300      	movlt	r3, #0
 800494c:	441d      	add	r5, r3
 800494e:	e693      	b.n	8004678 <_svfprintf_r+0x568>
 8004950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004952:	462b      	mov	r3, r5
 8004954:	18a9      	adds	r1, r5, r2
 8004956:	2030      	movs	r0, #48	; 0x30
 8004958:	e7ee      	b.n	8004938 <_svfprintf_r+0x828>
 800495a:	9b08      	ldr	r3, [sp, #32]
 800495c:	2b46      	cmp	r3, #70	; 0x46
 800495e:	d005      	beq.n	800496c <_svfprintf_r+0x85c>
 8004960:	2b45      	cmp	r3, #69	; 0x45
 8004962:	d11b      	bne.n	800499c <_svfprintf_r+0x88c>
 8004964:	9b04      	ldr	r3, [sp, #16]
 8004966:	1c5d      	adds	r5, r3, #1
 8004968:	2102      	movs	r1, #2
 800496a:	e001      	b.n	8004970 <_svfprintf_r+0x860>
 800496c:	9d04      	ldr	r5, [sp, #16]
 800496e:	2103      	movs	r1, #3
 8004970:	ab20      	add	r3, sp, #128	; 0x80
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	ab1d      	add	r3, sp, #116	; 0x74
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	462a      	mov	r2, r5
 800497a:	ab1c      	add	r3, sp, #112	; 0x70
 800497c:	4650      	mov	r0, sl
 800497e:	eeb0 0a48 	vmov.f32	s0, s16
 8004982:	eef0 0a68 	vmov.f32	s1, s17
 8004986:	f000 fe3f 	bl	8005608 <_dtoa_r>
 800498a:	9b08      	ldr	r3, [sp, #32]
 800498c:	2b47      	cmp	r3, #71	; 0x47
 800498e:	4683      	mov	fp, r0
 8004990:	d106      	bne.n	80049a0 <_svfprintf_r+0x890>
 8004992:	f018 0f01 	tst.w	r8, #1
 8004996:	d103      	bne.n	80049a0 <_svfprintf_r+0x890>
 8004998:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800499a:	e66d      	b.n	8004678 <_svfprintf_r+0x568>
 800499c:	9d04      	ldr	r5, [sp, #16]
 800499e:	e7e3      	b.n	8004968 <_svfprintf_r+0x858>
 80049a0:	9b08      	ldr	r3, [sp, #32]
 80049a2:	2b46      	cmp	r3, #70	; 0x46
 80049a4:	eb0b 0605 	add.w	r6, fp, r5
 80049a8:	d10f      	bne.n	80049ca <_svfprintf_r+0x8ba>
 80049aa:	f89b 3000 	ldrb.w	r3, [fp]
 80049ae:	2b30      	cmp	r3, #48	; 0x30
 80049b0:	d109      	bne.n	80049c6 <_svfprintf_r+0x8b6>
 80049b2:	ec51 0b18 	vmov	r0, r1, d8
 80049b6:	2200      	movs	r2, #0
 80049b8:	2300      	movs	r3, #0
 80049ba:	f7fc f895 	bl	8000ae8 <__aeabi_dcmpeq>
 80049be:	b910      	cbnz	r0, 80049c6 <_svfprintf_r+0x8b6>
 80049c0:	f1c5 0501 	rsb	r5, r5, #1
 80049c4:	951c      	str	r5, [sp, #112]	; 0x70
 80049c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80049c8:	441e      	add	r6, r3
 80049ca:	ec51 0b18 	vmov	r0, r1, d8
 80049ce:	2200      	movs	r2, #0
 80049d0:	2300      	movs	r3, #0
 80049d2:	f7fc f889 	bl	8000ae8 <__aeabi_dcmpeq>
 80049d6:	b100      	cbz	r0, 80049da <_svfprintf_r+0x8ca>
 80049d8:	9620      	str	r6, [sp, #128]	; 0x80
 80049da:	2230      	movs	r2, #48	; 0x30
 80049dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049de:	429e      	cmp	r6, r3
 80049e0:	d9da      	bls.n	8004998 <_svfprintf_r+0x888>
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	9120      	str	r1, [sp, #128]	; 0x80
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e7f8      	b.n	80049dc <_svfprintf_r+0x8cc>
 80049ea:	9b08      	ldr	r3, [sp, #32]
 80049ec:	2b46      	cmp	r3, #70	; 0x46
 80049ee:	f47f ae54 	bne.w	800469a <_svfprintf_r+0x58a>
 80049f2:	9a04      	ldr	r2, [sp, #16]
 80049f4:	f008 0301 	and.w	r3, r8, #1
 80049f8:	2d00      	cmp	r5, #0
 80049fa:	ea43 0302 	orr.w	r3, r3, r2
 80049fe:	dd1a      	ble.n	8004a36 <_svfprintf_r+0x926>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d034      	beq.n	8004a6e <_svfprintf_r+0x95e>
 8004a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a06:	18eb      	adds	r3, r5, r3
 8004a08:	441a      	add	r2, r3
 8004a0a:	9204      	str	r2, [sp, #16]
 8004a0c:	2366      	movs	r3, #102	; 0x66
 8004a0e:	9307      	str	r3, [sp, #28]
 8004a10:	e033      	b.n	8004a7a <_svfprintf_r+0x96a>
 8004a12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a16:	f802 6b01 	strb.w	r6, [r2], #1
 8004a1a:	e675      	b.n	8004708 <_svfprintf_r+0x5f8>
 8004a1c:	b941      	cbnz	r1, 8004a30 <_svfprintf_r+0x920>
 8004a1e:	2230      	movs	r2, #48	; 0x30
 8004a20:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8004a24:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004a28:	3330      	adds	r3, #48	; 0x30
 8004a2a:	f802 3b01 	strb.w	r3, [r2], #1
 8004a2e:	e677      	b.n	8004720 <_svfprintf_r+0x610>
 8004a30:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8004a34:	e7f8      	b.n	8004a28 <_svfprintf_r+0x918>
 8004a36:	b1e3      	cbz	r3, 8004a72 <_svfprintf_r+0x962>
 8004a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a3a:	9a04      	ldr	r2, [sp, #16]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	e7e3      	b.n	8004a08 <_svfprintf_r+0x8f8>
 8004a40:	9b05      	ldr	r3, [sp, #20]
 8004a42:	429d      	cmp	r5, r3
 8004a44:	db07      	blt.n	8004a56 <_svfprintf_r+0x946>
 8004a46:	f018 0f01 	tst.w	r8, #1
 8004a4a:	d02d      	beq.n	8004aa8 <_svfprintf_r+0x998>
 8004a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a4e:	18eb      	adds	r3, r5, r3
 8004a50:	9304      	str	r3, [sp, #16]
 8004a52:	2367      	movs	r3, #103	; 0x67
 8004a54:	e7db      	b.n	8004a0e <_svfprintf_r+0x8fe>
 8004a56:	9b05      	ldr	r3, [sp, #20]
 8004a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	4413      	add	r3, r2
 8004a5e:	9304      	str	r3, [sp, #16]
 8004a60:	dcf7      	bgt.n	8004a52 <_svfprintf_r+0x942>
 8004a62:	9a04      	ldr	r2, [sp, #16]
 8004a64:	f1c5 0301 	rsb	r3, r5, #1
 8004a68:	441a      	add	r2, r3
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	e7f0      	b.n	8004a50 <_svfprintf_r+0x940>
 8004a6e:	9504      	str	r5, [sp, #16]
 8004a70:	e7cc      	b.n	8004a0c <_svfprintf_r+0x8fc>
 8004a72:	2366      	movs	r3, #102	; 0x66
 8004a74:	9307      	str	r3, [sp, #28]
 8004a76:	2301      	movs	r3, #1
 8004a78:	9304      	str	r3, [sp, #16]
 8004a7a:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8004a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a80:	d025      	beq.n	8004ace <_svfprintf_r+0x9be>
 8004a82:	2300      	movs	r3, #0
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8004a8a:	f77f ae61 	ble.w	8004750 <_svfprintf_r+0x640>
 8004a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2bff      	cmp	r3, #255	; 0xff
 8004a94:	d10a      	bne.n	8004aac <_svfprintf_r+0x99c>
 8004a96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a9a:	9904      	ldr	r1, [sp, #16]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004aa0:	fb02 1303 	mla	r3, r2, r3, r1
 8004aa4:	9304      	str	r3, [sp, #16]
 8004aa6:	e653      	b.n	8004750 <_svfprintf_r+0x640>
 8004aa8:	9504      	str	r5, [sp, #16]
 8004aaa:	e7d2      	b.n	8004a52 <_svfprintf_r+0x942>
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	daf2      	bge.n	8004a96 <_svfprintf_r+0x986>
 8004ab0:	1aed      	subs	r5, r5, r3
 8004ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	b133      	cbz	r3, 8004ac6 <_svfprintf_r+0x9b6>
 8004ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aba:	3301      	adds	r3, #1
 8004abc:	9309      	str	r3, [sp, #36]	; 0x24
 8004abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ac4:	e7e3      	b.n	8004a8e <_svfprintf_r+0x97e>
 8004ac6:	9b08      	ldr	r3, [sp, #32]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	9308      	str	r3, [sp, #32]
 8004acc:	e7df      	b.n	8004a8e <_svfprintf_r+0x97e>
 8004ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad0:	9308      	str	r3, [sp, #32]
 8004ad2:	e63d      	b.n	8004750 <_svfprintf_r+0x640>
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	f018 0f20 	tst.w	r8, #32
 8004ada:	f852 3b04 	ldr.w	r3, [r2], #4
 8004ade:	9206      	str	r2, [sp, #24]
 8004ae0:	d009      	beq.n	8004af6 <_svfprintf_r+0x9e6>
 8004ae2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	17d1      	asrs	r1, r2, #31
 8004ae8:	e9c3 0100 	strd	r0, r1, [r3]
 8004aec:	9e06      	ldr	r6, [sp, #24]
 8004aee:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8004af2:	f7ff bb4d 	b.w	8004190 <_svfprintf_r+0x80>
 8004af6:	f018 0f10 	tst.w	r8, #16
 8004afa:	d002      	beq.n	8004b02 <_svfprintf_r+0x9f2>
 8004afc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e7f4      	b.n	8004aec <_svfprintf_r+0x9dc>
 8004b02:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004b06:	d002      	beq.n	8004b0e <_svfprintf_r+0x9fe>
 8004b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	e7ee      	b.n	8004aec <_svfprintf_r+0x9dc>
 8004b0e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8004b12:	d0f3      	beq.n	8004afc <_svfprintf_r+0x9ec>
 8004b14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e7e8      	b.n	8004aec <_svfprintf_r+0x9dc>
 8004b1a:	f048 0810 	orr.w	r8, r8, #16
 8004b1e:	f018 0f20 	tst.w	r8, #32
 8004b22:	d01e      	beq.n	8004b62 <_svfprintf_r+0xa52>
 8004b24:	3607      	adds	r6, #7
 8004b26:	f026 0307 	bic.w	r3, r6, #7
 8004b2a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8004b2e:	9306      	str	r3, [sp, #24]
 8004b30:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8004b34:	2300      	movs	r3, #0
 8004b36:	2200      	movs	r2, #0
 8004b38:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8004b3c:	9a04      	ldr	r2, [sp, #16]
 8004b3e:	3201      	adds	r2, #1
 8004b40:	f000 848d 	beq.w	800545e <_svfprintf_r+0x134e>
 8004b44:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8004b48:	9203      	str	r2, [sp, #12]
 8004b4a:	ea56 0207 	orrs.w	r2, r6, r7
 8004b4e:	f040 848c 	bne.w	800546a <_svfprintf_r+0x135a>
 8004b52:	9a04      	ldr	r2, [sp, #16]
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	f000 80f5 	beq.w	8004d44 <_svfprintf_r+0xc34>
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	f040 8488 	bne.w	8005470 <_svfprintf_r+0x1360>
 8004b60:	e097      	b.n	8004c92 <_svfprintf_r+0xb82>
 8004b62:	1d33      	adds	r3, r6, #4
 8004b64:	f018 0f10 	tst.w	r8, #16
 8004b68:	9306      	str	r3, [sp, #24]
 8004b6a:	d001      	beq.n	8004b70 <_svfprintf_r+0xa60>
 8004b6c:	6836      	ldr	r6, [r6, #0]
 8004b6e:	e003      	b.n	8004b78 <_svfprintf_r+0xa68>
 8004b70:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004b74:	d002      	beq.n	8004b7c <_svfprintf_r+0xa6c>
 8004b76:	8836      	ldrh	r6, [r6, #0]
 8004b78:	2700      	movs	r7, #0
 8004b7a:	e7d9      	b.n	8004b30 <_svfprintf_r+0xa20>
 8004b7c:	f418 7f00 	tst.w	r8, #512	; 0x200
 8004b80:	d0f4      	beq.n	8004b6c <_svfprintf_r+0xa5c>
 8004b82:	7836      	ldrb	r6, [r6, #0]
 8004b84:	e7f8      	b.n	8004b78 <_svfprintf_r+0xa68>
 8004b86:	4633      	mov	r3, r6
 8004b88:	2278      	movs	r2, #120	; 0x78
 8004b8a:	f853 6b04 	ldr.w	r6, [r3], #4
 8004b8e:	9306      	str	r3, [sp, #24]
 8004b90:	f647 0330 	movw	r3, #30768	; 0x7830
 8004b94:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8004b98:	4ba1      	ldr	r3, [pc, #644]	; (8004e20 <_svfprintf_r+0xd10>)
 8004b9a:	9316      	str	r3, [sp, #88]	; 0x58
 8004b9c:	2700      	movs	r7, #0
 8004b9e:	f048 0802 	orr.w	r8, r8, #2
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	9207      	str	r2, [sp, #28]
 8004ba6:	e7c6      	b.n	8004b36 <_svfprintf_r+0xa26>
 8004ba8:	4633      	mov	r3, r6
 8004baa:	2500      	movs	r5, #0
 8004bac:	f853 bb04 	ldr.w	fp, [r3], #4
 8004bb0:	9306      	str	r3, [sp, #24]
 8004bb2:	9b04      	ldr	r3, [sp, #16]
 8004bb4:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8004bb8:	1c59      	adds	r1, r3, #1
 8004bba:	d010      	beq.n	8004bde <_svfprintf_r+0xace>
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	4658      	mov	r0, fp
 8004bc2:	f7fb fb1d 	bl	8000200 <memchr>
 8004bc6:	9003      	str	r0, [sp, #12]
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	f000 80d2 	beq.w	8004d72 <_svfprintf_r+0xc62>
 8004bce:	eba0 030b 	sub.w	r3, r0, fp
 8004bd2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8004bd6:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8004bda:	462e      	mov	r6, r5
 8004bdc:	e5c0      	b.n	8004760 <_svfprintf_r+0x650>
 8004bde:	4658      	mov	r0, fp
 8004be0:	f7fb fb06 	bl	80001f0 <strlen>
 8004be4:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8004be8:	e463      	b.n	80044b2 <_svfprintf_r+0x3a2>
 8004bea:	f048 0810 	orr.w	r8, r8, #16
 8004bee:	f018 0f20 	tst.w	r8, #32
 8004bf2:	d007      	beq.n	8004c04 <_svfprintf_r+0xaf4>
 8004bf4:	3607      	adds	r6, #7
 8004bf6:	f026 0307 	bic.w	r3, r6, #7
 8004bfa:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8004bfe:	9306      	str	r3, [sp, #24]
 8004c00:	2301      	movs	r3, #1
 8004c02:	e798      	b.n	8004b36 <_svfprintf_r+0xa26>
 8004c04:	1d33      	adds	r3, r6, #4
 8004c06:	f018 0f10 	tst.w	r8, #16
 8004c0a:	9306      	str	r3, [sp, #24]
 8004c0c:	d001      	beq.n	8004c12 <_svfprintf_r+0xb02>
 8004c0e:	6836      	ldr	r6, [r6, #0]
 8004c10:	e003      	b.n	8004c1a <_svfprintf_r+0xb0a>
 8004c12:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004c16:	d002      	beq.n	8004c1e <_svfprintf_r+0xb0e>
 8004c18:	8836      	ldrh	r6, [r6, #0]
 8004c1a:	2700      	movs	r7, #0
 8004c1c:	e7f0      	b.n	8004c00 <_svfprintf_r+0xaf0>
 8004c1e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8004c22:	d0f4      	beq.n	8004c0e <_svfprintf_r+0xafe>
 8004c24:	7836      	ldrb	r6, [r6, #0]
 8004c26:	e7f8      	b.n	8004c1a <_svfprintf_r+0xb0a>
 8004c28:	4b7e      	ldr	r3, [pc, #504]	; (8004e24 <_svfprintf_r+0xd14>)
 8004c2a:	9316      	str	r3, [sp, #88]	; 0x58
 8004c2c:	f018 0f20 	tst.w	r8, #32
 8004c30:	d019      	beq.n	8004c66 <_svfprintf_r+0xb56>
 8004c32:	3607      	adds	r6, #7
 8004c34:	f026 0307 	bic.w	r3, r6, #7
 8004c38:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8004c3c:	9306      	str	r3, [sp, #24]
 8004c3e:	f018 0f01 	tst.w	r8, #1
 8004c42:	d00a      	beq.n	8004c5a <_svfprintf_r+0xb4a>
 8004c44:	ea56 0307 	orrs.w	r3, r6, r7
 8004c48:	d007      	beq.n	8004c5a <_svfprintf_r+0xb4a>
 8004c4a:	2330      	movs	r3, #48	; 0x30
 8004c4c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8004c50:	9b07      	ldr	r3, [sp, #28]
 8004c52:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8004c56:	f048 0802 	orr.w	r8, r8, #2
 8004c5a:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e769      	b.n	8004b36 <_svfprintf_r+0xa26>
 8004c62:	4b6f      	ldr	r3, [pc, #444]	; (8004e20 <_svfprintf_r+0xd10>)
 8004c64:	e7e1      	b.n	8004c2a <_svfprintf_r+0xb1a>
 8004c66:	1d33      	adds	r3, r6, #4
 8004c68:	f018 0f10 	tst.w	r8, #16
 8004c6c:	9306      	str	r3, [sp, #24]
 8004c6e:	d001      	beq.n	8004c74 <_svfprintf_r+0xb64>
 8004c70:	6836      	ldr	r6, [r6, #0]
 8004c72:	e003      	b.n	8004c7c <_svfprintf_r+0xb6c>
 8004c74:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004c78:	d002      	beq.n	8004c80 <_svfprintf_r+0xb70>
 8004c7a:	8836      	ldrh	r6, [r6, #0]
 8004c7c:	2700      	movs	r7, #0
 8004c7e:	e7de      	b.n	8004c3e <_svfprintf_r+0xb2e>
 8004c80:	f418 7f00 	tst.w	r8, #512	; 0x200
 8004c84:	d0f4      	beq.n	8004c70 <_svfprintf_r+0xb60>
 8004c86:	7836      	ldrb	r6, [r6, #0]
 8004c88:	e7f8      	b.n	8004c7c <_svfprintf_r+0xb6c>
 8004c8a:	2f00      	cmp	r7, #0
 8004c8c:	bf08      	it	eq
 8004c8e:	2e0a      	cmpeq	r6, #10
 8004c90:	d206      	bcs.n	8004ca0 <_svfprintf_r+0xb90>
 8004c92:	3630      	adds	r6, #48	; 0x30
 8004c94:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8004c98:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 8004c9c:	f000 bc06 	b.w	80054ac <_svfprintf_r+0x139c>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	ad4e      	add	r5, sp, #312	; 0x138
 8004ca8:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8004cac:	220a      	movs	r2, #10
 8004cae:	2300      	movs	r3, #0
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	f7fb ff88 	bl	8000bc8 <__aeabi_uldivmod>
 8004cb8:	9b05      	ldr	r3, [sp, #20]
 8004cba:	3230      	adds	r2, #48	; 0x30
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	f105 3bff 	add.w	fp, r5, #4294967295
 8004cc2:	f805 2c01 	strb.w	r2, [r5, #-1]
 8004cc6:	9305      	str	r3, [sp, #20]
 8004cc8:	f1b8 0f00 	cmp.w	r8, #0
 8004ccc:	d019      	beq.n	8004d02 <_svfprintf_r+0xbf2>
 8004cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cd0:	9a05      	ldr	r2, [sp, #20]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d114      	bne.n	8004d02 <_svfprintf_r+0xbf2>
 8004cd8:	2aff      	cmp	r2, #255	; 0xff
 8004cda:	d012      	beq.n	8004d02 <_svfprintf_r+0xbf2>
 8004cdc:	2f00      	cmp	r7, #0
 8004cde:	bf08      	it	eq
 8004ce0:	2e0a      	cmpeq	r6, #10
 8004ce2:	d30e      	bcc.n	8004d02 <_svfprintf_r+0xbf2>
 8004ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ce6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004ce8:	ebab 0b03 	sub.w	fp, fp, r3
 8004cec:	461a      	mov	r2, r3
 8004cee:	4658      	mov	r0, fp
 8004cf0:	f002 f962 	bl	8006fb8 <strncpy>
 8004cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf6:	785d      	ldrb	r5, [r3, #1]
 8004cf8:	b195      	cbz	r5, 8004d20 <_svfprintf_r+0xc10>
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9305      	str	r3, [sp, #20]
 8004d02:	220a      	movs	r2, #10
 8004d04:	2300      	movs	r3, #0
 8004d06:	4630      	mov	r0, r6
 8004d08:	4639      	mov	r1, r7
 8004d0a:	f7fb ff5d 	bl	8000bc8 <__aeabi_uldivmod>
 8004d0e:	2f00      	cmp	r7, #0
 8004d10:	bf08      	it	eq
 8004d12:	2e0a      	cmpeq	r6, #10
 8004d14:	f0c0 83ca 	bcc.w	80054ac <_svfprintf_r+0x139c>
 8004d18:	4606      	mov	r6, r0
 8004d1a:	460f      	mov	r7, r1
 8004d1c:	465d      	mov	r5, fp
 8004d1e:	e7c5      	b.n	8004cac <_svfprintf_r+0xb9c>
 8004d20:	9505      	str	r5, [sp, #20]
 8004d22:	e7ee      	b.n	8004d02 <_svfprintf_r+0xbf2>
 8004d24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d26:	f006 030f 	and.w	r3, r6, #15
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8004d30:	0933      	lsrs	r3, r6, #4
 8004d32:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8004d36:	093a      	lsrs	r2, r7, #4
 8004d38:	461e      	mov	r6, r3
 8004d3a:	4617      	mov	r7, r2
 8004d3c:	ea56 0307 	orrs.w	r3, r6, r7
 8004d40:	d1f0      	bne.n	8004d24 <_svfprintf_r+0xc14>
 8004d42:	e3b3      	b.n	80054ac <_svfprintf_r+0x139c>
 8004d44:	b933      	cbnz	r3, 8004d54 <_svfprintf_r+0xc44>
 8004d46:	f018 0f01 	tst.w	r8, #1
 8004d4a:	d003      	beq.n	8004d54 <_svfprintf_r+0xc44>
 8004d4c:	2330      	movs	r3, #48	; 0x30
 8004d4e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8004d52:	e7a1      	b.n	8004c98 <_svfprintf_r+0xb88>
 8004d54:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8004d58:	e3a8      	b.n	80054ac <_svfprintf_r+0x139c>
 8004d5a:	9b07      	ldr	r3, [sp, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8373 	beq.w	8005448 <_svfprintf_r+0x1338>
 8004d62:	2000      	movs	r0, #0
 8004d64:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8004d68:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8004d6c:	9606      	str	r6, [sp, #24]
 8004d6e:	f7ff bb34 	b.w	80043da <_svfprintf_r+0x2ca>
 8004d72:	9e03      	ldr	r6, [sp, #12]
 8004d74:	f7ff bb9e 	b.w	80044b4 <_svfprintf_r+0x3a4>
 8004d78:	2010      	movs	r0, #16
 8004d7a:	4402      	add	r2, r0
 8004d7c:	2b07      	cmp	r3, #7
 8004d7e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004d82:	6060      	str	r0, [r4, #4]
 8004d84:	dd08      	ble.n	8004d98 <_svfprintf_r+0xc88>
 8004d86:	aa22      	add	r2, sp, #136	; 0x88
 8004d88:	4649      	mov	r1, r9
 8004d8a:	4650      	mov	r0, sl
 8004d8c:	f002 f927 	bl	8006fde <__ssprint_r>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	f040 8337 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004d96:	a925      	add	r1, sp, #148	; 0x94
 8004d98:	3f10      	subs	r7, #16
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	e4fb      	b.n	8004796 <_svfprintf_r+0x686>
 8004d9e:	460c      	mov	r4, r1
 8004da0:	e514      	b.n	80047cc <_svfprintf_r+0x6bc>
 8004da2:	aa22      	add	r2, sp, #136	; 0x88
 8004da4:	4649      	mov	r1, r9
 8004da6:	4650      	mov	r0, sl
 8004da8:	f002 f919 	bl	8006fde <__ssprint_r>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f040 8329 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004db2:	ac25      	add	r4, sp, #148	; 0x94
 8004db4:	e51c      	b.n	80047f0 <_svfprintf_r+0x6e0>
 8004db6:	aa22      	add	r2, sp, #136	; 0x88
 8004db8:	4649      	mov	r1, r9
 8004dba:	4650      	mov	r0, sl
 8004dbc:	f002 f90f 	bl	8006fde <__ssprint_r>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	f040 831f 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004dc6:	ac25      	add	r4, sp, #148	; 0x94
 8004dc8:	e522      	b.n	8004810 <_svfprintf_r+0x700>
 8004dca:	2010      	movs	r0, #16
 8004dcc:	4402      	add	r2, r0
 8004dce:	2b07      	cmp	r3, #7
 8004dd0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004dd4:	6060      	str	r0, [r4, #4]
 8004dd6:	dd08      	ble.n	8004dea <_svfprintf_r+0xcda>
 8004dd8:	aa22      	add	r2, sp, #136	; 0x88
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4650      	mov	r0, sl
 8004dde:	f002 f8fe 	bl	8006fde <__ssprint_r>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	f040 830e 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004de8:	a925      	add	r1, sp, #148	; 0x94
 8004dea:	3f10      	subs	r7, #16
 8004dec:	460c      	mov	r4, r1
 8004dee:	e517      	b.n	8004820 <_svfprintf_r+0x710>
 8004df0:	460c      	mov	r4, r1
 8004df2:	e530      	b.n	8004856 <_svfprintf_r+0x746>
 8004df4:	2010      	movs	r0, #16
 8004df6:	4402      	add	r2, r0
 8004df8:	2b07      	cmp	r3, #7
 8004dfa:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004dfe:	6060      	str	r0, [r4, #4]
 8004e00:	dd08      	ble.n	8004e14 <_svfprintf_r+0xd04>
 8004e02:	aa22      	add	r2, sp, #136	; 0x88
 8004e04:	4649      	mov	r1, r9
 8004e06:	4650      	mov	r0, sl
 8004e08:	f002 f8e9 	bl	8006fde <__ssprint_r>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	f040 82f9 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004e12:	a925      	add	r1, sp, #148	; 0x94
 8004e14:	3e10      	subs	r6, #16
 8004e16:	460c      	mov	r4, r1
 8004e18:	e522      	b.n	8004860 <_svfprintf_r+0x750>
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	e548      	b.n	80048b0 <_svfprintf_r+0x7a0>
 8004e1e:	bf00      	nop
 8004e20:	08008c8c 	.word	0x08008c8c
 8004e24:	08008c9d 	.word	0x08008c9d
 8004e28:	9b07      	ldr	r3, [sp, #28]
 8004e2a:	2b65      	cmp	r3, #101	; 0x65
 8004e2c:	f340 8232 	ble.w	8005294 <_svfprintf_r+0x1184>
 8004e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e34:	2200      	movs	r2, #0
 8004e36:	2300      	movs	r3, #0
 8004e38:	f7fb fe56 	bl	8000ae8 <__aeabi_dcmpeq>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d068      	beq.n	8004f12 <_svfprintf_r+0xe02>
 8004e40:	4b6d      	ldr	r3, [pc, #436]	; (8004ff8 <_svfprintf_r+0xee8>)
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	2301      	movs	r3, #1
 8004e46:	441e      	add	r6, r3
 8004e48:	6063      	str	r3, [r4, #4]
 8004e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e4c:	9624      	str	r6, [sp, #144]	; 0x90
 8004e4e:	3301      	adds	r3, #1
 8004e50:	2b07      	cmp	r3, #7
 8004e52:	9323      	str	r3, [sp, #140]	; 0x8c
 8004e54:	dc37      	bgt.n	8004ec6 <_svfprintf_r+0xdb6>
 8004e56:	3408      	adds	r4, #8
 8004e58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004e5a:	9a05      	ldr	r2, [sp, #20]
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	db03      	blt.n	8004e68 <_svfprintf_r+0xd58>
 8004e60:	f018 0f01 	tst.w	r8, #1
 8004e64:	f43f ad36 	beq.w	80048d4 <_svfprintf_r+0x7c4>
 8004e68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e70:	6063      	str	r3, [r4, #4]
 8004e72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004e74:	4413      	add	r3, r2
 8004e76:	9324      	str	r3, [sp, #144]	; 0x90
 8004e78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	2b07      	cmp	r3, #7
 8004e7e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004e80:	dc2b      	bgt.n	8004eda <_svfprintf_r+0xdca>
 8004e82:	3408      	adds	r4, #8
 8004e84:	9b05      	ldr	r3, [sp, #20]
 8004e86:	1e5d      	subs	r5, r3, #1
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	f77f ad23 	ble.w	80048d4 <_svfprintf_r+0x7c4>
 8004e8e:	4e5b      	ldr	r6, [pc, #364]	; (8004ffc <_svfprintf_r+0xeec>)
 8004e90:	2710      	movs	r7, #16
 8004e92:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004e96:	2d10      	cmp	r5, #16
 8004e98:	f103 0301 	add.w	r3, r3, #1
 8004e9c:	f104 0108 	add.w	r1, r4, #8
 8004ea0:	6026      	str	r6, [r4, #0]
 8004ea2:	dc24      	bgt.n	8004eee <_svfprintf_r+0xdde>
 8004ea4:	6065      	str	r5, [r4, #4]
 8004ea6:	2b07      	cmp	r3, #7
 8004ea8:	4415      	add	r5, r2
 8004eaa:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8004eae:	f340 8288 	ble.w	80053c2 <_svfprintf_r+0x12b2>
 8004eb2:	aa22      	add	r2, sp, #136	; 0x88
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	f002 f891 	bl	8006fde <__ssprint_r>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f040 82a1 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004ec2:	ac25      	add	r4, sp, #148	; 0x94
 8004ec4:	e506      	b.n	80048d4 <_svfprintf_r+0x7c4>
 8004ec6:	aa22      	add	r2, sp, #136	; 0x88
 8004ec8:	4649      	mov	r1, r9
 8004eca:	4650      	mov	r0, sl
 8004ecc:	f002 f887 	bl	8006fde <__ssprint_r>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	f040 8297 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004ed6:	ac25      	add	r4, sp, #148	; 0x94
 8004ed8:	e7be      	b.n	8004e58 <_svfprintf_r+0xd48>
 8004eda:	aa22      	add	r2, sp, #136	; 0x88
 8004edc:	4649      	mov	r1, r9
 8004ede:	4650      	mov	r0, sl
 8004ee0:	f002 f87d 	bl	8006fde <__ssprint_r>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	f040 828d 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004eea:	ac25      	add	r4, sp, #148	; 0x94
 8004eec:	e7ca      	b.n	8004e84 <_svfprintf_r+0xd74>
 8004eee:	3210      	adds	r2, #16
 8004ef0:	2b07      	cmp	r3, #7
 8004ef2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8004ef6:	6067      	str	r7, [r4, #4]
 8004ef8:	dd08      	ble.n	8004f0c <_svfprintf_r+0xdfc>
 8004efa:	aa22      	add	r2, sp, #136	; 0x88
 8004efc:	4649      	mov	r1, r9
 8004efe:	4650      	mov	r0, sl
 8004f00:	f002 f86d 	bl	8006fde <__ssprint_r>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	f040 827d 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004f0a:	a925      	add	r1, sp, #148	; 0x94
 8004f0c:	3d10      	subs	r5, #16
 8004f0e:	460c      	mov	r4, r1
 8004f10:	e7bf      	b.n	8004e92 <_svfprintf_r+0xd82>
 8004f12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	dc73      	bgt.n	8005000 <_svfprintf_r+0xef0>
 8004f18:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <_svfprintf_r+0xee8>)
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	441e      	add	r6, r3
 8004f20:	6063      	str	r3, [r4, #4]
 8004f22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f24:	9624      	str	r6, [sp, #144]	; 0x90
 8004f26:	3301      	adds	r3, #1
 8004f28:	2b07      	cmp	r3, #7
 8004f2a:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f2c:	dc3d      	bgt.n	8004faa <_svfprintf_r+0xe9a>
 8004f2e:	3408      	adds	r4, #8
 8004f30:	9905      	ldr	r1, [sp, #20]
 8004f32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004f34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f36:	430a      	orrs	r2, r1
 8004f38:	f008 0101 	and.w	r1, r8, #1
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	f43f acc9 	beq.w	80048d4 <_svfprintf_r+0x7c4>
 8004f42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f44:	6022      	str	r2, [r4, #0]
 8004f46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f48:	6062      	str	r2, [r4, #4]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	9324      	str	r3, [sp, #144]	; 0x90
 8004f4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f50:	3301      	adds	r3, #1
 8004f52:	2b07      	cmp	r3, #7
 8004f54:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f56:	dc32      	bgt.n	8004fbe <_svfprintf_r+0xeae>
 8004f58:	3408      	adds	r4, #8
 8004f5a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	da1b      	bge.n	8004f98 <_svfprintf_r+0xe88>
 8004f60:	4e26      	ldr	r6, [pc, #152]	; (8004ffc <_svfprintf_r+0xeec>)
 8004f62:	426d      	negs	r5, r5
 8004f64:	4623      	mov	r3, r4
 8004f66:	2710      	movs	r7, #16
 8004f68:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8004f6c:	2d10      	cmp	r5, #16
 8004f6e:	f102 0201 	add.w	r2, r2, #1
 8004f72:	f104 0408 	add.w	r4, r4, #8
 8004f76:	601e      	str	r6, [r3, #0]
 8004f78:	dc2b      	bgt.n	8004fd2 <_svfprintf_r+0xec2>
 8004f7a:	605d      	str	r5, [r3, #4]
 8004f7c:	2a07      	cmp	r2, #7
 8004f7e:	440d      	add	r5, r1
 8004f80:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8004f84:	dd08      	ble.n	8004f98 <_svfprintf_r+0xe88>
 8004f86:	aa22      	add	r2, sp, #136	; 0x88
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	f002 f827 	bl	8006fde <__ssprint_r>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	f040 8237 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004f96:	ac25      	add	r4, sp, #148	; 0x94
 8004f98:	9b05      	ldr	r3, [sp, #20]
 8004f9a:	9a05      	ldr	r2, [sp, #20]
 8004f9c:	6063      	str	r3, [r4, #4]
 8004f9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004fa0:	f8c4 b000 	str.w	fp, [r4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	9324      	str	r3, [sp, #144]	; 0x90
 8004fa8:	e48d      	b.n	80048c6 <_svfprintf_r+0x7b6>
 8004faa:	aa22      	add	r2, sp, #136	; 0x88
 8004fac:	4649      	mov	r1, r9
 8004fae:	4650      	mov	r0, sl
 8004fb0:	f002 f815 	bl	8006fde <__ssprint_r>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f040 8225 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004fba:	ac25      	add	r4, sp, #148	; 0x94
 8004fbc:	e7b8      	b.n	8004f30 <_svfprintf_r+0xe20>
 8004fbe:	aa22      	add	r2, sp, #136	; 0x88
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	4650      	mov	r0, sl
 8004fc4:	f002 f80b 	bl	8006fde <__ssprint_r>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	f040 821b 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004fce:	ac25      	add	r4, sp, #148	; 0x94
 8004fd0:	e7c3      	b.n	8004f5a <_svfprintf_r+0xe4a>
 8004fd2:	3110      	adds	r1, #16
 8004fd4:	2a07      	cmp	r2, #7
 8004fd6:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8004fda:	605f      	str	r7, [r3, #4]
 8004fdc:	dd08      	ble.n	8004ff0 <_svfprintf_r+0xee0>
 8004fde:	aa22      	add	r2, sp, #136	; 0x88
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	f001 fffb 	bl	8006fde <__ssprint_r>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	f040 820b 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8004fee:	ac25      	add	r4, sp, #148	; 0x94
 8004ff0:	3d10      	subs	r5, #16
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	e7b8      	b.n	8004f68 <_svfprintf_r+0xe58>
 8004ff6:	bf00      	nop
 8004ff8:	08008cae 	.word	0x08008cae
 8004ffc:	08008cc0 	.word	0x08008cc0
 8005000:	9b05      	ldr	r3, [sp, #20]
 8005002:	42ab      	cmp	r3, r5
 8005004:	bfa8      	it	ge
 8005006:	462b      	movge	r3, r5
 8005008:	2b00      	cmp	r3, #0
 800500a:	461f      	mov	r7, r3
 800500c:	dd0a      	ble.n	8005024 <_svfprintf_r+0xf14>
 800500e:	441e      	add	r6, r3
 8005010:	e9c4 b300 	strd	fp, r3, [r4]
 8005014:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005016:	9624      	str	r6, [sp, #144]	; 0x90
 8005018:	3301      	adds	r3, #1
 800501a:	2b07      	cmp	r3, #7
 800501c:	9323      	str	r3, [sp, #140]	; 0x8c
 800501e:	f300 8086 	bgt.w	800512e <_svfprintf_r+0x101e>
 8005022:	3408      	adds	r4, #8
 8005024:	2f00      	cmp	r7, #0
 8005026:	bfac      	ite	ge
 8005028:	1bee      	subge	r6, r5, r7
 800502a:	462e      	movlt	r6, r5
 800502c:	2e00      	cmp	r6, #0
 800502e:	dd19      	ble.n	8005064 <_svfprintf_r+0xf54>
 8005030:	4f97      	ldr	r7, [pc, #604]	; (8005290 <_svfprintf_r+0x1180>)
 8005032:	6027      	str	r7, [r4, #0]
 8005034:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005038:	2e10      	cmp	r6, #16
 800503a:	f103 0301 	add.w	r3, r3, #1
 800503e:	f104 0108 	add.w	r1, r4, #8
 8005042:	dc7e      	bgt.n	8005142 <_svfprintf_r+0x1032>
 8005044:	6066      	str	r6, [r4, #4]
 8005046:	2b07      	cmp	r3, #7
 8005048:	4416      	add	r6, r2
 800504a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800504e:	f340 808b 	ble.w	8005168 <_svfprintf_r+0x1058>
 8005052:	aa22      	add	r2, sp, #136	; 0x88
 8005054:	4649      	mov	r1, r9
 8005056:	4650      	mov	r0, sl
 8005058:	f001 ffc1 	bl	8006fde <__ssprint_r>
 800505c:	2800      	cmp	r0, #0
 800505e:	f040 81d1 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8005062:	ac25      	add	r4, sp, #148	; 0x94
 8005064:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8005068:	445d      	add	r5, fp
 800506a:	d00b      	beq.n	8005084 <_svfprintf_r+0xf74>
 800506c:	4e88      	ldr	r6, [pc, #544]	; (8005290 <_svfprintf_r+0x1180>)
 800506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d17b      	bne.n	800516c <_svfprintf_r+0x105c>
 8005074:	9b08      	ldr	r3, [sp, #32]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d17b      	bne.n	8005172 <_svfprintf_r+0x1062>
 800507a:	9b05      	ldr	r3, [sp, #20]
 800507c:	445b      	add	r3, fp
 800507e:	429d      	cmp	r5, r3
 8005080:	bf28      	it	cs
 8005082:	461d      	movcs	r5, r3
 8005084:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005086:	9a05      	ldr	r2, [sp, #20]
 8005088:	4293      	cmp	r3, r2
 800508a:	db02      	blt.n	8005092 <_svfprintf_r+0xf82>
 800508c:	f018 0f01 	tst.w	r8, #1
 8005090:	d00e      	beq.n	80050b0 <_svfprintf_r+0xfa0>
 8005092:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800509a:	6063      	str	r3, [r4, #4]
 800509c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800509e:	4413      	add	r3, r2
 80050a0:	9324      	str	r3, [sp, #144]	; 0x90
 80050a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050a4:	3301      	adds	r3, #1
 80050a6:	2b07      	cmp	r3, #7
 80050a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80050aa:	f300 80dd 	bgt.w	8005268 <_svfprintf_r+0x1158>
 80050ae:	3408      	adds	r4, #8
 80050b0:	9b05      	ldr	r3, [sp, #20]
 80050b2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80050b4:	eb0b 0203 	add.w	r2, fp, r3
 80050b8:	1b9e      	subs	r6, r3, r6
 80050ba:	1b52      	subs	r2, r2, r5
 80050bc:	4296      	cmp	r6, r2
 80050be:	bfa8      	it	ge
 80050c0:	4616      	movge	r6, r2
 80050c2:	2e00      	cmp	r6, #0
 80050c4:	dd0b      	ble.n	80050de <_svfprintf_r+0xfce>
 80050c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80050c8:	4433      	add	r3, r6
 80050ca:	9324      	str	r3, [sp, #144]	; 0x90
 80050cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050ce:	3301      	adds	r3, #1
 80050d0:	2b07      	cmp	r3, #7
 80050d2:	e9c4 5600 	strd	r5, r6, [r4]
 80050d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80050d8:	f300 80d0 	bgt.w	800527c <_svfprintf_r+0x116c>
 80050dc:	3408      	adds	r4, #8
 80050de:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80050e0:	9b05      	ldr	r3, [sp, #20]
 80050e2:	2e00      	cmp	r6, #0
 80050e4:	eba3 0505 	sub.w	r5, r3, r5
 80050e8:	bfa8      	it	ge
 80050ea:	1bad      	subge	r5, r5, r6
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	f77f abf1 	ble.w	80048d4 <_svfprintf_r+0x7c4>
 80050f2:	4e67      	ldr	r6, [pc, #412]	; (8005290 <_svfprintf_r+0x1180>)
 80050f4:	2710      	movs	r7, #16
 80050f6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80050fa:	2d10      	cmp	r5, #16
 80050fc:	f103 0301 	add.w	r3, r3, #1
 8005100:	f104 0108 	add.w	r1, r4, #8
 8005104:	6026      	str	r6, [r4, #0]
 8005106:	f77f aecd 	ble.w	8004ea4 <_svfprintf_r+0xd94>
 800510a:	3210      	adds	r2, #16
 800510c:	2b07      	cmp	r3, #7
 800510e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005112:	6067      	str	r7, [r4, #4]
 8005114:	dd08      	ble.n	8005128 <_svfprintf_r+0x1018>
 8005116:	aa22      	add	r2, sp, #136	; 0x88
 8005118:	4649      	mov	r1, r9
 800511a:	4650      	mov	r0, sl
 800511c:	f001 ff5f 	bl	8006fde <__ssprint_r>
 8005120:	2800      	cmp	r0, #0
 8005122:	f040 816f 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8005126:	a925      	add	r1, sp, #148	; 0x94
 8005128:	3d10      	subs	r5, #16
 800512a:	460c      	mov	r4, r1
 800512c:	e7e3      	b.n	80050f6 <_svfprintf_r+0xfe6>
 800512e:	aa22      	add	r2, sp, #136	; 0x88
 8005130:	4649      	mov	r1, r9
 8005132:	4650      	mov	r0, sl
 8005134:	f001 ff53 	bl	8006fde <__ssprint_r>
 8005138:	2800      	cmp	r0, #0
 800513a:	f040 8163 	bne.w	8005404 <_svfprintf_r+0x12f4>
 800513e:	ac25      	add	r4, sp, #148	; 0x94
 8005140:	e770      	b.n	8005024 <_svfprintf_r+0xf14>
 8005142:	2010      	movs	r0, #16
 8005144:	4402      	add	r2, r0
 8005146:	2b07      	cmp	r3, #7
 8005148:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800514c:	6060      	str	r0, [r4, #4]
 800514e:	dd08      	ble.n	8005162 <_svfprintf_r+0x1052>
 8005150:	aa22      	add	r2, sp, #136	; 0x88
 8005152:	4649      	mov	r1, r9
 8005154:	4650      	mov	r0, sl
 8005156:	f001 ff42 	bl	8006fde <__ssprint_r>
 800515a:	2800      	cmp	r0, #0
 800515c:	f040 8152 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8005160:	a925      	add	r1, sp, #148	; 0x94
 8005162:	3e10      	subs	r6, #16
 8005164:	460c      	mov	r4, r1
 8005166:	e764      	b.n	8005032 <_svfprintf_r+0xf22>
 8005168:	460c      	mov	r4, r1
 800516a:	e77b      	b.n	8005064 <_svfprintf_r+0xf54>
 800516c:	9b08      	ldr	r3, [sp, #32]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d04a      	beq.n	8005208 <_svfprintf_r+0x10f8>
 8005172:	9b08      	ldr	r3, [sp, #32]
 8005174:	3b01      	subs	r3, #1
 8005176:	9308      	str	r3, [sp, #32]
 8005178:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800517a:	6023      	str	r3, [r4, #0]
 800517c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800517e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005184:	4413      	add	r3, r2
 8005186:	9324      	str	r3, [sp, #144]	; 0x90
 8005188:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800518a:	3301      	adds	r3, #1
 800518c:	2b07      	cmp	r3, #7
 800518e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005190:	dc41      	bgt.n	8005216 <_svfprintf_r+0x1106>
 8005192:	3408      	adds	r4, #8
 8005194:	9b05      	ldr	r3, [sp, #20]
 8005196:	445b      	add	r3, fp
 8005198:	1b5a      	subs	r2, r3, r5
 800519a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	4293      	cmp	r3, r2
 80051a0:	bfa8      	it	ge
 80051a2:	4613      	movge	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	461f      	mov	r7, r3
 80051a8:	dd0a      	ble.n	80051c0 <_svfprintf_r+0x10b0>
 80051aa:	e9c4 5300 	strd	r5, r3, [r4]
 80051ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80051b0:	443b      	add	r3, r7
 80051b2:	9324      	str	r3, [sp, #144]	; 0x90
 80051b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051b6:	3301      	adds	r3, #1
 80051b8:	2b07      	cmp	r3, #7
 80051ba:	9323      	str	r3, [sp, #140]	; 0x8c
 80051bc:	dc35      	bgt.n	800522a <_svfprintf_r+0x111a>
 80051be:	3408      	adds	r4, #8
 80051c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2f00      	cmp	r7, #0
 80051c6:	bfac      	ite	ge
 80051c8:	1bdf      	subge	r7, r3, r7
 80051ca:	461f      	movlt	r7, r3
 80051cc:	2f00      	cmp	r7, #0
 80051ce:	dd17      	ble.n	8005200 <_svfprintf_r+0x10f0>
 80051d0:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 80051d4:	2f10      	cmp	r7, #16
 80051d6:	f102 0201 	add.w	r2, r2, #1
 80051da:	f104 0108 	add.w	r1, r4, #8
 80051de:	6026      	str	r6, [r4, #0]
 80051e0:	dc2d      	bgt.n	800523e <_svfprintf_r+0x112e>
 80051e2:	443b      	add	r3, r7
 80051e4:	2a07      	cmp	r2, #7
 80051e6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80051ea:	6067      	str	r7, [r4, #4]
 80051ec:	dd3a      	ble.n	8005264 <_svfprintf_r+0x1154>
 80051ee:	aa22      	add	r2, sp, #136	; 0x88
 80051f0:	4649      	mov	r1, r9
 80051f2:	4650      	mov	r0, sl
 80051f4:	f001 fef3 	bl	8006fde <__ssprint_r>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f040 8103 	bne.w	8005404 <_svfprintf_r+0x12f4>
 80051fe:	ac25      	add	r4, sp, #148	; 0x94
 8005200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	441d      	add	r5, r3
 8005206:	e732      	b.n	800506e <_svfprintf_r+0xf5e>
 8005208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	930a      	str	r3, [sp, #40]	; 0x28
 800520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005210:	3b01      	subs	r3, #1
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	e7b0      	b.n	8005178 <_svfprintf_r+0x1068>
 8005216:	aa22      	add	r2, sp, #136	; 0x88
 8005218:	4649      	mov	r1, r9
 800521a:	4650      	mov	r0, sl
 800521c:	f001 fedf 	bl	8006fde <__ssprint_r>
 8005220:	2800      	cmp	r0, #0
 8005222:	f040 80ef 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8005226:	ac25      	add	r4, sp, #148	; 0x94
 8005228:	e7b4      	b.n	8005194 <_svfprintf_r+0x1084>
 800522a:	aa22      	add	r2, sp, #136	; 0x88
 800522c:	4649      	mov	r1, r9
 800522e:	4650      	mov	r0, sl
 8005230:	f001 fed5 	bl	8006fde <__ssprint_r>
 8005234:	2800      	cmp	r0, #0
 8005236:	f040 80e5 	bne.w	8005404 <_svfprintf_r+0x12f4>
 800523a:	ac25      	add	r4, sp, #148	; 0x94
 800523c:	e7c0      	b.n	80051c0 <_svfprintf_r+0x10b0>
 800523e:	2010      	movs	r0, #16
 8005240:	4403      	add	r3, r0
 8005242:	2a07      	cmp	r2, #7
 8005244:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8005248:	6060      	str	r0, [r4, #4]
 800524a:	dd08      	ble.n	800525e <_svfprintf_r+0x114e>
 800524c:	aa22      	add	r2, sp, #136	; 0x88
 800524e:	4649      	mov	r1, r9
 8005250:	4650      	mov	r0, sl
 8005252:	f001 fec4 	bl	8006fde <__ssprint_r>
 8005256:	2800      	cmp	r0, #0
 8005258:	f040 80d4 	bne.w	8005404 <_svfprintf_r+0x12f4>
 800525c:	a925      	add	r1, sp, #148	; 0x94
 800525e:	3f10      	subs	r7, #16
 8005260:	460c      	mov	r4, r1
 8005262:	e7b5      	b.n	80051d0 <_svfprintf_r+0x10c0>
 8005264:	460c      	mov	r4, r1
 8005266:	e7cb      	b.n	8005200 <_svfprintf_r+0x10f0>
 8005268:	aa22      	add	r2, sp, #136	; 0x88
 800526a:	4649      	mov	r1, r9
 800526c:	4650      	mov	r0, sl
 800526e:	f001 feb6 	bl	8006fde <__ssprint_r>
 8005272:	2800      	cmp	r0, #0
 8005274:	f040 80c6 	bne.w	8005404 <_svfprintf_r+0x12f4>
 8005278:	ac25      	add	r4, sp, #148	; 0x94
 800527a:	e719      	b.n	80050b0 <_svfprintf_r+0xfa0>
 800527c:	aa22      	add	r2, sp, #136	; 0x88
 800527e:	4649      	mov	r1, r9
 8005280:	4650      	mov	r0, sl
 8005282:	f001 feac 	bl	8006fde <__ssprint_r>
 8005286:	2800      	cmp	r0, #0
 8005288:	f040 80bc 	bne.w	8005404 <_svfprintf_r+0x12f4>
 800528c:	ac25      	add	r4, sp, #148	; 0x94
 800528e:	e726      	b.n	80050de <_svfprintf_r+0xfce>
 8005290:	08008cc0 	.word	0x08008cc0
 8005294:	9a05      	ldr	r2, [sp, #20]
 8005296:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005298:	2a01      	cmp	r2, #1
 800529a:	f106 0601 	add.w	r6, r6, #1
 800529e:	f103 0301 	add.w	r3, r3, #1
 80052a2:	f104 0508 	add.w	r5, r4, #8
 80052a6:	dc02      	bgt.n	80052ae <_svfprintf_r+0x119e>
 80052a8:	f018 0f01 	tst.w	r8, #1
 80052ac:	d07e      	beq.n	80053ac <_svfprintf_r+0x129c>
 80052ae:	2201      	movs	r2, #1
 80052b0:	2b07      	cmp	r3, #7
 80052b2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80052b6:	f8c4 b000 	str.w	fp, [r4]
 80052ba:	6062      	str	r2, [r4, #4]
 80052bc:	dd08      	ble.n	80052d0 <_svfprintf_r+0x11c0>
 80052be:	aa22      	add	r2, sp, #136	; 0x88
 80052c0:	4649      	mov	r1, r9
 80052c2:	4650      	mov	r0, sl
 80052c4:	f001 fe8b 	bl	8006fde <__ssprint_r>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	f040 809b 	bne.w	8005404 <_svfprintf_r+0x12f4>
 80052ce:	ad25      	add	r5, sp, #148	; 0x94
 80052d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052d2:	602b      	str	r3, [r5, #0]
 80052d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052d8:	606b      	str	r3, [r5, #4]
 80052da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80052dc:	4413      	add	r3, r2
 80052de:	9324      	str	r3, [sp, #144]	; 0x90
 80052e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052e2:	3301      	adds	r3, #1
 80052e4:	2b07      	cmp	r3, #7
 80052e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80052e8:	dc32      	bgt.n	8005350 <_svfprintf_r+0x1240>
 80052ea:	3508      	adds	r5, #8
 80052ec:	9b05      	ldr	r3, [sp, #20]
 80052ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052f2:	1e5c      	subs	r4, r3, #1
 80052f4:	2200      	movs	r2, #0
 80052f6:	2300      	movs	r3, #0
 80052f8:	f7fb fbf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d130      	bne.n	8005362 <_svfprintf_r+0x1252>
 8005300:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8005302:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005304:	9a05      	ldr	r2, [sp, #20]
 8005306:	3101      	adds	r1, #1
 8005308:	3b01      	subs	r3, #1
 800530a:	f10b 0001 	add.w	r0, fp, #1
 800530e:	4413      	add	r3, r2
 8005310:	2907      	cmp	r1, #7
 8005312:	e9c5 0400 	strd	r0, r4, [r5]
 8005316:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800531a:	dd50      	ble.n	80053be <_svfprintf_r+0x12ae>
 800531c:	aa22      	add	r2, sp, #136	; 0x88
 800531e:	4649      	mov	r1, r9
 8005320:	4650      	mov	r0, sl
 8005322:	f001 fe5c 	bl	8006fde <__ssprint_r>
 8005326:	2800      	cmp	r0, #0
 8005328:	d16c      	bne.n	8005404 <_svfprintf_r+0x12f4>
 800532a:	ad25      	add	r5, sp, #148	; 0x94
 800532c:	ab1e      	add	r3, sp, #120	; 0x78
 800532e:	602b      	str	r3, [r5, #0]
 8005330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005332:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005334:	606b      	str	r3, [r5, #4]
 8005336:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005338:	4413      	add	r3, r2
 800533a:	9324      	str	r3, [sp, #144]	; 0x90
 800533c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800533e:	3301      	adds	r3, #1
 8005340:	2b07      	cmp	r3, #7
 8005342:	9323      	str	r3, [sp, #140]	; 0x8c
 8005344:	f73f adb5 	bgt.w	8004eb2 <_svfprintf_r+0xda2>
 8005348:	f105 0408 	add.w	r4, r5, #8
 800534c:	f7ff bac2 	b.w	80048d4 <_svfprintf_r+0x7c4>
 8005350:	aa22      	add	r2, sp, #136	; 0x88
 8005352:	4649      	mov	r1, r9
 8005354:	4650      	mov	r0, sl
 8005356:	f001 fe42 	bl	8006fde <__ssprint_r>
 800535a:	2800      	cmp	r0, #0
 800535c:	d152      	bne.n	8005404 <_svfprintf_r+0x12f4>
 800535e:	ad25      	add	r5, sp, #148	; 0x94
 8005360:	e7c4      	b.n	80052ec <_svfprintf_r+0x11dc>
 8005362:	2c00      	cmp	r4, #0
 8005364:	dde2      	ble.n	800532c <_svfprintf_r+0x121c>
 8005366:	4e58      	ldr	r6, [pc, #352]	; (80054c8 <_svfprintf_r+0x13b8>)
 8005368:	2710      	movs	r7, #16
 800536a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800536e:	2c10      	cmp	r4, #16
 8005370:	f103 0301 	add.w	r3, r3, #1
 8005374:	f105 0108 	add.w	r1, r5, #8
 8005378:	602e      	str	r6, [r5, #0]
 800537a:	dc07      	bgt.n	800538c <_svfprintf_r+0x127c>
 800537c:	606c      	str	r4, [r5, #4]
 800537e:	2b07      	cmp	r3, #7
 8005380:	4414      	add	r4, r2
 8005382:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8005386:	dcc9      	bgt.n	800531c <_svfprintf_r+0x120c>
 8005388:	460d      	mov	r5, r1
 800538a:	e7cf      	b.n	800532c <_svfprintf_r+0x121c>
 800538c:	3210      	adds	r2, #16
 800538e:	2b07      	cmp	r3, #7
 8005390:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005394:	606f      	str	r7, [r5, #4]
 8005396:	dd06      	ble.n	80053a6 <_svfprintf_r+0x1296>
 8005398:	aa22      	add	r2, sp, #136	; 0x88
 800539a:	4649      	mov	r1, r9
 800539c:	4650      	mov	r0, sl
 800539e:	f001 fe1e 	bl	8006fde <__ssprint_r>
 80053a2:	bb78      	cbnz	r0, 8005404 <_svfprintf_r+0x12f4>
 80053a4:	a925      	add	r1, sp, #148	; 0x94
 80053a6:	3c10      	subs	r4, #16
 80053a8:	460d      	mov	r5, r1
 80053aa:	e7de      	b.n	800536a <_svfprintf_r+0x125a>
 80053ac:	2201      	movs	r2, #1
 80053ae:	2b07      	cmp	r3, #7
 80053b0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80053b4:	f8c4 b000 	str.w	fp, [r4]
 80053b8:	6062      	str	r2, [r4, #4]
 80053ba:	ddb7      	ble.n	800532c <_svfprintf_r+0x121c>
 80053bc:	e7ae      	b.n	800531c <_svfprintf_r+0x120c>
 80053be:	3508      	adds	r5, #8
 80053c0:	e7b4      	b.n	800532c <_svfprintf_r+0x121c>
 80053c2:	460c      	mov	r4, r1
 80053c4:	f7ff ba86 	b.w	80048d4 <_svfprintf_r+0x7c4>
 80053c8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80053cc:	1a9d      	subs	r5, r3, r2
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	f77f aa84 	ble.w	80048dc <_svfprintf_r+0x7cc>
 80053d4:	4e3d      	ldr	r6, [pc, #244]	; (80054cc <_svfprintf_r+0x13bc>)
 80053d6:	2710      	movs	r7, #16
 80053d8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80053dc:	2d10      	cmp	r5, #16
 80053de:	f103 0301 	add.w	r3, r3, #1
 80053e2:	6026      	str	r6, [r4, #0]
 80053e4:	dc18      	bgt.n	8005418 <_svfprintf_r+0x1308>
 80053e6:	6065      	str	r5, [r4, #4]
 80053e8:	2b07      	cmp	r3, #7
 80053ea:	4415      	add	r5, r2
 80053ec:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80053f0:	f77f aa74 	ble.w	80048dc <_svfprintf_r+0x7cc>
 80053f4:	aa22      	add	r2, sp, #136	; 0x88
 80053f6:	4649      	mov	r1, r9
 80053f8:	4650      	mov	r0, sl
 80053fa:	f001 fdf0 	bl	8006fde <__ssprint_r>
 80053fe:	2800      	cmp	r0, #0
 8005400:	f43f aa6c 	beq.w	80048dc <_svfprintf_r+0x7cc>
 8005404:	9b03      	ldr	r3, [sp, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f43f a88a 	beq.w	8004520 <_svfprintf_r+0x410>
 800540c:	4619      	mov	r1, r3
 800540e:	4650      	mov	r0, sl
 8005410:	f000 ff36 	bl	8006280 <_free_r>
 8005414:	f7ff b884 	b.w	8004520 <_svfprintf_r+0x410>
 8005418:	3210      	adds	r2, #16
 800541a:	2b07      	cmp	r3, #7
 800541c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005420:	6067      	str	r7, [r4, #4]
 8005422:	dc02      	bgt.n	800542a <_svfprintf_r+0x131a>
 8005424:	3408      	adds	r4, #8
 8005426:	3d10      	subs	r5, #16
 8005428:	e7d6      	b.n	80053d8 <_svfprintf_r+0x12c8>
 800542a:	aa22      	add	r2, sp, #136	; 0x88
 800542c:	4649      	mov	r1, r9
 800542e:	4650      	mov	r0, sl
 8005430:	f001 fdd5 	bl	8006fde <__ssprint_r>
 8005434:	2800      	cmp	r0, #0
 8005436:	d1e5      	bne.n	8005404 <_svfprintf_r+0x12f4>
 8005438:	ac25      	add	r4, sp, #148	; 0x94
 800543a:	e7f4      	b.n	8005426 <_svfprintf_r+0x1316>
 800543c:	9903      	ldr	r1, [sp, #12]
 800543e:	4650      	mov	r0, sl
 8005440:	f000 ff1e 	bl	8006280 <_free_r>
 8005444:	f7ff ba62 	b.w	800490c <_svfprintf_r+0x7fc>
 8005448:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800544a:	2b00      	cmp	r3, #0
 800544c:	f43f a868 	beq.w	8004520 <_svfprintf_r+0x410>
 8005450:	aa22      	add	r2, sp, #136	; 0x88
 8005452:	4649      	mov	r1, r9
 8005454:	4650      	mov	r0, sl
 8005456:	f001 fdc2 	bl	8006fde <__ssprint_r>
 800545a:	f7ff b861 	b.w	8004520 <_svfprintf_r+0x410>
 800545e:	ea56 0207 	orrs.w	r2, r6, r7
 8005462:	f8cd 800c 	str.w	r8, [sp, #12]
 8005466:	f43f ab78 	beq.w	8004b5a <_svfprintf_r+0xa4a>
 800546a:	2b01      	cmp	r3, #1
 800546c:	f43f ac0d 	beq.w	8004c8a <_svfprintf_r+0xb7a>
 8005470:	2b02      	cmp	r3, #2
 8005472:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8005476:	f43f ac55 	beq.w	8004d24 <_svfprintf_r+0xc14>
 800547a:	08f2      	lsrs	r2, r6, #3
 800547c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8005480:	08f8      	lsrs	r0, r7, #3
 8005482:	f006 0307 	and.w	r3, r6, #7
 8005486:	4607      	mov	r7, r0
 8005488:	4616      	mov	r6, r2
 800548a:	3330      	adds	r3, #48	; 0x30
 800548c:	ea56 0207 	orrs.w	r2, r6, r7
 8005490:	4659      	mov	r1, fp
 8005492:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8005496:	d1f0      	bne.n	800547a <_svfprintf_r+0x136a>
 8005498:	9a03      	ldr	r2, [sp, #12]
 800549a:	07d2      	lsls	r2, r2, #31
 800549c:	d506      	bpl.n	80054ac <_svfprintf_r+0x139c>
 800549e:	2b30      	cmp	r3, #48	; 0x30
 80054a0:	d004      	beq.n	80054ac <_svfprintf_r+0x139c>
 80054a2:	2330      	movs	r3, #48	; 0x30
 80054a4:	f80b 3c01 	strb.w	r3, [fp, #-1]
 80054a8:	f1a1 0b02 	sub.w	fp, r1, #2
 80054ac:	ab4e      	add	r3, sp, #312	; 0x138
 80054ae:	eba3 030b 	sub.w	r3, r3, fp
 80054b2:	9e04      	ldr	r6, [sp, #16]
 80054b4:	9304      	str	r3, [sp, #16]
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80054bc:	9303      	str	r3, [sp, #12]
 80054be:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80054c2:	461d      	mov	r5, r3
 80054c4:	f7ff b94c 	b.w	8004760 <_svfprintf_r+0x650>
 80054c8:	08008cc0 	.word	0x08008cc0
 80054cc:	08008cb0 	.word	0x08008cb0

080054d0 <register_fini>:
 80054d0:	4b02      	ldr	r3, [pc, #8]	; (80054dc <register_fini+0xc>)
 80054d2:	b113      	cbz	r3, 80054da <register_fini+0xa>
 80054d4:	4802      	ldr	r0, [pc, #8]	; (80054e0 <register_fini+0x10>)
 80054d6:	f000 b805 	b.w	80054e4 <atexit>
 80054da:	4770      	bx	lr
 80054dc:	00000000 	.word	0x00000000
 80054e0:	080061b1 	.word	0x080061b1

080054e4 <atexit>:
 80054e4:	2300      	movs	r3, #0
 80054e6:	4601      	mov	r1, r0
 80054e8:	461a      	mov	r2, r3
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 be00 	b.w	80070f0 <__register_exitproc>

080054f0 <quorem>:
 80054f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	6903      	ldr	r3, [r0, #16]
 80054f6:	690c      	ldr	r4, [r1, #16]
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	4607      	mov	r7, r0
 80054fc:	f2c0 8081 	blt.w	8005602 <quorem+0x112>
 8005500:	3c01      	subs	r4, #1
 8005502:	f101 0814 	add.w	r8, r1, #20
 8005506:	f100 0514 	add.w	r5, r0, #20
 800550a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005518:	3301      	adds	r3, #1
 800551a:	429a      	cmp	r2, r3
 800551c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005520:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005524:	fbb2 f6f3 	udiv	r6, r2, r3
 8005528:	d331      	bcc.n	800558e <quorem+0x9e>
 800552a:	f04f 0e00 	mov.w	lr, #0
 800552e:	4640      	mov	r0, r8
 8005530:	46ac      	mov	ip, r5
 8005532:	46f2      	mov	sl, lr
 8005534:	f850 2b04 	ldr.w	r2, [r0], #4
 8005538:	b293      	uxth	r3, r2
 800553a:	fb06 e303 	mla	r3, r6, r3, lr
 800553e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005542:	b29b      	uxth	r3, r3
 8005544:	ebaa 0303 	sub.w	r3, sl, r3
 8005548:	0c12      	lsrs	r2, r2, #16
 800554a:	f8dc a000 	ldr.w	sl, [ip]
 800554e:	fb06 e202 	mla	r2, r6, r2, lr
 8005552:	fa13 f38a 	uxtah	r3, r3, sl
 8005556:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800555a:	fa1f fa82 	uxth.w	sl, r2
 800555e:	f8dc 2000 	ldr.w	r2, [ip]
 8005562:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005566:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800556a:	b29b      	uxth	r3, r3
 800556c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005570:	4581      	cmp	r9, r0
 8005572:	f84c 3b04 	str.w	r3, [ip], #4
 8005576:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800557a:	d2db      	bcs.n	8005534 <quorem+0x44>
 800557c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005580:	b92b      	cbnz	r3, 800558e <quorem+0x9e>
 8005582:	9b01      	ldr	r3, [sp, #4]
 8005584:	3b04      	subs	r3, #4
 8005586:	429d      	cmp	r5, r3
 8005588:	461a      	mov	r2, r3
 800558a:	d32e      	bcc.n	80055ea <quorem+0xfa>
 800558c:	613c      	str	r4, [r7, #16]
 800558e:	4638      	mov	r0, r7
 8005590:	f001 fbca 	bl	8006d28 <__mcmp>
 8005594:	2800      	cmp	r0, #0
 8005596:	db24      	blt.n	80055e2 <quorem+0xf2>
 8005598:	3601      	adds	r6, #1
 800559a:	4628      	mov	r0, r5
 800559c:	f04f 0c00 	mov.w	ip, #0
 80055a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80055a4:	f8d0 e000 	ldr.w	lr, [r0]
 80055a8:	b293      	uxth	r3, r2
 80055aa:	ebac 0303 	sub.w	r3, ip, r3
 80055ae:	0c12      	lsrs	r2, r2, #16
 80055b0:	fa13 f38e 	uxtah	r3, r3, lr
 80055b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055bc:	b29b      	uxth	r3, r3
 80055be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055c2:	45c1      	cmp	r9, r8
 80055c4:	f840 3b04 	str.w	r3, [r0], #4
 80055c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055cc:	d2e8      	bcs.n	80055a0 <quorem+0xb0>
 80055ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055d6:	b922      	cbnz	r2, 80055e2 <quorem+0xf2>
 80055d8:	3b04      	subs	r3, #4
 80055da:	429d      	cmp	r5, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	d30a      	bcc.n	80055f6 <quorem+0x106>
 80055e0:	613c      	str	r4, [r7, #16]
 80055e2:	4630      	mov	r0, r6
 80055e4:	b003      	add	sp, #12
 80055e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	3b04      	subs	r3, #4
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	d1cc      	bne.n	800558c <quorem+0x9c>
 80055f2:	3c01      	subs	r4, #1
 80055f4:	e7c7      	b.n	8005586 <quorem+0x96>
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	3b04      	subs	r3, #4
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	d1f0      	bne.n	80055e0 <quorem+0xf0>
 80055fe:	3c01      	subs	r4, #1
 8005600:	e7eb      	b.n	80055da <quorem+0xea>
 8005602:	2000      	movs	r0, #0
 8005604:	e7ee      	b.n	80055e4 <quorem+0xf4>
	...

08005608 <_dtoa_r>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	ed2d 8b02 	vpush	{d8}
 8005610:	b095      	sub	sp, #84	; 0x54
 8005612:	ec57 6b10 	vmov	r6, r7, d0
 8005616:	9105      	str	r1, [sp, #20]
 8005618:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800561a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800561c:	9209      	str	r2, [sp, #36]	; 0x24
 800561e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005622:	4604      	mov	r4, r0
 8005624:	930f      	str	r3, [sp, #60]	; 0x3c
 8005626:	b141      	cbz	r1, 800563a <_dtoa_r+0x32>
 8005628:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800562a:	604a      	str	r2, [r1, #4]
 800562c:	2301      	movs	r3, #1
 800562e:	4093      	lsls	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
 8005632:	f001 f96e 	bl	8006912 <_Bfree>
 8005636:	2300      	movs	r3, #0
 8005638:	6423      	str	r3, [r4, #64]	; 0x40
 800563a:	1e3b      	subs	r3, r7, #0
 800563c:	bfb9      	ittee	lt
 800563e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005642:	9303      	strlt	r3, [sp, #12]
 8005644:	2300      	movge	r3, #0
 8005646:	602b      	strge	r3, [r5, #0]
 8005648:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800564c:	4ba2      	ldr	r3, [pc, #648]	; (80058d8 <_dtoa_r+0x2d0>)
 800564e:	bfbc      	itt	lt
 8005650:	2201      	movlt	r2, #1
 8005652:	602a      	strlt	r2, [r5, #0]
 8005654:	ea33 0309 	bics.w	r3, r3, r9
 8005658:	d11b      	bne.n	8005692 <_dtoa_r+0x8a>
 800565a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800565c:	f242 730f 	movw	r3, #9999	; 0x270f
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005666:	4333      	orrs	r3, r6
 8005668:	f000 8578 	beq.w	800615c <_dtoa_r+0xb54>
 800566c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800566e:	b90b      	cbnz	r3, 8005674 <_dtoa_r+0x6c>
 8005670:	4b9a      	ldr	r3, [pc, #616]	; (80058dc <_dtoa_r+0x2d4>)
 8005672:	e024      	b.n	80056be <_dtoa_r+0xb6>
 8005674:	4b99      	ldr	r3, [pc, #612]	; (80058dc <_dtoa_r+0x2d4>)
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	3303      	adds	r3, #3
 800567a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	9800      	ldr	r0, [sp, #0]
 8005680:	b015      	add	sp, #84	; 0x54
 8005682:	ecbd 8b02 	vpop	{d8}
 8005686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568a:	4b95      	ldr	r3, [pc, #596]	; (80058e0 <_dtoa_r+0x2d8>)
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	e7f3      	b.n	800567a <_dtoa_r+0x72>
 8005692:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	ec51 0b17 	vmov	r0, r1, d7
 800569c:	2300      	movs	r3, #0
 800569e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80056a2:	f7fb fa21 	bl	8000ae8 <__aeabi_dcmpeq>
 80056a6:	4680      	mov	r8, r0
 80056a8:	b158      	cbz	r0, 80056c2 <_dtoa_r+0xba>
 80056aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056ac:	2301      	movs	r3, #1
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 854f 	beq.w	8006156 <_dtoa_r+0xb4e>
 80056b8:	488a      	ldr	r0, [pc, #552]	; (80058e4 <_dtoa_r+0x2dc>)
 80056ba:	6018      	str	r0, [r3, #0]
 80056bc:	1e43      	subs	r3, r0, #1
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	e7dd      	b.n	800567e <_dtoa_r+0x76>
 80056c2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80056c6:	aa12      	add	r2, sp, #72	; 0x48
 80056c8:	a913      	add	r1, sp, #76	; 0x4c
 80056ca:	4620      	mov	r0, r4
 80056cc:	f001 fbd0 	bl	8006e70 <__d2b>
 80056d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80056d4:	4683      	mov	fp, r0
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	d07c      	beq.n	80057d4 <_dtoa_r+0x1cc>
 80056da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056dc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80056e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80056e8:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80056ec:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80056f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80056f4:	4b7c      	ldr	r3, [pc, #496]	; (80058e8 <_dtoa_r+0x2e0>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	4630      	mov	r0, r6
 80056fa:	4639      	mov	r1, r7
 80056fc:	f7fa fdd4 	bl	80002a8 <__aeabi_dsub>
 8005700:	a36f      	add	r3, pc, #444	; (adr r3, 80058c0 <_dtoa_r+0x2b8>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f7fa ff87 	bl	8000618 <__aeabi_dmul>
 800570a:	a36f      	add	r3, pc, #444	; (adr r3, 80058c8 <_dtoa_r+0x2c0>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa fdcc 	bl	80002ac <__adddf3>
 8005714:	4606      	mov	r6, r0
 8005716:	4628      	mov	r0, r5
 8005718:	460f      	mov	r7, r1
 800571a:	f7fa ff13 	bl	8000544 <__aeabi_i2d>
 800571e:	a36c      	add	r3, pc, #432	; (adr r3, 80058d0 <_dtoa_r+0x2c8>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f7fa ff78 	bl	8000618 <__aeabi_dmul>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fa fdbc 	bl	80002ac <__adddf3>
 8005734:	4606      	mov	r6, r0
 8005736:	460f      	mov	r7, r1
 8005738:	f7fb fa1e 	bl	8000b78 <__aeabi_d2iz>
 800573c:	2200      	movs	r2, #0
 800573e:	4682      	mov	sl, r0
 8005740:	2300      	movs	r3, #0
 8005742:	4630      	mov	r0, r6
 8005744:	4639      	mov	r1, r7
 8005746:	f7fb f9d9 	bl	8000afc <__aeabi_dcmplt>
 800574a:	b148      	cbz	r0, 8005760 <_dtoa_r+0x158>
 800574c:	4650      	mov	r0, sl
 800574e:	f7fa fef9 	bl	8000544 <__aeabi_i2d>
 8005752:	4632      	mov	r2, r6
 8005754:	463b      	mov	r3, r7
 8005756:	f7fb f9c7 	bl	8000ae8 <__aeabi_dcmpeq>
 800575a:	b908      	cbnz	r0, 8005760 <_dtoa_r+0x158>
 800575c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005760:	f1ba 0f16 	cmp.w	sl, #22
 8005764:	d854      	bhi.n	8005810 <_dtoa_r+0x208>
 8005766:	4b61      	ldr	r3, [pc, #388]	; (80058ec <_dtoa_r+0x2e4>)
 8005768:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005774:	f7fb f9c2 	bl	8000afc <__aeabi_dcmplt>
 8005778:	2800      	cmp	r0, #0
 800577a:	d04b      	beq.n	8005814 <_dtoa_r+0x20c>
 800577c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005780:	2300      	movs	r3, #0
 8005782:	930e      	str	r3, [sp, #56]	; 0x38
 8005784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005786:	1b5d      	subs	r5, r3, r5
 8005788:	1e6b      	subs	r3, r5, #1
 800578a:	9304      	str	r3, [sp, #16]
 800578c:	bf43      	ittte	mi
 800578e:	2300      	movmi	r3, #0
 8005790:	f1c5 0801 	rsbmi	r8, r5, #1
 8005794:	9304      	strmi	r3, [sp, #16]
 8005796:	f04f 0800 	movpl.w	r8, #0
 800579a:	f1ba 0f00 	cmp.w	sl, #0
 800579e:	db3b      	blt.n	8005818 <_dtoa_r+0x210>
 80057a0:	9b04      	ldr	r3, [sp, #16]
 80057a2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80057a6:	4453      	add	r3, sl
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	2300      	movs	r3, #0
 80057ac:	9306      	str	r3, [sp, #24]
 80057ae:	9b05      	ldr	r3, [sp, #20]
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	d86a      	bhi.n	800588a <_dtoa_r+0x282>
 80057b4:	2b05      	cmp	r3, #5
 80057b6:	bfc4      	itt	gt
 80057b8:	3b04      	subgt	r3, #4
 80057ba:	9305      	strgt	r3, [sp, #20]
 80057bc:	9b05      	ldr	r3, [sp, #20]
 80057be:	f1a3 0302 	sub.w	r3, r3, #2
 80057c2:	bfcc      	ite	gt
 80057c4:	2500      	movgt	r5, #0
 80057c6:	2501      	movle	r5, #1
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d86a      	bhi.n	80058a2 <_dtoa_r+0x29a>
 80057cc:	e8df f003 	tbb	[pc, r3]
 80057d0:	5b4d4f2c 	.word	0x5b4d4f2c
 80057d4:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80057d8:	441d      	add	r5, r3
 80057da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80057de:	2b20      	cmp	r3, #32
 80057e0:	bfc1      	itttt	gt
 80057e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80057ea:	fa09 f303 	lslgt.w	r3, r9, r3
 80057ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80057f2:	bfda      	itte	le
 80057f4:	f1c3 0320 	rsble	r3, r3, #32
 80057f8:	fa06 f003 	lslle.w	r0, r6, r3
 80057fc:	4318      	orrgt	r0, r3
 80057fe:	f7fa fe91 	bl	8000524 <__aeabi_ui2d>
 8005802:	2301      	movs	r3, #1
 8005804:	4606      	mov	r6, r0
 8005806:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800580a:	3d01      	subs	r5, #1
 800580c:	9310      	str	r3, [sp, #64]	; 0x40
 800580e:	e771      	b.n	80056f4 <_dtoa_r+0xec>
 8005810:	2301      	movs	r3, #1
 8005812:	e7b6      	b.n	8005782 <_dtoa_r+0x17a>
 8005814:	900e      	str	r0, [sp, #56]	; 0x38
 8005816:	e7b5      	b.n	8005784 <_dtoa_r+0x17c>
 8005818:	f1ca 0300 	rsb	r3, sl, #0
 800581c:	9306      	str	r3, [sp, #24]
 800581e:	2300      	movs	r3, #0
 8005820:	eba8 080a 	sub.w	r8, r8, sl
 8005824:	930d      	str	r3, [sp, #52]	; 0x34
 8005826:	e7c2      	b.n	80057ae <_dtoa_r+0x1a6>
 8005828:	2300      	movs	r3, #0
 800582a:	9308      	str	r3, [sp, #32]
 800582c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	dc3a      	bgt.n	80058a8 <_dtoa_r+0x2a0>
 8005832:	f04f 0901 	mov.w	r9, #1
 8005836:	f8cd 9004 	str.w	r9, [sp, #4]
 800583a:	464b      	mov	r3, r9
 800583c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005840:	2200      	movs	r2, #0
 8005842:	6462      	str	r2, [r4, #68]	; 0x44
 8005844:	2204      	movs	r2, #4
 8005846:	f102 0014 	add.w	r0, r2, #20
 800584a:	4298      	cmp	r0, r3
 800584c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800584e:	d931      	bls.n	80058b4 <_dtoa_r+0x2ac>
 8005850:	4620      	mov	r0, r4
 8005852:	f001 f839 	bl	80068c8 <_Balloc>
 8005856:	9000      	str	r0, [sp, #0]
 8005858:	2800      	cmp	r0, #0
 800585a:	d14d      	bne.n	80058f8 <_dtoa_r+0x2f0>
 800585c:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <_dtoa_r+0x2e8>)
 800585e:	4602      	mov	r2, r0
 8005860:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005864:	4823      	ldr	r0, [pc, #140]	; (80058f4 <_dtoa_r+0x2ec>)
 8005866:	f001 fc83 	bl	8007170 <__assert_func>
 800586a:	2301      	movs	r3, #1
 800586c:	e7dd      	b.n	800582a <_dtoa_r+0x222>
 800586e:	2300      	movs	r3, #0
 8005870:	9308      	str	r3, [sp, #32]
 8005872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005874:	eb0a 0903 	add.w	r9, sl, r3
 8005878:	f109 0301 	add.w	r3, r9, #1
 800587c:	2b01      	cmp	r3, #1
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	bfb8      	it	lt
 8005882:	2301      	movlt	r3, #1
 8005884:	e7dc      	b.n	8005840 <_dtoa_r+0x238>
 8005886:	2301      	movs	r3, #1
 8005888:	e7f2      	b.n	8005870 <_dtoa_r+0x268>
 800588a:	2501      	movs	r5, #1
 800588c:	2300      	movs	r3, #0
 800588e:	9305      	str	r3, [sp, #20]
 8005890:	9508      	str	r5, [sp, #32]
 8005892:	f04f 39ff 	mov.w	r9, #4294967295
 8005896:	2200      	movs	r2, #0
 8005898:	f8cd 9004 	str.w	r9, [sp, #4]
 800589c:	2312      	movs	r3, #18
 800589e:	9209      	str	r2, [sp, #36]	; 0x24
 80058a0:	e7ce      	b.n	8005840 <_dtoa_r+0x238>
 80058a2:	2301      	movs	r3, #1
 80058a4:	9308      	str	r3, [sp, #32]
 80058a6:	e7f4      	b.n	8005892 <_dtoa_r+0x28a>
 80058a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80058ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80058b0:	464b      	mov	r3, r9
 80058b2:	e7c5      	b.n	8005840 <_dtoa_r+0x238>
 80058b4:	3101      	adds	r1, #1
 80058b6:	6461      	str	r1, [r4, #68]	; 0x44
 80058b8:	0052      	lsls	r2, r2, #1
 80058ba:	e7c4      	b.n	8005846 <_dtoa_r+0x23e>
 80058bc:	f3af 8000 	nop.w
 80058c0:	636f4361 	.word	0x636f4361
 80058c4:	3fd287a7 	.word	0x3fd287a7
 80058c8:	8b60c8b3 	.word	0x8b60c8b3
 80058cc:	3fc68a28 	.word	0x3fc68a28
 80058d0:	509f79fb 	.word	0x509f79fb
 80058d4:	3fd34413 	.word	0x3fd34413
 80058d8:	7ff00000 	.word	0x7ff00000
 80058dc:	08008cd0 	.word	0x08008cd0
 80058e0:	08008cd4 	.word	0x08008cd4
 80058e4:	08008caf 	.word	0x08008caf
 80058e8:	3ff80000 	.word	0x3ff80000
 80058ec:	08008dd8 	.word	0x08008dd8
 80058f0:	08008cdd 	.word	0x08008cdd
 80058f4:	08008cee 	.word	0x08008cee
 80058f8:	9b00      	ldr	r3, [sp, #0]
 80058fa:	6423      	str	r3, [r4, #64]	; 0x40
 80058fc:	9b01      	ldr	r3, [sp, #4]
 80058fe:	2b0e      	cmp	r3, #14
 8005900:	f200 80ad 	bhi.w	8005a5e <_dtoa_r+0x456>
 8005904:	2d00      	cmp	r5, #0
 8005906:	f000 80aa 	beq.w	8005a5e <_dtoa_r+0x456>
 800590a:	f1ba 0f00 	cmp.w	sl, #0
 800590e:	dd36      	ble.n	800597e <_dtoa_r+0x376>
 8005910:	4ac2      	ldr	r2, [pc, #776]	; (8005c1c <_dtoa_r+0x614>)
 8005912:	f00a 030f 	and.w	r3, sl, #15
 8005916:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800591a:	ed93 7b00 	vldr	d7, [r3]
 800591e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005922:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005926:	eeb0 8a47 	vmov.f32	s16, s14
 800592a:	eef0 8a67 	vmov.f32	s17, s15
 800592e:	d016      	beq.n	800595e <_dtoa_r+0x356>
 8005930:	4bbb      	ldr	r3, [pc, #748]	; (8005c20 <_dtoa_r+0x618>)
 8005932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005936:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800593a:	f7fa ff97 	bl	800086c <__aeabi_ddiv>
 800593e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005942:	f007 070f 	and.w	r7, r7, #15
 8005946:	2503      	movs	r5, #3
 8005948:	4eb5      	ldr	r6, [pc, #724]	; (8005c20 <_dtoa_r+0x618>)
 800594a:	b957      	cbnz	r7, 8005962 <_dtoa_r+0x35a>
 800594c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005950:	ec53 2b18 	vmov	r2, r3, d8
 8005954:	f7fa ff8a 	bl	800086c <__aeabi_ddiv>
 8005958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800595c:	e029      	b.n	80059b2 <_dtoa_r+0x3aa>
 800595e:	2502      	movs	r5, #2
 8005960:	e7f2      	b.n	8005948 <_dtoa_r+0x340>
 8005962:	07f9      	lsls	r1, r7, #31
 8005964:	d508      	bpl.n	8005978 <_dtoa_r+0x370>
 8005966:	ec51 0b18 	vmov	r0, r1, d8
 800596a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800596e:	f7fa fe53 	bl	8000618 <__aeabi_dmul>
 8005972:	ec41 0b18 	vmov	d8, r0, r1
 8005976:	3501      	adds	r5, #1
 8005978:	107f      	asrs	r7, r7, #1
 800597a:	3608      	adds	r6, #8
 800597c:	e7e5      	b.n	800594a <_dtoa_r+0x342>
 800597e:	f000 80a6 	beq.w	8005ace <_dtoa_r+0x4c6>
 8005982:	f1ca 0600 	rsb	r6, sl, #0
 8005986:	4ba5      	ldr	r3, [pc, #660]	; (8005c1c <_dtoa_r+0x614>)
 8005988:	4fa5      	ldr	r7, [pc, #660]	; (8005c20 <_dtoa_r+0x618>)
 800598a:	f006 020f 	and.w	r2, r6, #15
 800598e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800599a:	f7fa fe3d 	bl	8000618 <__aeabi_dmul>
 800599e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a2:	1136      	asrs	r6, r6, #4
 80059a4:	2300      	movs	r3, #0
 80059a6:	2502      	movs	r5, #2
 80059a8:	2e00      	cmp	r6, #0
 80059aa:	f040 8085 	bne.w	8005ab8 <_dtoa_r+0x4b0>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1d2      	bne.n	8005958 <_dtoa_r+0x350>
 80059b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 808c 	beq.w	8005ad2 <_dtoa_r+0x4ca>
 80059ba:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059be:	4b99      	ldr	r3, [pc, #612]	; (8005c24 <_dtoa_r+0x61c>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	4630      	mov	r0, r6
 80059c4:	4639      	mov	r1, r7
 80059c6:	f7fb f899 	bl	8000afc <__aeabi_dcmplt>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	f000 8081 	beq.w	8005ad2 <_dtoa_r+0x4ca>
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d07d      	beq.n	8005ad2 <_dtoa_r+0x4ca>
 80059d6:	f1b9 0f00 	cmp.w	r9, #0
 80059da:	dd3c      	ble.n	8005a56 <_dtoa_r+0x44e>
 80059dc:	f10a 33ff 	add.w	r3, sl, #4294967295
 80059e0:	9307      	str	r3, [sp, #28]
 80059e2:	2200      	movs	r2, #0
 80059e4:	4b90      	ldr	r3, [pc, #576]	; (8005c28 <_dtoa_r+0x620>)
 80059e6:	4630      	mov	r0, r6
 80059e8:	4639      	mov	r1, r7
 80059ea:	f7fa fe15 	bl	8000618 <__aeabi_dmul>
 80059ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059f2:	3501      	adds	r5, #1
 80059f4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80059f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059fc:	4628      	mov	r0, r5
 80059fe:	f7fa fda1 	bl	8000544 <__aeabi_i2d>
 8005a02:	4632      	mov	r2, r6
 8005a04:	463b      	mov	r3, r7
 8005a06:	f7fa fe07 	bl	8000618 <__aeabi_dmul>
 8005a0a:	4b88      	ldr	r3, [pc, #544]	; (8005c2c <_dtoa_r+0x624>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f7fa fc4d 	bl	80002ac <__adddf3>
 8005a12:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a1a:	9303      	str	r3, [sp, #12]
 8005a1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d15c      	bne.n	8005adc <_dtoa_r+0x4d4>
 8005a22:	4b83      	ldr	r3, [pc, #524]	; (8005c30 <_dtoa_r+0x628>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	4630      	mov	r0, r6
 8005a28:	4639      	mov	r1, r7
 8005a2a:	f7fa fc3d 	bl	80002a8 <__aeabi_dsub>
 8005a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a32:	4606      	mov	r6, r0
 8005a34:	460f      	mov	r7, r1
 8005a36:	f7fb f87f 	bl	8000b38 <__aeabi_dcmpgt>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	f040 8295 	bne.w	8005f6a <_dtoa_r+0x962>
 8005a40:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005a44:	4630      	mov	r0, r6
 8005a46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	f7fb f856 	bl	8000afc <__aeabi_dcmplt>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f040 8287 	bne.w	8005f64 <_dtoa_r+0x95c>
 8005a56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f2c0 8157 	blt.w	8005d14 <_dtoa_r+0x70c>
 8005a66:	f1ba 0f0e 	cmp.w	sl, #14
 8005a6a:	f300 8153 	bgt.w	8005d14 <_dtoa_r+0x70c>
 8005a6e:	4b6b      	ldr	r3, [pc, #428]	; (8005c1c <_dtoa_r+0x614>)
 8005a70:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f280 80e2 	bge.w	8005c44 <_dtoa_r+0x63c>
 8005a80:	9b01      	ldr	r3, [sp, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f300 80de 	bgt.w	8005c44 <_dtoa_r+0x63c>
 8005a88:	f040 826c 	bne.w	8005f64 <_dtoa_r+0x95c>
 8005a8c:	4b68      	ldr	r3, [pc, #416]	; (8005c30 <_dtoa_r+0x628>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	4640      	mov	r0, r8
 8005a92:	4649      	mov	r1, r9
 8005a94:	f7fa fdc0 	bl	8000618 <__aeabi_dmul>
 8005a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a9c:	f7fb f842 	bl	8000b24 <__aeabi_dcmpge>
 8005aa0:	9e01      	ldr	r6, [sp, #4]
 8005aa2:	4637      	mov	r7, r6
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	f040 8242 	bne.w	8005f2e <_dtoa_r+0x926>
 8005aaa:	9d00      	ldr	r5, [sp, #0]
 8005aac:	2331      	movs	r3, #49	; 0x31
 8005aae:	f805 3b01 	strb.w	r3, [r5], #1
 8005ab2:	f10a 0a01 	add.w	sl, sl, #1
 8005ab6:	e23e      	b.n	8005f36 <_dtoa_r+0x92e>
 8005ab8:	07f2      	lsls	r2, r6, #31
 8005aba:	d505      	bpl.n	8005ac8 <_dtoa_r+0x4c0>
 8005abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac0:	f7fa fdaa 	bl	8000618 <__aeabi_dmul>
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	1076      	asrs	r6, r6, #1
 8005aca:	3708      	adds	r7, #8
 8005acc:	e76c      	b.n	80059a8 <_dtoa_r+0x3a0>
 8005ace:	2502      	movs	r5, #2
 8005ad0:	e76f      	b.n	80059b2 <_dtoa_r+0x3aa>
 8005ad2:	9b01      	ldr	r3, [sp, #4]
 8005ad4:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8005ada:	e78d      	b.n	80059f8 <_dtoa_r+0x3f0>
 8005adc:	9900      	ldr	r1, [sp, #0]
 8005ade:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ae2:	4b4e      	ldr	r3, [pc, #312]	; (8005c1c <_dtoa_r+0x614>)
 8005ae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ae8:	4401      	add	r1, r0
 8005aea:	9102      	str	r1, [sp, #8]
 8005aec:	9908      	ldr	r1, [sp, #32]
 8005aee:	eeb0 8a47 	vmov.f32	s16, s14
 8005af2:	eef0 8a67 	vmov.f32	s17, s15
 8005af6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005afa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005afe:	2900      	cmp	r1, #0
 8005b00:	d045      	beq.n	8005b8e <_dtoa_r+0x586>
 8005b02:	494c      	ldr	r1, [pc, #304]	; (8005c34 <_dtoa_r+0x62c>)
 8005b04:	2000      	movs	r0, #0
 8005b06:	f7fa feb1 	bl	800086c <__aeabi_ddiv>
 8005b0a:	ec53 2b18 	vmov	r2, r3, d8
 8005b0e:	f7fa fbcb 	bl	80002a8 <__aeabi_dsub>
 8005b12:	9d00      	ldr	r5, [sp, #0]
 8005b14:	ec41 0b18 	vmov	d8, r0, r1
 8005b18:	4639      	mov	r1, r7
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f7fb f82c 	bl	8000b78 <__aeabi_d2iz>
 8005b20:	900c      	str	r0, [sp, #48]	; 0x30
 8005b22:	f7fa fd0f 	bl	8000544 <__aeabi_i2d>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa fbbb 	bl	80002a8 <__aeabi_dsub>
 8005b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b34:	3330      	adds	r3, #48	; 0x30
 8005b36:	f805 3b01 	strb.w	r3, [r5], #1
 8005b3a:	ec53 2b18 	vmov	r2, r3, d8
 8005b3e:	4606      	mov	r6, r0
 8005b40:	460f      	mov	r7, r1
 8005b42:	f7fa ffdb 	bl	8000afc <__aeabi_dcmplt>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d165      	bne.n	8005c16 <_dtoa_r+0x60e>
 8005b4a:	4632      	mov	r2, r6
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	4935      	ldr	r1, [pc, #212]	; (8005c24 <_dtoa_r+0x61c>)
 8005b50:	2000      	movs	r0, #0
 8005b52:	f7fa fba9 	bl	80002a8 <__aeabi_dsub>
 8005b56:	ec53 2b18 	vmov	r2, r3, d8
 8005b5a:	f7fa ffcf 	bl	8000afc <__aeabi_dcmplt>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f040 80b8 	bne.w	8005cd4 <_dtoa_r+0x6cc>
 8005b64:	9b02      	ldr	r3, [sp, #8]
 8005b66:	429d      	cmp	r5, r3
 8005b68:	f43f af75 	beq.w	8005a56 <_dtoa_r+0x44e>
 8005b6c:	4b2e      	ldr	r3, [pc, #184]	; (8005c28 <_dtoa_r+0x620>)
 8005b6e:	ec51 0b18 	vmov	r0, r1, d8
 8005b72:	2200      	movs	r2, #0
 8005b74:	f7fa fd50 	bl	8000618 <__aeabi_dmul>
 8005b78:	4b2b      	ldr	r3, [pc, #172]	; (8005c28 <_dtoa_r+0x620>)
 8005b7a:	ec41 0b18 	vmov	d8, r0, r1
 8005b7e:	2200      	movs	r2, #0
 8005b80:	4630      	mov	r0, r6
 8005b82:	4639      	mov	r1, r7
 8005b84:	f7fa fd48 	bl	8000618 <__aeabi_dmul>
 8005b88:	4606      	mov	r6, r0
 8005b8a:	460f      	mov	r7, r1
 8005b8c:	e7c4      	b.n	8005b18 <_dtoa_r+0x510>
 8005b8e:	ec51 0b17 	vmov	r0, r1, d7
 8005b92:	f7fa fd41 	bl	8000618 <__aeabi_dmul>
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	9d00      	ldr	r5, [sp, #0]
 8005b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b9c:	ec41 0b18 	vmov	d8, r0, r1
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f7fa ffe8 	bl	8000b78 <__aeabi_d2iz>
 8005ba8:	9011      	str	r0, [sp, #68]	; 0x44
 8005baa:	f7fa fccb 	bl	8000544 <__aeabi_i2d>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	f7fa fb77 	bl	80002a8 <__aeabi_dsub>
 8005bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bbc:	3330      	adds	r3, #48	; 0x30
 8005bbe:	f805 3b01 	strb.w	r3, [r5], #1
 8005bc2:	9b02      	ldr	r3, [sp, #8]
 8005bc4:	429d      	cmp	r5, r3
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	d133      	bne.n	8005c38 <_dtoa_r+0x630>
 8005bd0:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <_dtoa_r+0x62c>)
 8005bd2:	ec51 0b18 	vmov	r0, r1, d8
 8005bd6:	f7fa fb69 	bl	80002ac <__adddf3>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4630      	mov	r0, r6
 8005be0:	4639      	mov	r1, r7
 8005be2:	f7fa ffa9 	bl	8000b38 <__aeabi_dcmpgt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d174      	bne.n	8005cd4 <_dtoa_r+0x6cc>
 8005bea:	ec53 2b18 	vmov	r2, r3, d8
 8005bee:	4911      	ldr	r1, [pc, #68]	; (8005c34 <_dtoa_r+0x62c>)
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	f7fa fb59 	bl	80002a8 <__aeabi_dsub>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f7fa ff7d 	bl	8000afc <__aeabi_dcmplt>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	f43f af27 	beq.w	8005a56 <_dtoa_r+0x44e>
 8005c08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c0a:	1e6b      	subs	r3, r5, #1
 8005c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8005c0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c12:	2b30      	cmp	r3, #48	; 0x30
 8005c14:	d0f8      	beq.n	8005c08 <_dtoa_r+0x600>
 8005c16:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c1a:	e049      	b.n	8005cb0 <_dtoa_r+0x6a8>
 8005c1c:	08008dd8 	.word	0x08008dd8
 8005c20:	08008db0 	.word	0x08008db0
 8005c24:	3ff00000 	.word	0x3ff00000
 8005c28:	40240000 	.word	0x40240000
 8005c2c:	401c0000 	.word	0x401c0000
 8005c30:	40140000 	.word	0x40140000
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	4baf      	ldr	r3, [pc, #700]	; (8005ef8 <_dtoa_r+0x8f0>)
 8005c3a:	f7fa fced 	bl	8000618 <__aeabi_dmul>
 8005c3e:	4606      	mov	r6, r0
 8005c40:	460f      	mov	r7, r1
 8005c42:	e7ad      	b.n	8005ba0 <_dtoa_r+0x598>
 8005c44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c48:	9d00      	ldr	r5, [sp, #0]
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	4630      	mov	r0, r6
 8005c50:	4639      	mov	r1, r7
 8005c52:	f7fa fe0b 	bl	800086c <__aeabi_ddiv>
 8005c56:	f7fa ff8f 	bl	8000b78 <__aeabi_d2iz>
 8005c5a:	9002      	str	r0, [sp, #8]
 8005c5c:	f7fa fc72 	bl	8000544 <__aeabi_i2d>
 8005c60:	4642      	mov	r2, r8
 8005c62:	464b      	mov	r3, r9
 8005c64:	f7fa fcd8 	bl	8000618 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f7fa fb1a 	bl	80002a8 <__aeabi_dsub>
 8005c74:	9e02      	ldr	r6, [sp, #8]
 8005c76:	9f01      	ldr	r7, [sp, #4]
 8005c78:	3630      	adds	r6, #48	; 0x30
 8005c7a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c7e:	9e00      	ldr	r6, [sp, #0]
 8005c80:	1bae      	subs	r6, r5, r6
 8005c82:	42b7      	cmp	r7, r6
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	d137      	bne.n	8005cfa <_dtoa_r+0x6f2>
 8005c8a:	f7fa fb0f 	bl	80002ac <__adddf3>
 8005c8e:	4642      	mov	r2, r8
 8005c90:	464b      	mov	r3, r9
 8005c92:	4606      	mov	r6, r0
 8005c94:	460f      	mov	r7, r1
 8005c96:	f7fa ff4f 	bl	8000b38 <__aeabi_dcmpgt>
 8005c9a:	b9c8      	cbnz	r0, 8005cd0 <_dtoa_r+0x6c8>
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa ff20 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ca8:	b110      	cbz	r0, 8005cb0 <_dtoa_r+0x6a8>
 8005caa:	9b02      	ldr	r3, [sp, #8]
 8005cac:	07d9      	lsls	r1, r3, #31
 8005cae:	d40f      	bmi.n	8005cd0 <_dtoa_r+0x6c8>
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	4659      	mov	r1, fp
 8005cb4:	f000 fe2d 	bl	8006912 <_Bfree>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	702b      	strb	r3, [r5, #0]
 8005cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cbe:	f10a 0001 	add.w	r0, sl, #1
 8005cc2:	6018      	str	r0, [r3, #0]
 8005cc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f43f acd9 	beq.w	800567e <_dtoa_r+0x76>
 8005ccc:	601d      	str	r5, [r3, #0]
 8005cce:	e4d6      	b.n	800567e <_dtoa_r+0x76>
 8005cd0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cdc:	2a39      	cmp	r2, #57	; 0x39
 8005cde:	d108      	bne.n	8005cf2 <_dtoa_r+0x6ea>
 8005ce0:	9a00      	ldr	r2, [sp, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d1f7      	bne.n	8005cd6 <_dtoa_r+0x6ce>
 8005ce6:	9a07      	ldr	r2, [sp, #28]
 8005ce8:	9900      	ldr	r1, [sp, #0]
 8005cea:	3201      	adds	r2, #1
 8005cec:	9207      	str	r2, [sp, #28]
 8005cee:	2230      	movs	r2, #48	; 0x30
 8005cf0:	700a      	strb	r2, [r1, #0]
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	3201      	adds	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	e78d      	b.n	8005c16 <_dtoa_r+0x60e>
 8005cfa:	4b7f      	ldr	r3, [pc, #508]	; (8005ef8 <_dtoa_r+0x8f0>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f7fa fc8b 	bl	8000618 <__aeabi_dmul>
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	4606      	mov	r6, r0
 8005d08:	460f      	mov	r7, r1
 8005d0a:	f7fa feed 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d09b      	beq.n	8005c4a <_dtoa_r+0x642>
 8005d12:	e7cd      	b.n	8005cb0 <_dtoa_r+0x6a8>
 8005d14:	9a08      	ldr	r2, [sp, #32]
 8005d16:	2a00      	cmp	r2, #0
 8005d18:	f000 80c4 	beq.w	8005ea4 <_dtoa_r+0x89c>
 8005d1c:	9a05      	ldr	r2, [sp, #20]
 8005d1e:	2a01      	cmp	r2, #1
 8005d20:	f300 80a8 	bgt.w	8005e74 <_dtoa_r+0x86c>
 8005d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	f000 80a0 	beq.w	8005e6c <_dtoa_r+0x864>
 8005d2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d30:	9e06      	ldr	r6, [sp, #24]
 8005d32:	4645      	mov	r5, r8
 8005d34:	9a04      	ldr	r2, [sp, #16]
 8005d36:	2101      	movs	r1, #1
 8005d38:	441a      	add	r2, r3
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4498      	add	r8, r3
 8005d3e:	9204      	str	r2, [sp, #16]
 8005d40:	f000 fe8a 	bl	8006a58 <__i2b>
 8005d44:	4607      	mov	r7, r0
 8005d46:	2d00      	cmp	r5, #0
 8005d48:	dd0b      	ble.n	8005d62 <_dtoa_r+0x75a>
 8005d4a:	9b04      	ldr	r3, [sp, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd08      	ble.n	8005d62 <_dtoa_r+0x75a>
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	bfa8      	it	ge
 8005d56:	462b      	movge	r3, r5
 8005d58:	eba8 0803 	sub.w	r8, r8, r3
 8005d5c:	1aed      	subs	r5, r5, r3
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	9b06      	ldr	r3, [sp, #24]
 8005d64:	b1fb      	cbz	r3, 8005da6 <_dtoa_r+0x79e>
 8005d66:	9b08      	ldr	r3, [sp, #32]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 809f 	beq.w	8005eac <_dtoa_r+0x8a4>
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	dd11      	ble.n	8005d96 <_dtoa_r+0x78e>
 8005d72:	4639      	mov	r1, r7
 8005d74:	4632      	mov	r2, r6
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 ff2a 	bl	8006bd0 <__pow5mult>
 8005d7c:	465a      	mov	r2, fp
 8005d7e:	4601      	mov	r1, r0
 8005d80:	4607      	mov	r7, r0
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 fe7e 	bl	8006a84 <__multiply>
 8005d88:	4659      	mov	r1, fp
 8005d8a:	9007      	str	r0, [sp, #28]
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f000 fdc0 	bl	8006912 <_Bfree>
 8005d92:	9b07      	ldr	r3, [sp, #28]
 8005d94:	469b      	mov	fp, r3
 8005d96:	9b06      	ldr	r3, [sp, #24]
 8005d98:	1b9a      	subs	r2, r3, r6
 8005d9a:	d004      	beq.n	8005da6 <_dtoa_r+0x79e>
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 ff16 	bl	8006bd0 <__pow5mult>
 8005da4:	4683      	mov	fp, r0
 8005da6:	2101      	movs	r1, #1
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fe55 	bl	8006a58 <__i2b>
 8005dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	4606      	mov	r6, r0
 8005db4:	dd7c      	ble.n	8005eb0 <_dtoa_r+0x8a8>
 8005db6:	461a      	mov	r2, r3
 8005db8:	4601      	mov	r1, r0
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 ff08 	bl	8006bd0 <__pow5mult>
 8005dc0:	9b05      	ldr	r3, [sp, #20]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	dd76      	ble.n	8005eb6 <_dtoa_r+0x8ae>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9306      	str	r3, [sp, #24]
 8005dcc:	6933      	ldr	r3, [r6, #16]
 8005dce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005dd2:	6918      	ldr	r0, [r3, #16]
 8005dd4:	f000 fdf0 	bl	80069b8 <__hi0bits>
 8005dd8:	f1c0 0020 	rsb	r0, r0, #32
 8005ddc:	9b04      	ldr	r3, [sp, #16]
 8005dde:	4418      	add	r0, r3
 8005de0:	f010 001f 	ands.w	r0, r0, #31
 8005de4:	f000 8086 	beq.w	8005ef4 <_dtoa_r+0x8ec>
 8005de8:	f1c0 0320 	rsb	r3, r0, #32
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	dd7f      	ble.n	8005ef0 <_dtoa_r+0x8e8>
 8005df0:	f1c0 001c 	rsb	r0, r0, #28
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	4403      	add	r3, r0
 8005df8:	4480      	add	r8, r0
 8005dfa:	4405      	add	r5, r0
 8005dfc:	9304      	str	r3, [sp, #16]
 8005dfe:	f1b8 0f00 	cmp.w	r8, #0
 8005e02:	dd05      	ble.n	8005e10 <_dtoa_r+0x808>
 8005e04:	4659      	mov	r1, fp
 8005e06:	4642      	mov	r2, r8
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 ff21 	bl	8006c50 <__lshift>
 8005e0e:	4683      	mov	fp, r0
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dd05      	ble.n	8005e22 <_dtoa_r+0x81a>
 8005e16:	4631      	mov	r1, r6
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 ff18 	bl	8006c50 <__lshift>
 8005e20:	4606      	mov	r6, r0
 8005e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d069      	beq.n	8005efc <_dtoa_r+0x8f4>
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4658      	mov	r0, fp
 8005e2c:	f000 ff7c 	bl	8006d28 <__mcmp>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	da63      	bge.n	8005efc <_dtoa_r+0x8f4>
 8005e34:	2300      	movs	r3, #0
 8005e36:	4659      	mov	r1, fp
 8005e38:	220a      	movs	r2, #10
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 fd72 	bl	8006924 <__multadd>
 8005e40:	9b08      	ldr	r3, [sp, #32]
 8005e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e46:	4683      	mov	fp, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 818e 	beq.w	800616a <_dtoa_r+0xb62>
 8005e4e:	4639      	mov	r1, r7
 8005e50:	2300      	movs	r3, #0
 8005e52:	220a      	movs	r2, #10
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 fd65 	bl	8006924 <__multadd>
 8005e5a:	f1b9 0f00 	cmp.w	r9, #0
 8005e5e:	4607      	mov	r7, r0
 8005e60:	f300 808e 	bgt.w	8005f80 <_dtoa_r+0x978>
 8005e64:	9b05      	ldr	r3, [sp, #20]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	dc50      	bgt.n	8005f0c <_dtoa_r+0x904>
 8005e6a:	e089      	b.n	8005f80 <_dtoa_r+0x978>
 8005e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e72:	e75d      	b.n	8005d30 <_dtoa_r+0x728>
 8005e74:	9b01      	ldr	r3, [sp, #4]
 8005e76:	1e5e      	subs	r6, r3, #1
 8005e78:	9b06      	ldr	r3, [sp, #24]
 8005e7a:	42b3      	cmp	r3, r6
 8005e7c:	bfbf      	itttt	lt
 8005e7e:	9b06      	ldrlt	r3, [sp, #24]
 8005e80:	9606      	strlt	r6, [sp, #24]
 8005e82:	1af2      	sublt	r2, r6, r3
 8005e84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005e86:	bfb6      	itet	lt
 8005e88:	189b      	addlt	r3, r3, r2
 8005e8a:	1b9e      	subge	r6, r3, r6
 8005e8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	bfb8      	it	lt
 8005e92:	2600      	movlt	r6, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bfb5      	itete	lt
 8005e98:	eba8 0503 	sublt.w	r5, r8, r3
 8005e9c:	9b01      	ldrge	r3, [sp, #4]
 8005e9e:	2300      	movlt	r3, #0
 8005ea0:	4645      	movge	r5, r8
 8005ea2:	e747      	b.n	8005d34 <_dtoa_r+0x72c>
 8005ea4:	9e06      	ldr	r6, [sp, #24]
 8005ea6:	9f08      	ldr	r7, [sp, #32]
 8005ea8:	4645      	mov	r5, r8
 8005eaa:	e74c      	b.n	8005d46 <_dtoa_r+0x73e>
 8005eac:	9a06      	ldr	r2, [sp, #24]
 8005eae:	e775      	b.n	8005d9c <_dtoa_r+0x794>
 8005eb0:	9b05      	ldr	r3, [sp, #20]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	dc18      	bgt.n	8005ee8 <_dtoa_r+0x8e0>
 8005eb6:	9b02      	ldr	r3, [sp, #8]
 8005eb8:	b9b3      	cbnz	r3, 8005ee8 <_dtoa_r+0x8e0>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ec0:	b9a3      	cbnz	r3, 8005eec <_dtoa_r+0x8e4>
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec8:	0d1b      	lsrs	r3, r3, #20
 8005eca:	051b      	lsls	r3, r3, #20
 8005ecc:	b12b      	cbz	r3, 8005eda <_dtoa_r+0x8d2>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	f108 0801 	add.w	r8, r8, #1
 8005ed8:	2301      	movs	r3, #1
 8005eda:	9306      	str	r3, [sp, #24]
 8005edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f47f af74 	bne.w	8005dcc <_dtoa_r+0x7c4>
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	e779      	b.n	8005ddc <_dtoa_r+0x7d4>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e7f6      	b.n	8005eda <_dtoa_r+0x8d2>
 8005eec:	9b02      	ldr	r3, [sp, #8]
 8005eee:	e7f4      	b.n	8005eda <_dtoa_r+0x8d2>
 8005ef0:	d085      	beq.n	8005dfe <_dtoa_r+0x7f6>
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	301c      	adds	r0, #28
 8005ef6:	e77d      	b.n	8005df4 <_dtoa_r+0x7ec>
 8005ef8:	40240000 	.word	0x40240000
 8005efc:	9b01      	ldr	r3, [sp, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dc38      	bgt.n	8005f74 <_dtoa_r+0x96c>
 8005f02:	9b05      	ldr	r3, [sp, #20]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	dd35      	ble.n	8005f74 <_dtoa_r+0x96c>
 8005f08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f0c:	f1b9 0f00 	cmp.w	r9, #0
 8005f10:	d10d      	bne.n	8005f2e <_dtoa_r+0x926>
 8005f12:	4631      	mov	r1, r6
 8005f14:	464b      	mov	r3, r9
 8005f16:	2205      	movs	r2, #5
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f000 fd03 	bl	8006924 <__multadd>
 8005f1e:	4601      	mov	r1, r0
 8005f20:	4606      	mov	r6, r0
 8005f22:	4658      	mov	r0, fp
 8005f24:	f000 ff00 	bl	8006d28 <__mcmp>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f73f adbe 	bgt.w	8005aaa <_dtoa_r+0x4a2>
 8005f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f30:	9d00      	ldr	r5, [sp, #0]
 8005f32:	ea6f 0a03 	mvn.w	sl, r3
 8005f36:	f04f 0800 	mov.w	r8, #0
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 fce8 	bl	8006912 <_Bfree>
 8005f42:	2f00      	cmp	r7, #0
 8005f44:	f43f aeb4 	beq.w	8005cb0 <_dtoa_r+0x6a8>
 8005f48:	f1b8 0f00 	cmp.w	r8, #0
 8005f4c:	d005      	beq.n	8005f5a <_dtoa_r+0x952>
 8005f4e:	45b8      	cmp	r8, r7
 8005f50:	d003      	beq.n	8005f5a <_dtoa_r+0x952>
 8005f52:	4641      	mov	r1, r8
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fcdc 	bl	8006912 <_Bfree>
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 fcd8 	bl	8006912 <_Bfree>
 8005f62:	e6a5      	b.n	8005cb0 <_dtoa_r+0x6a8>
 8005f64:	2600      	movs	r6, #0
 8005f66:	4637      	mov	r7, r6
 8005f68:	e7e1      	b.n	8005f2e <_dtoa_r+0x926>
 8005f6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005f6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005f70:	4637      	mov	r7, r6
 8005f72:	e59a      	b.n	8005aaa <_dtoa_r+0x4a2>
 8005f74:	9b08      	ldr	r3, [sp, #32]
 8005f76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80fc 	beq.w	8006178 <_dtoa_r+0xb70>
 8005f80:	2d00      	cmp	r5, #0
 8005f82:	dd05      	ble.n	8005f90 <_dtoa_r+0x988>
 8005f84:	4639      	mov	r1, r7
 8005f86:	462a      	mov	r2, r5
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fe61 	bl	8006c50 <__lshift>
 8005f8e:	4607      	mov	r7, r0
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d05b      	beq.n	800604e <_dtoa_r+0xa46>
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 fc95 	bl	80068c8 <_Balloc>
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	b920      	cbnz	r0, 8005fac <_dtoa_r+0x9a4>
 8005fa2:	4b80      	ldr	r3, [pc, #512]	; (80061a4 <_dtoa_r+0xb9c>)
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005faa:	e45b      	b.n	8005864 <_dtoa_r+0x25c>
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	3202      	adds	r2, #2
 8005fb0:	0092      	lsls	r2, r2, #2
 8005fb2:	f107 010c 	add.w	r1, r7, #12
 8005fb6:	300c      	adds	r0, #12
 8005fb8:	f000 fc6c 	bl	8006894 <memcpy>
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 fe45 	bl	8006c50 <__lshift>
 8005fc6:	9b00      	ldr	r3, [sp, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	444b      	add	r3, r9
 8005fd0:	9307      	str	r3, [sp, #28]
 8005fd2:	9b02      	ldr	r3, [sp, #8]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	46b8      	mov	r8, r7
 8005fda:	9306      	str	r3, [sp, #24]
 8005fdc:	4607      	mov	r7, r0
 8005fde:	9b01      	ldr	r3, [sp, #4]
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	4658      	mov	r0, fp
 8005fe6:	9302      	str	r3, [sp, #8]
 8005fe8:	f7ff fa82 	bl	80054f0 <quorem>
 8005fec:	4603      	mov	r3, r0
 8005fee:	3330      	adds	r3, #48	; 0x30
 8005ff0:	9004      	str	r0, [sp, #16]
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	4658      	mov	r0, fp
 8005ff6:	9308      	str	r3, [sp, #32]
 8005ff8:	f000 fe96 	bl	8006d28 <__mcmp>
 8005ffc:	463a      	mov	r2, r7
 8005ffe:	4681      	mov	r9, r0
 8006000:	4631      	mov	r1, r6
 8006002:	4620      	mov	r0, r4
 8006004:	f000 feac 	bl	8006d60 <__mdiff>
 8006008:	68c2      	ldr	r2, [r0, #12]
 800600a:	9b08      	ldr	r3, [sp, #32]
 800600c:	4605      	mov	r5, r0
 800600e:	bb02      	cbnz	r2, 8006052 <_dtoa_r+0xa4a>
 8006010:	4601      	mov	r1, r0
 8006012:	4658      	mov	r0, fp
 8006014:	f000 fe88 	bl	8006d28 <__mcmp>
 8006018:	9b08      	ldr	r3, [sp, #32]
 800601a:	4602      	mov	r2, r0
 800601c:	4629      	mov	r1, r5
 800601e:	4620      	mov	r0, r4
 8006020:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006024:	f000 fc75 	bl	8006912 <_Bfree>
 8006028:	9b05      	ldr	r3, [sp, #20]
 800602a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800602c:	9d01      	ldr	r5, [sp, #4]
 800602e:	ea43 0102 	orr.w	r1, r3, r2
 8006032:	9b06      	ldr	r3, [sp, #24]
 8006034:	430b      	orrs	r3, r1
 8006036:	9b08      	ldr	r3, [sp, #32]
 8006038:	d10d      	bne.n	8006056 <_dtoa_r+0xa4e>
 800603a:	2b39      	cmp	r3, #57	; 0x39
 800603c:	d029      	beq.n	8006092 <_dtoa_r+0xa8a>
 800603e:	f1b9 0f00 	cmp.w	r9, #0
 8006042:	dd01      	ble.n	8006048 <_dtoa_r+0xa40>
 8006044:	9b04      	ldr	r3, [sp, #16]
 8006046:	3331      	adds	r3, #49	; 0x31
 8006048:	9a02      	ldr	r2, [sp, #8]
 800604a:	7013      	strb	r3, [r2, #0]
 800604c:	e775      	b.n	8005f3a <_dtoa_r+0x932>
 800604e:	4638      	mov	r0, r7
 8006050:	e7b9      	b.n	8005fc6 <_dtoa_r+0x9be>
 8006052:	2201      	movs	r2, #1
 8006054:	e7e2      	b.n	800601c <_dtoa_r+0xa14>
 8006056:	f1b9 0f00 	cmp.w	r9, #0
 800605a:	db06      	blt.n	800606a <_dtoa_r+0xa62>
 800605c:	9905      	ldr	r1, [sp, #20]
 800605e:	ea41 0909 	orr.w	r9, r1, r9
 8006062:	9906      	ldr	r1, [sp, #24]
 8006064:	ea59 0101 	orrs.w	r1, r9, r1
 8006068:	d120      	bne.n	80060ac <_dtoa_r+0xaa4>
 800606a:	2a00      	cmp	r2, #0
 800606c:	ddec      	ble.n	8006048 <_dtoa_r+0xa40>
 800606e:	4659      	mov	r1, fp
 8006070:	2201      	movs	r2, #1
 8006072:	4620      	mov	r0, r4
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	f000 fdeb 	bl	8006c50 <__lshift>
 800607a:	4631      	mov	r1, r6
 800607c:	4683      	mov	fp, r0
 800607e:	f000 fe53 	bl	8006d28 <__mcmp>
 8006082:	2800      	cmp	r0, #0
 8006084:	9b01      	ldr	r3, [sp, #4]
 8006086:	dc02      	bgt.n	800608e <_dtoa_r+0xa86>
 8006088:	d1de      	bne.n	8006048 <_dtoa_r+0xa40>
 800608a:	07da      	lsls	r2, r3, #31
 800608c:	d5dc      	bpl.n	8006048 <_dtoa_r+0xa40>
 800608e:	2b39      	cmp	r3, #57	; 0x39
 8006090:	d1d8      	bne.n	8006044 <_dtoa_r+0xa3c>
 8006092:	9a02      	ldr	r2, [sp, #8]
 8006094:	2339      	movs	r3, #57	; 0x39
 8006096:	7013      	strb	r3, [r2, #0]
 8006098:	462b      	mov	r3, r5
 800609a:	461d      	mov	r5, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060a2:	2a39      	cmp	r2, #57	; 0x39
 80060a4:	d050      	beq.n	8006148 <_dtoa_r+0xb40>
 80060a6:	3201      	adds	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e746      	b.n	8005f3a <_dtoa_r+0x932>
 80060ac:	2a00      	cmp	r2, #0
 80060ae:	dd03      	ble.n	80060b8 <_dtoa_r+0xab0>
 80060b0:	2b39      	cmp	r3, #57	; 0x39
 80060b2:	d0ee      	beq.n	8006092 <_dtoa_r+0xa8a>
 80060b4:	3301      	adds	r3, #1
 80060b6:	e7c7      	b.n	8006048 <_dtoa_r+0xa40>
 80060b8:	9a01      	ldr	r2, [sp, #4]
 80060ba:	9907      	ldr	r1, [sp, #28]
 80060bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060c0:	428a      	cmp	r2, r1
 80060c2:	d02a      	beq.n	800611a <_dtoa_r+0xb12>
 80060c4:	4659      	mov	r1, fp
 80060c6:	2300      	movs	r3, #0
 80060c8:	220a      	movs	r2, #10
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fc2a 	bl	8006924 <__multadd>
 80060d0:	45b8      	cmp	r8, r7
 80060d2:	4683      	mov	fp, r0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	f04f 020a 	mov.w	r2, #10
 80060dc:	4641      	mov	r1, r8
 80060de:	4620      	mov	r0, r4
 80060e0:	d107      	bne.n	80060f2 <_dtoa_r+0xaea>
 80060e2:	f000 fc1f 	bl	8006924 <__multadd>
 80060e6:	4680      	mov	r8, r0
 80060e8:	4607      	mov	r7, r0
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	3301      	adds	r3, #1
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	e775      	b.n	8005fde <_dtoa_r+0x9d6>
 80060f2:	f000 fc17 	bl	8006924 <__multadd>
 80060f6:	4639      	mov	r1, r7
 80060f8:	4680      	mov	r8, r0
 80060fa:	2300      	movs	r3, #0
 80060fc:	220a      	movs	r2, #10
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 fc10 	bl	8006924 <__multadd>
 8006104:	4607      	mov	r7, r0
 8006106:	e7f0      	b.n	80060ea <_dtoa_r+0xae2>
 8006108:	f1b9 0f00 	cmp.w	r9, #0
 800610c:	9a00      	ldr	r2, [sp, #0]
 800610e:	bfcc      	ite	gt
 8006110:	464d      	movgt	r5, r9
 8006112:	2501      	movle	r5, #1
 8006114:	4415      	add	r5, r2
 8006116:	f04f 0800 	mov.w	r8, #0
 800611a:	4659      	mov	r1, fp
 800611c:	2201      	movs	r2, #1
 800611e:	4620      	mov	r0, r4
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	f000 fd95 	bl	8006c50 <__lshift>
 8006126:	4631      	mov	r1, r6
 8006128:	4683      	mov	fp, r0
 800612a:	f000 fdfd 	bl	8006d28 <__mcmp>
 800612e:	2800      	cmp	r0, #0
 8006130:	dcb2      	bgt.n	8006098 <_dtoa_r+0xa90>
 8006132:	d102      	bne.n	800613a <_dtoa_r+0xb32>
 8006134:	9b01      	ldr	r3, [sp, #4]
 8006136:	07db      	lsls	r3, r3, #31
 8006138:	d4ae      	bmi.n	8006098 <_dtoa_r+0xa90>
 800613a:	462b      	mov	r3, r5
 800613c:	461d      	mov	r5, r3
 800613e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006142:	2a30      	cmp	r2, #48	; 0x30
 8006144:	d0fa      	beq.n	800613c <_dtoa_r+0xb34>
 8006146:	e6f8      	b.n	8005f3a <_dtoa_r+0x932>
 8006148:	9a00      	ldr	r2, [sp, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d1a5      	bne.n	800609a <_dtoa_r+0xa92>
 800614e:	f10a 0a01 	add.w	sl, sl, #1
 8006152:	2331      	movs	r3, #49	; 0x31
 8006154:	e779      	b.n	800604a <_dtoa_r+0xa42>
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <_dtoa_r+0xba0>)
 8006158:	f7ff bab1 	b.w	80056be <_dtoa_r+0xb6>
 800615c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800615e:	2b00      	cmp	r3, #0
 8006160:	f47f aa93 	bne.w	800568a <_dtoa_r+0x82>
 8006164:	4b11      	ldr	r3, [pc, #68]	; (80061ac <_dtoa_r+0xba4>)
 8006166:	f7ff baaa 	b.w	80056be <_dtoa_r+0xb6>
 800616a:	f1b9 0f00 	cmp.w	r9, #0
 800616e:	dc03      	bgt.n	8006178 <_dtoa_r+0xb70>
 8006170:	9b05      	ldr	r3, [sp, #20]
 8006172:	2b02      	cmp	r3, #2
 8006174:	f73f aeca 	bgt.w	8005f0c <_dtoa_r+0x904>
 8006178:	9d00      	ldr	r5, [sp, #0]
 800617a:	4631      	mov	r1, r6
 800617c:	4658      	mov	r0, fp
 800617e:	f7ff f9b7 	bl	80054f0 <quorem>
 8006182:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006186:	f805 3b01 	strb.w	r3, [r5], #1
 800618a:	9a00      	ldr	r2, [sp, #0]
 800618c:	1aaa      	subs	r2, r5, r2
 800618e:	4591      	cmp	r9, r2
 8006190:	ddba      	ble.n	8006108 <_dtoa_r+0xb00>
 8006192:	4659      	mov	r1, fp
 8006194:	2300      	movs	r3, #0
 8006196:	220a      	movs	r2, #10
 8006198:	4620      	mov	r0, r4
 800619a:	f000 fbc3 	bl	8006924 <__multadd>
 800619e:	4683      	mov	fp, r0
 80061a0:	e7eb      	b.n	800617a <_dtoa_r+0xb72>
 80061a2:	bf00      	nop
 80061a4:	08008cdd 	.word	0x08008cdd
 80061a8:	08008cae 	.word	0x08008cae
 80061ac:	08008cd4 	.word	0x08008cd4

080061b0 <__libc_fini_array>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4d07      	ldr	r5, [pc, #28]	; (80061d0 <__libc_fini_array+0x20>)
 80061b4:	4c07      	ldr	r4, [pc, #28]	; (80061d4 <__libc_fini_array+0x24>)
 80061b6:	1b64      	subs	r4, r4, r5
 80061b8:	10a4      	asrs	r4, r4, #2
 80061ba:	b91c      	cbnz	r4, 80061c4 <__libc_fini_array+0x14>
 80061bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061c0:	f002 bc84 	b.w	8008acc <_fini>
 80061c4:	3c01      	subs	r4, #1
 80061c6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80061ca:	4798      	blx	r3
 80061cc:	e7f5      	b.n	80061ba <__libc_fini_array+0xa>
 80061ce:	bf00      	nop
 80061d0:	08009024 	.word	0x08009024
 80061d4:	08009028 	.word	0x08009028

080061d8 <_malloc_trim_r>:
 80061d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061dc:	4606      	mov	r6, r0
 80061de:	2008      	movs	r0, #8
 80061e0:	460c      	mov	r4, r1
 80061e2:	f000 ff77 	bl	80070d4 <sysconf>
 80061e6:	4f23      	ldr	r7, [pc, #140]	; (8006274 <_malloc_trim_r+0x9c>)
 80061e8:	4680      	mov	r8, r0
 80061ea:	4630      	mov	r0, r6
 80061ec:	f000 fb60 	bl	80068b0 <__malloc_lock>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	685d      	ldr	r5, [r3, #4]
 80061f4:	f025 0503 	bic.w	r5, r5, #3
 80061f8:	1b2c      	subs	r4, r5, r4
 80061fa:	3c11      	subs	r4, #17
 80061fc:	4444      	add	r4, r8
 80061fe:	fbb4 f4f8 	udiv	r4, r4, r8
 8006202:	3c01      	subs	r4, #1
 8006204:	fb08 f404 	mul.w	r4, r8, r4
 8006208:	45a0      	cmp	r8, r4
 800620a:	dd05      	ble.n	8006218 <_malloc_trim_r+0x40>
 800620c:	4630      	mov	r0, r6
 800620e:	f000 fb55 	bl	80068bc <__malloc_unlock>
 8006212:	2000      	movs	r0, #0
 8006214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006218:	2100      	movs	r1, #0
 800621a:	4630      	mov	r0, r6
 800621c:	f000 febc 	bl	8006f98 <_sbrk_r>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	442b      	add	r3, r5
 8006224:	4298      	cmp	r0, r3
 8006226:	d1f1      	bne.n	800620c <_malloc_trim_r+0x34>
 8006228:	4261      	negs	r1, r4
 800622a:	4630      	mov	r0, r6
 800622c:	f000 feb4 	bl	8006f98 <_sbrk_r>
 8006230:	3001      	adds	r0, #1
 8006232:	d110      	bne.n	8006256 <_malloc_trim_r+0x7e>
 8006234:	2100      	movs	r1, #0
 8006236:	4630      	mov	r0, r6
 8006238:	f000 feae 	bl	8006f98 <_sbrk_r>
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	1a83      	subs	r3, r0, r2
 8006240:	2b0f      	cmp	r3, #15
 8006242:	dde3      	ble.n	800620c <_malloc_trim_r+0x34>
 8006244:	490c      	ldr	r1, [pc, #48]	; (8006278 <_malloc_trim_r+0xa0>)
 8006246:	6809      	ldr	r1, [r1, #0]
 8006248:	1a40      	subs	r0, r0, r1
 800624a:	490c      	ldr	r1, [pc, #48]	; (800627c <_malloc_trim_r+0xa4>)
 800624c:	f043 0301 	orr.w	r3, r3, #1
 8006250:	6008      	str	r0, [r1, #0]
 8006252:	6053      	str	r3, [r2, #4]
 8006254:	e7da      	b.n	800620c <_malloc_trim_r+0x34>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4a08      	ldr	r2, [pc, #32]	; (800627c <_malloc_trim_r+0xa4>)
 800625a:	1b2d      	subs	r5, r5, r4
 800625c:	f045 0501 	orr.w	r5, r5, #1
 8006260:	605d      	str	r5, [r3, #4]
 8006262:	6813      	ldr	r3, [r2, #0]
 8006264:	4630      	mov	r0, r6
 8006266:	1b1c      	subs	r4, r3, r4
 8006268:	6014      	str	r4, [r2, #0]
 800626a:	f000 fb27 	bl	80068bc <__malloc_unlock>
 800626e:	2001      	movs	r0, #1
 8006270:	e7d0      	b.n	8006214 <_malloc_trim_r+0x3c>
 8006272:	bf00      	nop
 8006274:	2000044c 	.word	0x2000044c
 8006278:	20000854 	.word	0x20000854
 800627c:	20000b50 	.word	0x20000b50

08006280 <_free_r>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	4605      	mov	r5, r0
 8006284:	460f      	mov	r7, r1
 8006286:	2900      	cmp	r1, #0
 8006288:	f000 80b1 	beq.w	80063ee <_free_r+0x16e>
 800628c:	f000 fb10 	bl	80068b0 <__malloc_lock>
 8006290:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006294:	4856      	ldr	r0, [pc, #344]	; (80063f0 <_free_r+0x170>)
 8006296:	f022 0401 	bic.w	r4, r2, #1
 800629a:	f1a7 0308 	sub.w	r3, r7, #8
 800629e:	eb03 0c04 	add.w	ip, r3, r4
 80062a2:	6881      	ldr	r1, [r0, #8]
 80062a4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80062a8:	4561      	cmp	r1, ip
 80062aa:	f026 0603 	bic.w	r6, r6, #3
 80062ae:	f002 0201 	and.w	r2, r2, #1
 80062b2:	d11b      	bne.n	80062ec <_free_r+0x6c>
 80062b4:	4434      	add	r4, r6
 80062b6:	b93a      	cbnz	r2, 80062c8 <_free_r+0x48>
 80062b8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	4414      	add	r4, r2
 80062c0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80062c4:	60ca      	str	r2, [r1, #12]
 80062c6:	6091      	str	r1, [r2, #8]
 80062c8:	f044 0201 	orr.w	r2, r4, #1
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	6083      	str	r3, [r0, #8]
 80062d0:	4b48      	ldr	r3, [pc, #288]	; (80063f4 <_free_r+0x174>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	d804      	bhi.n	80062e2 <_free_r+0x62>
 80062d8:	4b47      	ldr	r3, [pc, #284]	; (80063f8 <_free_r+0x178>)
 80062da:	4628      	mov	r0, r5
 80062dc:	6819      	ldr	r1, [r3, #0]
 80062de:	f7ff ff7b 	bl	80061d8 <_malloc_trim_r>
 80062e2:	4628      	mov	r0, r5
 80062e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062e8:	f000 bae8 	b.w	80068bc <__malloc_unlock>
 80062ec:	f8cc 6004 	str.w	r6, [ip, #4]
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	d138      	bne.n	8006366 <_free_r+0xe6>
 80062f4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80062f8:	1a5b      	subs	r3, r3, r1
 80062fa:	440c      	add	r4, r1
 80062fc:	6899      	ldr	r1, [r3, #8]
 80062fe:	f100 0708 	add.w	r7, r0, #8
 8006302:	42b9      	cmp	r1, r7
 8006304:	d031      	beq.n	800636a <_free_r+0xea>
 8006306:	68df      	ldr	r7, [r3, #12]
 8006308:	60cf      	str	r7, [r1, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	eb0c 0106 	add.w	r1, ip, r6
 8006310:	6849      	ldr	r1, [r1, #4]
 8006312:	07c9      	lsls	r1, r1, #31
 8006314:	d40b      	bmi.n	800632e <_free_r+0xae>
 8006316:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800631a:	4434      	add	r4, r6
 800631c:	bb3a      	cbnz	r2, 800636e <_free_r+0xee>
 800631e:	4e37      	ldr	r6, [pc, #220]	; (80063fc <_free_r+0x17c>)
 8006320:	42b1      	cmp	r1, r6
 8006322:	d124      	bne.n	800636e <_free_r+0xee>
 8006324:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006328:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800632c:	2201      	movs	r2, #1
 800632e:	f044 0101 	orr.w	r1, r4, #1
 8006332:	6059      	str	r1, [r3, #4]
 8006334:	511c      	str	r4, [r3, r4]
 8006336:	2a00      	cmp	r2, #0
 8006338:	d1d3      	bne.n	80062e2 <_free_r+0x62>
 800633a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800633e:	d21b      	bcs.n	8006378 <_free_r+0xf8>
 8006340:	0961      	lsrs	r1, r4, #5
 8006342:	08e2      	lsrs	r2, r4, #3
 8006344:	2401      	movs	r4, #1
 8006346:	408c      	lsls	r4, r1
 8006348:	6841      	ldr	r1, [r0, #4]
 800634a:	3201      	adds	r2, #1
 800634c:	430c      	orrs	r4, r1
 800634e:	6044      	str	r4, [r0, #4]
 8006350:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8006354:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8006358:	3908      	subs	r1, #8
 800635a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800635e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8006362:	60e3      	str	r3, [r4, #12]
 8006364:	e7bd      	b.n	80062e2 <_free_r+0x62>
 8006366:	2200      	movs	r2, #0
 8006368:	e7d0      	b.n	800630c <_free_r+0x8c>
 800636a:	2201      	movs	r2, #1
 800636c:	e7ce      	b.n	800630c <_free_r+0x8c>
 800636e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8006372:	60ce      	str	r6, [r1, #12]
 8006374:	60b1      	str	r1, [r6, #8]
 8006376:	e7da      	b.n	800632e <_free_r+0xae>
 8006378:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800637c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8006380:	d214      	bcs.n	80063ac <_free_r+0x12c>
 8006382:	09a2      	lsrs	r2, r4, #6
 8006384:	3238      	adds	r2, #56	; 0x38
 8006386:	1c51      	adds	r1, r2, #1
 8006388:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800638c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8006390:	428e      	cmp	r6, r1
 8006392:	d125      	bne.n	80063e0 <_free_r+0x160>
 8006394:	2401      	movs	r4, #1
 8006396:	1092      	asrs	r2, r2, #2
 8006398:	fa04 f202 	lsl.w	r2, r4, r2
 800639c:	6844      	ldr	r4, [r0, #4]
 800639e:	4322      	orrs	r2, r4
 80063a0:	6042      	str	r2, [r0, #4]
 80063a2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80063a6:	60b3      	str	r3, [r6, #8]
 80063a8:	60cb      	str	r3, [r1, #12]
 80063aa:	e79a      	b.n	80062e2 <_free_r+0x62>
 80063ac:	2a14      	cmp	r2, #20
 80063ae:	d801      	bhi.n	80063b4 <_free_r+0x134>
 80063b0:	325b      	adds	r2, #91	; 0x5b
 80063b2:	e7e8      	b.n	8006386 <_free_r+0x106>
 80063b4:	2a54      	cmp	r2, #84	; 0x54
 80063b6:	d802      	bhi.n	80063be <_free_r+0x13e>
 80063b8:	0b22      	lsrs	r2, r4, #12
 80063ba:	326e      	adds	r2, #110	; 0x6e
 80063bc:	e7e3      	b.n	8006386 <_free_r+0x106>
 80063be:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80063c2:	d802      	bhi.n	80063ca <_free_r+0x14a>
 80063c4:	0be2      	lsrs	r2, r4, #15
 80063c6:	3277      	adds	r2, #119	; 0x77
 80063c8:	e7dd      	b.n	8006386 <_free_r+0x106>
 80063ca:	f240 5154 	movw	r1, #1364	; 0x554
 80063ce:	428a      	cmp	r2, r1
 80063d0:	bf9a      	itte	ls
 80063d2:	0ca2      	lsrls	r2, r4, #18
 80063d4:	327c      	addls	r2, #124	; 0x7c
 80063d6:	227e      	movhi	r2, #126	; 0x7e
 80063d8:	e7d5      	b.n	8006386 <_free_r+0x106>
 80063da:	6889      	ldr	r1, [r1, #8]
 80063dc:	428e      	cmp	r6, r1
 80063de:	d004      	beq.n	80063ea <_free_r+0x16a>
 80063e0:	684a      	ldr	r2, [r1, #4]
 80063e2:	f022 0203 	bic.w	r2, r2, #3
 80063e6:	42a2      	cmp	r2, r4
 80063e8:	d8f7      	bhi.n	80063da <_free_r+0x15a>
 80063ea:	68ce      	ldr	r6, [r1, #12]
 80063ec:	e7d9      	b.n	80063a2 <_free_r+0x122>
 80063ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f0:	2000044c 	.word	0x2000044c
 80063f4:	20000858 	.word	0x20000858
 80063f8:	20000b80 	.word	0x20000b80
 80063fc:	20000454 	.word	0x20000454

08006400 <_localeconv_r>:
 8006400:	4800      	ldr	r0, [pc, #0]	; (8006404 <_localeconv_r+0x4>)
 8006402:	4770      	bx	lr
 8006404:	2000094c 	.word	0x2000094c

08006408 <__retarget_lock_init_recursive>:
 8006408:	4770      	bx	lr

0800640a <__retarget_lock_close_recursive>:
 800640a:	4770      	bx	lr

0800640c <__retarget_lock_acquire_recursive>:
 800640c:	4770      	bx	lr

0800640e <__retarget_lock_release_recursive>:
 800640e:	4770      	bx	lr

08006410 <_malloc_r>:
 8006410:	f101 030b 	add.w	r3, r1, #11
 8006414:	2b16      	cmp	r3, #22
 8006416:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641a:	4605      	mov	r5, r0
 800641c:	d906      	bls.n	800642c <_malloc_r+0x1c>
 800641e:	f033 0707 	bics.w	r7, r3, #7
 8006422:	d504      	bpl.n	800642e <_malloc_r+0x1e>
 8006424:	230c      	movs	r3, #12
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	2400      	movs	r4, #0
 800642a:	e1ae      	b.n	800678a <_malloc_r+0x37a>
 800642c:	2710      	movs	r7, #16
 800642e:	42b9      	cmp	r1, r7
 8006430:	d8f8      	bhi.n	8006424 <_malloc_r+0x14>
 8006432:	4628      	mov	r0, r5
 8006434:	f000 fa3c 	bl	80068b0 <__malloc_lock>
 8006438:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800643c:	4ec3      	ldr	r6, [pc, #780]	; (800674c <_malloc_r+0x33c>)
 800643e:	d238      	bcs.n	80064b2 <_malloc_r+0xa2>
 8006440:	f107 0208 	add.w	r2, r7, #8
 8006444:	4432      	add	r2, r6
 8006446:	f1a2 0108 	sub.w	r1, r2, #8
 800644a:	6854      	ldr	r4, [r2, #4]
 800644c:	428c      	cmp	r4, r1
 800644e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8006452:	d102      	bne.n	800645a <_malloc_r+0x4a>
 8006454:	68d4      	ldr	r4, [r2, #12]
 8006456:	42a2      	cmp	r2, r4
 8006458:	d010      	beq.n	800647c <_malloc_r+0x6c>
 800645a:	6863      	ldr	r3, [r4, #4]
 800645c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006460:	f023 0303 	bic.w	r3, r3, #3
 8006464:	60ca      	str	r2, [r1, #12]
 8006466:	4423      	add	r3, r4
 8006468:	6091      	str	r1, [r2, #8]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	605a      	str	r2, [r3, #4]
 8006472:	4628      	mov	r0, r5
 8006474:	f000 fa22 	bl	80068bc <__malloc_unlock>
 8006478:	3408      	adds	r4, #8
 800647a:	e186      	b.n	800678a <_malloc_r+0x37a>
 800647c:	3302      	adds	r3, #2
 800647e:	4ab4      	ldr	r2, [pc, #720]	; (8006750 <_malloc_r+0x340>)
 8006480:	6934      	ldr	r4, [r6, #16]
 8006482:	4294      	cmp	r4, r2
 8006484:	4611      	mov	r1, r2
 8006486:	d077      	beq.n	8006578 <_malloc_r+0x168>
 8006488:	6860      	ldr	r0, [r4, #4]
 800648a:	f020 0c03 	bic.w	ip, r0, #3
 800648e:	ebac 0007 	sub.w	r0, ip, r7
 8006492:	280f      	cmp	r0, #15
 8006494:	dd48      	ble.n	8006528 <_malloc_r+0x118>
 8006496:	19e1      	adds	r1, r4, r7
 8006498:	f040 0301 	orr.w	r3, r0, #1
 800649c:	f047 0701 	orr.w	r7, r7, #1
 80064a0:	6067      	str	r7, [r4, #4]
 80064a2:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80064a6:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80064aa:	604b      	str	r3, [r1, #4]
 80064ac:	f844 000c 	str.w	r0, [r4, ip]
 80064b0:	e7df      	b.n	8006472 <_malloc_r+0x62>
 80064b2:	0a7b      	lsrs	r3, r7, #9
 80064b4:	d02a      	beq.n	800650c <_malloc_r+0xfc>
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d812      	bhi.n	80064e0 <_malloc_r+0xd0>
 80064ba:	09bb      	lsrs	r3, r7, #6
 80064bc:	3338      	adds	r3, #56	; 0x38
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80064c4:	f1a2 0c08 	sub.w	ip, r2, #8
 80064c8:	6854      	ldr	r4, [r2, #4]
 80064ca:	4564      	cmp	r4, ip
 80064cc:	d006      	beq.n	80064dc <_malloc_r+0xcc>
 80064ce:	6862      	ldr	r2, [r4, #4]
 80064d0:	f022 0203 	bic.w	r2, r2, #3
 80064d4:	1bd0      	subs	r0, r2, r7
 80064d6:	280f      	cmp	r0, #15
 80064d8:	dd1c      	ble.n	8006514 <_malloc_r+0x104>
 80064da:	3b01      	subs	r3, #1
 80064dc:	3301      	adds	r3, #1
 80064de:	e7ce      	b.n	800647e <_malloc_r+0x6e>
 80064e0:	2b14      	cmp	r3, #20
 80064e2:	d801      	bhi.n	80064e8 <_malloc_r+0xd8>
 80064e4:	335b      	adds	r3, #91	; 0x5b
 80064e6:	e7ea      	b.n	80064be <_malloc_r+0xae>
 80064e8:	2b54      	cmp	r3, #84	; 0x54
 80064ea:	d802      	bhi.n	80064f2 <_malloc_r+0xe2>
 80064ec:	0b3b      	lsrs	r3, r7, #12
 80064ee:	336e      	adds	r3, #110	; 0x6e
 80064f0:	e7e5      	b.n	80064be <_malloc_r+0xae>
 80064f2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80064f6:	d802      	bhi.n	80064fe <_malloc_r+0xee>
 80064f8:	0bfb      	lsrs	r3, r7, #15
 80064fa:	3377      	adds	r3, #119	; 0x77
 80064fc:	e7df      	b.n	80064be <_malloc_r+0xae>
 80064fe:	f240 5254 	movw	r2, #1364	; 0x554
 8006502:	4293      	cmp	r3, r2
 8006504:	d804      	bhi.n	8006510 <_malloc_r+0x100>
 8006506:	0cbb      	lsrs	r3, r7, #18
 8006508:	337c      	adds	r3, #124	; 0x7c
 800650a:	e7d8      	b.n	80064be <_malloc_r+0xae>
 800650c:	233f      	movs	r3, #63	; 0x3f
 800650e:	e7d6      	b.n	80064be <_malloc_r+0xae>
 8006510:	237e      	movs	r3, #126	; 0x7e
 8006512:	e7d4      	b.n	80064be <_malloc_r+0xae>
 8006514:	2800      	cmp	r0, #0
 8006516:	68e1      	ldr	r1, [r4, #12]
 8006518:	db04      	blt.n	8006524 <_malloc_r+0x114>
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	60d9      	str	r1, [r3, #12]
 800651e:	608b      	str	r3, [r1, #8]
 8006520:	18a3      	adds	r3, r4, r2
 8006522:	e7a2      	b.n	800646a <_malloc_r+0x5a>
 8006524:	460c      	mov	r4, r1
 8006526:	e7d0      	b.n	80064ca <_malloc_r+0xba>
 8006528:	2800      	cmp	r0, #0
 800652a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800652e:	db07      	blt.n	8006540 <_malloc_r+0x130>
 8006530:	44a4      	add	ip, r4
 8006532:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	f8cc 3004 	str.w	r3, [ip, #4]
 800653e:	e798      	b.n	8006472 <_malloc_r+0x62>
 8006540:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8006544:	6870      	ldr	r0, [r6, #4]
 8006546:	f080 809e 	bcs.w	8006686 <_malloc_r+0x276>
 800654a:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800654e:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8006552:	f04f 0c01 	mov.w	ip, #1
 8006556:	3201      	adds	r2, #1
 8006558:	fa0c fc0e 	lsl.w	ip, ip, lr
 800655c:	ea4c 0000 	orr.w	r0, ip, r0
 8006560:	6070      	str	r0, [r6, #4]
 8006562:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8006566:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800656a:	3808      	subs	r0, #8
 800656c:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8006570:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8006574:	f8cc 400c 	str.w	r4, [ip, #12]
 8006578:	2001      	movs	r0, #1
 800657a:	109a      	asrs	r2, r3, #2
 800657c:	fa00 f202 	lsl.w	r2, r0, r2
 8006580:	6870      	ldr	r0, [r6, #4]
 8006582:	4290      	cmp	r0, r2
 8006584:	d326      	bcc.n	80065d4 <_malloc_r+0x1c4>
 8006586:	4210      	tst	r0, r2
 8006588:	d106      	bne.n	8006598 <_malloc_r+0x188>
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	0052      	lsls	r2, r2, #1
 8006590:	4210      	tst	r0, r2
 8006592:	f103 0304 	add.w	r3, r3, #4
 8006596:	d0fa      	beq.n	800658e <_malloc_r+0x17e>
 8006598:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800659c:	46c1      	mov	r9, r8
 800659e:	469e      	mov	lr, r3
 80065a0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80065a4:	454c      	cmp	r4, r9
 80065a6:	f040 80b3 	bne.w	8006710 <_malloc_r+0x300>
 80065aa:	f10e 0e01 	add.w	lr, lr, #1
 80065ae:	f01e 0f03 	tst.w	lr, #3
 80065b2:	f109 0908 	add.w	r9, r9, #8
 80065b6:	d1f3      	bne.n	80065a0 <_malloc_r+0x190>
 80065b8:	0798      	lsls	r0, r3, #30
 80065ba:	f040 80ec 	bne.w	8006796 <_malloc_r+0x386>
 80065be:	6873      	ldr	r3, [r6, #4]
 80065c0:	ea23 0302 	bic.w	r3, r3, r2
 80065c4:	6073      	str	r3, [r6, #4]
 80065c6:	6870      	ldr	r0, [r6, #4]
 80065c8:	0052      	lsls	r2, r2, #1
 80065ca:	4290      	cmp	r0, r2
 80065cc:	d302      	bcc.n	80065d4 <_malloc_r+0x1c4>
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	f040 80ee 	bne.w	80067b0 <_malloc_r+0x3a0>
 80065d4:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80065d8:	f8db 1004 	ldr.w	r1, [fp, #4]
 80065dc:	f021 0903 	bic.w	r9, r1, #3
 80065e0:	45b9      	cmp	r9, r7
 80065e2:	d304      	bcc.n	80065ee <_malloc_r+0x1de>
 80065e4:	eba9 0207 	sub.w	r2, r9, r7
 80065e8:	2a0f      	cmp	r2, #15
 80065ea:	f300 8149 	bgt.w	8006880 <_malloc_r+0x470>
 80065ee:	4a59      	ldr	r2, [pc, #356]	; (8006754 <_malloc_r+0x344>)
 80065f0:	6811      	ldr	r1, [r2, #0]
 80065f2:	3110      	adds	r1, #16
 80065f4:	eb0b 0309 	add.w	r3, fp, r9
 80065f8:	4439      	add	r1, r7
 80065fa:	2008      	movs	r0, #8
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	9100      	str	r1, [sp, #0]
 8006600:	f000 fd68 	bl	80070d4 <sysconf>
 8006604:	4a54      	ldr	r2, [pc, #336]	; (8006758 <_malloc_r+0x348>)
 8006606:	e9dd 1300 	ldrd	r1, r3, [sp]
 800660a:	4680      	mov	r8, r0
 800660c:	6810      	ldr	r0, [r2, #0]
 800660e:	3001      	adds	r0, #1
 8006610:	bf1f      	itttt	ne
 8006612:	f101 31ff 	addne.w	r1, r1, #4294967295
 8006616:	4441      	addne	r1, r8
 8006618:	f1c8 0000 	rsbne	r0, r8, #0
 800661c:	4001      	andne	r1, r0
 800661e:	4628      	mov	r0, r5
 8006620:	e9cd 1300 	strd	r1, r3, [sp]
 8006624:	f000 fcb8 	bl	8006f98 <_sbrk_r>
 8006628:	1c42      	adds	r2, r0, #1
 800662a:	4604      	mov	r4, r0
 800662c:	f000 80fc 	beq.w	8006828 <_malloc_r+0x418>
 8006630:	9b01      	ldr	r3, [sp, #4]
 8006632:	9900      	ldr	r1, [sp, #0]
 8006634:	4a48      	ldr	r2, [pc, #288]	; (8006758 <_malloc_r+0x348>)
 8006636:	4283      	cmp	r3, r0
 8006638:	d902      	bls.n	8006640 <_malloc_r+0x230>
 800663a:	45b3      	cmp	fp, r6
 800663c:	f040 80f4 	bne.w	8006828 <_malloc_r+0x418>
 8006640:	f8df a120 	ldr.w	sl, [pc, #288]	; 8006764 <_malloc_r+0x354>
 8006644:	f8da 0000 	ldr.w	r0, [sl]
 8006648:	42a3      	cmp	r3, r4
 800664a:	eb00 0e01 	add.w	lr, r0, r1
 800664e:	f8ca e000 	str.w	lr, [sl]
 8006652:	f108 3cff 	add.w	ip, r8, #4294967295
 8006656:	f040 80ad 	bne.w	80067b4 <_malloc_r+0x3a4>
 800665a:	ea13 0f0c 	tst.w	r3, ip
 800665e:	f040 80a9 	bne.w	80067b4 <_malloc_r+0x3a4>
 8006662:	68b3      	ldr	r3, [r6, #8]
 8006664:	4449      	add	r1, r9
 8006666:	f041 0101 	orr.w	r1, r1, #1
 800666a:	6059      	str	r1, [r3, #4]
 800666c:	4a3b      	ldr	r2, [pc, #236]	; (800675c <_malloc_r+0x34c>)
 800666e:	f8da 3000 	ldr.w	r3, [sl]
 8006672:	6811      	ldr	r1, [r2, #0]
 8006674:	428b      	cmp	r3, r1
 8006676:	bf88      	it	hi
 8006678:	6013      	strhi	r3, [r2, #0]
 800667a:	4a39      	ldr	r2, [pc, #228]	; (8006760 <_malloc_r+0x350>)
 800667c:	6811      	ldr	r1, [r2, #0]
 800667e:	428b      	cmp	r3, r1
 8006680:	bf88      	it	hi
 8006682:	6013      	strhi	r3, [r2, #0]
 8006684:	e0d0      	b.n	8006828 <_malloc_r+0x418>
 8006686:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800668a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800668e:	d218      	bcs.n	80066c2 <_malloc_r+0x2b2>
 8006690:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8006694:	3238      	adds	r2, #56	; 0x38
 8006696:	f102 0e01 	add.w	lr, r2, #1
 800669a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800669e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80066a2:	45f0      	cmp	r8, lr
 80066a4:	d12b      	bne.n	80066fe <_malloc_r+0x2ee>
 80066a6:	1092      	asrs	r2, r2, #2
 80066a8:	f04f 0c01 	mov.w	ip, #1
 80066ac:	fa0c f202 	lsl.w	r2, ip, r2
 80066b0:	4310      	orrs	r0, r2
 80066b2:	6070      	str	r0, [r6, #4]
 80066b4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80066b8:	f8c8 4008 	str.w	r4, [r8, #8]
 80066bc:	f8ce 400c 	str.w	r4, [lr, #12]
 80066c0:	e75a      	b.n	8006578 <_malloc_r+0x168>
 80066c2:	2a14      	cmp	r2, #20
 80066c4:	d801      	bhi.n	80066ca <_malloc_r+0x2ba>
 80066c6:	325b      	adds	r2, #91	; 0x5b
 80066c8:	e7e5      	b.n	8006696 <_malloc_r+0x286>
 80066ca:	2a54      	cmp	r2, #84	; 0x54
 80066cc:	d803      	bhi.n	80066d6 <_malloc_r+0x2c6>
 80066ce:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80066d2:	326e      	adds	r2, #110	; 0x6e
 80066d4:	e7df      	b.n	8006696 <_malloc_r+0x286>
 80066d6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80066da:	d803      	bhi.n	80066e4 <_malloc_r+0x2d4>
 80066dc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80066e0:	3277      	adds	r2, #119	; 0x77
 80066e2:	e7d8      	b.n	8006696 <_malloc_r+0x286>
 80066e4:	f240 5e54 	movw	lr, #1364	; 0x554
 80066e8:	4572      	cmp	r2, lr
 80066ea:	bf9a      	itte	ls
 80066ec:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80066f0:	327c      	addls	r2, #124	; 0x7c
 80066f2:	227e      	movhi	r2, #126	; 0x7e
 80066f4:	e7cf      	b.n	8006696 <_malloc_r+0x286>
 80066f6:	f8de e008 	ldr.w	lr, [lr, #8]
 80066fa:	45f0      	cmp	r8, lr
 80066fc:	d005      	beq.n	800670a <_malloc_r+0x2fa>
 80066fe:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006702:	f022 0203 	bic.w	r2, r2, #3
 8006706:	4562      	cmp	r2, ip
 8006708:	d8f5      	bhi.n	80066f6 <_malloc_r+0x2e6>
 800670a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800670e:	e7d1      	b.n	80066b4 <_malloc_r+0x2a4>
 8006710:	6860      	ldr	r0, [r4, #4]
 8006712:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006716:	f020 0003 	bic.w	r0, r0, #3
 800671a:	eba0 0a07 	sub.w	sl, r0, r7
 800671e:	f1ba 0f0f 	cmp.w	sl, #15
 8006722:	dd21      	ble.n	8006768 <_malloc_r+0x358>
 8006724:	68a3      	ldr	r3, [r4, #8]
 8006726:	19e2      	adds	r2, r4, r7
 8006728:	f047 0701 	orr.w	r7, r7, #1
 800672c:	6067      	str	r7, [r4, #4]
 800672e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006732:	f8cc 3008 	str.w	r3, [ip, #8]
 8006736:	f04a 0301 	orr.w	r3, sl, #1
 800673a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800673e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006742:	6053      	str	r3, [r2, #4]
 8006744:	f844 a000 	str.w	sl, [r4, r0]
 8006748:	e693      	b.n	8006472 <_malloc_r+0x62>
 800674a:	bf00      	nop
 800674c:	2000044c 	.word	0x2000044c
 8006750:	20000454 	.word	0x20000454
 8006754:	20000b80 	.word	0x20000b80
 8006758:	20000854 	.word	0x20000854
 800675c:	20000b78 	.word	0x20000b78
 8006760:	20000b7c 	.word	0x20000b7c
 8006764:	20000b50 	.word	0x20000b50
 8006768:	f1ba 0f00 	cmp.w	sl, #0
 800676c:	db11      	blt.n	8006792 <_malloc_r+0x382>
 800676e:	4420      	add	r0, r4
 8006770:	6843      	ldr	r3, [r0, #4]
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	6043      	str	r3, [r0, #4]
 8006778:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800677c:	4628      	mov	r0, r5
 800677e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006782:	f8cc 3008 	str.w	r3, [ip, #8]
 8006786:	f000 f899 	bl	80068bc <__malloc_unlock>
 800678a:	4620      	mov	r0, r4
 800678c:	b003      	add	sp, #12
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006792:	4664      	mov	r4, ip
 8006794:	e706      	b.n	80065a4 <_malloc_r+0x194>
 8006796:	f858 0908 	ldr.w	r0, [r8], #-8
 800679a:	4540      	cmp	r0, r8
 800679c:	f103 33ff 	add.w	r3, r3, #4294967295
 80067a0:	f43f af0a 	beq.w	80065b8 <_malloc_r+0x1a8>
 80067a4:	e70f      	b.n	80065c6 <_malloc_r+0x1b6>
 80067a6:	3304      	adds	r3, #4
 80067a8:	0052      	lsls	r2, r2, #1
 80067aa:	4210      	tst	r0, r2
 80067ac:	d0fb      	beq.n	80067a6 <_malloc_r+0x396>
 80067ae:	e6f3      	b.n	8006598 <_malloc_r+0x188>
 80067b0:	4673      	mov	r3, lr
 80067b2:	e7fa      	b.n	80067aa <_malloc_r+0x39a>
 80067b4:	6810      	ldr	r0, [r2, #0]
 80067b6:	3001      	adds	r0, #1
 80067b8:	bf1b      	ittet	ne
 80067ba:	1ae3      	subne	r3, r4, r3
 80067bc:	4473      	addne	r3, lr
 80067be:	6014      	streq	r4, [r2, #0]
 80067c0:	f8ca 3000 	strne.w	r3, [sl]
 80067c4:	f014 0307 	ands.w	r3, r4, #7
 80067c8:	bf1a      	itte	ne
 80067ca:	f1c3 0008 	rsbne	r0, r3, #8
 80067ce:	1824      	addne	r4, r4, r0
 80067d0:	4618      	moveq	r0, r3
 80067d2:	1862      	adds	r2, r4, r1
 80067d4:	ea02 010c 	and.w	r1, r2, ip
 80067d8:	4480      	add	r8, r0
 80067da:	eba8 0801 	sub.w	r8, r8, r1
 80067de:	ea08 080c 	and.w	r8, r8, ip
 80067e2:	4641      	mov	r1, r8
 80067e4:	4628      	mov	r0, r5
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	9200      	str	r2, [sp, #0]
 80067ea:	f000 fbd5 	bl	8006f98 <_sbrk_r>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067f4:	d105      	bne.n	8006802 <_malloc_r+0x3f2>
 80067f6:	b32b      	cbz	r3, 8006844 <_malloc_r+0x434>
 80067f8:	f1a3 0008 	sub.w	r0, r3, #8
 80067fc:	4410      	add	r0, r2
 80067fe:	f04f 0800 	mov.w	r8, #0
 8006802:	f8da 2000 	ldr.w	r2, [sl]
 8006806:	60b4      	str	r4, [r6, #8]
 8006808:	1b00      	subs	r0, r0, r4
 800680a:	4440      	add	r0, r8
 800680c:	4442      	add	r2, r8
 800680e:	f040 0001 	orr.w	r0, r0, #1
 8006812:	45b3      	cmp	fp, r6
 8006814:	f8ca 2000 	str.w	r2, [sl]
 8006818:	6060      	str	r0, [r4, #4]
 800681a:	f43f af27 	beq.w	800666c <_malloc_r+0x25c>
 800681e:	f1b9 0f0f 	cmp.w	r9, #15
 8006822:	d812      	bhi.n	800684a <_malloc_r+0x43a>
 8006824:	2301      	movs	r3, #1
 8006826:	6063      	str	r3, [r4, #4]
 8006828:	68b3      	ldr	r3, [r6, #8]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f023 0303 	bic.w	r3, r3, #3
 8006830:	42bb      	cmp	r3, r7
 8006832:	eba3 0207 	sub.w	r2, r3, r7
 8006836:	d301      	bcc.n	800683c <_malloc_r+0x42c>
 8006838:	2a0f      	cmp	r2, #15
 800683a:	dc21      	bgt.n	8006880 <_malloc_r+0x470>
 800683c:	4628      	mov	r0, r5
 800683e:	f000 f83d 	bl	80068bc <__malloc_unlock>
 8006842:	e5f1      	b.n	8006428 <_malloc_r+0x18>
 8006844:	4610      	mov	r0, r2
 8006846:	4698      	mov	r8, r3
 8006848:	e7db      	b.n	8006802 <_malloc_r+0x3f2>
 800684a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800684e:	f1a9 090c 	sub.w	r9, r9, #12
 8006852:	f029 0907 	bic.w	r9, r9, #7
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	ea43 0309 	orr.w	r3, r3, r9
 800685e:	f8cb 3004 	str.w	r3, [fp, #4]
 8006862:	2205      	movs	r2, #5
 8006864:	eb0b 0309 	add.w	r3, fp, r9
 8006868:	f1b9 0f0f 	cmp.w	r9, #15
 800686c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8006870:	f67f aefc 	bls.w	800666c <_malloc_r+0x25c>
 8006874:	f10b 0108 	add.w	r1, fp, #8
 8006878:	4628      	mov	r0, r5
 800687a:	f7ff fd01 	bl	8006280 <_free_r>
 800687e:	e6f5      	b.n	800666c <_malloc_r+0x25c>
 8006880:	68b4      	ldr	r4, [r6, #8]
 8006882:	f047 0301 	orr.w	r3, r7, #1
 8006886:	4427      	add	r7, r4
 8006888:	f042 0201 	orr.w	r2, r2, #1
 800688c:	6063      	str	r3, [r4, #4]
 800688e:	60b7      	str	r7, [r6, #8]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	e5ee      	b.n	8006472 <_malloc_r+0x62>

08006894 <memcpy>:
 8006894:	440a      	add	r2, r1
 8006896:	4291      	cmp	r1, r2
 8006898:	f100 33ff 	add.w	r3, r0, #4294967295
 800689c:	d100      	bne.n	80068a0 <memcpy+0xc>
 800689e:	4770      	bx	lr
 80068a0:	b510      	push	{r4, lr}
 80068a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068aa:	4291      	cmp	r1, r2
 80068ac:	d1f9      	bne.n	80068a2 <memcpy+0xe>
 80068ae:	bd10      	pop	{r4, pc}

080068b0 <__malloc_lock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__malloc_lock+0x8>)
 80068b2:	f7ff bdab 	b.w	800640c <__retarget_lock_acquire_recursive>
 80068b6:	bf00      	nop
 80068b8:	20000da8 	.word	0x20000da8

080068bc <__malloc_unlock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__malloc_unlock+0x8>)
 80068be:	f7ff bda6 	b.w	800640e <__retarget_lock_release_recursive>
 80068c2:	bf00      	nop
 80068c4:	20000da8 	.word	0x20000da8

080068c8 <_Balloc>:
 80068c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80068ca:	b570      	push	{r4, r5, r6, lr}
 80068cc:	4605      	mov	r5, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	b17b      	cbz	r3, 80068f2 <_Balloc+0x2a>
 80068d2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80068d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80068d8:	b9a0      	cbnz	r0, 8006904 <_Balloc+0x3c>
 80068da:	2101      	movs	r1, #1
 80068dc:	fa01 f604 	lsl.w	r6, r1, r4
 80068e0:	1d72      	adds	r2, r6, #5
 80068e2:	0092      	lsls	r2, r2, #2
 80068e4:	4628      	mov	r0, r5
 80068e6:	f000 fc61 	bl	80071ac <_calloc_r>
 80068ea:	b148      	cbz	r0, 8006900 <_Balloc+0x38>
 80068ec:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80068f0:	e00b      	b.n	800690a <_Balloc+0x42>
 80068f2:	2221      	movs	r2, #33	; 0x21
 80068f4:	2104      	movs	r1, #4
 80068f6:	f000 fc59 	bl	80071ac <_calloc_r>
 80068fa:	64e8      	str	r0, [r5, #76]	; 0x4c
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d1e8      	bne.n	80068d2 <_Balloc+0xa>
 8006900:	2000      	movs	r0, #0
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	6802      	ldr	r2, [r0, #0]
 8006906:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800690a:	2300      	movs	r3, #0
 800690c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006910:	e7f7      	b.n	8006902 <_Balloc+0x3a>

08006912 <_Bfree>:
 8006912:	b131      	cbz	r1, 8006922 <_Bfree+0x10>
 8006914:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006916:	684a      	ldr	r2, [r1, #4]
 8006918:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800691c:	6008      	str	r0, [r1, #0]
 800691e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006922:	4770      	bx	lr

08006924 <__multadd>:
 8006924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006928:	690e      	ldr	r6, [r1, #16]
 800692a:	4607      	mov	r7, r0
 800692c:	4698      	mov	r8, r3
 800692e:	460c      	mov	r4, r1
 8006930:	f101 0014 	add.w	r0, r1, #20
 8006934:	2300      	movs	r3, #0
 8006936:	6805      	ldr	r5, [r0, #0]
 8006938:	b2a9      	uxth	r1, r5
 800693a:	fb02 8101 	mla	r1, r2, r1, r8
 800693e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006942:	0c2d      	lsrs	r5, r5, #16
 8006944:	fb02 c505 	mla	r5, r2, r5, ip
 8006948:	b289      	uxth	r1, r1
 800694a:	3301      	adds	r3, #1
 800694c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006950:	429e      	cmp	r6, r3
 8006952:	f840 1b04 	str.w	r1, [r0], #4
 8006956:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800695a:	dcec      	bgt.n	8006936 <__multadd+0x12>
 800695c:	f1b8 0f00 	cmp.w	r8, #0
 8006960:	d022      	beq.n	80069a8 <__multadd+0x84>
 8006962:	68a3      	ldr	r3, [r4, #8]
 8006964:	42b3      	cmp	r3, r6
 8006966:	dc19      	bgt.n	800699c <__multadd+0x78>
 8006968:	6861      	ldr	r1, [r4, #4]
 800696a:	4638      	mov	r0, r7
 800696c:	3101      	adds	r1, #1
 800696e:	f7ff ffab 	bl	80068c8 <_Balloc>
 8006972:	4605      	mov	r5, r0
 8006974:	b928      	cbnz	r0, 8006982 <__multadd+0x5e>
 8006976:	4602      	mov	r2, r0
 8006978:	4b0d      	ldr	r3, [pc, #52]	; (80069b0 <__multadd+0x8c>)
 800697a:	480e      	ldr	r0, [pc, #56]	; (80069b4 <__multadd+0x90>)
 800697c:	21b5      	movs	r1, #181	; 0xb5
 800697e:	f000 fbf7 	bl	8007170 <__assert_func>
 8006982:	6922      	ldr	r2, [r4, #16]
 8006984:	3202      	adds	r2, #2
 8006986:	f104 010c 	add.w	r1, r4, #12
 800698a:	0092      	lsls	r2, r2, #2
 800698c:	300c      	adds	r0, #12
 800698e:	f7ff ff81 	bl	8006894 <memcpy>
 8006992:	4621      	mov	r1, r4
 8006994:	4638      	mov	r0, r7
 8006996:	f7ff ffbc 	bl	8006912 <_Bfree>
 800699a:	462c      	mov	r4, r5
 800699c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80069a0:	3601      	adds	r6, #1
 80069a2:	f8c3 8014 	str.w	r8, [r3, #20]
 80069a6:	6126      	str	r6, [r4, #16]
 80069a8:	4620      	mov	r0, r4
 80069aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069ae:	bf00      	nop
 80069b0:	08008cdd 	.word	0x08008cdd
 80069b4:	08008d4d 	.word	0x08008d4d

080069b8 <__hi0bits>:
 80069b8:	0c03      	lsrs	r3, r0, #16
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	b9d3      	cbnz	r3, 80069f4 <__hi0bits+0x3c>
 80069be:	0400      	lsls	r0, r0, #16
 80069c0:	2310      	movs	r3, #16
 80069c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069c6:	bf04      	itt	eq
 80069c8:	0200      	lsleq	r0, r0, #8
 80069ca:	3308      	addeq	r3, #8
 80069cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069d0:	bf04      	itt	eq
 80069d2:	0100      	lsleq	r0, r0, #4
 80069d4:	3304      	addeq	r3, #4
 80069d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069da:	bf04      	itt	eq
 80069dc:	0080      	lsleq	r0, r0, #2
 80069de:	3302      	addeq	r3, #2
 80069e0:	2800      	cmp	r0, #0
 80069e2:	db05      	blt.n	80069f0 <__hi0bits+0x38>
 80069e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069e8:	f103 0301 	add.w	r3, r3, #1
 80069ec:	bf08      	it	eq
 80069ee:	2320      	moveq	r3, #32
 80069f0:	4618      	mov	r0, r3
 80069f2:	4770      	bx	lr
 80069f4:	2300      	movs	r3, #0
 80069f6:	e7e4      	b.n	80069c2 <__hi0bits+0xa>

080069f8 <__lo0bits>:
 80069f8:	6803      	ldr	r3, [r0, #0]
 80069fa:	f013 0207 	ands.w	r2, r3, #7
 80069fe:	4601      	mov	r1, r0
 8006a00:	d00b      	beq.n	8006a1a <__lo0bits+0x22>
 8006a02:	07da      	lsls	r2, r3, #31
 8006a04:	d424      	bmi.n	8006a50 <__lo0bits+0x58>
 8006a06:	0798      	lsls	r0, r3, #30
 8006a08:	bf49      	itett	mi
 8006a0a:	085b      	lsrmi	r3, r3, #1
 8006a0c:	089b      	lsrpl	r3, r3, #2
 8006a0e:	2001      	movmi	r0, #1
 8006a10:	600b      	strmi	r3, [r1, #0]
 8006a12:	bf5c      	itt	pl
 8006a14:	600b      	strpl	r3, [r1, #0]
 8006a16:	2002      	movpl	r0, #2
 8006a18:	4770      	bx	lr
 8006a1a:	b298      	uxth	r0, r3
 8006a1c:	b9b0      	cbnz	r0, 8006a4c <__lo0bits+0x54>
 8006a1e:	0c1b      	lsrs	r3, r3, #16
 8006a20:	2010      	movs	r0, #16
 8006a22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a26:	bf04      	itt	eq
 8006a28:	0a1b      	lsreq	r3, r3, #8
 8006a2a:	3008      	addeq	r0, #8
 8006a2c:	071a      	lsls	r2, r3, #28
 8006a2e:	bf04      	itt	eq
 8006a30:	091b      	lsreq	r3, r3, #4
 8006a32:	3004      	addeq	r0, #4
 8006a34:	079a      	lsls	r2, r3, #30
 8006a36:	bf04      	itt	eq
 8006a38:	089b      	lsreq	r3, r3, #2
 8006a3a:	3002      	addeq	r0, #2
 8006a3c:	07da      	lsls	r2, r3, #31
 8006a3e:	d403      	bmi.n	8006a48 <__lo0bits+0x50>
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	f100 0001 	add.w	r0, r0, #1
 8006a46:	d005      	beq.n	8006a54 <__lo0bits+0x5c>
 8006a48:	600b      	str	r3, [r1, #0]
 8006a4a:	4770      	bx	lr
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	e7e8      	b.n	8006a22 <__lo0bits+0x2a>
 8006a50:	2000      	movs	r0, #0
 8006a52:	4770      	bx	lr
 8006a54:	2020      	movs	r0, #32
 8006a56:	4770      	bx	lr

08006a58 <__i2b>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	f7ff ff33 	bl	80068c8 <_Balloc>
 8006a62:	4602      	mov	r2, r0
 8006a64:	b928      	cbnz	r0, 8006a72 <__i2b+0x1a>
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <__i2b+0x24>)
 8006a68:	4805      	ldr	r0, [pc, #20]	; (8006a80 <__i2b+0x28>)
 8006a6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a6e:	f000 fb7f 	bl	8007170 <__assert_func>
 8006a72:	2301      	movs	r3, #1
 8006a74:	6144      	str	r4, [r0, #20]
 8006a76:	6103      	str	r3, [r0, #16]
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08008cdd 	.word	0x08008cdd
 8006a80:	08008d4d 	.word	0x08008d4d

08006a84 <__multiply>:
 8006a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	4614      	mov	r4, r2
 8006a8a:	690a      	ldr	r2, [r1, #16]
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	bfb8      	it	lt
 8006a92:	460b      	movlt	r3, r1
 8006a94:	460d      	mov	r5, r1
 8006a96:	bfbc      	itt	lt
 8006a98:	4625      	movlt	r5, r4
 8006a9a:	461c      	movlt	r4, r3
 8006a9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006aa0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006aa4:	68ab      	ldr	r3, [r5, #8]
 8006aa6:	6869      	ldr	r1, [r5, #4]
 8006aa8:	eb0a 0709 	add.w	r7, sl, r9
 8006aac:	42bb      	cmp	r3, r7
 8006aae:	b085      	sub	sp, #20
 8006ab0:	bfb8      	it	lt
 8006ab2:	3101      	addlt	r1, #1
 8006ab4:	f7ff ff08 	bl	80068c8 <_Balloc>
 8006ab8:	b930      	cbnz	r0, 8006ac8 <__multiply+0x44>
 8006aba:	4602      	mov	r2, r0
 8006abc:	4b42      	ldr	r3, [pc, #264]	; (8006bc8 <__multiply+0x144>)
 8006abe:	4843      	ldr	r0, [pc, #268]	; (8006bcc <__multiply+0x148>)
 8006ac0:	f240 115d 	movw	r1, #349	; 0x15d
 8006ac4:	f000 fb54 	bl	8007170 <__assert_func>
 8006ac8:	f100 0614 	add.w	r6, r0, #20
 8006acc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006ad0:	4633      	mov	r3, r6
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4543      	cmp	r3, r8
 8006ad6:	d31e      	bcc.n	8006b16 <__multiply+0x92>
 8006ad8:	f105 0c14 	add.w	ip, r5, #20
 8006adc:	f104 0314 	add.w	r3, r4, #20
 8006ae0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006ae4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006ae8:	9202      	str	r2, [sp, #8]
 8006aea:	ebac 0205 	sub.w	r2, ip, r5
 8006aee:	3a15      	subs	r2, #21
 8006af0:	f022 0203 	bic.w	r2, r2, #3
 8006af4:	3204      	adds	r2, #4
 8006af6:	f105 0115 	add.w	r1, r5, #21
 8006afa:	458c      	cmp	ip, r1
 8006afc:	bf38      	it	cc
 8006afe:	2204      	movcc	r2, #4
 8006b00:	9201      	str	r2, [sp, #4]
 8006b02:	9a02      	ldr	r2, [sp, #8]
 8006b04:	9303      	str	r3, [sp, #12]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d808      	bhi.n	8006b1c <__multiply+0x98>
 8006b0a:	2f00      	cmp	r7, #0
 8006b0c:	dc55      	bgt.n	8006bba <__multiply+0x136>
 8006b0e:	6107      	str	r7, [r0, #16]
 8006b10:	b005      	add	sp, #20
 8006b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b16:	f843 2b04 	str.w	r2, [r3], #4
 8006b1a:	e7db      	b.n	8006ad4 <__multiply+0x50>
 8006b1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b20:	f1ba 0f00 	cmp.w	sl, #0
 8006b24:	d020      	beq.n	8006b68 <__multiply+0xe4>
 8006b26:	f105 0e14 	add.w	lr, r5, #20
 8006b2a:	46b1      	mov	r9, r6
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b32:	f8d9 b000 	ldr.w	fp, [r9]
 8006b36:	b2a1      	uxth	r1, r4
 8006b38:	fa1f fb8b 	uxth.w	fp, fp
 8006b3c:	fb0a b101 	mla	r1, sl, r1, fp
 8006b40:	4411      	add	r1, r2
 8006b42:	f8d9 2000 	ldr.w	r2, [r9]
 8006b46:	0c24      	lsrs	r4, r4, #16
 8006b48:	0c12      	lsrs	r2, r2, #16
 8006b4a:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b4e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b52:	b289      	uxth	r1, r1
 8006b54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b58:	45f4      	cmp	ip, lr
 8006b5a:	f849 1b04 	str.w	r1, [r9], #4
 8006b5e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006b62:	d8e4      	bhi.n	8006b2e <__multiply+0xaa>
 8006b64:	9901      	ldr	r1, [sp, #4]
 8006b66:	5072      	str	r2, [r6, r1]
 8006b68:	9a03      	ldr	r2, [sp, #12]
 8006b6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	f1b9 0f00 	cmp.w	r9, #0
 8006b74:	d01f      	beq.n	8006bb6 <__multiply+0x132>
 8006b76:	6834      	ldr	r4, [r6, #0]
 8006b78:	f105 0114 	add.w	r1, r5, #20
 8006b7c:	46b6      	mov	lr, r6
 8006b7e:	f04f 0a00 	mov.w	sl, #0
 8006b82:	880a      	ldrh	r2, [r1, #0]
 8006b84:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006b88:	fb09 b202 	mla	r2, r9, r2, fp
 8006b8c:	4492      	add	sl, r2
 8006b8e:	b2a4      	uxth	r4, r4
 8006b90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006b94:	f84e 4b04 	str.w	r4, [lr], #4
 8006b98:	f851 4b04 	ldr.w	r4, [r1], #4
 8006b9c:	f8be 2000 	ldrh.w	r2, [lr]
 8006ba0:	0c24      	lsrs	r4, r4, #16
 8006ba2:	fb09 2404 	mla	r4, r9, r4, r2
 8006ba6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006baa:	458c      	cmp	ip, r1
 8006bac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bb0:	d8e7      	bhi.n	8006b82 <__multiply+0xfe>
 8006bb2:	9a01      	ldr	r2, [sp, #4]
 8006bb4:	50b4      	str	r4, [r6, r2]
 8006bb6:	3604      	adds	r6, #4
 8006bb8:	e7a3      	b.n	8006b02 <__multiply+0x7e>
 8006bba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1a5      	bne.n	8006b0e <__multiply+0x8a>
 8006bc2:	3f01      	subs	r7, #1
 8006bc4:	e7a1      	b.n	8006b0a <__multiply+0x86>
 8006bc6:	bf00      	nop
 8006bc8:	08008cdd 	.word	0x08008cdd
 8006bcc:	08008d4d 	.word	0x08008d4d

08006bd0 <__pow5mult>:
 8006bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	f012 0203 	ands.w	r2, r2, #3
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460f      	mov	r7, r1
 8006bde:	d007      	beq.n	8006bf0 <__pow5mult+0x20>
 8006be0:	4c1a      	ldr	r4, [pc, #104]	; (8006c4c <__pow5mult+0x7c>)
 8006be2:	3a01      	subs	r2, #1
 8006be4:	2300      	movs	r3, #0
 8006be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bea:	f7ff fe9b 	bl	8006924 <__multadd>
 8006bee:	4607      	mov	r7, r0
 8006bf0:	10ad      	asrs	r5, r5, #2
 8006bf2:	d027      	beq.n	8006c44 <__pow5mult+0x74>
 8006bf4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8006bf6:	b944      	cbnz	r4, 8006c0a <__pow5mult+0x3a>
 8006bf8:	f240 2171 	movw	r1, #625	; 0x271
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff ff2b 	bl	8006a58 <__i2b>
 8006c02:	2300      	movs	r3, #0
 8006c04:	64b0      	str	r0, [r6, #72]	; 0x48
 8006c06:	4604      	mov	r4, r0
 8006c08:	6003      	str	r3, [r0, #0]
 8006c0a:	f04f 0900 	mov.w	r9, #0
 8006c0e:	07eb      	lsls	r3, r5, #31
 8006c10:	d50a      	bpl.n	8006c28 <__pow5mult+0x58>
 8006c12:	4639      	mov	r1, r7
 8006c14:	4622      	mov	r2, r4
 8006c16:	4630      	mov	r0, r6
 8006c18:	f7ff ff34 	bl	8006a84 <__multiply>
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	4680      	mov	r8, r0
 8006c20:	4630      	mov	r0, r6
 8006c22:	f7ff fe76 	bl	8006912 <_Bfree>
 8006c26:	4647      	mov	r7, r8
 8006c28:	106d      	asrs	r5, r5, #1
 8006c2a:	d00b      	beq.n	8006c44 <__pow5mult+0x74>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	b938      	cbnz	r0, 8006c40 <__pow5mult+0x70>
 8006c30:	4622      	mov	r2, r4
 8006c32:	4621      	mov	r1, r4
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ff25 	bl	8006a84 <__multiply>
 8006c3a:	6020      	str	r0, [r4, #0]
 8006c3c:	f8c0 9000 	str.w	r9, [r0]
 8006c40:	4604      	mov	r4, r0
 8006c42:	e7e4      	b.n	8006c0e <__pow5mult+0x3e>
 8006c44:	4638      	mov	r0, r7
 8006c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08008ea0 	.word	0x08008ea0

08006c50 <__lshift>:
 8006c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c54:	460c      	mov	r4, r1
 8006c56:	6849      	ldr	r1, [r1, #4]
 8006c58:	6923      	ldr	r3, [r4, #16]
 8006c5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c5e:	68a3      	ldr	r3, [r4, #8]
 8006c60:	4607      	mov	r7, r0
 8006c62:	4691      	mov	r9, r2
 8006c64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c68:	f108 0601 	add.w	r6, r8, #1
 8006c6c:	42b3      	cmp	r3, r6
 8006c6e:	db0b      	blt.n	8006c88 <__lshift+0x38>
 8006c70:	4638      	mov	r0, r7
 8006c72:	f7ff fe29 	bl	80068c8 <_Balloc>
 8006c76:	4605      	mov	r5, r0
 8006c78:	b948      	cbnz	r0, 8006c8e <__lshift+0x3e>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	4b28      	ldr	r3, [pc, #160]	; (8006d20 <__lshift+0xd0>)
 8006c7e:	4829      	ldr	r0, [pc, #164]	; (8006d24 <__lshift+0xd4>)
 8006c80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c84:	f000 fa74 	bl	8007170 <__assert_func>
 8006c88:	3101      	adds	r1, #1
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	e7ee      	b.n	8006c6c <__lshift+0x1c>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f100 0114 	add.w	r1, r0, #20
 8006c94:	f100 0210 	add.w	r2, r0, #16
 8006c98:	4618      	mov	r0, r3
 8006c9a:	4553      	cmp	r3, sl
 8006c9c:	db33      	blt.n	8006d06 <__lshift+0xb6>
 8006c9e:	6920      	ldr	r0, [r4, #16]
 8006ca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ca4:	f104 0314 	add.w	r3, r4, #20
 8006ca8:	f019 091f 	ands.w	r9, r9, #31
 8006cac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cb4:	d02b      	beq.n	8006d0e <__lshift+0xbe>
 8006cb6:	f1c9 0e20 	rsb	lr, r9, #32
 8006cba:	468a      	mov	sl, r1
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	fa00 f009 	lsl.w	r0, r0, r9
 8006cc4:	4302      	orrs	r2, r0
 8006cc6:	f84a 2b04 	str.w	r2, [sl], #4
 8006cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cce:	459c      	cmp	ip, r3
 8006cd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cd4:	d8f3      	bhi.n	8006cbe <__lshift+0x6e>
 8006cd6:	ebac 0304 	sub.w	r3, ip, r4
 8006cda:	3b15      	subs	r3, #21
 8006cdc:	f023 0303 	bic.w	r3, r3, #3
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	f104 0015 	add.w	r0, r4, #21
 8006ce6:	4584      	cmp	ip, r0
 8006ce8:	bf38      	it	cc
 8006cea:	2304      	movcc	r3, #4
 8006cec:	50ca      	str	r2, [r1, r3]
 8006cee:	b10a      	cbz	r2, 8006cf4 <__lshift+0xa4>
 8006cf0:	f108 0602 	add.w	r6, r8, #2
 8006cf4:	3e01      	subs	r6, #1
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	612e      	str	r6, [r5, #16]
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	f7ff fe09 	bl	8006912 <_Bfree>
 8006d00:	4628      	mov	r0, r5
 8006d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d06:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	e7c5      	b.n	8006c9a <__lshift+0x4a>
 8006d0e:	3904      	subs	r1, #4
 8006d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d14:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d18:	459c      	cmp	ip, r3
 8006d1a:	d8f9      	bhi.n	8006d10 <__lshift+0xc0>
 8006d1c:	e7ea      	b.n	8006cf4 <__lshift+0xa4>
 8006d1e:	bf00      	nop
 8006d20:	08008cdd 	.word	0x08008cdd
 8006d24:	08008d4d 	.word	0x08008d4d

08006d28 <__mcmp>:
 8006d28:	b530      	push	{r4, r5, lr}
 8006d2a:	6902      	ldr	r2, [r0, #16]
 8006d2c:	690c      	ldr	r4, [r1, #16]
 8006d2e:	1b12      	subs	r2, r2, r4
 8006d30:	d10e      	bne.n	8006d50 <__mcmp+0x28>
 8006d32:	f100 0314 	add.w	r3, r0, #20
 8006d36:	3114      	adds	r1, #20
 8006d38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d48:	42a5      	cmp	r5, r4
 8006d4a:	d003      	beq.n	8006d54 <__mcmp+0x2c>
 8006d4c:	d305      	bcc.n	8006d5a <__mcmp+0x32>
 8006d4e:	2201      	movs	r2, #1
 8006d50:	4610      	mov	r0, r2
 8006d52:	bd30      	pop	{r4, r5, pc}
 8006d54:	4283      	cmp	r3, r0
 8006d56:	d3f3      	bcc.n	8006d40 <__mcmp+0x18>
 8006d58:	e7fa      	b.n	8006d50 <__mcmp+0x28>
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5e:	e7f7      	b.n	8006d50 <__mcmp+0x28>

08006d60 <__mdiff>:
 8006d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	460c      	mov	r4, r1
 8006d66:	4606      	mov	r6, r0
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	4617      	mov	r7, r2
 8006d6e:	f7ff ffdb 	bl	8006d28 <__mcmp>
 8006d72:	1e05      	subs	r5, r0, #0
 8006d74:	d110      	bne.n	8006d98 <__mdiff+0x38>
 8006d76:	4629      	mov	r1, r5
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7ff fda5 	bl	80068c8 <_Balloc>
 8006d7e:	b930      	cbnz	r0, 8006d8e <__mdiff+0x2e>
 8006d80:	4b39      	ldr	r3, [pc, #228]	; (8006e68 <__mdiff+0x108>)
 8006d82:	4602      	mov	r2, r0
 8006d84:	f240 2132 	movw	r1, #562	; 0x232
 8006d88:	4838      	ldr	r0, [pc, #224]	; (8006e6c <__mdiff+0x10c>)
 8006d8a:	f000 f9f1 	bl	8007170 <__assert_func>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d98:	bfa4      	itt	ge
 8006d9a:	463b      	movge	r3, r7
 8006d9c:	4627      	movge	r7, r4
 8006d9e:	4630      	mov	r0, r6
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	bfa6      	itte	ge
 8006da4:	461c      	movge	r4, r3
 8006da6:	2500      	movge	r5, #0
 8006da8:	2501      	movlt	r5, #1
 8006daa:	f7ff fd8d 	bl	80068c8 <_Balloc>
 8006dae:	b920      	cbnz	r0, 8006dba <__mdiff+0x5a>
 8006db0:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <__mdiff+0x108>)
 8006db2:	4602      	mov	r2, r0
 8006db4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006db8:	e7e6      	b.n	8006d88 <__mdiff+0x28>
 8006dba:	693e      	ldr	r6, [r7, #16]
 8006dbc:	60c5      	str	r5, [r0, #12]
 8006dbe:	6925      	ldr	r5, [r4, #16]
 8006dc0:	f107 0114 	add.w	r1, r7, #20
 8006dc4:	f104 0914 	add.w	r9, r4, #20
 8006dc8:	f100 0e14 	add.w	lr, r0, #20
 8006dcc:	f107 0210 	add.w	r2, r7, #16
 8006dd0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006dd4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006dd8:	46f2      	mov	sl, lr
 8006dda:	2700      	movs	r7, #0
 8006ddc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006de0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006de4:	fa1f f883 	uxth.w	r8, r3
 8006de8:	fa17 f78b 	uxtah	r7, r7, fp
 8006dec:	0c1b      	lsrs	r3, r3, #16
 8006dee:	eba7 0808 	sub.w	r8, r7, r8
 8006df2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006df6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006dfa:	fa1f f888 	uxth.w	r8, r8
 8006dfe:	141f      	asrs	r7, r3, #16
 8006e00:	454d      	cmp	r5, r9
 8006e02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e06:	f84a 3b04 	str.w	r3, [sl], #4
 8006e0a:	d8e7      	bhi.n	8006ddc <__mdiff+0x7c>
 8006e0c:	1b2b      	subs	r3, r5, r4
 8006e0e:	3b15      	subs	r3, #21
 8006e10:	f023 0303 	bic.w	r3, r3, #3
 8006e14:	3304      	adds	r3, #4
 8006e16:	3415      	adds	r4, #21
 8006e18:	42a5      	cmp	r5, r4
 8006e1a:	bf38      	it	cc
 8006e1c:	2304      	movcc	r3, #4
 8006e1e:	4419      	add	r1, r3
 8006e20:	4473      	add	r3, lr
 8006e22:	469e      	mov	lr, r3
 8006e24:	460d      	mov	r5, r1
 8006e26:	4565      	cmp	r5, ip
 8006e28:	d30e      	bcc.n	8006e48 <__mdiff+0xe8>
 8006e2a:	f10c 0203 	add.w	r2, ip, #3
 8006e2e:	1a52      	subs	r2, r2, r1
 8006e30:	f022 0203 	bic.w	r2, r2, #3
 8006e34:	3903      	subs	r1, #3
 8006e36:	458c      	cmp	ip, r1
 8006e38:	bf38      	it	cc
 8006e3a:	2200      	movcc	r2, #0
 8006e3c:	441a      	add	r2, r3
 8006e3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006e42:	b17b      	cbz	r3, 8006e64 <__mdiff+0x104>
 8006e44:	6106      	str	r6, [r0, #16]
 8006e46:	e7a5      	b.n	8006d94 <__mdiff+0x34>
 8006e48:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e4c:	fa17 f488 	uxtah	r4, r7, r8
 8006e50:	1422      	asrs	r2, r4, #16
 8006e52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006e56:	b2a4      	uxth	r4, r4
 8006e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006e5c:	f84e 4b04 	str.w	r4, [lr], #4
 8006e60:	1417      	asrs	r7, r2, #16
 8006e62:	e7e0      	b.n	8006e26 <__mdiff+0xc6>
 8006e64:	3e01      	subs	r6, #1
 8006e66:	e7ea      	b.n	8006e3e <__mdiff+0xde>
 8006e68:	08008cdd 	.word	0x08008cdd
 8006e6c:	08008d4d 	.word	0x08008d4d

08006e70 <__d2b>:
 8006e70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	4689      	mov	r9, r1
 8006e76:	2101      	movs	r1, #1
 8006e78:	ec57 6b10 	vmov	r6, r7, d0
 8006e7c:	4690      	mov	r8, r2
 8006e7e:	f7ff fd23 	bl	80068c8 <_Balloc>
 8006e82:	4604      	mov	r4, r0
 8006e84:	b930      	cbnz	r0, 8006e94 <__d2b+0x24>
 8006e86:	4602      	mov	r2, r0
 8006e88:	4b25      	ldr	r3, [pc, #148]	; (8006f20 <__d2b+0xb0>)
 8006e8a:	4826      	ldr	r0, [pc, #152]	; (8006f24 <__d2b+0xb4>)
 8006e8c:	f240 310a 	movw	r1, #778	; 0x30a
 8006e90:	f000 f96e 	bl	8007170 <__assert_func>
 8006e94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006e98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e9c:	bb35      	cbnz	r5, 8006eec <__d2b+0x7c>
 8006e9e:	2e00      	cmp	r6, #0
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	d028      	beq.n	8006ef6 <__d2b+0x86>
 8006ea4:	4668      	mov	r0, sp
 8006ea6:	9600      	str	r6, [sp, #0]
 8006ea8:	f7ff fda6 	bl	80069f8 <__lo0bits>
 8006eac:	9900      	ldr	r1, [sp, #0]
 8006eae:	b300      	cbz	r0, 8006ef2 <__d2b+0x82>
 8006eb0:	9a01      	ldr	r2, [sp, #4]
 8006eb2:	f1c0 0320 	rsb	r3, r0, #32
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	430b      	orrs	r3, r1
 8006ebc:	40c2      	lsrs	r2, r0
 8006ebe:	6163      	str	r3, [r4, #20]
 8006ec0:	9201      	str	r2, [sp, #4]
 8006ec2:	9b01      	ldr	r3, [sp, #4]
 8006ec4:	61a3      	str	r3, [r4, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bf14      	ite	ne
 8006eca:	2202      	movne	r2, #2
 8006ecc:	2201      	moveq	r2, #1
 8006ece:	6122      	str	r2, [r4, #16]
 8006ed0:	b1d5      	cbz	r5, 8006f08 <__d2b+0x98>
 8006ed2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ed6:	4405      	add	r5, r0
 8006ed8:	f8c9 5000 	str.w	r5, [r9]
 8006edc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ee0:	f8c8 0000 	str.w	r0, [r8]
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	b003      	add	sp, #12
 8006ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ef0:	e7d5      	b.n	8006e9e <__d2b+0x2e>
 8006ef2:	6161      	str	r1, [r4, #20]
 8006ef4:	e7e5      	b.n	8006ec2 <__d2b+0x52>
 8006ef6:	a801      	add	r0, sp, #4
 8006ef8:	f7ff fd7e 	bl	80069f8 <__lo0bits>
 8006efc:	9b01      	ldr	r3, [sp, #4]
 8006efe:	6163      	str	r3, [r4, #20]
 8006f00:	2201      	movs	r2, #1
 8006f02:	6122      	str	r2, [r4, #16]
 8006f04:	3020      	adds	r0, #32
 8006f06:	e7e3      	b.n	8006ed0 <__d2b+0x60>
 8006f08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f10:	f8c9 0000 	str.w	r0, [r9]
 8006f14:	6918      	ldr	r0, [r3, #16]
 8006f16:	f7ff fd4f 	bl	80069b8 <__hi0bits>
 8006f1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f1e:	e7df      	b.n	8006ee0 <__d2b+0x70>
 8006f20:	08008cdd 	.word	0x08008cdd
 8006f24:	08008d4d 	.word	0x08008d4d

08006f28 <frexp>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	ec55 4b10 	vmov	r4, r5, d0
 8006f30:	6001      	str	r1, [r0, #0]
 8006f32:	4916      	ldr	r1, [pc, #88]	; (8006f8c <frexp+0x64>)
 8006f34:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006f38:	428a      	cmp	r2, r1
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	dc22      	bgt.n	8006f86 <frexp+0x5e>
 8006f40:	ee10 1a10 	vmov	r1, s0
 8006f44:	4311      	orrs	r1, r2
 8006f46:	d01e      	beq.n	8006f86 <frexp+0x5e>
 8006f48:	4911      	ldr	r1, [pc, #68]	; (8006f90 <frexp+0x68>)
 8006f4a:	4029      	ands	r1, r5
 8006f4c:	b969      	cbnz	r1, 8006f6a <frexp+0x42>
 8006f4e:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <frexp+0x6c>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	ee10 0a10 	vmov	r0, s0
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 fb5e 	bl	8000618 <__aeabi_dmul>
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006f62:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8006f66:	4604      	mov	r4, r0
 8006f68:	6031      	str	r1, [r6, #0]
 8006f6a:	6831      	ldr	r1, [r6, #0]
 8006f6c:	1512      	asrs	r2, r2, #20
 8006f6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f72:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8006f76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8006f80:	6032      	str	r2, [r6, #0]
 8006f82:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8006f86:	ec45 4b10 	vmov	d0, r4, r5
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	7fefffff 	.word	0x7fefffff
 8006f90:	7ff00000 	.word	0x7ff00000
 8006f94:	43500000 	.word	0x43500000

08006f98 <_sbrk_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d06      	ldr	r5, [pc, #24]	; (8006fb4 <_sbrk_r+0x1c>)
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	f7fc fdf6 	bl	8003b94 <_sbrk>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_sbrk_r+0x1a>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_sbrk_r+0x1a>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	20000db0 	.word	0x20000db0

08006fb8 <strncpy>:
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	3901      	subs	r1, #1
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	b132      	cbz	r2, 8006fce <strncpy+0x16>
 8006fc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fc4:	f803 4b01 	strb.w	r4, [r3], #1
 8006fc8:	3a01      	subs	r2, #1
 8006fca:	2c00      	cmp	r4, #0
 8006fcc:	d1f7      	bne.n	8006fbe <strncpy+0x6>
 8006fce:	441a      	add	r2, r3
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d100      	bne.n	8006fd8 <strncpy+0x20>
 8006fd6:	bd10      	pop	{r4, pc}
 8006fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8006fdc:	e7f9      	b.n	8006fd2 <strncpy+0x1a>

08006fde <__ssprint_r>:
 8006fde:	6893      	ldr	r3, [r2, #8]
 8006fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	4680      	mov	r8, r0
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	4617      	mov	r7, r2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d061      	beq.n	80070b2 <__ssprint_r+0xd4>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f8d2 a000 	ldr.w	sl, [r2]
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	469b      	mov	fp, r3
 8006ff8:	f1bb 0f00 	cmp.w	fp, #0
 8006ffc:	d02b      	beq.n	8007056 <__ssprint_r+0x78>
 8006ffe:	68a6      	ldr	r6, [r4, #8]
 8007000:	45b3      	cmp	fp, r6
 8007002:	d342      	bcc.n	800708a <__ssprint_r+0xac>
 8007004:	89a2      	ldrh	r2, [r4, #12]
 8007006:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800700a:	d03e      	beq.n	800708a <__ssprint_r+0xac>
 800700c:	6825      	ldr	r5, [r4, #0]
 800700e:	6921      	ldr	r1, [r4, #16]
 8007010:	eba5 0901 	sub.w	r9, r5, r1
 8007014:	6965      	ldr	r5, [r4, #20]
 8007016:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800701a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800701e:	f109 0001 	add.w	r0, r9, #1
 8007022:	106d      	asrs	r5, r5, #1
 8007024:	4458      	add	r0, fp
 8007026:	4285      	cmp	r5, r0
 8007028:	bf38      	it	cc
 800702a:	4605      	movcc	r5, r0
 800702c:	0553      	lsls	r3, r2, #21
 800702e:	d545      	bpl.n	80070bc <__ssprint_r+0xde>
 8007030:	4629      	mov	r1, r5
 8007032:	4640      	mov	r0, r8
 8007034:	f7ff f9ec 	bl	8006410 <_malloc_r>
 8007038:	4606      	mov	r6, r0
 800703a:	b9a0      	cbnz	r0, 8007066 <__ssprint_r+0x88>
 800703c:	230c      	movs	r3, #12
 800703e:	f8c8 3000 	str.w	r3, [r8]
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	2300      	movs	r3, #0
 800704c:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	e02f      	b.n	80070b6 <__ssprint_r+0xd8>
 8007056:	f8da 3000 	ldr.w	r3, [sl]
 800705a:	f8da b004 	ldr.w	fp, [sl, #4]
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	f10a 0a08 	add.w	sl, sl, #8
 8007064:	e7c8      	b.n	8006ff8 <__ssprint_r+0x1a>
 8007066:	464a      	mov	r2, r9
 8007068:	6921      	ldr	r1, [r4, #16]
 800706a:	f7ff fc13 	bl	8006894 <memcpy>
 800706e:	89a2      	ldrh	r2, [r4, #12]
 8007070:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007078:	81a2      	strh	r2, [r4, #12]
 800707a:	6126      	str	r6, [r4, #16]
 800707c:	6165      	str	r5, [r4, #20]
 800707e:	444e      	add	r6, r9
 8007080:	eba5 0509 	sub.w	r5, r5, r9
 8007084:	6026      	str	r6, [r4, #0]
 8007086:	60a5      	str	r5, [r4, #8]
 8007088:	465e      	mov	r6, fp
 800708a:	455e      	cmp	r6, fp
 800708c:	bf28      	it	cs
 800708e:	465e      	movcs	r6, fp
 8007090:	4632      	mov	r2, r6
 8007092:	9901      	ldr	r1, [sp, #4]
 8007094:	6820      	ldr	r0, [r4, #0]
 8007096:	f000 f8e1 	bl	800725c <memmove>
 800709a:	68a2      	ldr	r2, [r4, #8]
 800709c:	1b92      	subs	r2, r2, r6
 800709e:	60a2      	str	r2, [r4, #8]
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	4432      	add	r2, r6
 80070a4:	6022      	str	r2, [r4, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	eba2 030b 	sub.w	r3, r2, fp
 80070ac:	60bb      	str	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1d1      	bne.n	8007056 <__ssprint_r+0x78>
 80070b2:	2000      	movs	r0, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	b003      	add	sp, #12
 80070b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070bc:	462a      	mov	r2, r5
 80070be:	4640      	mov	r0, r8
 80070c0:	f000 f8e6 	bl	8007290 <_realloc_r>
 80070c4:	4606      	mov	r6, r0
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d1d7      	bne.n	800707a <__ssprint_r+0x9c>
 80070ca:	6921      	ldr	r1, [r4, #16]
 80070cc:	4640      	mov	r0, r8
 80070ce:	f7ff f8d7 	bl	8006280 <_free_r>
 80070d2:	e7b3      	b.n	800703c <__ssprint_r+0x5e>

080070d4 <sysconf>:
 80070d4:	2808      	cmp	r0, #8
 80070d6:	b508      	push	{r3, lr}
 80070d8:	d006      	beq.n	80070e8 <sysconf+0x14>
 80070da:	f7fc ffc7 	bl	800406c <__errno>
 80070de:	2316      	movs	r3, #22
 80070e0:	6003      	str	r3, [r0, #0]
 80070e2:	f04f 30ff 	mov.w	r0, #4294967295
 80070e6:	bd08      	pop	{r3, pc}
 80070e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80070ec:	e7fb      	b.n	80070e6 <sysconf+0x12>
	...

080070f0 <__register_exitproc>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	4d1c      	ldr	r5, [pc, #112]	; (8007168 <__register_exitproc+0x78>)
 80070f6:	4606      	mov	r6, r0
 80070f8:	6828      	ldr	r0, [r5, #0]
 80070fa:	4698      	mov	r8, r3
 80070fc:	460f      	mov	r7, r1
 80070fe:	4691      	mov	r9, r2
 8007100:	f7ff f984 	bl	800640c <__retarget_lock_acquire_recursive>
 8007104:	4b19      	ldr	r3, [pc, #100]	; (800716c <__register_exitproc+0x7c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800710c:	4628      	mov	r0, r5
 800710e:	b91c      	cbnz	r4, 8007118 <__register_exitproc+0x28>
 8007110:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8007114:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8007118:	6865      	ldr	r5, [r4, #4]
 800711a:	6800      	ldr	r0, [r0, #0]
 800711c:	2d1f      	cmp	r5, #31
 800711e:	dd05      	ble.n	800712c <__register_exitproc+0x3c>
 8007120:	f7ff f975 	bl	800640e <__retarget_lock_release_recursive>
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712c:	b19e      	cbz	r6, 8007156 <__register_exitproc+0x66>
 800712e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8007132:	2201      	movs	r2, #1
 8007134:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8007138:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800713c:	40aa      	lsls	r2, r5
 800713e:	4313      	orrs	r3, r2
 8007140:	2e02      	cmp	r6, #2
 8007142:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8007146:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800714a:	bf02      	ittt	eq
 800714c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8007150:	431a      	orreq	r2, r3
 8007152:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8007156:	1c6b      	adds	r3, r5, #1
 8007158:	3502      	adds	r5, #2
 800715a:	6063      	str	r3, [r4, #4]
 800715c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8007160:	f7ff f955 	bl	800640e <__retarget_lock_release_recursive>
 8007164:	2000      	movs	r0, #0
 8007166:	e7df      	b.n	8007128 <__register_exitproc+0x38>
 8007168:	20000448 	.word	0x20000448
 800716c:	08008c78 	.word	0x08008c78

08007170 <__assert_func>:
 8007170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007172:	4614      	mov	r4, r2
 8007174:	461a      	mov	r2, r3
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <__assert_func+0x2c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4605      	mov	r5, r0
 800717c:	68d8      	ldr	r0, [r3, #12]
 800717e:	b14c      	cbz	r4, 8007194 <__assert_func+0x24>
 8007180:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <__assert_func+0x30>)
 8007182:	9100      	str	r1, [sp, #0]
 8007184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007188:	4906      	ldr	r1, [pc, #24]	; (80071a4 <__assert_func+0x34>)
 800718a:	462b      	mov	r3, r5
 800718c:	f000 f83c 	bl	8007208 <fiprintf>
 8007190:	f000 ff84 	bl	800809c <abort>
 8007194:	4b04      	ldr	r3, [pc, #16]	; (80071a8 <__assert_func+0x38>)
 8007196:	461c      	mov	r4, r3
 8007198:	e7f3      	b.n	8007182 <__assert_func+0x12>
 800719a:	bf00      	nop
 800719c:	2000001c 	.word	0x2000001c
 80071a0:	08008eac 	.word	0x08008eac
 80071a4:	08008eb9 	.word	0x08008eb9
 80071a8:	08008ee7 	.word	0x08008ee7

080071ac <_calloc_r>:
 80071ac:	b510      	push	{r4, lr}
 80071ae:	4351      	muls	r1, r2
 80071b0:	f7ff f92e 	bl	8006410 <_malloc_r>
 80071b4:	4604      	mov	r4, r0
 80071b6:	b198      	cbz	r0, 80071e0 <_calloc_r+0x34>
 80071b8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80071bc:	f022 0203 	bic.w	r2, r2, #3
 80071c0:	3a04      	subs	r2, #4
 80071c2:	2a24      	cmp	r2, #36	; 0x24
 80071c4:	d81b      	bhi.n	80071fe <_calloc_r+0x52>
 80071c6:	2a13      	cmp	r2, #19
 80071c8:	d917      	bls.n	80071fa <_calloc_r+0x4e>
 80071ca:	2100      	movs	r1, #0
 80071cc:	2a1b      	cmp	r2, #27
 80071ce:	e9c0 1100 	strd	r1, r1, [r0]
 80071d2:	d807      	bhi.n	80071e4 <_calloc_r+0x38>
 80071d4:	f100 0308 	add.w	r3, r0, #8
 80071d8:	2200      	movs	r2, #0
 80071da:	e9c3 2200 	strd	r2, r2, [r3]
 80071de:	609a      	str	r2, [r3, #8]
 80071e0:	4620      	mov	r0, r4
 80071e2:	bd10      	pop	{r4, pc}
 80071e4:	2a24      	cmp	r2, #36	; 0x24
 80071e6:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80071ea:	bf11      	iteee	ne
 80071ec:	f100 0310 	addne.w	r3, r0, #16
 80071f0:	6101      	streq	r1, [r0, #16]
 80071f2:	f100 0318 	addeq.w	r3, r0, #24
 80071f6:	6141      	streq	r1, [r0, #20]
 80071f8:	e7ee      	b.n	80071d8 <_calloc_r+0x2c>
 80071fa:	4603      	mov	r3, r0
 80071fc:	e7ec      	b.n	80071d8 <_calloc_r+0x2c>
 80071fe:	2100      	movs	r1, #0
 8007200:	f7fc ff5e 	bl	80040c0 <memset>
 8007204:	e7ec      	b.n	80071e0 <_calloc_r+0x34>
	...

08007208 <fiprintf>:
 8007208:	b40e      	push	{r1, r2, r3}
 800720a:	b503      	push	{r0, r1, lr}
 800720c:	4601      	mov	r1, r0
 800720e:	ab03      	add	r3, sp, #12
 8007210:	4805      	ldr	r0, [pc, #20]	; (8007228 <fiprintf+0x20>)
 8007212:	f853 2b04 	ldr.w	r2, [r3], #4
 8007216:	6800      	ldr	r0, [r0, #0]
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	f000 fa11 	bl	8007640 <_vfiprintf_r>
 800721e:	b002      	add	sp, #8
 8007220:	f85d eb04 	ldr.w	lr, [sp], #4
 8007224:	b003      	add	sp, #12
 8007226:	4770      	bx	lr
 8007228:	2000001c 	.word	0x2000001c

0800722c <__locale_mb_cur_max>:
 800722c:	4b01      	ldr	r3, [pc, #4]	; (8007234 <__locale_mb_cur_max+0x8>)
 800722e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007232:	4770      	bx	lr
 8007234:	2000085c 	.word	0x2000085c

08007238 <__ascii_mbtowc>:
 8007238:	b082      	sub	sp, #8
 800723a:	b901      	cbnz	r1, 800723e <__ascii_mbtowc+0x6>
 800723c:	a901      	add	r1, sp, #4
 800723e:	b142      	cbz	r2, 8007252 <__ascii_mbtowc+0x1a>
 8007240:	b14b      	cbz	r3, 8007256 <__ascii_mbtowc+0x1e>
 8007242:	7813      	ldrb	r3, [r2, #0]
 8007244:	600b      	str	r3, [r1, #0]
 8007246:	7812      	ldrb	r2, [r2, #0]
 8007248:	1e10      	subs	r0, r2, #0
 800724a:	bf18      	it	ne
 800724c:	2001      	movne	r0, #1
 800724e:	b002      	add	sp, #8
 8007250:	4770      	bx	lr
 8007252:	4610      	mov	r0, r2
 8007254:	e7fb      	b.n	800724e <__ascii_mbtowc+0x16>
 8007256:	f06f 0001 	mvn.w	r0, #1
 800725a:	e7f8      	b.n	800724e <__ascii_mbtowc+0x16>

0800725c <memmove>:
 800725c:	4288      	cmp	r0, r1
 800725e:	b510      	push	{r4, lr}
 8007260:	eb01 0402 	add.w	r4, r1, r2
 8007264:	d902      	bls.n	800726c <memmove+0x10>
 8007266:	4284      	cmp	r4, r0
 8007268:	4623      	mov	r3, r4
 800726a:	d807      	bhi.n	800727c <memmove+0x20>
 800726c:	1e43      	subs	r3, r0, #1
 800726e:	42a1      	cmp	r1, r4
 8007270:	d008      	beq.n	8007284 <memmove+0x28>
 8007272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800727a:	e7f8      	b.n	800726e <memmove+0x12>
 800727c:	4402      	add	r2, r0
 800727e:	4601      	mov	r1, r0
 8007280:	428a      	cmp	r2, r1
 8007282:	d100      	bne.n	8007286 <memmove+0x2a>
 8007284:	bd10      	pop	{r4, pc}
 8007286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800728a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800728e:	e7f7      	b.n	8007280 <memmove+0x24>

08007290 <_realloc_r>:
 8007290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	4681      	mov	r9, r0
 8007296:	460c      	mov	r4, r1
 8007298:	b929      	cbnz	r1, 80072a6 <_realloc_r+0x16>
 800729a:	4611      	mov	r1, r2
 800729c:	b003      	add	sp, #12
 800729e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a2:	f7ff b8b5 	b.w	8006410 <_malloc_r>
 80072a6:	9201      	str	r2, [sp, #4]
 80072a8:	f7ff fb02 	bl	80068b0 <__malloc_lock>
 80072ac:	9a01      	ldr	r2, [sp, #4]
 80072ae:	f102 080b 	add.w	r8, r2, #11
 80072b2:	f1b8 0f16 	cmp.w	r8, #22
 80072b6:	d90b      	bls.n	80072d0 <_realloc_r+0x40>
 80072b8:	f038 0807 	bics.w	r8, r8, #7
 80072bc:	d50a      	bpl.n	80072d4 <_realloc_r+0x44>
 80072be:	230c      	movs	r3, #12
 80072c0:	f8c9 3000 	str.w	r3, [r9]
 80072c4:	f04f 0b00 	mov.w	fp, #0
 80072c8:	4658      	mov	r0, fp
 80072ca:	b003      	add	sp, #12
 80072cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d0:	f04f 0810 	mov.w	r8, #16
 80072d4:	4590      	cmp	r8, r2
 80072d6:	d3f2      	bcc.n	80072be <_realloc_r+0x2e>
 80072d8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80072dc:	f025 0603 	bic.w	r6, r5, #3
 80072e0:	45b0      	cmp	r8, r6
 80072e2:	f1a4 0a08 	sub.w	sl, r4, #8
 80072e6:	f340 8170 	ble.w	80075ca <_realloc_r+0x33a>
 80072ea:	48a9      	ldr	r0, [pc, #676]	; (8007590 <_realloc_r+0x300>)
 80072ec:	9001      	str	r0, [sp, #4]
 80072ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80072f2:	eb0a 0306 	add.w	r3, sl, r6
 80072f6:	459c      	cmp	ip, r3
 80072f8:	6859      	ldr	r1, [r3, #4]
 80072fa:	d005      	beq.n	8007308 <_realloc_r+0x78>
 80072fc:	f021 0001 	bic.w	r0, r1, #1
 8007300:	4418      	add	r0, r3
 8007302:	6840      	ldr	r0, [r0, #4]
 8007304:	07c7      	lsls	r7, r0, #31
 8007306:	d427      	bmi.n	8007358 <_realloc_r+0xc8>
 8007308:	f021 0103 	bic.w	r1, r1, #3
 800730c:	459c      	cmp	ip, r3
 800730e:	eb06 0701 	add.w	r7, r6, r1
 8007312:	d119      	bne.n	8007348 <_realloc_r+0xb8>
 8007314:	f108 0010 	add.w	r0, r8, #16
 8007318:	42b8      	cmp	r0, r7
 800731a:	dc1f      	bgt.n	800735c <_realloc_r+0xcc>
 800731c:	eb0a 0308 	add.w	r3, sl, r8
 8007320:	9a01      	ldr	r2, [sp, #4]
 8007322:	eba7 0708 	sub.w	r7, r7, r8
 8007326:	f047 0701 	orr.w	r7, r7, #1
 800732a:	6093      	str	r3, [r2, #8]
 800732c:	605f      	str	r7, [r3, #4]
 800732e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	ea43 0308 	orr.w	r3, r3, r8
 800733a:	f844 3c04 	str.w	r3, [r4, #-4]
 800733e:	4648      	mov	r0, r9
 8007340:	f7ff fabc 	bl	80068bc <__malloc_unlock>
 8007344:	46a3      	mov	fp, r4
 8007346:	e7bf      	b.n	80072c8 <_realloc_r+0x38>
 8007348:	45b8      	cmp	r8, r7
 800734a:	dc07      	bgt.n	800735c <_realloc_r+0xcc>
 800734c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	6093      	str	r3, [r2, #8]
 8007354:	4655      	mov	r5, sl
 8007356:	e07f      	b.n	8007458 <_realloc_r+0x1c8>
 8007358:	2100      	movs	r1, #0
 800735a:	460b      	mov	r3, r1
 800735c:	07e8      	lsls	r0, r5, #31
 800735e:	f100 80e5 	bmi.w	800752c <_realloc_r+0x29c>
 8007362:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007366:	ebaa 0505 	sub.w	r5, sl, r5
 800736a:	6868      	ldr	r0, [r5, #4]
 800736c:	f020 0003 	bic.w	r0, r0, #3
 8007370:	eb00 0b06 	add.w	fp, r0, r6
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80a5 	beq.w	80074c4 <_realloc_r+0x234>
 800737a:	459c      	cmp	ip, r3
 800737c:	eb01 070b 	add.w	r7, r1, fp
 8007380:	d14a      	bne.n	8007418 <_realloc_r+0x188>
 8007382:	f108 0310 	add.w	r3, r8, #16
 8007386:	42bb      	cmp	r3, r7
 8007388:	f300 809c 	bgt.w	80074c4 <_realloc_r+0x234>
 800738c:	46ab      	mov	fp, r5
 800738e:	68eb      	ldr	r3, [r5, #12]
 8007390:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8007394:	60d3      	str	r3, [r2, #12]
 8007396:	609a      	str	r2, [r3, #8]
 8007398:	1f32      	subs	r2, r6, #4
 800739a:	2a24      	cmp	r2, #36	; 0x24
 800739c:	d837      	bhi.n	800740e <_realloc_r+0x17e>
 800739e:	2a13      	cmp	r2, #19
 80073a0:	d933      	bls.n	800740a <_realloc_r+0x17a>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	60ab      	str	r3, [r5, #8]
 80073a6:	6863      	ldr	r3, [r4, #4]
 80073a8:	60eb      	str	r3, [r5, #12]
 80073aa:	2a1b      	cmp	r2, #27
 80073ac:	d81b      	bhi.n	80073e6 <_realloc_r+0x156>
 80073ae:	3408      	adds	r4, #8
 80073b0:	f105 0310 	add.w	r3, r5, #16
 80073b4:	6822      	ldr	r2, [r4, #0]
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	6862      	ldr	r2, [r4, #4]
 80073ba:	605a      	str	r2, [r3, #4]
 80073bc:	68a2      	ldr	r2, [r4, #8]
 80073be:	609a      	str	r2, [r3, #8]
 80073c0:	eb05 0308 	add.w	r3, r5, r8
 80073c4:	9a01      	ldr	r2, [sp, #4]
 80073c6:	eba7 0708 	sub.w	r7, r7, r8
 80073ca:	f047 0701 	orr.w	r7, r7, #1
 80073ce:	6093      	str	r3, [r2, #8]
 80073d0:	605f      	str	r7, [r3, #4]
 80073d2:	686b      	ldr	r3, [r5, #4]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	ea43 0308 	orr.w	r3, r3, r8
 80073dc:	606b      	str	r3, [r5, #4]
 80073de:	4648      	mov	r0, r9
 80073e0:	f7ff fa6c 	bl	80068bc <__malloc_unlock>
 80073e4:	e770      	b.n	80072c8 <_realloc_r+0x38>
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	612b      	str	r3, [r5, #16]
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	616b      	str	r3, [r5, #20]
 80073ee:	2a24      	cmp	r2, #36	; 0x24
 80073f0:	bf01      	itttt	eq
 80073f2:	6923      	ldreq	r3, [r4, #16]
 80073f4:	61ab      	streq	r3, [r5, #24]
 80073f6:	6962      	ldreq	r2, [r4, #20]
 80073f8:	61ea      	streq	r2, [r5, #28]
 80073fa:	bf19      	ittee	ne
 80073fc:	3410      	addne	r4, #16
 80073fe:	f105 0318 	addne.w	r3, r5, #24
 8007402:	f105 0320 	addeq.w	r3, r5, #32
 8007406:	3418      	addeq	r4, #24
 8007408:	e7d4      	b.n	80073b4 <_realloc_r+0x124>
 800740a:	465b      	mov	r3, fp
 800740c:	e7d2      	b.n	80073b4 <_realloc_r+0x124>
 800740e:	4621      	mov	r1, r4
 8007410:	4658      	mov	r0, fp
 8007412:	f7ff ff23 	bl	800725c <memmove>
 8007416:	e7d3      	b.n	80073c0 <_realloc_r+0x130>
 8007418:	45b8      	cmp	r8, r7
 800741a:	dc53      	bgt.n	80074c4 <_realloc_r+0x234>
 800741c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007420:	4628      	mov	r0, r5
 8007422:	60da      	str	r2, [r3, #12]
 8007424:	6093      	str	r3, [r2, #8]
 8007426:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800742a:	68eb      	ldr	r3, [r5, #12]
 800742c:	60d3      	str	r3, [r2, #12]
 800742e:	609a      	str	r2, [r3, #8]
 8007430:	1f32      	subs	r2, r6, #4
 8007432:	2a24      	cmp	r2, #36	; 0x24
 8007434:	d842      	bhi.n	80074bc <_realloc_r+0x22c>
 8007436:	2a13      	cmp	r2, #19
 8007438:	d908      	bls.n	800744c <_realloc_r+0x1bc>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	60ab      	str	r3, [r5, #8]
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	60eb      	str	r3, [r5, #12]
 8007442:	2a1b      	cmp	r2, #27
 8007444:	d828      	bhi.n	8007498 <_realloc_r+0x208>
 8007446:	3408      	adds	r4, #8
 8007448:	f105 0010 	add.w	r0, r5, #16
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	6003      	str	r3, [r0, #0]
 8007450:	6863      	ldr	r3, [r4, #4]
 8007452:	6043      	str	r3, [r0, #4]
 8007454:	68a3      	ldr	r3, [r4, #8]
 8007456:	6083      	str	r3, [r0, #8]
 8007458:	686a      	ldr	r2, [r5, #4]
 800745a:	eba7 0008 	sub.w	r0, r7, r8
 800745e:	280f      	cmp	r0, #15
 8007460:	f002 0201 	and.w	r2, r2, #1
 8007464:	eb05 0307 	add.w	r3, r5, r7
 8007468:	f240 80b1 	bls.w	80075ce <_realloc_r+0x33e>
 800746c:	eb05 0108 	add.w	r1, r5, r8
 8007470:	ea48 0202 	orr.w	r2, r8, r2
 8007474:	f040 0001 	orr.w	r0, r0, #1
 8007478:	606a      	str	r2, [r5, #4]
 800747a:	6048      	str	r0, [r1, #4]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	f042 0201 	orr.w	r2, r2, #1
 8007482:	605a      	str	r2, [r3, #4]
 8007484:	3108      	adds	r1, #8
 8007486:	4648      	mov	r0, r9
 8007488:	f7fe fefa 	bl	8006280 <_free_r>
 800748c:	4648      	mov	r0, r9
 800748e:	f7ff fa15 	bl	80068bc <__malloc_unlock>
 8007492:	f105 0b08 	add.w	fp, r5, #8
 8007496:	e717      	b.n	80072c8 <_realloc_r+0x38>
 8007498:	68a3      	ldr	r3, [r4, #8]
 800749a:	612b      	str	r3, [r5, #16]
 800749c:	68e3      	ldr	r3, [r4, #12]
 800749e:	616b      	str	r3, [r5, #20]
 80074a0:	2a24      	cmp	r2, #36	; 0x24
 80074a2:	bf01      	itttt	eq
 80074a4:	6923      	ldreq	r3, [r4, #16]
 80074a6:	61ab      	streq	r3, [r5, #24]
 80074a8:	6963      	ldreq	r3, [r4, #20]
 80074aa:	61eb      	streq	r3, [r5, #28]
 80074ac:	bf19      	ittee	ne
 80074ae:	3410      	addne	r4, #16
 80074b0:	f105 0018 	addne.w	r0, r5, #24
 80074b4:	f105 0020 	addeq.w	r0, r5, #32
 80074b8:	3418      	addeq	r4, #24
 80074ba:	e7c7      	b.n	800744c <_realloc_r+0x1bc>
 80074bc:	4621      	mov	r1, r4
 80074be:	f7ff fecd 	bl	800725c <memmove>
 80074c2:	e7c9      	b.n	8007458 <_realloc_r+0x1c8>
 80074c4:	45d8      	cmp	r8, fp
 80074c6:	dc31      	bgt.n	800752c <_realloc_r+0x29c>
 80074c8:	4628      	mov	r0, r5
 80074ca:	68eb      	ldr	r3, [r5, #12]
 80074cc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80074d0:	60d3      	str	r3, [r2, #12]
 80074d2:	609a      	str	r2, [r3, #8]
 80074d4:	1f32      	subs	r2, r6, #4
 80074d6:	2a24      	cmp	r2, #36	; 0x24
 80074d8:	d824      	bhi.n	8007524 <_realloc_r+0x294>
 80074da:	2a13      	cmp	r2, #19
 80074dc:	d908      	bls.n	80074f0 <_realloc_r+0x260>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	60ab      	str	r3, [r5, #8]
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	60eb      	str	r3, [r5, #12]
 80074e6:	2a1b      	cmp	r2, #27
 80074e8:	d80a      	bhi.n	8007500 <_realloc_r+0x270>
 80074ea:	3408      	adds	r4, #8
 80074ec:	f105 0010 	add.w	r0, r5, #16
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	6003      	str	r3, [r0, #0]
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	6043      	str	r3, [r0, #4]
 80074f8:	68a3      	ldr	r3, [r4, #8]
 80074fa:	6083      	str	r3, [r0, #8]
 80074fc:	465f      	mov	r7, fp
 80074fe:	e7ab      	b.n	8007458 <_realloc_r+0x1c8>
 8007500:	68a3      	ldr	r3, [r4, #8]
 8007502:	612b      	str	r3, [r5, #16]
 8007504:	68e3      	ldr	r3, [r4, #12]
 8007506:	616b      	str	r3, [r5, #20]
 8007508:	2a24      	cmp	r2, #36	; 0x24
 800750a:	bf01      	itttt	eq
 800750c:	6923      	ldreq	r3, [r4, #16]
 800750e:	61ab      	streq	r3, [r5, #24]
 8007510:	6963      	ldreq	r3, [r4, #20]
 8007512:	61eb      	streq	r3, [r5, #28]
 8007514:	bf19      	ittee	ne
 8007516:	3410      	addne	r4, #16
 8007518:	f105 0018 	addne.w	r0, r5, #24
 800751c:	f105 0020 	addeq.w	r0, r5, #32
 8007520:	3418      	addeq	r4, #24
 8007522:	e7e5      	b.n	80074f0 <_realloc_r+0x260>
 8007524:	4621      	mov	r1, r4
 8007526:	f7ff fe99 	bl	800725c <memmove>
 800752a:	e7e7      	b.n	80074fc <_realloc_r+0x26c>
 800752c:	4611      	mov	r1, r2
 800752e:	4648      	mov	r0, r9
 8007530:	f7fe ff6e 	bl	8006410 <_malloc_r>
 8007534:	4683      	mov	fp, r0
 8007536:	2800      	cmp	r0, #0
 8007538:	f43f af51 	beq.w	80073de <_realloc_r+0x14e>
 800753c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	4453      	add	r3, sl
 8007546:	f1a0 0208 	sub.w	r2, r0, #8
 800754a:	4293      	cmp	r3, r2
 800754c:	d105      	bne.n	800755a <_realloc_r+0x2ca>
 800754e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8007552:	f027 0703 	bic.w	r7, r7, #3
 8007556:	4437      	add	r7, r6
 8007558:	e6fc      	b.n	8007354 <_realloc_r+0xc4>
 800755a:	1f32      	subs	r2, r6, #4
 800755c:	2a24      	cmp	r2, #36	; 0x24
 800755e:	d830      	bhi.n	80075c2 <_realloc_r+0x332>
 8007560:	2a13      	cmp	r2, #19
 8007562:	d92b      	bls.n	80075bc <_realloc_r+0x32c>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	6003      	str	r3, [r0, #0]
 8007568:	6863      	ldr	r3, [r4, #4]
 800756a:	6043      	str	r3, [r0, #4]
 800756c:	2a1b      	cmp	r2, #27
 800756e:	d811      	bhi.n	8007594 <_realloc_r+0x304>
 8007570:	f104 0208 	add.w	r2, r4, #8
 8007574:	f100 0308 	add.w	r3, r0, #8
 8007578:	6811      	ldr	r1, [r2, #0]
 800757a:	6019      	str	r1, [r3, #0]
 800757c:	6851      	ldr	r1, [r2, #4]
 800757e:	6059      	str	r1, [r3, #4]
 8007580:	6892      	ldr	r2, [r2, #8]
 8007582:	609a      	str	r2, [r3, #8]
 8007584:	4621      	mov	r1, r4
 8007586:	4648      	mov	r0, r9
 8007588:	f7fe fe7a 	bl	8006280 <_free_r>
 800758c:	e727      	b.n	80073de <_realloc_r+0x14e>
 800758e:	bf00      	nop
 8007590:	2000044c 	.word	0x2000044c
 8007594:	68a3      	ldr	r3, [r4, #8]
 8007596:	6083      	str	r3, [r0, #8]
 8007598:	68e3      	ldr	r3, [r4, #12]
 800759a:	60c3      	str	r3, [r0, #12]
 800759c:	2a24      	cmp	r2, #36	; 0x24
 800759e:	bf01      	itttt	eq
 80075a0:	6923      	ldreq	r3, [r4, #16]
 80075a2:	6103      	streq	r3, [r0, #16]
 80075a4:	6961      	ldreq	r1, [r4, #20]
 80075a6:	6141      	streq	r1, [r0, #20]
 80075a8:	bf19      	ittee	ne
 80075aa:	f104 0210 	addne.w	r2, r4, #16
 80075ae:	f100 0310 	addne.w	r3, r0, #16
 80075b2:	f104 0218 	addeq.w	r2, r4, #24
 80075b6:	f100 0318 	addeq.w	r3, r0, #24
 80075ba:	e7dd      	b.n	8007578 <_realloc_r+0x2e8>
 80075bc:	4603      	mov	r3, r0
 80075be:	4622      	mov	r2, r4
 80075c0:	e7da      	b.n	8007578 <_realloc_r+0x2e8>
 80075c2:	4621      	mov	r1, r4
 80075c4:	f7ff fe4a 	bl	800725c <memmove>
 80075c8:	e7dc      	b.n	8007584 <_realloc_r+0x2f4>
 80075ca:	4637      	mov	r7, r6
 80075cc:	e6c2      	b.n	8007354 <_realloc_r+0xc4>
 80075ce:	4317      	orrs	r7, r2
 80075d0:	606f      	str	r7, [r5, #4]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	f042 0201 	orr.w	r2, r2, #1
 80075d8:	605a      	str	r2, [r3, #4]
 80075da:	e757      	b.n	800748c <_realloc_r+0x1fc>

080075dc <__sprint_r>:
 80075dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	6893      	ldr	r3, [r2, #8]
 80075e2:	4680      	mov	r8, r0
 80075e4:	460f      	mov	r7, r1
 80075e6:	4614      	mov	r4, r2
 80075e8:	b91b      	cbnz	r3, 80075f2 <__sprint_r+0x16>
 80075ea:	6053      	str	r3, [r2, #4]
 80075ec:	4618      	mov	r0, r3
 80075ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80075f4:	049d      	lsls	r5, r3, #18
 80075f6:	d520      	bpl.n	800763a <__sprint_r+0x5e>
 80075f8:	6815      	ldr	r5, [r2, #0]
 80075fa:	3508      	adds	r5, #8
 80075fc:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8007600:	f04f 0900 	mov.w	r9, #0
 8007604:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8007608:	45ca      	cmp	sl, r9
 800760a:	dc0b      	bgt.n	8007624 <__sprint_r+0x48>
 800760c:	68a3      	ldr	r3, [r4, #8]
 800760e:	f026 0003 	bic.w	r0, r6, #3
 8007612:	1a18      	subs	r0, r3, r0
 8007614:	60a0      	str	r0, [r4, #8]
 8007616:	3508      	adds	r5, #8
 8007618:	2800      	cmp	r0, #0
 800761a:	d1ef      	bne.n	80075fc <__sprint_r+0x20>
 800761c:	2300      	movs	r3, #0
 800761e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8007622:	e7e4      	b.n	80075ee <__sprint_r+0x12>
 8007624:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8007628:	463a      	mov	r2, r7
 800762a:	4640      	mov	r0, r8
 800762c:	f000 fea1 	bl	8008372 <_fputwc_r>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d0f3      	beq.n	800761c <__sprint_r+0x40>
 8007634:	f109 0901 	add.w	r9, r9, #1
 8007638:	e7e6      	b.n	8007608 <__sprint_r+0x2c>
 800763a:	f000 fec5 	bl	80083c8 <__sfvwrite_r>
 800763e:	e7ed      	b.n	800761c <__sprint_r+0x40>

08007640 <_vfiprintf_r>:
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	ed2d 8b02 	vpush	{d8}
 8007648:	b0b9      	sub	sp, #228	; 0xe4
 800764a:	460f      	mov	r7, r1
 800764c:	9201      	str	r2, [sp, #4]
 800764e:	461d      	mov	r5, r3
 8007650:	461c      	mov	r4, r3
 8007652:	4681      	mov	r9, r0
 8007654:	b118      	cbz	r0, 800765e <_vfiprintf_r+0x1e>
 8007656:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007658:	b90b      	cbnz	r3, 800765e <_vfiprintf_r+0x1e>
 800765a:	f000 fe21 	bl	80082a0 <__sinit>
 800765e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007660:	07d8      	lsls	r0, r3, #31
 8007662:	d405      	bmi.n	8007670 <_vfiprintf_r+0x30>
 8007664:	89bb      	ldrh	r3, [r7, #12]
 8007666:	0599      	lsls	r1, r3, #22
 8007668:	d402      	bmi.n	8007670 <_vfiprintf_r+0x30>
 800766a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800766c:	f7fe fece 	bl	800640c <__retarget_lock_acquire_recursive>
 8007670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007674:	049a      	lsls	r2, r3, #18
 8007676:	d406      	bmi.n	8007686 <_vfiprintf_r+0x46>
 8007678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800767c:	81bb      	strh	r3, [r7, #12]
 800767e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007684:	667b      	str	r3, [r7, #100]	; 0x64
 8007686:	89bb      	ldrh	r3, [r7, #12]
 8007688:	071e      	lsls	r6, r3, #28
 800768a:	d501      	bpl.n	8007690 <_vfiprintf_r+0x50>
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	b9bb      	cbnz	r3, 80076c0 <_vfiprintf_r+0x80>
 8007690:	4639      	mov	r1, r7
 8007692:	4648      	mov	r0, r9
 8007694:	f000 fcaa 	bl	8007fec <__swsetup_r>
 8007698:	b190      	cbz	r0, 80076c0 <_vfiprintf_r+0x80>
 800769a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800769c:	07d8      	lsls	r0, r3, #31
 800769e:	d508      	bpl.n	80076b2 <_vfiprintf_r+0x72>
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295
 80076a4:	9302      	str	r3, [sp, #8]
 80076a6:	9802      	ldr	r0, [sp, #8]
 80076a8:	b039      	add	sp, #228	; 0xe4
 80076aa:	ecbd 8b02 	vpop	{d8}
 80076ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b2:	89bb      	ldrh	r3, [r7, #12]
 80076b4:	0599      	lsls	r1, r3, #22
 80076b6:	d4f3      	bmi.n	80076a0 <_vfiprintf_r+0x60>
 80076b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80076ba:	f7fe fea8 	bl	800640e <__retarget_lock_release_recursive>
 80076be:	e7ef      	b.n	80076a0 <_vfiprintf_r+0x60>
 80076c0:	89bb      	ldrh	r3, [r7, #12]
 80076c2:	f003 021a 	and.w	r2, r3, #26
 80076c6:	2a0a      	cmp	r2, #10
 80076c8:	d113      	bne.n	80076f2 <_vfiprintf_r+0xb2>
 80076ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	db0f      	blt.n	80076f2 <_vfiprintf_r+0xb2>
 80076d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076d4:	07d2      	lsls	r2, r2, #31
 80076d6:	d404      	bmi.n	80076e2 <_vfiprintf_r+0xa2>
 80076d8:	059e      	lsls	r6, r3, #22
 80076da:	d402      	bmi.n	80076e2 <_vfiprintf_r+0xa2>
 80076dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80076de:	f7fe fe96 	bl	800640e <__retarget_lock_release_recursive>
 80076e2:	9a01      	ldr	r2, [sp, #4]
 80076e4:	462b      	mov	r3, r5
 80076e6:	4639      	mov	r1, r7
 80076e8:	4648      	mov	r0, r9
 80076ea:	f000 fc31 	bl	8007f50 <__sbprintf>
 80076ee:	9002      	str	r0, [sp, #8]
 80076f0:	e7d9      	b.n	80076a6 <_vfiprintf_r+0x66>
 80076f2:	2300      	movs	r3, #0
 80076f4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80076f8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80076fc:	ae0f      	add	r6, sp, #60	; 0x3c
 80076fe:	ee08 3a10 	vmov	s16, r3
 8007702:	960c      	str	r6, [sp, #48]	; 0x30
 8007704:	9307      	str	r3, [sp, #28]
 8007706:	9302      	str	r3, [sp, #8]
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	461d      	mov	r5, r3
 800770c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007710:	b10a      	cbz	r2, 8007716 <_vfiprintf_r+0xd6>
 8007712:	2a25      	cmp	r2, #37	; 0x25
 8007714:	d1f9      	bne.n	800770a <_vfiprintf_r+0xca>
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	ebb5 0803 	subs.w	r8, r5, r3
 800771c:	d00d      	beq.n	800773a <_vfiprintf_r+0xfa>
 800771e:	e9c6 3800 	strd	r3, r8, [r6]
 8007722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007724:	4443      	add	r3, r8
 8007726:	930e      	str	r3, [sp, #56]	; 0x38
 8007728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800772a:	3301      	adds	r3, #1
 800772c:	2b07      	cmp	r3, #7
 800772e:	930d      	str	r3, [sp, #52]	; 0x34
 8007730:	dc75      	bgt.n	800781e <_vfiprintf_r+0x1de>
 8007732:	3608      	adds	r6, #8
 8007734:	9b02      	ldr	r3, [sp, #8]
 8007736:	4443      	add	r3, r8
 8007738:	9302      	str	r3, [sp, #8]
 800773a:	782b      	ldrb	r3, [r5, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 83c8 	beq.w	8007ed2 <_vfiprintf_r+0x892>
 8007742:	2300      	movs	r3, #0
 8007744:	f04f 31ff 	mov.w	r1, #4294967295
 8007748:	1c6a      	adds	r2, r5, #1
 800774a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800774e:	9100      	str	r1, [sp, #0]
 8007750:	9303      	str	r3, [sp, #12]
 8007752:	469a      	mov	sl, r3
 8007754:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007758:	9201      	str	r2, [sp, #4]
 800775a:	f1a3 0220 	sub.w	r2, r3, #32
 800775e:	2a5a      	cmp	r2, #90	; 0x5a
 8007760:	f200 8310 	bhi.w	8007d84 <_vfiprintf_r+0x744>
 8007764:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007768:	030e0099 	.word	0x030e0099
 800776c:	00a1030e 	.word	0x00a1030e
 8007770:	030e030e 	.word	0x030e030e
 8007774:	0080030e 	.word	0x0080030e
 8007778:	030e030e 	.word	0x030e030e
 800777c:	00ae00a4 	.word	0x00ae00a4
 8007780:	00ab030e 	.word	0x00ab030e
 8007784:	030e00b0 	.word	0x030e00b0
 8007788:	00ce00cb 	.word	0x00ce00cb
 800778c:	00ce00ce 	.word	0x00ce00ce
 8007790:	00ce00ce 	.word	0x00ce00ce
 8007794:	00ce00ce 	.word	0x00ce00ce
 8007798:	00ce00ce 	.word	0x00ce00ce
 800779c:	030e030e 	.word	0x030e030e
 80077a0:	030e030e 	.word	0x030e030e
 80077a4:	030e030e 	.word	0x030e030e
 80077a8:	030e030e 	.word	0x030e030e
 80077ac:	00f8030e 	.word	0x00f8030e
 80077b0:	030e0106 	.word	0x030e0106
 80077b4:	030e030e 	.word	0x030e030e
 80077b8:	030e030e 	.word	0x030e030e
 80077bc:	030e030e 	.word	0x030e030e
 80077c0:	030e030e 	.word	0x030e030e
 80077c4:	014d030e 	.word	0x014d030e
 80077c8:	030e030e 	.word	0x030e030e
 80077cc:	0192030e 	.word	0x0192030e
 80077d0:	0270030e 	.word	0x0270030e
 80077d4:	030e030e 	.word	0x030e030e
 80077d8:	030e028e 	.word	0x030e028e
 80077dc:	030e030e 	.word	0x030e030e
 80077e0:	030e030e 	.word	0x030e030e
 80077e4:	030e030e 	.word	0x030e030e
 80077e8:	030e030e 	.word	0x030e030e
 80077ec:	00f8030e 	.word	0x00f8030e
 80077f0:	030e0108 	.word	0x030e0108
 80077f4:	030e030e 	.word	0x030e030e
 80077f8:	010800de 	.word	0x010800de
 80077fc:	030e00f2 	.word	0x030e00f2
 8007800:	030e00eb 	.word	0x030e00eb
 8007804:	014f0130 	.word	0x014f0130
 8007808:	00f20182 	.word	0x00f20182
 800780c:	0192030e 	.word	0x0192030e
 8007810:	02720097 	.word	0x02720097
 8007814:	030e030e 	.word	0x030e030e
 8007818:	030e0065 	.word	0x030e0065
 800781c:	0097      	.short	0x0097
 800781e:	aa0c      	add	r2, sp, #48	; 0x30
 8007820:	4639      	mov	r1, r7
 8007822:	4648      	mov	r0, r9
 8007824:	f7ff feda 	bl	80075dc <__sprint_r>
 8007828:	2800      	cmp	r0, #0
 800782a:	f040 8331 	bne.w	8007e90 <_vfiprintf_r+0x850>
 800782e:	ae0f      	add	r6, sp, #60	; 0x3c
 8007830:	e780      	b.n	8007734 <_vfiprintf_r+0xf4>
 8007832:	4a95      	ldr	r2, [pc, #596]	; (8007a88 <_vfiprintf_r+0x448>)
 8007834:	9205      	str	r2, [sp, #20]
 8007836:	f01a 0f20 	tst.w	sl, #32
 800783a:	f000 8225 	beq.w	8007c88 <_vfiprintf_r+0x648>
 800783e:	3407      	adds	r4, #7
 8007840:	f024 0b07 	bic.w	fp, r4, #7
 8007844:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8007848:	f01a 0f01 	tst.w	sl, #1
 800784c:	d009      	beq.n	8007862 <_vfiprintf_r+0x222>
 800784e:	ea54 0205 	orrs.w	r2, r4, r5
 8007852:	bf1f      	itttt	ne
 8007854:	2230      	movne	r2, #48	; 0x30
 8007856:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800785a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800785e:	f04a 0a02 	orrne.w	sl, sl, #2
 8007862:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007866:	e10d      	b.n	8007a84 <_vfiprintf_r+0x444>
 8007868:	4648      	mov	r0, r9
 800786a:	f7fe fdc9 	bl	8006400 <_localeconv_r>
 800786e:	6843      	ldr	r3, [r0, #4]
 8007870:	4618      	mov	r0, r3
 8007872:	ee08 3a10 	vmov	s16, r3
 8007876:	f7f8 fcbb 	bl	80001f0 <strlen>
 800787a:	9007      	str	r0, [sp, #28]
 800787c:	4648      	mov	r0, r9
 800787e:	f7fe fdbf 	bl	8006400 <_localeconv_r>
 8007882:	6883      	ldr	r3, [r0, #8]
 8007884:	9306      	str	r3, [sp, #24]
 8007886:	9b07      	ldr	r3, [sp, #28]
 8007888:	b12b      	cbz	r3, 8007896 <_vfiprintf_r+0x256>
 800788a:	9b06      	ldr	r3, [sp, #24]
 800788c:	b11b      	cbz	r3, 8007896 <_vfiprintf_r+0x256>
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b10b      	cbz	r3, 8007896 <_vfiprintf_r+0x256>
 8007892:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8007896:	9a01      	ldr	r2, [sp, #4]
 8007898:	e75c      	b.n	8007754 <_vfiprintf_r+0x114>
 800789a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f9      	bne.n	8007896 <_vfiprintf_r+0x256>
 80078a2:	2320      	movs	r3, #32
 80078a4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80078a8:	e7f5      	b.n	8007896 <_vfiprintf_r+0x256>
 80078aa:	f04a 0a01 	orr.w	sl, sl, #1
 80078ae:	e7f2      	b.n	8007896 <_vfiprintf_r+0x256>
 80078b0:	f854 3b04 	ldr.w	r3, [r4], #4
 80078b4:	9303      	str	r3, [sp, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	daed      	bge.n	8007896 <_vfiprintf_r+0x256>
 80078ba:	425b      	negs	r3, r3
 80078bc:	9303      	str	r3, [sp, #12]
 80078be:	f04a 0a04 	orr.w	sl, sl, #4
 80078c2:	e7e8      	b.n	8007896 <_vfiprintf_r+0x256>
 80078c4:	232b      	movs	r3, #43	; 0x2b
 80078c6:	e7ed      	b.n	80078a4 <_vfiprintf_r+0x264>
 80078c8:	9a01      	ldr	r2, [sp, #4]
 80078ca:	f812 3b01 	ldrb.w	r3, [r2], #1
 80078ce:	2b2a      	cmp	r3, #42	; 0x2a
 80078d0:	d112      	bne.n	80078f8 <_vfiprintf_r+0x2b8>
 80078d2:	f854 0b04 	ldr.w	r0, [r4], #4
 80078d6:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80078da:	e9cd 3200 	strd	r3, r2, [sp]
 80078de:	e7da      	b.n	8007896 <_vfiprintf_r+0x256>
 80078e0:	9b00      	ldr	r3, [sp, #0]
 80078e2:	200a      	movs	r0, #10
 80078e4:	fb00 1303 	mla	r3, r0, r3, r1
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	f812 3b01 	ldrb.w	r3, [r2], #1
 80078ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80078f2:	2909      	cmp	r1, #9
 80078f4:	d9f4      	bls.n	80078e0 <_vfiprintf_r+0x2a0>
 80078f6:	e72f      	b.n	8007758 <_vfiprintf_r+0x118>
 80078f8:	2100      	movs	r1, #0
 80078fa:	9100      	str	r1, [sp, #0]
 80078fc:	e7f7      	b.n	80078ee <_vfiprintf_r+0x2ae>
 80078fe:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007902:	e7c8      	b.n	8007896 <_vfiprintf_r+0x256>
 8007904:	2100      	movs	r1, #0
 8007906:	9a01      	ldr	r2, [sp, #4]
 8007908:	9103      	str	r1, [sp, #12]
 800790a:	9903      	ldr	r1, [sp, #12]
 800790c:	3b30      	subs	r3, #48	; 0x30
 800790e:	200a      	movs	r0, #10
 8007910:	fb00 3301 	mla	r3, r0, r1, r3
 8007914:	9303      	str	r3, [sp, #12]
 8007916:	f812 3b01 	ldrb.w	r3, [r2], #1
 800791a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800791e:	2909      	cmp	r1, #9
 8007920:	d9f3      	bls.n	800790a <_vfiprintf_r+0x2ca>
 8007922:	e719      	b.n	8007758 <_vfiprintf_r+0x118>
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b68      	cmp	r3, #104	; 0x68
 800792a:	bf01      	itttt	eq
 800792c:	9b01      	ldreq	r3, [sp, #4]
 800792e:	3301      	addeq	r3, #1
 8007930:	9301      	streq	r3, [sp, #4]
 8007932:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8007936:	bf18      	it	ne
 8007938:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800793c:	e7ab      	b.n	8007896 <_vfiprintf_r+0x256>
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b6c      	cmp	r3, #108	; 0x6c
 8007944:	d105      	bne.n	8007952 <_vfiprintf_r+0x312>
 8007946:	9b01      	ldr	r3, [sp, #4]
 8007948:	3301      	adds	r3, #1
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	f04a 0a20 	orr.w	sl, sl, #32
 8007950:	e7a1      	b.n	8007896 <_vfiprintf_r+0x256>
 8007952:	f04a 0a10 	orr.w	sl, sl, #16
 8007956:	e79e      	b.n	8007896 <_vfiprintf_r+0x256>
 8007958:	46a3      	mov	fp, r4
 800795a:	2100      	movs	r1, #0
 800795c:	f85b 3b04 	ldr.w	r3, [fp], #4
 8007960:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8007964:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8007968:	2301      	movs	r3, #1
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	460d      	mov	r5, r1
 800796e:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8007972:	e0a0      	b.n	8007ab6 <_vfiprintf_r+0x476>
 8007974:	f04a 0a10 	orr.w	sl, sl, #16
 8007978:	f01a 0f20 	tst.w	sl, #32
 800797c:	d011      	beq.n	80079a2 <_vfiprintf_r+0x362>
 800797e:	3407      	adds	r4, #7
 8007980:	f024 0b07 	bic.w	fp, r4, #7
 8007984:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8007988:	2c00      	cmp	r4, #0
 800798a:	f175 0300 	sbcs.w	r3, r5, #0
 800798e:	da06      	bge.n	800799e <_vfiprintf_r+0x35e>
 8007990:	4264      	negs	r4, r4
 8007992:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8007996:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800799a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800799e:	2301      	movs	r3, #1
 80079a0:	e03f      	b.n	8007a22 <_vfiprintf_r+0x3e2>
 80079a2:	f01a 0f10 	tst.w	sl, #16
 80079a6:	f104 0b04 	add.w	fp, r4, #4
 80079aa:	d002      	beq.n	80079b2 <_vfiprintf_r+0x372>
 80079ac:	6824      	ldr	r4, [r4, #0]
 80079ae:	17e5      	asrs	r5, r4, #31
 80079b0:	e7ea      	b.n	8007988 <_vfiprintf_r+0x348>
 80079b2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80079b6:	6824      	ldr	r4, [r4, #0]
 80079b8:	d001      	beq.n	80079be <_vfiprintf_r+0x37e>
 80079ba:	b224      	sxth	r4, r4
 80079bc:	e7f7      	b.n	80079ae <_vfiprintf_r+0x36e>
 80079be:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80079c2:	bf18      	it	ne
 80079c4:	b264      	sxtbne	r4, r4
 80079c6:	e7f2      	b.n	80079ae <_vfiprintf_r+0x36e>
 80079c8:	f01a 0f20 	tst.w	sl, #32
 80079cc:	f854 3b04 	ldr.w	r3, [r4], #4
 80079d0:	d005      	beq.n	80079de <_vfiprintf_r+0x39e>
 80079d2:	9a02      	ldr	r2, [sp, #8]
 80079d4:	4610      	mov	r0, r2
 80079d6:	17d1      	asrs	r1, r2, #31
 80079d8:	e9c3 0100 	strd	r0, r1, [r3]
 80079dc:	e694      	b.n	8007708 <_vfiprintf_r+0xc8>
 80079de:	f01a 0f10 	tst.w	sl, #16
 80079e2:	d002      	beq.n	80079ea <_vfiprintf_r+0x3aa>
 80079e4:	9a02      	ldr	r2, [sp, #8]
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	e68e      	b.n	8007708 <_vfiprintf_r+0xc8>
 80079ea:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80079ee:	d002      	beq.n	80079f6 <_vfiprintf_r+0x3b6>
 80079f0:	9a02      	ldr	r2, [sp, #8]
 80079f2:	801a      	strh	r2, [r3, #0]
 80079f4:	e688      	b.n	8007708 <_vfiprintf_r+0xc8>
 80079f6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80079fa:	d0f3      	beq.n	80079e4 <_vfiprintf_r+0x3a4>
 80079fc:	9a02      	ldr	r2, [sp, #8]
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e682      	b.n	8007708 <_vfiprintf_r+0xc8>
 8007a02:	f04a 0a10 	orr.w	sl, sl, #16
 8007a06:	f01a 0f20 	tst.w	sl, #32
 8007a0a:	d01d      	beq.n	8007a48 <_vfiprintf_r+0x408>
 8007a0c:	3407      	adds	r4, #7
 8007a0e:	f024 0b07 	bic.w	fp, r4, #7
 8007a12:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8007a16:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8007a22:	9a00      	ldr	r2, [sp, #0]
 8007a24:	3201      	adds	r2, #1
 8007a26:	f000 8261 	beq.w	8007eec <_vfiprintf_r+0x8ac>
 8007a2a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8007a2e:	9204      	str	r2, [sp, #16]
 8007a30:	ea54 0205 	orrs.w	r2, r4, r5
 8007a34:	f040 8260 	bne.w	8007ef8 <_vfiprintf_r+0x8b8>
 8007a38:	9a00      	ldr	r2, [sp, #0]
 8007a3a:	2a00      	cmp	r2, #0
 8007a3c:	f000 8197 	beq.w	8007d6e <_vfiprintf_r+0x72e>
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	f040 825c 	bne.w	8007efe <_vfiprintf_r+0x8be>
 8007a46:	e135      	b.n	8007cb4 <_vfiprintf_r+0x674>
 8007a48:	f01a 0f10 	tst.w	sl, #16
 8007a4c:	f104 0b04 	add.w	fp, r4, #4
 8007a50:	d001      	beq.n	8007a56 <_vfiprintf_r+0x416>
 8007a52:	6824      	ldr	r4, [r4, #0]
 8007a54:	e003      	b.n	8007a5e <_vfiprintf_r+0x41e>
 8007a56:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007a5a:	d002      	beq.n	8007a62 <_vfiprintf_r+0x422>
 8007a5c:	8824      	ldrh	r4, [r4, #0]
 8007a5e:	2500      	movs	r5, #0
 8007a60:	e7d9      	b.n	8007a16 <_vfiprintf_r+0x3d6>
 8007a62:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007a66:	d0f4      	beq.n	8007a52 <_vfiprintf_r+0x412>
 8007a68:	7824      	ldrb	r4, [r4, #0]
 8007a6a:	e7f8      	b.n	8007a5e <_vfiprintf_r+0x41e>
 8007a6c:	46a3      	mov	fp, r4
 8007a6e:	f647 0330 	movw	r3, #30768	; 0x7830
 8007a72:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8007a76:	f85b 4b04 	ldr.w	r4, [fp], #4
 8007a7a:	4b03      	ldr	r3, [pc, #12]	; (8007a88 <_vfiprintf_r+0x448>)
 8007a7c:	9305      	str	r3, [sp, #20]
 8007a7e:	2500      	movs	r5, #0
 8007a80:	f04a 0a02 	orr.w	sl, sl, #2
 8007a84:	2302      	movs	r3, #2
 8007a86:	e7c9      	b.n	8007a1c <_vfiprintf_r+0x3dc>
 8007a88:	08008c8c 	.word	0x08008c8c
 8007a8c:	9b00      	ldr	r3, [sp, #0]
 8007a8e:	46a3      	mov	fp, r4
 8007a90:	2500      	movs	r5, #0
 8007a92:	1c5c      	adds	r4, r3, #1
 8007a94:	f85b 8b04 	ldr.w	r8, [fp], #4
 8007a98:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8007a9c:	f000 80cf 	beq.w	8007c3e <_vfiprintf_r+0x5fe>
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	f7f8 fbab 	bl	8000200 <memchr>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f000 8174 	beq.w	8007d98 <_vfiprintf_r+0x758>
 8007ab0:	eba0 0308 	sub.w	r3, r0, r8
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	9b00      	ldr	r3, [sp, #0]
 8007ab8:	42ab      	cmp	r3, r5
 8007aba:	bfb8      	it	lt
 8007abc:	462b      	movlt	r3, r5
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8007ac4:	b113      	cbz	r3, 8007acc <_vfiprintf_r+0x48c>
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	f01a 0302 	ands.w	r3, sl, #2
 8007ad0:	9308      	str	r3, [sp, #32]
 8007ad2:	bf1e      	ittt	ne
 8007ad4:	9b04      	ldrne	r3, [sp, #16]
 8007ad6:	3302      	addne	r3, #2
 8007ad8:	9304      	strne	r3, [sp, #16]
 8007ada:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8007ade:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae0:	d11f      	bne.n	8007b22 <_vfiprintf_r+0x4e2>
 8007ae2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8007ae6:	1a9c      	subs	r4, r3, r2
 8007ae8:	2c00      	cmp	r4, #0
 8007aea:	dd1a      	ble.n	8007b22 <_vfiprintf_r+0x4e2>
 8007aec:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007af0:	48b9      	ldr	r0, [pc, #740]	; (8007dd8 <_vfiprintf_r+0x798>)
 8007af2:	6030      	str	r0, [r6, #0]
 8007af4:	2c10      	cmp	r4, #16
 8007af6:	f103 0301 	add.w	r3, r3, #1
 8007afa:	f106 0108 	add.w	r1, r6, #8
 8007afe:	f300 814d 	bgt.w	8007d9c <_vfiprintf_r+0x75c>
 8007b02:	6074      	str	r4, [r6, #4]
 8007b04:	2b07      	cmp	r3, #7
 8007b06:	4414      	add	r4, r2
 8007b08:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8007b0c:	f340 8158 	ble.w	8007dc0 <_vfiprintf_r+0x780>
 8007b10:	aa0c      	add	r2, sp, #48	; 0x30
 8007b12:	4639      	mov	r1, r7
 8007b14:	4648      	mov	r0, r9
 8007b16:	f7ff fd61 	bl	80075dc <__sprint_r>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	f040 81b8 	bne.w	8007e90 <_vfiprintf_r+0x850>
 8007b20:	ae0f      	add	r6, sp, #60	; 0x3c
 8007b22:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8007b26:	b173      	cbz	r3, 8007b46 <_vfiprintf_r+0x506>
 8007b28:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8007b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b2e:	6032      	str	r2, [r6, #0]
 8007b30:	2201      	movs	r2, #1
 8007b32:	6072      	str	r2, [r6, #4]
 8007b34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b36:	3301      	adds	r3, #1
 8007b38:	3201      	adds	r2, #1
 8007b3a:	2b07      	cmp	r3, #7
 8007b3c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8007b40:	f300 8140 	bgt.w	8007dc4 <_vfiprintf_r+0x784>
 8007b44:	3608      	adds	r6, #8
 8007b46:	9b08      	ldr	r3, [sp, #32]
 8007b48:	b16b      	cbz	r3, 8007b66 <_vfiprintf_r+0x526>
 8007b4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b4e:	6032      	str	r2, [r6, #0]
 8007b50:	2202      	movs	r2, #2
 8007b52:	6072      	str	r2, [r6, #4]
 8007b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b56:	3301      	adds	r3, #1
 8007b58:	3202      	adds	r2, #2
 8007b5a:	2b07      	cmp	r3, #7
 8007b5c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8007b60:	f300 8140 	bgt.w	8007de4 <_vfiprintf_r+0x7a4>
 8007b64:	3608      	adds	r6, #8
 8007b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b68:	2b80      	cmp	r3, #128	; 0x80
 8007b6a:	d11f      	bne.n	8007bac <_vfiprintf_r+0x56c>
 8007b6c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8007b70:	1a9c      	subs	r4, r3, r2
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	dd1a      	ble.n	8007bac <_vfiprintf_r+0x56c>
 8007b76:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007b7a:	4898      	ldr	r0, [pc, #608]	; (8007ddc <_vfiprintf_r+0x79c>)
 8007b7c:	6030      	str	r0, [r6, #0]
 8007b7e:	2c10      	cmp	r4, #16
 8007b80:	f103 0301 	add.w	r3, r3, #1
 8007b84:	f106 0108 	add.w	r1, r6, #8
 8007b88:	f300 8135 	bgt.w	8007df6 <_vfiprintf_r+0x7b6>
 8007b8c:	6074      	str	r4, [r6, #4]
 8007b8e:	2b07      	cmp	r3, #7
 8007b90:	4414      	add	r4, r2
 8007b92:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8007b96:	f340 8140 	ble.w	8007e1a <_vfiprintf_r+0x7da>
 8007b9a:	aa0c      	add	r2, sp, #48	; 0x30
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	4648      	mov	r0, r9
 8007ba0:	f7ff fd1c 	bl	80075dc <__sprint_r>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f040 8173 	bne.w	8007e90 <_vfiprintf_r+0x850>
 8007baa:	ae0f      	add	r6, sp, #60	; 0x3c
 8007bac:	9b00      	ldr	r3, [sp, #0]
 8007bae:	1aec      	subs	r4, r5, r3
 8007bb0:	2c00      	cmp	r4, #0
 8007bb2:	dd1a      	ble.n	8007bea <_vfiprintf_r+0x5aa>
 8007bb4:	4d89      	ldr	r5, [pc, #548]	; (8007ddc <_vfiprintf_r+0x79c>)
 8007bb6:	6035      	str	r5, [r6, #0]
 8007bb8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8007bbc:	2c10      	cmp	r4, #16
 8007bbe:	f103 0301 	add.w	r3, r3, #1
 8007bc2:	f106 0208 	add.w	r2, r6, #8
 8007bc6:	f300 812a 	bgt.w	8007e1e <_vfiprintf_r+0x7de>
 8007bca:	6074      	str	r4, [r6, #4]
 8007bcc:	2b07      	cmp	r3, #7
 8007bce:	440c      	add	r4, r1
 8007bd0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8007bd4:	f340 8134 	ble.w	8007e40 <_vfiprintf_r+0x800>
 8007bd8:	aa0c      	add	r2, sp, #48	; 0x30
 8007bda:	4639      	mov	r1, r7
 8007bdc:	4648      	mov	r0, r9
 8007bde:	f7ff fcfd 	bl	80075dc <__sprint_r>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	f040 8154 	bne.w	8007e90 <_vfiprintf_r+0x850>
 8007be8:	ae0f      	add	r6, sp, #60	; 0x3c
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007bee:	6073      	str	r3, [r6, #4]
 8007bf0:	4418      	add	r0, r3
 8007bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf4:	f8c6 8000 	str.w	r8, [r6]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	2b07      	cmp	r3, #7
 8007bfc:	900e      	str	r0, [sp, #56]	; 0x38
 8007bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8007c00:	f300 8120 	bgt.w	8007e44 <_vfiprintf_r+0x804>
 8007c04:	f106 0308 	add.w	r3, r6, #8
 8007c08:	f01a 0f04 	tst.w	sl, #4
 8007c0c:	f040 8122 	bne.w	8007e54 <_vfiprintf_r+0x814>
 8007c10:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007c14:	9904      	ldr	r1, [sp, #16]
 8007c16:	428a      	cmp	r2, r1
 8007c18:	bfac      	ite	ge
 8007c1a:	189b      	addge	r3, r3, r2
 8007c1c:	185b      	addlt	r3, r3, r1
 8007c1e:	9302      	str	r3, [sp, #8]
 8007c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c22:	b13b      	cbz	r3, 8007c34 <_vfiprintf_r+0x5f4>
 8007c24:	aa0c      	add	r2, sp, #48	; 0x30
 8007c26:	4639      	mov	r1, r7
 8007c28:	4648      	mov	r0, r9
 8007c2a:	f7ff fcd7 	bl	80075dc <__sprint_r>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f040 812e 	bne.w	8007e90 <_vfiprintf_r+0x850>
 8007c34:	2300      	movs	r3, #0
 8007c36:	930d      	str	r3, [sp, #52]	; 0x34
 8007c38:	465c      	mov	r4, fp
 8007c3a:	ae0f      	add	r6, sp, #60	; 0x3c
 8007c3c:	e564      	b.n	8007708 <_vfiprintf_r+0xc8>
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f7f8 fad6 	bl	80001f0 <strlen>
 8007c44:	9000      	str	r0, [sp, #0]
 8007c46:	e736      	b.n	8007ab6 <_vfiprintf_r+0x476>
 8007c48:	f04a 0a10 	orr.w	sl, sl, #16
 8007c4c:	f01a 0f20 	tst.w	sl, #32
 8007c50:	d006      	beq.n	8007c60 <_vfiprintf_r+0x620>
 8007c52:	3407      	adds	r4, #7
 8007c54:	f024 0b07 	bic.w	fp, r4, #7
 8007c58:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e6dd      	b.n	8007a1c <_vfiprintf_r+0x3dc>
 8007c60:	f01a 0f10 	tst.w	sl, #16
 8007c64:	f104 0b04 	add.w	fp, r4, #4
 8007c68:	d001      	beq.n	8007c6e <_vfiprintf_r+0x62e>
 8007c6a:	6824      	ldr	r4, [r4, #0]
 8007c6c:	e003      	b.n	8007c76 <_vfiprintf_r+0x636>
 8007c6e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007c72:	d002      	beq.n	8007c7a <_vfiprintf_r+0x63a>
 8007c74:	8824      	ldrh	r4, [r4, #0]
 8007c76:	2500      	movs	r5, #0
 8007c78:	e7f0      	b.n	8007c5c <_vfiprintf_r+0x61c>
 8007c7a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007c7e:	d0f4      	beq.n	8007c6a <_vfiprintf_r+0x62a>
 8007c80:	7824      	ldrb	r4, [r4, #0]
 8007c82:	e7f8      	b.n	8007c76 <_vfiprintf_r+0x636>
 8007c84:	4a56      	ldr	r2, [pc, #344]	; (8007de0 <_vfiprintf_r+0x7a0>)
 8007c86:	e5d5      	b.n	8007834 <_vfiprintf_r+0x1f4>
 8007c88:	f01a 0f10 	tst.w	sl, #16
 8007c8c:	f104 0b04 	add.w	fp, r4, #4
 8007c90:	d001      	beq.n	8007c96 <_vfiprintf_r+0x656>
 8007c92:	6824      	ldr	r4, [r4, #0]
 8007c94:	e003      	b.n	8007c9e <_vfiprintf_r+0x65e>
 8007c96:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007c9a:	d002      	beq.n	8007ca2 <_vfiprintf_r+0x662>
 8007c9c:	8824      	ldrh	r4, [r4, #0]
 8007c9e:	2500      	movs	r5, #0
 8007ca0:	e5d2      	b.n	8007848 <_vfiprintf_r+0x208>
 8007ca2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007ca6:	d0f4      	beq.n	8007c92 <_vfiprintf_r+0x652>
 8007ca8:	7824      	ldrb	r4, [r4, #0]
 8007caa:	e7f8      	b.n	8007c9e <_vfiprintf_r+0x65e>
 8007cac:	2d00      	cmp	r5, #0
 8007cae:	bf08      	it	eq
 8007cb0:	2c0a      	cmpeq	r4, #10
 8007cb2:	d205      	bcs.n	8007cc0 <_vfiprintf_r+0x680>
 8007cb4:	3430      	adds	r4, #48	; 0x30
 8007cb6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8007cba:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8007cbe:	e13c      	b.n	8007f3a <_vfiprintf_r+0x8fa>
 8007cc0:	ab38      	add	r3, sp, #224	; 0xe0
 8007cc2:	9308      	str	r3, [sp, #32]
 8007cc4:	9b04      	ldr	r3, [sp, #16]
 8007cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cca:	f04f 0a00 	mov.w	sl, #0
 8007cce:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd0:	9b08      	ldr	r3, [sp, #32]
 8007cd2:	220a      	movs	r2, #10
 8007cd4:	f103 38ff 	add.w	r8, r3, #4294967295
 8007cd8:	4620      	mov	r0, r4
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4629      	mov	r1, r5
 8007cde:	f7f8 ff73 	bl	8000bc8 <__aeabi_uldivmod>
 8007ce2:	9b08      	ldr	r3, [sp, #32]
 8007ce4:	3230      	adds	r2, #48	; 0x30
 8007ce6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8007cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cec:	f10a 0a01 	add.w	sl, sl, #1
 8007cf0:	b1db      	cbz	r3, 8007d2a <_vfiprintf_r+0x6ea>
 8007cf2:	9b06      	ldr	r3, [sp, #24]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	4553      	cmp	r3, sl
 8007cf8:	d117      	bne.n	8007d2a <_vfiprintf_r+0x6ea>
 8007cfa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8007cfe:	d014      	beq.n	8007d2a <_vfiprintf_r+0x6ea>
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	bf08      	it	eq
 8007d04:	2c0a      	cmpeq	r4, #10
 8007d06:	d310      	bcc.n	8007d2a <_vfiprintf_r+0x6ea>
 8007d08:	9b07      	ldr	r3, [sp, #28]
 8007d0a:	eba8 0803 	sub.w	r8, r8, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	ee18 1a10 	vmov	r1, s16
 8007d14:	4640      	mov	r0, r8
 8007d16:	f7ff f94f 	bl	8006fb8 <strncpy>
 8007d1a:	9b06      	ldr	r3, [sp, #24]
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	b1a3      	cbz	r3, 8007d4a <_vfiprintf_r+0x70a>
 8007d20:	9b06      	ldr	r3, [sp, #24]
 8007d22:	3301      	adds	r3, #1
 8007d24:	9306      	str	r3, [sp, #24]
 8007d26:	f04f 0a00 	mov.w	sl, #0
 8007d2a:	220a      	movs	r2, #10
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	f7f8 ff49 	bl	8000bc8 <__aeabi_uldivmod>
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	bf08      	it	eq
 8007d3a:	2c0a      	cmpeq	r4, #10
 8007d3c:	f0c0 80fd 	bcc.w	8007f3a <_vfiprintf_r+0x8fa>
 8007d40:	4604      	mov	r4, r0
 8007d42:	460d      	mov	r5, r1
 8007d44:	f8cd 8020 	str.w	r8, [sp, #32]
 8007d48:	e7c2      	b.n	8007cd0 <_vfiprintf_r+0x690>
 8007d4a:	469a      	mov	sl, r3
 8007d4c:	e7ed      	b.n	8007d2a <_vfiprintf_r+0x6ea>
 8007d4e:	9a05      	ldr	r2, [sp, #20]
 8007d50:	f004 030f 	and.w	r3, r4, #15
 8007d54:	5cd3      	ldrb	r3, [r2, r3]
 8007d56:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007d5a:	0923      	lsrs	r3, r4, #4
 8007d5c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8007d60:	092a      	lsrs	r2, r5, #4
 8007d62:	461c      	mov	r4, r3
 8007d64:	4615      	mov	r5, r2
 8007d66:	ea54 0305 	orrs.w	r3, r4, r5
 8007d6a:	d1f0      	bne.n	8007d4e <_vfiprintf_r+0x70e>
 8007d6c:	e0e5      	b.n	8007f3a <_vfiprintf_r+0x8fa>
 8007d6e:	b933      	cbnz	r3, 8007d7e <_vfiprintf_r+0x73e>
 8007d70:	f01a 0f01 	tst.w	sl, #1
 8007d74:	d003      	beq.n	8007d7e <_vfiprintf_r+0x73e>
 8007d76:	2330      	movs	r3, #48	; 0x30
 8007d78:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8007d7c:	e79d      	b.n	8007cba <_vfiprintf_r+0x67a>
 8007d7e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8007d82:	e0da      	b.n	8007f3a <_vfiprintf_r+0x8fa>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80a4 	beq.w	8007ed2 <_vfiprintf_r+0x892>
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8007d90:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8007d94:	46a3      	mov	fp, r4
 8007d96:	e5e7      	b.n	8007968 <_vfiprintf_r+0x328>
 8007d98:	4605      	mov	r5, r0
 8007d9a:	e68c      	b.n	8007ab6 <_vfiprintf_r+0x476>
 8007d9c:	2010      	movs	r0, #16
 8007d9e:	4402      	add	r2, r0
 8007da0:	2b07      	cmp	r3, #7
 8007da2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8007da6:	6070      	str	r0, [r6, #4]
 8007da8:	dd07      	ble.n	8007dba <_vfiprintf_r+0x77a>
 8007daa:	aa0c      	add	r2, sp, #48	; 0x30
 8007dac:	4639      	mov	r1, r7
 8007dae:	4648      	mov	r0, r9
 8007db0:	f7ff fc14 	bl	80075dc <__sprint_r>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d16b      	bne.n	8007e90 <_vfiprintf_r+0x850>
 8007db8:	a90f      	add	r1, sp, #60	; 0x3c
 8007dba:	3c10      	subs	r4, #16
 8007dbc:	460e      	mov	r6, r1
 8007dbe:	e695      	b.n	8007aec <_vfiprintf_r+0x4ac>
 8007dc0:	460e      	mov	r6, r1
 8007dc2:	e6ae      	b.n	8007b22 <_vfiprintf_r+0x4e2>
 8007dc4:	aa0c      	add	r2, sp, #48	; 0x30
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	4648      	mov	r0, r9
 8007dca:	f7ff fc07 	bl	80075dc <__sprint_r>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d15e      	bne.n	8007e90 <_vfiprintf_r+0x850>
 8007dd2:	ae0f      	add	r6, sp, #60	; 0x3c
 8007dd4:	e6b7      	b.n	8007b46 <_vfiprintf_r+0x506>
 8007dd6:	bf00      	nop
 8007dd8:	08008ef2 	.word	0x08008ef2
 8007ddc:	08008f02 	.word	0x08008f02
 8007de0:	08008c9d 	.word	0x08008c9d
 8007de4:	aa0c      	add	r2, sp, #48	; 0x30
 8007de6:	4639      	mov	r1, r7
 8007de8:	4648      	mov	r0, r9
 8007dea:	f7ff fbf7 	bl	80075dc <__sprint_r>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d14e      	bne.n	8007e90 <_vfiprintf_r+0x850>
 8007df2:	ae0f      	add	r6, sp, #60	; 0x3c
 8007df4:	e6b7      	b.n	8007b66 <_vfiprintf_r+0x526>
 8007df6:	2010      	movs	r0, #16
 8007df8:	4402      	add	r2, r0
 8007dfa:	2b07      	cmp	r3, #7
 8007dfc:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8007e00:	6070      	str	r0, [r6, #4]
 8007e02:	dd07      	ble.n	8007e14 <_vfiprintf_r+0x7d4>
 8007e04:	aa0c      	add	r2, sp, #48	; 0x30
 8007e06:	4639      	mov	r1, r7
 8007e08:	4648      	mov	r0, r9
 8007e0a:	f7ff fbe7 	bl	80075dc <__sprint_r>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d13e      	bne.n	8007e90 <_vfiprintf_r+0x850>
 8007e12:	a90f      	add	r1, sp, #60	; 0x3c
 8007e14:	3c10      	subs	r4, #16
 8007e16:	460e      	mov	r6, r1
 8007e18:	e6ad      	b.n	8007b76 <_vfiprintf_r+0x536>
 8007e1a:	460e      	mov	r6, r1
 8007e1c:	e6c6      	b.n	8007bac <_vfiprintf_r+0x56c>
 8007e1e:	2010      	movs	r0, #16
 8007e20:	4401      	add	r1, r0
 8007e22:	2b07      	cmp	r3, #7
 8007e24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007e28:	6070      	str	r0, [r6, #4]
 8007e2a:	dd06      	ble.n	8007e3a <_vfiprintf_r+0x7fa>
 8007e2c:	aa0c      	add	r2, sp, #48	; 0x30
 8007e2e:	4639      	mov	r1, r7
 8007e30:	4648      	mov	r0, r9
 8007e32:	f7ff fbd3 	bl	80075dc <__sprint_r>
 8007e36:	bb58      	cbnz	r0, 8007e90 <_vfiprintf_r+0x850>
 8007e38:	aa0f      	add	r2, sp, #60	; 0x3c
 8007e3a:	3c10      	subs	r4, #16
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	e6ba      	b.n	8007bb6 <_vfiprintf_r+0x576>
 8007e40:	4616      	mov	r6, r2
 8007e42:	e6d2      	b.n	8007bea <_vfiprintf_r+0x5aa>
 8007e44:	aa0c      	add	r2, sp, #48	; 0x30
 8007e46:	4639      	mov	r1, r7
 8007e48:	4648      	mov	r0, r9
 8007e4a:	f7ff fbc7 	bl	80075dc <__sprint_r>
 8007e4e:	b9f8      	cbnz	r0, 8007e90 <_vfiprintf_r+0x850>
 8007e50:	ab0f      	add	r3, sp, #60	; 0x3c
 8007e52:	e6d9      	b.n	8007c08 <_vfiprintf_r+0x5c8>
 8007e54:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8007e58:	1a54      	subs	r4, r2, r1
 8007e5a:	2c00      	cmp	r4, #0
 8007e5c:	f77f aed8 	ble.w	8007c10 <_vfiprintf_r+0x5d0>
 8007e60:	4d3a      	ldr	r5, [pc, #232]	; (8007f4c <_vfiprintf_r+0x90c>)
 8007e62:	2610      	movs	r6, #16
 8007e64:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8007e68:	2c10      	cmp	r4, #16
 8007e6a:	f102 0201 	add.w	r2, r2, #1
 8007e6e:	601d      	str	r5, [r3, #0]
 8007e70:	dc1d      	bgt.n	8007eae <_vfiprintf_r+0x86e>
 8007e72:	605c      	str	r4, [r3, #4]
 8007e74:	2a07      	cmp	r2, #7
 8007e76:	440c      	add	r4, r1
 8007e78:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8007e7c:	f77f aec8 	ble.w	8007c10 <_vfiprintf_r+0x5d0>
 8007e80:	aa0c      	add	r2, sp, #48	; 0x30
 8007e82:	4639      	mov	r1, r7
 8007e84:	4648      	mov	r0, r9
 8007e86:	f7ff fba9 	bl	80075dc <__sprint_r>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f43f aec0 	beq.w	8007c10 <_vfiprintf_r+0x5d0>
 8007e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e92:	07d9      	lsls	r1, r3, #31
 8007e94:	d405      	bmi.n	8007ea2 <_vfiprintf_r+0x862>
 8007e96:	89bb      	ldrh	r3, [r7, #12]
 8007e98:	059a      	lsls	r2, r3, #22
 8007e9a:	d402      	bmi.n	8007ea2 <_vfiprintf_r+0x862>
 8007e9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007e9e:	f7fe fab6 	bl	800640e <__retarget_lock_release_recursive>
 8007ea2:	89bb      	ldrh	r3, [r7, #12]
 8007ea4:	065b      	lsls	r3, r3, #25
 8007ea6:	f57f abfe 	bpl.w	80076a6 <_vfiprintf_r+0x66>
 8007eaa:	f7ff bbf9 	b.w	80076a0 <_vfiprintf_r+0x60>
 8007eae:	3110      	adds	r1, #16
 8007eb0:	2a07      	cmp	r2, #7
 8007eb2:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8007eb6:	605e      	str	r6, [r3, #4]
 8007eb8:	dc02      	bgt.n	8007ec0 <_vfiprintf_r+0x880>
 8007eba:	3308      	adds	r3, #8
 8007ebc:	3c10      	subs	r4, #16
 8007ebe:	e7d1      	b.n	8007e64 <_vfiprintf_r+0x824>
 8007ec0:	aa0c      	add	r2, sp, #48	; 0x30
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	4648      	mov	r0, r9
 8007ec6:	f7ff fb89 	bl	80075dc <__sprint_r>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d1e0      	bne.n	8007e90 <_vfiprintf_r+0x850>
 8007ece:	ab0f      	add	r3, sp, #60	; 0x3c
 8007ed0:	e7f4      	b.n	8007ebc <_vfiprintf_r+0x87c>
 8007ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ed4:	b913      	cbnz	r3, 8007edc <_vfiprintf_r+0x89c>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	930d      	str	r3, [sp, #52]	; 0x34
 8007eda:	e7d9      	b.n	8007e90 <_vfiprintf_r+0x850>
 8007edc:	aa0c      	add	r2, sp, #48	; 0x30
 8007ede:	4639      	mov	r1, r7
 8007ee0:	4648      	mov	r0, r9
 8007ee2:	f7ff fb7b 	bl	80075dc <__sprint_r>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d0f5      	beq.n	8007ed6 <_vfiprintf_r+0x896>
 8007eea:	e7d1      	b.n	8007e90 <_vfiprintf_r+0x850>
 8007eec:	ea54 0205 	orrs.w	r2, r4, r5
 8007ef0:	f8cd a010 	str.w	sl, [sp, #16]
 8007ef4:	f43f ada4 	beq.w	8007a40 <_vfiprintf_r+0x400>
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	f43f aed7 	beq.w	8007cac <_vfiprintf_r+0x66c>
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8007f04:	f43f af23 	beq.w	8007d4e <_vfiprintf_r+0x70e>
 8007f08:	08e2      	lsrs	r2, r4, #3
 8007f0a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8007f0e:	08e8      	lsrs	r0, r5, #3
 8007f10:	f004 0307 	and.w	r3, r4, #7
 8007f14:	4605      	mov	r5, r0
 8007f16:	4614      	mov	r4, r2
 8007f18:	3330      	adds	r3, #48	; 0x30
 8007f1a:	ea54 0205 	orrs.w	r2, r4, r5
 8007f1e:	4641      	mov	r1, r8
 8007f20:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007f24:	d1f0      	bne.n	8007f08 <_vfiprintf_r+0x8c8>
 8007f26:	9a04      	ldr	r2, [sp, #16]
 8007f28:	07d0      	lsls	r0, r2, #31
 8007f2a:	d506      	bpl.n	8007f3a <_vfiprintf_r+0x8fa>
 8007f2c:	2b30      	cmp	r3, #48	; 0x30
 8007f2e:	d004      	beq.n	8007f3a <_vfiprintf_r+0x8fa>
 8007f30:	2330      	movs	r3, #48	; 0x30
 8007f32:	f808 3c01 	strb.w	r3, [r8, #-1]
 8007f36:	f1a1 0802 	sub.w	r8, r1, #2
 8007f3a:	ab38      	add	r3, sp, #224	; 0xe0
 8007f3c:	eba3 0308 	sub.w	r3, r3, r8
 8007f40:	9d00      	ldr	r5, [sp, #0]
 8007f42:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	e5b5      	b.n	8007ab6 <_vfiprintf_r+0x476>
 8007f4a:	bf00      	nop
 8007f4c:	08008ef2 	.word	0x08008ef2

08007f50 <__sbprintf>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	460c      	mov	r4, r1
 8007f54:	8989      	ldrh	r1, [r1, #12]
 8007f56:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8007f5a:	f021 0102 	bic.w	r1, r1, #2
 8007f5e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007f62:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007f64:	911b      	str	r1, [sp, #108]	; 0x6c
 8007f66:	89e1      	ldrh	r1, [r4, #14]
 8007f68:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007f6c:	69e1      	ldr	r1, [r4, #28]
 8007f6e:	9109      	str	r1, [sp, #36]	; 0x24
 8007f70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f72:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f74:	a91c      	add	r1, sp, #112	; 0x70
 8007f76:	9102      	str	r1, [sp, #8]
 8007f78:	9106      	str	r1, [sp, #24]
 8007f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f7e:	4606      	mov	r6, r0
 8007f80:	9104      	str	r1, [sp, #16]
 8007f82:	9107      	str	r1, [sp, #28]
 8007f84:	a818      	add	r0, sp, #96	; 0x60
 8007f86:	2100      	movs	r1, #0
 8007f88:	e9cd 3200 	strd	r3, r2, [sp]
 8007f8c:	9108      	str	r1, [sp, #32]
 8007f8e:	f7fe fa3b 	bl	8006408 <__retarget_lock_init_recursive>
 8007f92:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007f96:	a902      	add	r1, sp, #8
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7ff fb51 	bl	8007640 <_vfiprintf_r>
 8007f9e:	1e05      	subs	r5, r0, #0
 8007fa0:	db07      	blt.n	8007fb2 <__sbprintf+0x62>
 8007fa2:	a902      	add	r1, sp, #8
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f000 f90f 	bl	80081c8 <_fflush_r>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	bf18      	it	ne
 8007fae:	f04f 35ff 	movne.w	r5, #4294967295
 8007fb2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8007fb6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007fb8:	065b      	lsls	r3, r3, #25
 8007fba:	bf42      	ittt	mi
 8007fbc:	89a3      	ldrhmi	r3, [r4, #12]
 8007fbe:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8007fc2:	81a3      	strhmi	r3, [r4, #12]
 8007fc4:	f7fe fa21 	bl	800640a <__retarget_lock_close_recursive>
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8007fce:	bd70      	pop	{r4, r5, r6, pc}

08007fd0 <__ascii_wctomb>:
 8007fd0:	b149      	cbz	r1, 8007fe6 <__ascii_wctomb+0x16>
 8007fd2:	2aff      	cmp	r2, #255	; 0xff
 8007fd4:	bf85      	ittet	hi
 8007fd6:	238a      	movhi	r3, #138	; 0x8a
 8007fd8:	6003      	strhi	r3, [r0, #0]
 8007fda:	700a      	strbls	r2, [r1, #0]
 8007fdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007fe0:	bf98      	it	ls
 8007fe2:	2001      	movls	r0, #1
 8007fe4:	4770      	bx	lr
 8007fe6:	4608      	mov	r0, r1
 8007fe8:	4770      	bx	lr
	...

08007fec <__swsetup_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	4b2a      	ldr	r3, [pc, #168]	; (8008098 <__swsetup_r+0xac>)
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	b118      	cbz	r0, 8008000 <__swsetup_r+0x14>
 8007ff8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007ffa:	b90b      	cbnz	r3, 8008000 <__swsetup_r+0x14>
 8007ffc:	f000 f950 	bl	80082a0 <__sinit>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008006:	0718      	lsls	r0, r3, #28
 8008008:	d422      	bmi.n	8008050 <__swsetup_r+0x64>
 800800a:	06d9      	lsls	r1, r3, #27
 800800c:	d407      	bmi.n	800801e <__swsetup_r+0x32>
 800800e:	2309      	movs	r3, #9
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	e034      	b.n	8008088 <__swsetup_r+0x9c>
 800801e:	0758      	lsls	r0, r3, #29
 8008020:	d512      	bpl.n	8008048 <__swsetup_r+0x5c>
 8008022:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008024:	b141      	cbz	r1, 8008038 <__swsetup_r+0x4c>
 8008026:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800802a:	4299      	cmp	r1, r3
 800802c:	d002      	beq.n	8008034 <__swsetup_r+0x48>
 800802e:	4628      	mov	r0, r5
 8008030:	f7fe f926 	bl	8006280 <_free_r>
 8008034:	2300      	movs	r3, #0
 8008036:	6323      	str	r3, [r4, #48]	; 0x30
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	2300      	movs	r3, #0
 8008042:	6063      	str	r3, [r4, #4]
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	6023      	str	r3, [r4, #0]
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	f043 0308 	orr.w	r3, r3, #8
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	b94b      	cbnz	r3, 8008068 <__swsetup_r+0x7c>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800805a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800805e:	d003      	beq.n	8008068 <__swsetup_r+0x7c>
 8008060:	4621      	mov	r1, r4
 8008062:	4628      	mov	r0, r5
 8008064:	f000 fb44 	bl	80086f0 <__smakebuf_r>
 8008068:	89a0      	ldrh	r0, [r4, #12]
 800806a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800806e:	f010 0301 	ands.w	r3, r0, #1
 8008072:	d00a      	beq.n	800808a <__swsetup_r+0x9e>
 8008074:	2300      	movs	r3, #0
 8008076:	60a3      	str	r3, [r4, #8]
 8008078:	6963      	ldr	r3, [r4, #20]
 800807a:	425b      	negs	r3, r3
 800807c:	61a3      	str	r3, [r4, #24]
 800807e:	6923      	ldr	r3, [r4, #16]
 8008080:	b943      	cbnz	r3, 8008094 <__swsetup_r+0xa8>
 8008082:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008086:	d1c4      	bne.n	8008012 <__swsetup_r+0x26>
 8008088:	bd38      	pop	{r3, r4, r5, pc}
 800808a:	0781      	lsls	r1, r0, #30
 800808c:	bf58      	it	pl
 800808e:	6963      	ldrpl	r3, [r4, #20]
 8008090:	60a3      	str	r3, [r4, #8]
 8008092:	e7f4      	b.n	800807e <__swsetup_r+0x92>
 8008094:	2000      	movs	r0, #0
 8008096:	e7f7      	b.n	8008088 <__swsetup_r+0x9c>
 8008098:	2000001c 	.word	0x2000001c

0800809c <abort>:
 800809c:	b508      	push	{r3, lr}
 800809e:	2006      	movs	r0, #6
 80080a0:	f000 fb90 	bl	80087c4 <raise>
 80080a4:	2001      	movs	r0, #1
 80080a6:	f7fb fd53 	bl	8003b50 <_exit>
	...

080080ac <__sflush_r>:
 80080ac:	898b      	ldrh	r3, [r1, #12]
 80080ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b6:	4605      	mov	r5, r0
 80080b8:	0718      	lsls	r0, r3, #28
 80080ba:	460c      	mov	r4, r1
 80080bc:	d45f      	bmi.n	800817e <__sflush_r+0xd2>
 80080be:	684b      	ldr	r3, [r1, #4]
 80080c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	818a      	strh	r2, [r1, #12]
 80080c8:	dc05      	bgt.n	80080d6 <__sflush_r+0x2a>
 80080ca:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dc02      	bgt.n	80080d6 <__sflush_r+0x2a>
 80080d0:	2000      	movs	r0, #0
 80080d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080d8:	2e00      	cmp	r6, #0
 80080da:	d0f9      	beq.n	80080d0 <__sflush_r+0x24>
 80080dc:	2300      	movs	r3, #0
 80080de:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080e2:	682f      	ldr	r7, [r5, #0]
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	d036      	beq.n	8008156 <__sflush_r+0xaa>
 80080e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	075a      	lsls	r2, r3, #29
 80080ee:	d505      	bpl.n	80080fc <__sflush_r+0x50>
 80080f0:	6863      	ldr	r3, [r4, #4]
 80080f2:	1ac0      	subs	r0, r0, r3
 80080f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80080f6:	b10b      	cbz	r3, 80080fc <__sflush_r+0x50>
 80080f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080fa:	1ac0      	subs	r0, r0, r3
 80080fc:	2300      	movs	r3, #0
 80080fe:	4602      	mov	r2, r0
 8008100:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008102:	69e1      	ldr	r1, [r4, #28]
 8008104:	4628      	mov	r0, r5
 8008106:	47b0      	blx	r6
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	d106      	bne.n	800811c <__sflush_r+0x70>
 800810e:	6829      	ldr	r1, [r5, #0]
 8008110:	291d      	cmp	r1, #29
 8008112:	d830      	bhi.n	8008176 <__sflush_r+0xca>
 8008114:	4a2b      	ldr	r2, [pc, #172]	; (80081c4 <__sflush_r+0x118>)
 8008116:	40ca      	lsrs	r2, r1
 8008118:	07d6      	lsls	r6, r2, #31
 800811a:	d52c      	bpl.n	8008176 <__sflush_r+0xca>
 800811c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008120:	b21b      	sxth	r3, r3
 8008122:	2200      	movs	r2, #0
 8008124:	6062      	str	r2, [r4, #4]
 8008126:	04d9      	lsls	r1, r3, #19
 8008128:	6922      	ldr	r2, [r4, #16]
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	6022      	str	r2, [r4, #0]
 800812e:	d504      	bpl.n	800813a <__sflush_r+0x8e>
 8008130:	1c42      	adds	r2, r0, #1
 8008132:	d101      	bne.n	8008138 <__sflush_r+0x8c>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b903      	cbnz	r3, 800813a <__sflush_r+0x8e>
 8008138:	6520      	str	r0, [r4, #80]	; 0x50
 800813a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800813c:	602f      	str	r7, [r5, #0]
 800813e:	2900      	cmp	r1, #0
 8008140:	d0c6      	beq.n	80080d0 <__sflush_r+0x24>
 8008142:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008146:	4299      	cmp	r1, r3
 8008148:	d002      	beq.n	8008150 <__sflush_r+0xa4>
 800814a:	4628      	mov	r0, r5
 800814c:	f7fe f898 	bl	8006280 <_free_r>
 8008150:	2000      	movs	r0, #0
 8008152:	6320      	str	r0, [r4, #48]	; 0x30
 8008154:	e7bd      	b.n	80080d2 <__sflush_r+0x26>
 8008156:	69e1      	ldr	r1, [r4, #28]
 8008158:	2301      	movs	r3, #1
 800815a:	4628      	mov	r0, r5
 800815c:	47b0      	blx	r6
 800815e:	1c41      	adds	r1, r0, #1
 8008160:	d1c3      	bne.n	80080ea <__sflush_r+0x3e>
 8008162:	682b      	ldr	r3, [r5, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0c0      	beq.n	80080ea <__sflush_r+0x3e>
 8008168:	2b1d      	cmp	r3, #29
 800816a:	d001      	beq.n	8008170 <__sflush_r+0xc4>
 800816c:	2b16      	cmp	r3, #22
 800816e:	d101      	bne.n	8008174 <__sflush_r+0xc8>
 8008170:	602f      	str	r7, [r5, #0]
 8008172:	e7ad      	b.n	80080d0 <__sflush_r+0x24>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	e7a9      	b.n	80080d2 <__sflush_r+0x26>
 800817e:	690f      	ldr	r7, [r1, #16]
 8008180:	2f00      	cmp	r7, #0
 8008182:	d0a5      	beq.n	80080d0 <__sflush_r+0x24>
 8008184:	079b      	lsls	r3, r3, #30
 8008186:	680e      	ldr	r6, [r1, #0]
 8008188:	bf08      	it	eq
 800818a:	694b      	ldreq	r3, [r1, #20]
 800818c:	600f      	str	r7, [r1, #0]
 800818e:	bf18      	it	ne
 8008190:	2300      	movne	r3, #0
 8008192:	eba6 0807 	sub.w	r8, r6, r7
 8008196:	608b      	str	r3, [r1, #8]
 8008198:	f1b8 0f00 	cmp.w	r8, #0
 800819c:	dd98      	ble.n	80080d0 <__sflush_r+0x24>
 800819e:	69e1      	ldr	r1, [r4, #28]
 80081a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081a2:	4643      	mov	r3, r8
 80081a4:	463a      	mov	r2, r7
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b0      	blx	r6
 80081aa:	2800      	cmp	r0, #0
 80081ac:	dc06      	bgt.n	80081bc <__sflush_r+0x110>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ba:	e78a      	b.n	80080d2 <__sflush_r+0x26>
 80081bc:	4407      	add	r7, r0
 80081be:	eba8 0800 	sub.w	r8, r8, r0
 80081c2:	e7e9      	b.n	8008198 <__sflush_r+0xec>
 80081c4:	20400001 	.word	0x20400001

080081c8 <_fflush_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	460c      	mov	r4, r1
 80081cc:	4605      	mov	r5, r0
 80081ce:	b118      	cbz	r0, 80081d8 <_fflush_r+0x10>
 80081d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80081d2:	b90b      	cbnz	r3, 80081d8 <_fflush_r+0x10>
 80081d4:	f000 f864 	bl	80082a0 <__sinit>
 80081d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081dc:	b1bb      	cbz	r3, 800820e <_fflush_r+0x46>
 80081de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081e0:	07d0      	lsls	r0, r2, #31
 80081e2:	d404      	bmi.n	80081ee <_fflush_r+0x26>
 80081e4:	0599      	lsls	r1, r3, #22
 80081e6:	d402      	bmi.n	80081ee <_fflush_r+0x26>
 80081e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ea:	f7fe f90f 	bl	800640c <__retarget_lock_acquire_recursive>
 80081ee:	4628      	mov	r0, r5
 80081f0:	4621      	mov	r1, r4
 80081f2:	f7ff ff5b 	bl	80080ac <__sflush_r>
 80081f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081f8:	07da      	lsls	r2, r3, #31
 80081fa:	4605      	mov	r5, r0
 80081fc:	d405      	bmi.n	800820a <_fflush_r+0x42>
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	059b      	lsls	r3, r3, #22
 8008202:	d402      	bmi.n	800820a <_fflush_r+0x42>
 8008204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008206:	f7fe f902 	bl	800640e <__retarget_lock_release_recursive>
 800820a:	4628      	mov	r0, r5
 800820c:	bd38      	pop	{r3, r4, r5, pc}
 800820e:	461d      	mov	r5, r3
 8008210:	e7fb      	b.n	800820a <_fflush_r+0x42>
	...

08008214 <std>:
 8008214:	2300      	movs	r3, #0
 8008216:	b510      	push	{r4, lr}
 8008218:	4604      	mov	r4, r0
 800821a:	e9c0 3300 	strd	r3, r3, [r0]
 800821e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008222:	6083      	str	r3, [r0, #8]
 8008224:	8181      	strh	r1, [r0, #12]
 8008226:	6643      	str	r3, [r0, #100]	; 0x64
 8008228:	81c2      	strh	r2, [r0, #14]
 800822a:	6183      	str	r3, [r0, #24]
 800822c:	4619      	mov	r1, r3
 800822e:	2208      	movs	r2, #8
 8008230:	305c      	adds	r0, #92	; 0x5c
 8008232:	f7fb ff45 	bl	80040c0 <memset>
 8008236:	4b07      	ldr	r3, [pc, #28]	; (8008254 <std+0x40>)
 8008238:	6223      	str	r3, [r4, #32]
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <std+0x44>)
 800823c:	6263      	str	r3, [r4, #36]	; 0x24
 800823e:	4b07      	ldr	r3, [pc, #28]	; (800825c <std+0x48>)
 8008240:	62a3      	str	r3, [r4, #40]	; 0x28
 8008242:	4b07      	ldr	r3, [pc, #28]	; (8008260 <std+0x4c>)
 8008244:	61e4      	str	r4, [r4, #28]
 8008246:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008248:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800824c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008250:	f7fe b8da 	b.w	8006408 <__retarget_lock_init_recursive>
 8008254:	080087fd 	.word	0x080087fd
 8008258:	0800881f 	.word	0x0800881f
 800825c:	08008857 	.word	0x08008857
 8008260:	0800887b 	.word	0x0800887b

08008264 <_cleanup_r>:
 8008264:	4901      	ldr	r1, [pc, #4]	; (800826c <_cleanup_r+0x8>)
 8008266:	f000 b9f9 	b.w	800865c <_fwalk_reent>
 800826a:	bf00      	nop
 800826c:	08008985 	.word	0x08008985

08008270 <__sfp_lock_acquire>:
 8008270:	4801      	ldr	r0, [pc, #4]	; (8008278 <__sfp_lock_acquire+0x8>)
 8008272:	f7fe b8cb 	b.w	800640c <__retarget_lock_acquire_recursive>
 8008276:	bf00      	nop
 8008278:	20000dac 	.word	0x20000dac

0800827c <__sfp_lock_release>:
 800827c:	4801      	ldr	r0, [pc, #4]	; (8008284 <__sfp_lock_release+0x8>)
 800827e:	f7fe b8c6 	b.w	800640e <__retarget_lock_release_recursive>
 8008282:	bf00      	nop
 8008284:	20000dac 	.word	0x20000dac

08008288 <__sinit_lock_acquire>:
 8008288:	4801      	ldr	r0, [pc, #4]	; (8008290 <__sinit_lock_acquire+0x8>)
 800828a:	f7fe b8bf 	b.w	800640c <__retarget_lock_acquire_recursive>
 800828e:	bf00      	nop
 8008290:	20000da7 	.word	0x20000da7

08008294 <__sinit_lock_release>:
 8008294:	4801      	ldr	r0, [pc, #4]	; (800829c <__sinit_lock_release+0x8>)
 8008296:	f7fe b8ba 	b.w	800640e <__retarget_lock_release_recursive>
 800829a:	bf00      	nop
 800829c:	20000da7 	.word	0x20000da7

080082a0 <__sinit>:
 80082a0:	b510      	push	{r4, lr}
 80082a2:	4604      	mov	r4, r0
 80082a4:	f7ff fff0 	bl	8008288 <__sinit_lock_acquire>
 80082a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80082aa:	b11a      	cbz	r2, 80082b4 <__sinit+0x14>
 80082ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b0:	f7ff bff0 	b.w	8008294 <__sinit_lock_release>
 80082b4:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <__sinit+0x4c>)
 80082b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80082b8:	2303      	movs	r3, #3
 80082ba:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80082be:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80082c2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80082c6:	6860      	ldr	r0, [r4, #4]
 80082c8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80082cc:	2104      	movs	r1, #4
 80082ce:	f7ff ffa1 	bl	8008214 <std>
 80082d2:	68a0      	ldr	r0, [r4, #8]
 80082d4:	2201      	movs	r2, #1
 80082d6:	2109      	movs	r1, #9
 80082d8:	f7ff ff9c 	bl	8008214 <std>
 80082dc:	68e0      	ldr	r0, [r4, #12]
 80082de:	2202      	movs	r2, #2
 80082e0:	2112      	movs	r1, #18
 80082e2:	f7ff ff97 	bl	8008214 <std>
 80082e6:	2301      	movs	r3, #1
 80082e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80082ea:	e7df      	b.n	80082ac <__sinit+0xc>
 80082ec:	08008265 	.word	0x08008265

080082f0 <__fputwc>:
 80082f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082f4:	4680      	mov	r8, r0
 80082f6:	460e      	mov	r6, r1
 80082f8:	4615      	mov	r5, r2
 80082fa:	f7fe ff97 	bl	800722c <__locale_mb_cur_max>
 80082fe:	2801      	cmp	r0, #1
 8008300:	d11c      	bne.n	800833c <__fputwc+0x4c>
 8008302:	1e73      	subs	r3, r6, #1
 8008304:	2bfe      	cmp	r3, #254	; 0xfe
 8008306:	d819      	bhi.n	800833c <__fputwc+0x4c>
 8008308:	f88d 6004 	strb.w	r6, [sp, #4]
 800830c:	4604      	mov	r4, r0
 800830e:	2700      	movs	r7, #0
 8008310:	f10d 0904 	add.w	r9, sp, #4
 8008314:	42a7      	cmp	r7, r4
 8008316:	d020      	beq.n	800835a <__fputwc+0x6a>
 8008318:	68ab      	ldr	r3, [r5, #8]
 800831a:	f817 1009 	ldrb.w	r1, [r7, r9]
 800831e:	3b01      	subs	r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	60ab      	str	r3, [r5, #8]
 8008324:	da04      	bge.n	8008330 <__fputwc+0x40>
 8008326:	69aa      	ldr	r2, [r5, #24]
 8008328:	4293      	cmp	r3, r2
 800832a:	db1a      	blt.n	8008362 <__fputwc+0x72>
 800832c:	290a      	cmp	r1, #10
 800832e:	d018      	beq.n	8008362 <__fputwc+0x72>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	602a      	str	r2, [r5, #0]
 8008336:	7019      	strb	r1, [r3, #0]
 8008338:	3701      	adds	r7, #1
 800833a:	e7eb      	b.n	8008314 <__fputwc+0x24>
 800833c:	4632      	mov	r2, r6
 800833e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8008342:	a901      	add	r1, sp, #4
 8008344:	4640      	mov	r0, r8
 8008346:	f000 fae5 	bl	8008914 <_wcrtomb_r>
 800834a:	1c42      	adds	r2, r0, #1
 800834c:	4604      	mov	r4, r0
 800834e:	d1de      	bne.n	800830e <__fputwc+0x1e>
 8008350:	89ab      	ldrh	r3, [r5, #12]
 8008352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008356:	81ab      	strh	r3, [r5, #12]
 8008358:	4606      	mov	r6, r0
 800835a:	4630      	mov	r0, r6
 800835c:	b003      	add	sp, #12
 800835e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008362:	462a      	mov	r2, r5
 8008364:	4640      	mov	r0, r8
 8008366:	f000 fa8c 	bl	8008882 <__swbuf_r>
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	d1e4      	bne.n	8008338 <__fputwc+0x48>
 800836e:	4606      	mov	r6, r0
 8008370:	e7f3      	b.n	800835a <__fputwc+0x6a>

08008372 <_fputwc_r>:
 8008372:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008376:	4614      	mov	r4, r2
 8008378:	07da      	lsls	r2, r3, #31
 800837a:	4605      	mov	r5, r0
 800837c:	d407      	bmi.n	800838e <_fputwc_r+0x1c>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	059b      	lsls	r3, r3, #22
 8008382:	d404      	bmi.n	800838e <_fputwc_r+0x1c>
 8008384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008386:	9101      	str	r1, [sp, #4]
 8008388:	f7fe f840 	bl	800640c <__retarget_lock_acquire_recursive>
 800838c:	9901      	ldr	r1, [sp, #4]
 800838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008392:	0498      	lsls	r0, r3, #18
 8008394:	d406      	bmi.n	80083a4 <_fputwc_r+0x32>
 8008396:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800839e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083a2:	6663      	str	r3, [r4, #100]	; 0x64
 80083a4:	4622      	mov	r2, r4
 80083a6:	4628      	mov	r0, r5
 80083a8:	f7ff ffa2 	bl	80082f0 <__fputwc>
 80083ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083ae:	07da      	lsls	r2, r3, #31
 80083b0:	4605      	mov	r5, r0
 80083b2:	d405      	bmi.n	80083c0 <_fputwc_r+0x4e>
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	059b      	lsls	r3, r3, #22
 80083b8:	d402      	bmi.n	80083c0 <_fputwc_r+0x4e>
 80083ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083bc:	f7fe f827 	bl	800640e <__retarget_lock_release_recursive>
 80083c0:	4628      	mov	r0, r5
 80083c2:	b003      	add	sp, #12
 80083c4:	bd30      	pop	{r4, r5, pc}
	...

080083c8 <__sfvwrite_r>:
 80083c8:	6893      	ldr	r3, [r2, #8]
 80083ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ce:	4606      	mov	r6, r0
 80083d0:	460c      	mov	r4, r1
 80083d2:	4690      	mov	r8, r2
 80083d4:	b91b      	cbnz	r3, 80083de <__sfvwrite_r+0x16>
 80083d6:	2000      	movs	r0, #0
 80083d8:	b003      	add	sp, #12
 80083da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083de:	898b      	ldrh	r3, [r1, #12]
 80083e0:	0718      	lsls	r0, r3, #28
 80083e2:	d550      	bpl.n	8008486 <__sfvwrite_r+0xbe>
 80083e4:	690b      	ldr	r3, [r1, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d04d      	beq.n	8008486 <__sfvwrite_r+0xbe>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f8d8 7000 	ldr.w	r7, [r8]
 80083f0:	f013 0902 	ands.w	r9, r3, #2
 80083f4:	d16c      	bne.n	80084d0 <__sfvwrite_r+0x108>
 80083f6:	f013 0301 	ands.w	r3, r3, #1
 80083fa:	f000 809c 	beq.w	8008536 <__sfvwrite_r+0x16e>
 80083fe:	4648      	mov	r0, r9
 8008400:	46ca      	mov	sl, r9
 8008402:	46cb      	mov	fp, r9
 8008404:	f1bb 0f00 	cmp.w	fp, #0
 8008408:	f000 8103 	beq.w	8008612 <__sfvwrite_r+0x24a>
 800840c:	b950      	cbnz	r0, 8008424 <__sfvwrite_r+0x5c>
 800840e:	465a      	mov	r2, fp
 8008410:	210a      	movs	r1, #10
 8008412:	4650      	mov	r0, sl
 8008414:	f7f7 fef4 	bl	8000200 <memchr>
 8008418:	2800      	cmp	r0, #0
 800841a:	f000 80ff 	beq.w	800861c <__sfvwrite_r+0x254>
 800841e:	3001      	adds	r0, #1
 8008420:	eba0 090a 	sub.w	r9, r0, sl
 8008424:	6820      	ldr	r0, [r4, #0]
 8008426:	6921      	ldr	r1, [r4, #16]
 8008428:	6963      	ldr	r3, [r4, #20]
 800842a:	45d9      	cmp	r9, fp
 800842c:	464a      	mov	r2, r9
 800842e:	bf28      	it	cs
 8008430:	465a      	movcs	r2, fp
 8008432:	4288      	cmp	r0, r1
 8008434:	f240 80f5 	bls.w	8008622 <__sfvwrite_r+0x25a>
 8008438:	68a5      	ldr	r5, [r4, #8]
 800843a:	441d      	add	r5, r3
 800843c:	42aa      	cmp	r2, r5
 800843e:	f340 80f0 	ble.w	8008622 <__sfvwrite_r+0x25a>
 8008442:	4651      	mov	r1, sl
 8008444:	462a      	mov	r2, r5
 8008446:	f7fe ff09 	bl	800725c <memmove>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	442b      	add	r3, r5
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	4621      	mov	r1, r4
 8008452:	4630      	mov	r0, r6
 8008454:	f7ff feb8 	bl	80081c8 <_fflush_r>
 8008458:	2800      	cmp	r0, #0
 800845a:	d167      	bne.n	800852c <__sfvwrite_r+0x164>
 800845c:	ebb9 0905 	subs.w	r9, r9, r5
 8008460:	f040 80f7 	bne.w	8008652 <__sfvwrite_r+0x28a>
 8008464:	4621      	mov	r1, r4
 8008466:	4630      	mov	r0, r6
 8008468:	f7ff feae 	bl	80081c8 <_fflush_r>
 800846c:	2800      	cmp	r0, #0
 800846e:	d15d      	bne.n	800852c <__sfvwrite_r+0x164>
 8008470:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8008474:	44aa      	add	sl, r5
 8008476:	ebab 0b05 	sub.w	fp, fp, r5
 800847a:	1b55      	subs	r5, r2, r5
 800847c:	f8c8 5008 	str.w	r5, [r8, #8]
 8008480:	2d00      	cmp	r5, #0
 8008482:	d1bf      	bne.n	8008404 <__sfvwrite_r+0x3c>
 8008484:	e7a7      	b.n	80083d6 <__sfvwrite_r+0xe>
 8008486:	4621      	mov	r1, r4
 8008488:	4630      	mov	r0, r6
 800848a:	f7ff fdaf 	bl	8007fec <__swsetup_r>
 800848e:	2800      	cmp	r0, #0
 8008490:	d0ab      	beq.n	80083ea <__sfvwrite_r+0x22>
 8008492:	f04f 30ff 	mov.w	r0, #4294967295
 8008496:	e79f      	b.n	80083d8 <__sfvwrite_r+0x10>
 8008498:	e9d7 b900 	ldrd	fp, r9, [r7]
 800849c:	3708      	adds	r7, #8
 800849e:	f1b9 0f00 	cmp.w	r9, #0
 80084a2:	d0f9      	beq.n	8008498 <__sfvwrite_r+0xd0>
 80084a4:	45d1      	cmp	r9, sl
 80084a6:	464b      	mov	r3, r9
 80084a8:	69e1      	ldr	r1, [r4, #28]
 80084aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80084ac:	bf28      	it	cs
 80084ae:	4653      	movcs	r3, sl
 80084b0:	465a      	mov	r2, fp
 80084b2:	4630      	mov	r0, r6
 80084b4:	47a8      	blx	r5
 80084b6:	2800      	cmp	r0, #0
 80084b8:	dd38      	ble.n	800852c <__sfvwrite_r+0x164>
 80084ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084be:	4483      	add	fp, r0
 80084c0:	eba9 0900 	sub.w	r9, r9, r0
 80084c4:	1a18      	subs	r0, r3, r0
 80084c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d1e7      	bne.n	800849e <__sfvwrite_r+0xd6>
 80084ce:	e782      	b.n	80083d6 <__sfvwrite_r+0xe>
 80084d0:	f04f 0b00 	mov.w	fp, #0
 80084d4:	f8df a180 	ldr.w	sl, [pc, #384]	; 8008658 <__sfvwrite_r+0x290>
 80084d8:	46d9      	mov	r9, fp
 80084da:	e7e0      	b.n	800849e <__sfvwrite_r+0xd6>
 80084dc:	e9d7 9a00 	ldrd	r9, sl, [r7]
 80084e0:	3708      	adds	r7, #8
 80084e2:	f1ba 0f00 	cmp.w	sl, #0
 80084e6:	d0f9      	beq.n	80084dc <__sfvwrite_r+0x114>
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	68a2      	ldr	r2, [r4, #8]
 80084ec:	6820      	ldr	r0, [r4, #0]
 80084ee:	0599      	lsls	r1, r3, #22
 80084f0:	d563      	bpl.n	80085ba <__sfvwrite_r+0x1f2>
 80084f2:	4552      	cmp	r2, sl
 80084f4:	d836      	bhi.n	8008564 <__sfvwrite_r+0x19c>
 80084f6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80084fa:	d033      	beq.n	8008564 <__sfvwrite_r+0x19c>
 80084fc:	6921      	ldr	r1, [r4, #16]
 80084fe:	6965      	ldr	r5, [r4, #20]
 8008500:	eba0 0b01 	sub.w	fp, r0, r1
 8008504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800850c:	f10b 0201 	add.w	r2, fp, #1
 8008510:	106d      	asrs	r5, r5, #1
 8008512:	4452      	add	r2, sl
 8008514:	4295      	cmp	r5, r2
 8008516:	bf38      	it	cc
 8008518:	4615      	movcc	r5, r2
 800851a:	055b      	lsls	r3, r3, #21
 800851c:	d53d      	bpl.n	800859a <__sfvwrite_r+0x1d2>
 800851e:	4629      	mov	r1, r5
 8008520:	4630      	mov	r0, r6
 8008522:	f7fd ff75 	bl	8006410 <_malloc_r>
 8008526:	b948      	cbnz	r0, 800853c <__sfvwrite_r+0x174>
 8008528:	230c      	movs	r3, #12
 800852a:	6033      	str	r3, [r6, #0]
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	e7ad      	b.n	8008492 <__sfvwrite_r+0xca>
 8008536:	4699      	mov	r9, r3
 8008538:	469a      	mov	sl, r3
 800853a:	e7d2      	b.n	80084e2 <__sfvwrite_r+0x11a>
 800853c:	465a      	mov	r2, fp
 800853e:	6921      	ldr	r1, [r4, #16]
 8008540:	9001      	str	r0, [sp, #4]
 8008542:	f7fe f9a7 	bl	8006894 <memcpy>
 8008546:	89a2      	ldrh	r2, [r4, #12]
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800854e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008552:	81a2      	strh	r2, [r4, #12]
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	6165      	str	r5, [r4, #20]
 8008558:	445b      	add	r3, fp
 800855a:	eba5 050b 	sub.w	r5, r5, fp
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	4652      	mov	r2, sl
 8008562:	60a5      	str	r5, [r4, #8]
 8008564:	4552      	cmp	r2, sl
 8008566:	bf28      	it	cs
 8008568:	4652      	movcs	r2, sl
 800856a:	6820      	ldr	r0, [r4, #0]
 800856c:	9201      	str	r2, [sp, #4]
 800856e:	4649      	mov	r1, r9
 8008570:	f7fe fe74 	bl	800725c <memmove>
 8008574:	68a3      	ldr	r3, [r4, #8]
 8008576:	9a01      	ldr	r2, [sp, #4]
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	60a3      	str	r3, [r4, #8]
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	441a      	add	r2, r3
 8008580:	4655      	mov	r5, sl
 8008582:	6022      	str	r2, [r4, #0]
 8008584:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8008588:	44a9      	add	r9, r5
 800858a:	ebaa 0a05 	sub.w	sl, sl, r5
 800858e:	1b45      	subs	r5, r0, r5
 8008590:	f8c8 5008 	str.w	r5, [r8, #8]
 8008594:	2d00      	cmp	r5, #0
 8008596:	d1a4      	bne.n	80084e2 <__sfvwrite_r+0x11a>
 8008598:	e71d      	b.n	80083d6 <__sfvwrite_r+0xe>
 800859a:	462a      	mov	r2, r5
 800859c:	4630      	mov	r0, r6
 800859e:	f7fe fe77 	bl	8007290 <_realloc_r>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d1d5      	bne.n	8008554 <__sfvwrite_r+0x18c>
 80085a8:	6921      	ldr	r1, [r4, #16]
 80085aa:	4630      	mov	r0, r6
 80085ac:	f7fd fe68 	bl	8006280 <_free_r>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	e7b6      	b.n	8008528 <__sfvwrite_r+0x160>
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	4283      	cmp	r3, r0
 80085be:	d302      	bcc.n	80085c6 <__sfvwrite_r+0x1fe>
 80085c0:	6961      	ldr	r1, [r4, #20]
 80085c2:	4551      	cmp	r1, sl
 80085c4:	d915      	bls.n	80085f2 <__sfvwrite_r+0x22a>
 80085c6:	4552      	cmp	r2, sl
 80085c8:	bf28      	it	cs
 80085ca:	4652      	movcs	r2, sl
 80085cc:	4649      	mov	r1, r9
 80085ce:	4615      	mov	r5, r2
 80085d0:	f7fe fe44 	bl	800725c <memmove>
 80085d4:	68a3      	ldr	r3, [r4, #8]
 80085d6:	6822      	ldr	r2, [r4, #0]
 80085d8:	1b5b      	subs	r3, r3, r5
 80085da:	442a      	add	r2, r5
 80085dc:	60a3      	str	r3, [r4, #8]
 80085de:	6022      	str	r2, [r4, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1cf      	bne.n	8008584 <__sfvwrite_r+0x1bc>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff fdee 	bl	80081c8 <_fflush_r>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d0c9      	beq.n	8008584 <__sfvwrite_r+0x1bc>
 80085f0:	e79c      	b.n	800852c <__sfvwrite_r+0x164>
 80085f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80085f6:	459a      	cmp	sl, r3
 80085f8:	bf38      	it	cc
 80085fa:	4653      	movcc	r3, sl
 80085fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80085fe:	fb93 f3f1 	sdiv	r3, r3, r1
 8008602:	464a      	mov	r2, r9
 8008604:	434b      	muls	r3, r1
 8008606:	4630      	mov	r0, r6
 8008608:	69e1      	ldr	r1, [r4, #28]
 800860a:	47a8      	blx	r5
 800860c:	1e05      	subs	r5, r0, #0
 800860e:	dcb9      	bgt.n	8008584 <__sfvwrite_r+0x1bc>
 8008610:	e78c      	b.n	800852c <__sfvwrite_r+0x164>
 8008612:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008616:	2000      	movs	r0, #0
 8008618:	3708      	adds	r7, #8
 800861a:	e6f3      	b.n	8008404 <__sfvwrite_r+0x3c>
 800861c:	f10b 0901 	add.w	r9, fp, #1
 8008620:	e700      	b.n	8008424 <__sfvwrite_r+0x5c>
 8008622:	4293      	cmp	r3, r2
 8008624:	dc08      	bgt.n	8008638 <__sfvwrite_r+0x270>
 8008626:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008628:	69e1      	ldr	r1, [r4, #28]
 800862a:	4652      	mov	r2, sl
 800862c:	4630      	mov	r0, r6
 800862e:	47a8      	blx	r5
 8008630:	1e05      	subs	r5, r0, #0
 8008632:	f73f af13 	bgt.w	800845c <__sfvwrite_r+0x94>
 8008636:	e779      	b.n	800852c <__sfvwrite_r+0x164>
 8008638:	4651      	mov	r1, sl
 800863a:	9201      	str	r2, [sp, #4]
 800863c:	f7fe fe0e 	bl	800725c <memmove>
 8008640:	9a01      	ldr	r2, [sp, #4]
 8008642:	68a3      	ldr	r3, [r4, #8]
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	60a3      	str	r3, [r4, #8]
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	4413      	add	r3, r2
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	4615      	mov	r5, r2
 8008650:	e704      	b.n	800845c <__sfvwrite_r+0x94>
 8008652:	2001      	movs	r0, #1
 8008654:	e70c      	b.n	8008470 <__sfvwrite_r+0xa8>
 8008656:	bf00      	nop
 8008658:	7ffffc00 	.word	0x7ffffc00

0800865c <_fwalk_reent>:
 800865c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008660:	4606      	mov	r6, r0
 8008662:	4688      	mov	r8, r1
 8008664:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8008668:	2700      	movs	r7, #0
 800866a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800866e:	f1b9 0901 	subs.w	r9, r9, #1
 8008672:	d505      	bpl.n	8008680 <_fwalk_reent+0x24>
 8008674:	6824      	ldr	r4, [r4, #0]
 8008676:	2c00      	cmp	r4, #0
 8008678:	d1f7      	bne.n	800866a <_fwalk_reent+0xe>
 800867a:	4638      	mov	r0, r7
 800867c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008680:	89ab      	ldrh	r3, [r5, #12]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d907      	bls.n	8008696 <_fwalk_reent+0x3a>
 8008686:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800868a:	3301      	adds	r3, #1
 800868c:	d003      	beq.n	8008696 <_fwalk_reent+0x3a>
 800868e:	4629      	mov	r1, r5
 8008690:	4630      	mov	r0, r6
 8008692:	47c0      	blx	r8
 8008694:	4307      	orrs	r7, r0
 8008696:	3568      	adds	r5, #104	; 0x68
 8008698:	e7e9      	b.n	800866e <_fwalk_reent+0x12>

0800869a <__swhatbuf_r>:
 800869a:	b570      	push	{r4, r5, r6, lr}
 800869c:	460e      	mov	r6, r1
 800869e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a2:	2900      	cmp	r1, #0
 80086a4:	b096      	sub	sp, #88	; 0x58
 80086a6:	4614      	mov	r4, r2
 80086a8:	461d      	mov	r5, r3
 80086aa:	da09      	bge.n	80086c0 <__swhatbuf_r+0x26>
 80086ac:	89b3      	ldrh	r3, [r6, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80086b4:	602a      	str	r2, [r5, #0]
 80086b6:	d116      	bne.n	80086e6 <__swhatbuf_r+0x4c>
 80086b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	e015      	b.n	80086ec <__swhatbuf_r+0x52>
 80086c0:	466a      	mov	r2, sp
 80086c2:	f000 f9b7 	bl	8008a34 <_fstat_r>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	dbf0      	blt.n	80086ac <__swhatbuf_r+0x12>
 80086ca:	9a01      	ldr	r2, [sp, #4]
 80086cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086d4:	425a      	negs	r2, r3
 80086d6:	415a      	adcs	r2, r3
 80086d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	e002      	b.n	80086ec <__swhatbuf_r+0x52>
 80086e6:	2340      	movs	r3, #64	; 0x40
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	4610      	mov	r0, r2
 80086ec:	b016      	add	sp, #88	; 0x58
 80086ee:	bd70      	pop	{r4, r5, r6, pc}

080086f0 <__smakebuf_r>:
 80086f0:	898b      	ldrh	r3, [r1, #12]
 80086f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086f4:	079d      	lsls	r5, r3, #30
 80086f6:	4606      	mov	r6, r0
 80086f8:	460c      	mov	r4, r1
 80086fa:	d507      	bpl.n	800870c <__smakebuf_r+0x1c>
 80086fc:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	2301      	movs	r3, #1
 8008706:	6163      	str	r3, [r4, #20]
 8008708:	b002      	add	sp, #8
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	ab01      	add	r3, sp, #4
 800870e:	466a      	mov	r2, sp
 8008710:	f7ff ffc3 	bl	800869a <__swhatbuf_r>
 8008714:	9900      	ldr	r1, [sp, #0]
 8008716:	4605      	mov	r5, r0
 8008718:	4630      	mov	r0, r6
 800871a:	f7fd fe79 	bl	8006410 <_malloc_r>
 800871e:	b948      	cbnz	r0, 8008734 <__smakebuf_r+0x44>
 8008720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008724:	059a      	lsls	r2, r3, #22
 8008726:	d4ef      	bmi.n	8008708 <__smakebuf_r+0x18>
 8008728:	f023 0303 	bic.w	r3, r3, #3
 800872c:	f043 0302 	orr.w	r3, r3, #2
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	e7e3      	b.n	80086fc <__smakebuf_r+0xc>
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <__smakebuf_r+0x7c>)
 8008736:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	6020      	str	r0, [r4, #0]
 800873c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	9b00      	ldr	r3, [sp, #0]
 8008744:	6163      	str	r3, [r4, #20]
 8008746:	9b01      	ldr	r3, [sp, #4]
 8008748:	6120      	str	r0, [r4, #16]
 800874a:	b15b      	cbz	r3, 8008764 <__smakebuf_r+0x74>
 800874c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008750:	4630      	mov	r0, r6
 8008752:	f000 f981 	bl	8008a58 <_isatty_r>
 8008756:	b128      	cbz	r0, 8008764 <__smakebuf_r+0x74>
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	81a3      	strh	r3, [r4, #12]
 8008764:	89a0      	ldrh	r0, [r4, #12]
 8008766:	4305      	orrs	r5, r0
 8008768:	81a5      	strh	r5, [r4, #12]
 800876a:	e7cd      	b.n	8008708 <__smakebuf_r+0x18>
 800876c:	08008265 	.word	0x08008265

08008770 <_raise_r>:
 8008770:	291f      	cmp	r1, #31
 8008772:	b538      	push	{r3, r4, r5, lr}
 8008774:	4604      	mov	r4, r0
 8008776:	460d      	mov	r5, r1
 8008778:	d904      	bls.n	8008784 <_raise_r+0x14>
 800877a:	2316      	movs	r3, #22
 800877c:	6003      	str	r3, [r0, #0]
 800877e:	f04f 30ff 	mov.w	r0, #4294967295
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8008788:	b112      	cbz	r2, 8008790 <_raise_r+0x20>
 800878a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800878e:	b94b      	cbnz	r3, 80087a4 <_raise_r+0x34>
 8008790:	4620      	mov	r0, r4
 8008792:	f000 f831 	bl	80087f8 <_getpid_r>
 8008796:	462a      	mov	r2, r5
 8008798:	4601      	mov	r1, r0
 800879a:	4620      	mov	r0, r4
 800879c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087a0:	f000 b818 	b.w	80087d4 <_kill_r>
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d00a      	beq.n	80087be <_raise_r+0x4e>
 80087a8:	1c59      	adds	r1, r3, #1
 80087aa:	d103      	bne.n	80087b4 <_raise_r+0x44>
 80087ac:	2316      	movs	r3, #22
 80087ae:	6003      	str	r3, [r0, #0]
 80087b0:	2001      	movs	r0, #1
 80087b2:	e7e6      	b.n	8008782 <_raise_r+0x12>
 80087b4:	2400      	movs	r4, #0
 80087b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087ba:	4628      	mov	r0, r5
 80087bc:	4798      	blx	r3
 80087be:	2000      	movs	r0, #0
 80087c0:	e7df      	b.n	8008782 <_raise_r+0x12>
	...

080087c4 <raise>:
 80087c4:	4b02      	ldr	r3, [pc, #8]	; (80087d0 <raise+0xc>)
 80087c6:	4601      	mov	r1, r0
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f7ff bfd1 	b.w	8008770 <_raise_r>
 80087ce:	bf00      	nop
 80087d0:	2000001c 	.word	0x2000001c

080087d4 <_kill_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d07      	ldr	r5, [pc, #28]	; (80087f4 <_kill_r+0x20>)
 80087d8:	2300      	movs	r3, #0
 80087da:	4604      	mov	r4, r0
 80087dc:	4608      	mov	r0, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	f7fb f9ad 	bl	8003b40 <_kill>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	d102      	bne.n	80087f0 <_kill_r+0x1c>
 80087ea:	682b      	ldr	r3, [r5, #0]
 80087ec:	b103      	cbz	r3, 80087f0 <_kill_r+0x1c>
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	bd38      	pop	{r3, r4, r5, pc}
 80087f2:	bf00      	nop
 80087f4:	20000db0 	.word	0x20000db0

080087f8 <_getpid_r>:
 80087f8:	f7fb b9a0 	b.w	8003b3c <_getpid>

080087fc <__sread>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	460c      	mov	r4, r1
 8008800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008804:	f000 f94a 	bl	8008a9c <_read_r>
 8008808:	2800      	cmp	r0, #0
 800880a:	bfab      	itete	ge
 800880c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800880e:	89a3      	ldrhlt	r3, [r4, #12]
 8008810:	181b      	addge	r3, r3, r0
 8008812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008816:	bfac      	ite	ge
 8008818:	6523      	strge	r3, [r4, #80]	; 0x50
 800881a:	81a3      	strhlt	r3, [r4, #12]
 800881c:	bd10      	pop	{r4, pc}

0800881e <__swrite>:
 800881e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008822:	461f      	mov	r7, r3
 8008824:	898b      	ldrh	r3, [r1, #12]
 8008826:	05db      	lsls	r3, r3, #23
 8008828:	4605      	mov	r5, r0
 800882a:	460c      	mov	r4, r1
 800882c:	4616      	mov	r6, r2
 800882e:	d505      	bpl.n	800883c <__swrite+0x1e>
 8008830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008834:	2302      	movs	r3, #2
 8008836:	2200      	movs	r2, #0
 8008838:	f000 f91e 	bl	8008a78 <_lseek_r>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	4628      	mov	r0, r5
 800884e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008852:	f000 b875 	b.w	8008940 <_write_r>

08008856 <__sseek>:
 8008856:	b510      	push	{r4, lr}
 8008858:	460c      	mov	r4, r1
 800885a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885e:	f000 f90b 	bl	8008a78 <_lseek_r>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	bf15      	itete	ne
 8008868:	6520      	strne	r0, [r4, #80]	; 0x50
 800886a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800886e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008872:	81a3      	strheq	r3, [r4, #12]
 8008874:	bf18      	it	ne
 8008876:	81a3      	strhne	r3, [r4, #12]
 8008878:	bd10      	pop	{r4, pc}

0800887a <__sclose>:
 800887a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887e:	f000 b871 	b.w	8008964 <_close_r>

08008882 <__swbuf_r>:
 8008882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008884:	460e      	mov	r6, r1
 8008886:	4614      	mov	r4, r2
 8008888:	4605      	mov	r5, r0
 800888a:	b118      	cbz	r0, 8008894 <__swbuf_r+0x12>
 800888c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800888e:	b90b      	cbnz	r3, 8008894 <__swbuf_r+0x12>
 8008890:	f7ff fd06 	bl	80082a0 <__sinit>
 8008894:	69a3      	ldr	r3, [r4, #24]
 8008896:	60a3      	str	r3, [r4, #8]
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	0719      	lsls	r1, r3, #28
 800889c:	d529      	bpl.n	80088f2 <__swbuf_r+0x70>
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	b33b      	cbz	r3, 80088f2 <__swbuf_r+0x70>
 80088a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a6:	b2f6      	uxtb	r6, r6
 80088a8:	049a      	lsls	r2, r3, #18
 80088aa:	4637      	mov	r7, r6
 80088ac:	d52a      	bpl.n	8008904 <__swbuf_r+0x82>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	6920      	ldr	r0, [r4, #16]
 80088b2:	1a18      	subs	r0, r3, r0
 80088b4:	6963      	ldr	r3, [r4, #20]
 80088b6:	4283      	cmp	r3, r0
 80088b8:	dc04      	bgt.n	80088c4 <__swbuf_r+0x42>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	f7ff fc83 	bl	80081c8 <_fflush_r>
 80088c2:	b9e0      	cbnz	r0, 80088fe <__swbuf_r+0x7c>
 80088c4:	68a3      	ldr	r3, [r4, #8]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	60a3      	str	r3, [r4, #8]
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	701e      	strb	r6, [r3, #0]
 80088d2:	6962      	ldr	r2, [r4, #20]
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d004      	beq.n	80088e4 <__swbuf_r+0x62>
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	07db      	lsls	r3, r3, #31
 80088de:	d506      	bpl.n	80088ee <__swbuf_r+0x6c>
 80088e0:	2e0a      	cmp	r6, #10
 80088e2:	d104      	bne.n	80088ee <__swbuf_r+0x6c>
 80088e4:	4621      	mov	r1, r4
 80088e6:	4628      	mov	r0, r5
 80088e8:	f7ff fc6e 	bl	80081c8 <_fflush_r>
 80088ec:	b938      	cbnz	r0, 80088fe <__swbuf_r+0x7c>
 80088ee:	4638      	mov	r0, r7
 80088f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f2:	4621      	mov	r1, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	f7ff fb79 	bl	8007fec <__swsetup_r>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d0d1      	beq.n	80088a2 <__swbuf_r+0x20>
 80088fe:	f04f 37ff 	mov.w	r7, #4294967295
 8008902:	e7f4      	b.n	80088ee <__swbuf_r+0x6c>
 8008904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008908:	81a3      	strh	r3, [r4, #12]
 800890a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800890c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008910:	6663      	str	r3, [r4, #100]	; 0x64
 8008912:	e7cc      	b.n	80088ae <__swbuf_r+0x2c>

08008914 <_wcrtomb_r>:
 8008914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008916:	4c09      	ldr	r4, [pc, #36]	; (800893c <_wcrtomb_r+0x28>)
 8008918:	b085      	sub	sp, #20
 800891a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800891e:	4605      	mov	r5, r0
 8008920:	461e      	mov	r6, r3
 8008922:	b909      	cbnz	r1, 8008928 <_wcrtomb_r+0x14>
 8008924:	460a      	mov	r2, r1
 8008926:	a901      	add	r1, sp, #4
 8008928:	47b8      	blx	r7
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	bf01      	itttt	eq
 800892e:	2300      	moveq	r3, #0
 8008930:	6033      	streq	r3, [r6, #0]
 8008932:	238a      	moveq	r3, #138	; 0x8a
 8008934:	602b      	streq	r3, [r5, #0]
 8008936:	b005      	add	sp, #20
 8008938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800893a:	bf00      	nop
 800893c:	2000085c 	.word	0x2000085c

08008940 <_write_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	4d07      	ldr	r5, [pc, #28]	; (8008960 <_write_r+0x20>)
 8008944:	4604      	mov	r4, r0
 8008946:	4608      	mov	r0, r1
 8008948:	4611      	mov	r1, r2
 800894a:	2200      	movs	r2, #0
 800894c:	602a      	str	r2, [r5, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	f7fb f912 	bl	8003b78 <_write>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d102      	bne.n	800895e <_write_r+0x1e>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b103      	cbz	r3, 800895e <_write_r+0x1e>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	20000db0 	.word	0x20000db0

08008964 <_close_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4d06      	ldr	r5, [pc, #24]	; (8008980 <_close_r+0x1c>)
 8008968:	2300      	movs	r3, #0
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	602b      	str	r3, [r5, #0]
 8008970:	f7fb f92e 	bl	8003bd0 <_close>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d102      	bne.n	800897e <_close_r+0x1a>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	b103      	cbz	r3, 800897e <_close_r+0x1a>
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	20000db0 	.word	0x20000db0

08008984 <_fclose_r>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4606      	mov	r6, r0
 8008988:	460c      	mov	r4, r1
 800898a:	b911      	cbnz	r1, 8008992 <_fclose_r+0xe>
 800898c:	2500      	movs	r5, #0
 800898e:	4628      	mov	r0, r5
 8008990:	bd70      	pop	{r4, r5, r6, pc}
 8008992:	b118      	cbz	r0, 800899c <_fclose_r+0x18>
 8008994:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008996:	b90b      	cbnz	r3, 800899c <_fclose_r+0x18>
 8008998:	f7ff fc82 	bl	80082a0 <__sinit>
 800899c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800899e:	07d8      	lsls	r0, r3, #31
 80089a0:	d405      	bmi.n	80089ae <_fclose_r+0x2a>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	0599      	lsls	r1, r3, #22
 80089a6:	d402      	bmi.n	80089ae <_fclose_r+0x2a>
 80089a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089aa:	f7fd fd2f 	bl	800640c <__retarget_lock_acquire_recursive>
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	b93b      	cbnz	r3, 80089c4 <_fclose_r+0x40>
 80089b4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80089b6:	f015 0501 	ands.w	r5, r5, #1
 80089ba:	d1e7      	bne.n	800898c <_fclose_r+0x8>
 80089bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089be:	f7fd fd26 	bl	800640e <__retarget_lock_release_recursive>
 80089c2:	e7e4      	b.n	800898e <_fclose_r+0xa>
 80089c4:	4621      	mov	r1, r4
 80089c6:	4630      	mov	r0, r6
 80089c8:	f7ff fb70 	bl	80080ac <__sflush_r>
 80089cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089ce:	4605      	mov	r5, r0
 80089d0:	b133      	cbz	r3, 80089e0 <_fclose_r+0x5c>
 80089d2:	69e1      	ldr	r1, [r4, #28]
 80089d4:	4630      	mov	r0, r6
 80089d6:	4798      	blx	r3
 80089d8:	2800      	cmp	r0, #0
 80089da:	bfb8      	it	lt
 80089dc:	f04f 35ff 	movlt.w	r5, #4294967295
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	061a      	lsls	r2, r3, #24
 80089e4:	d503      	bpl.n	80089ee <_fclose_r+0x6a>
 80089e6:	6921      	ldr	r1, [r4, #16]
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7fd fc49 	bl	8006280 <_free_r>
 80089ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80089f0:	b141      	cbz	r1, 8008a04 <_fclose_r+0x80>
 80089f2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80089f6:	4299      	cmp	r1, r3
 80089f8:	d002      	beq.n	8008a00 <_fclose_r+0x7c>
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7fd fc40 	bl	8006280 <_free_r>
 8008a00:	2300      	movs	r3, #0
 8008a02:	6323      	str	r3, [r4, #48]	; 0x30
 8008a04:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008a06:	b121      	cbz	r1, 8008a12 <_fclose_r+0x8e>
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f7fd fc39 	bl	8006280 <_free_r>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6463      	str	r3, [r4, #68]	; 0x44
 8008a12:	f7ff fc2d 	bl	8008270 <__sfp_lock_acquire>
 8008a16:	2300      	movs	r3, #0
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a1c:	07db      	lsls	r3, r3, #31
 8008a1e:	d402      	bmi.n	8008a26 <_fclose_r+0xa2>
 8008a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a22:	f7fd fcf4 	bl	800640e <__retarget_lock_release_recursive>
 8008a26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a28:	f7fd fcef 	bl	800640a <__retarget_lock_close_recursive>
 8008a2c:	f7ff fc26 	bl	800827c <__sfp_lock_release>
 8008a30:	e7ad      	b.n	800898e <_fclose_r+0xa>
	...

08008a34 <_fstat_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	; (8008a54 <_fstat_r+0x20>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	f7fb f8c9 	bl	8003bd8 <_fstat>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d102      	bne.n	8008a50 <_fstat_r+0x1c>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	b103      	cbz	r3, 8008a50 <_fstat_r+0x1c>
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	bf00      	nop
 8008a54:	20000db0 	.word	0x20000db0

08008a58 <_isatty_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	; (8008a74 <_isatty_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7fb f8be 	bl	8003be4 <_isatty>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_isatty_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_isatty_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	20000db0 	.word	0x20000db0

08008a78 <_lseek_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_lseek_r+0x20>)
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	4608      	mov	r0, r1
 8008a80:	4611      	mov	r1, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	602a      	str	r2, [r5, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f7fb f8ae 	bl	8003be8 <_lseek>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_lseek_r+0x1e>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_lseek_r+0x1e>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	20000db0 	.word	0x20000db0

08008a9c <_read_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d07      	ldr	r5, [pc, #28]	; (8008abc <_read_r+0x20>)
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	602a      	str	r2, [r5, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f7fb f856 	bl	8003b5c <_read>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_read_r+0x1e>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_read_r+0x1e>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	20000db0 	.word	0x20000db0

08008ac0 <_init>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr

08008acc <_fini>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	bf00      	nop
 8008ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad2:	bc08      	pop	{r3}
 8008ad4:	469e      	mov	lr, r3
 8008ad6:	4770      	bx	lr
