
DW1000_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c4c  08003c4c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08003c4c  08003c4c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c4c  08003c4c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000080  08003cd4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003cd4  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ee9  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a7f  00000000  00000000  00030f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00033a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00034718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a212  00000000  00000000  00035308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e553  00000000  00000000  0004f51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c6b2  00000000  00000000  0005da6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea11f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a4  00000000  00000000  000ea174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080039d0 	.word	0x080039d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080039d0 	.word	0x080039d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
    /* Display application name. */
    stdio_write(APP_NAME);
 8000162:	485c      	ldr	r0, [pc, #368]	; (80002d4 <dw_main+0x178>)
 8000164:	f000 fdc0 	bl	8000ce8 <stdio_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8000168:	f000 fd20 	bl	8000bac <reset_DW1000>
    port_set_dw1000_slowrate();
 800016c:	f000 fd80 	bl	8000c70 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8000170:	2000      	movs	r0, #0
 8000172:	f002 f9bd 	bl	80024f0 <dwt_initialise>
 8000176:	4603      	mov	r3, r0
 8000178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800017c:	d103      	bne.n	8000186 <dw_main+0x2a>
    {
        stdio_write("INIT FAILED");
 800017e:	4856      	ldr	r0, [pc, #344]	; (80002d8 <dw_main+0x17c>)
 8000180:	f000 fdb2 	bl	8000ce8 <stdio_write>
        while (1)
 8000184:	e7fe      	b.n	8000184 <dw_main+0x28>
        { };
    }
    port_set_dw1000_fastrate();
 8000186:	f000 fd7f 	bl	8000c88 <port_set_dw1000_fastrate>

    /* Configure DW1000. */
    dwt_configure(&config);
 800018a:	4854      	ldr	r0, [pc, #336]	; (80002dc <dw_main+0x180>)
 800018c:	f002 fb06 	bl	800279c <dwt_configure>

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8000190:	2300      	movs	r3, #0
 8000192:	607b      	str	r3, [r7, #4]
 8000194:	e007      	b.n	80001a6 <dw_main+0x4a>
        {
            rx_buffer[i] = 0;
 8000196:	4a52      	ldr	r2, [pc, #328]	; (80002e0 <dw_main+0x184>)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4413      	add	r3, r2
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3301      	adds	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b7e      	cmp	r3, #126	; 0x7e
 80001aa:	ddf4      	ble.n	8000196 <dw_main+0x3a>
        }

        /* Activate reception immediately. See NOTE 3 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f002 ff23 	bl	8002ff8 <dwt_rxenable>

        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 80001b2:	e002      	b.n	80001ba <dw_main+0x5e>
        {
        	stdio_write("Waiting for frame!\r\n");
 80001b4:	484b      	ldr	r0, [pc, #300]	; (80002e4 <dw_main+0x188>)
 80001b6:	f000 fd97 	bl	8000ce8 <stdio_write>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 80001ba:	2100      	movs	r1, #0
 80001bc:	200f      	movs	r0, #15
 80001be:	f002 fd1e 	bl	8002bfe <dwt_read32bitoffsetreg>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a48      	ldr	r2, [pc, #288]	; (80002e8 <dw_main+0x18c>)
 80001c6:	6013      	str	r3, [r2, #0]
 80001c8:	4b47      	ldr	r3, [pc, #284]	; (80002e8 <dw_main+0x18c>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	4b47      	ldr	r3, [pc, #284]	; (80002ec <dw_main+0x190>)
 80001ce:	4013      	ands	r3, r2
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d0ef      	beq.n	80001b4 <dw_main+0x58>
        };

        if (status_reg & SYS_STATUS_RXFCG)
 80001d4:	4b44      	ldr	r3, [pc, #272]	; (80002e8 <dw_main+0x18c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d04b      	beq.n	8000278 <dw_main+0x11c>
        {
            stdio_write("Frame received!\r\n");
 80001e0:	4843      	ldr	r0, [pc, #268]	; (80002f0 <dw_main+0x194>)
 80001e2:	f000 fd81 	bl	8000ce8 <stdio_write>
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 80001e6:	2100      	movs	r1, #0
 80001e8:	2010      	movs	r0, #16
 80001ea:	f002 fd08 	bl	8002bfe <dwt_read32bitoffsetreg>
 80001ee:	4603      	mov	r3, r0
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	4b3e      	ldr	r3, [pc, #248]	; (80002f4 <dw_main+0x198>)
 80001fa:	801a      	strh	r2, [r3, #0]

            sprintf(len, "%u", (unsigned int)frame_len);
 80001fc:	4b3d      	ldr	r3, [pc, #244]	; (80002f4 <dw_main+0x198>)
 80001fe:	881b      	ldrh	r3, [r3, #0]
 8000200:	461a      	mov	r2, r3
 8000202:	493d      	ldr	r1, [pc, #244]	; (80002f8 <dw_main+0x19c>)
 8000204:	483d      	ldr	r0, [pc, #244]	; (80002fc <dw_main+0x1a0>)
 8000206:	f002 ffa9 	bl	800315c <siprintf>
            stdio_write(len);
 800020a:	483c      	ldr	r0, [pc, #240]	; (80002fc <dw_main+0x1a0>)
 800020c:	f000 fd6c 	bl	8000ce8 <stdio_write>

            if (frame_len <= FRAME_LEN_MAX)
 8000210:	4b38      	ldr	r3, [pc, #224]	; (80002f4 <dw_main+0x198>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	2b7f      	cmp	r3, #127	; 0x7f
 8000216:	d825      	bhi.n	8000264 <dw_main+0x108>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8000218:	4b36      	ldr	r3, [pc, #216]	; (80002f4 <dw_main+0x198>)
 800021a:	881b      	ldrh	r3, [r3, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	4619      	mov	r1, r3
 8000220:	482f      	ldr	r0, [pc, #188]	; (80002e0 <dw_main+0x184>)
 8000222:	f002 fc25 	bl	8002a70 <dwt_readrxdata>
                stdio_write("Data: ");
 8000226:	4836      	ldr	r0, [pc, #216]	; (8000300 <dw_main+0x1a4>)
 8000228:	f000 fd5e 	bl	8000ce8 <stdio_write>
				// Parse and print received frame
				for (i = 0 ; i < FRAME_LEN_MAX; i++)
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e00d      	b.n	800024e <dw_main+0xf2>
				{
					sprintf(rx_char_buffer + i, "%ui", rx_buffer[i]);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a33      	ldr	r2, [pc, #204]	; (8000304 <dw_main+0x1a8>)
 8000236:	1898      	adds	r0, r3, r2
 8000238:	4a29      	ldr	r2, [pc, #164]	; (80002e0 <dw_main+0x184>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	461a      	mov	r2, r3
 8000242:	4931      	ldr	r1, [pc, #196]	; (8000308 <dw_main+0x1ac>)
 8000244:	f002 ff8a 	bl	800315c <siprintf>
				for (i = 0 ; i < FRAME_LEN_MAX; i++)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2b7e      	cmp	r3, #126	; 0x7e
 8000252:	ddee      	ble.n	8000232 <dw_main+0xd6>
				}

				rx_char_buffer[FRAME_LEN_MAX -1] = '\0';
 8000254:	4b2b      	ldr	r3, [pc, #172]	; (8000304 <dw_main+0x1a8>)
 8000256:	2200      	movs	r2, #0
 8000258:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

				stdio_write(rx_char_buffer);
 800025c:	4829      	ldr	r0, [pc, #164]	; (8000304 <dw_main+0x1a8>)
 800025e:	f000 fd43 	bl	8000ce8 <stdio_write>
 8000262:	e002      	b.n	800026a <dw_main+0x10e>
            }
            else {
            	stdio_write("Frame TOO long\r\n");
 8000264:	4829      	ldr	r0, [pc, #164]	; (800030c <dw_main+0x1b0>)
 8000266:	f000 fd3f 	bl	8000ce8 <stdio_write>
            }

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 800026a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800026e:	2100      	movs	r1, #0
 8000270:	200f      	movs	r0, #15
 8000272:	f002 fd4a 	bl	8002d0a <dwt_write32bitoffsetreg>
 8000276:	e025      	b.n	80002c4 <dw_main+0x168>
        }
        else
        {
        	stdio_write("Status error: ");
 8000278:	4825      	ldr	r0, [pc, #148]	; (8000310 <dw_main+0x1b4>)
 800027a:	f000 fd35 	bl	8000ce8 <stdio_write>
        	sprintf(status, "%lu", status_reg);
 800027e:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <dw_main+0x18c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	461a      	mov	r2, r3
 8000284:	4923      	ldr	r1, [pc, #140]	; (8000314 <dw_main+0x1b8>)
 8000286:	4824      	ldr	r0, [pc, #144]	; (8000318 <dw_main+0x1bc>)
 8000288:	f002 ff68 	bl	800315c <siprintf>
			stdio_write(status);
 800028c:	4822      	ldr	r0, [pc, #136]	; (8000318 <dw_main+0x1bc>)
 800028e:	f000 fd2b 	bl	8000ce8 <stdio_write>
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8000292:	4a22      	ldr	r2, [pc, #136]	; (800031c <dw_main+0x1c0>)
 8000294:	2100      	movs	r1, #0
 8000296:	200f      	movs	r0, #15
 8000298:	f002 fd37 	bl	8002d0a <dwt_write32bitoffsetreg>
            status_reg = dwt_read32bitreg(SYS_STATUS_ID);
 800029c:	2100      	movs	r1, #0
 800029e:	200f      	movs	r0, #15
 80002a0:	f002 fcad 	bl	8002bfe <dwt_read32bitoffsetreg>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4a10      	ldr	r2, [pc, #64]	; (80002e8 <dw_main+0x18c>)
 80002a8:	6013      	str	r3, [r2, #0]

            stdio_write("CLEARED - Status error: ");
 80002aa:	481d      	ldr	r0, [pc, #116]	; (8000320 <dw_main+0x1c4>)
 80002ac:	f000 fd1c 	bl	8000ce8 <stdio_write>
            sprintf(status, "%lu", status_reg);
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <dw_main+0x18c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	461a      	mov	r2, r3
 80002b6:	4917      	ldr	r1, [pc, #92]	; (8000314 <dw_main+0x1b8>)
 80002b8:	4817      	ldr	r0, [pc, #92]	; (8000318 <dw_main+0x1bc>)
 80002ba:	f002 ff4f 	bl	800315c <siprintf>
			stdio_write(status);
 80002be:	4816      	ldr	r0, [pc, #88]	; (8000318 <dw_main+0x1bc>)
 80002c0:	f000 fd12 	bl	8000ce8 <stdio_write>
        }

        Sleep(TX_DELAY_MS);
 80002c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c8:	f000 fc49 	bl	8000b5e <Sleep>
        stdio_write("NEXT-FRAME\r\n");
 80002cc:	4815      	ldr	r0, [pc, #84]	; (8000324 <dw_main+0x1c8>)
 80002ce:	f000 fd0b 	bl	8000ce8 <stdio_write>
    {
 80002d2:	e75d      	b.n	8000190 <dw_main+0x34>
 80002d4:	080039e8 	.word	0x080039e8
 80002d8:	080039f8 	.word	0x080039f8
 80002dc:	20000000 	.word	0x20000000
 80002e0:	2000009c 	.word	0x2000009c
 80002e4:	08003a04 	.word	0x08003a04
 80002e8:	2000019c 	.word	0x2000019c
 80002ec:	2405d000 	.word	0x2405d000
 80002f0:	08003a1c 	.word	0x08003a1c
 80002f4:	200001a0 	.word	0x200001a0
 80002f8:	08003a30 	.word	0x08003a30
 80002fc:	200001a4 	.word	0x200001a4
 8000300:	08003a34 	.word	0x08003a34
 8000304:	2000011c 	.word	0x2000011c
 8000308:	08003a3c 	.word	0x08003a3c
 800030c:	08003a40 	.word	0x08003a40
 8000310:	08003a54 	.word	0x08003a54
 8000314:	08003a64 	.word	0x08003a64
 8000318:	200001ac 	.word	0x200001ac
 800031c:	24059000 	.word	0x24059000
 8000320:	08003a68 	.word	0x08003a68
 8000324:	08003a84 	.word	0x08003a84

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b5b0      	push	{r4, r5, r7, lr}
 800032a:	b0a6      	sub	sp, #152	; 0x98
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 fd1f 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f000 f88f 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000336:	f000 f933 	bl	80005a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800033a:	f000 f8d1 	bl	80004e0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800033e:	f000 f905 	bl	800054c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t Test[] = "Initial setup success !!!\r\n"; //Data to send
 8000342:	4b3d      	ldr	r3, [pc, #244]	; (8000438 <main+0x110>)
 8000344:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000348:	461d      	mov	r5, r3
 800034a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 8000356:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800035a:	230a      	movs	r3, #10
 800035c:	221c      	movs	r2, #28
 800035e:	4837      	ldr	r0, [pc, #220]	; (800043c <main+0x114>)
 8000360:	f001 ff5b 	bl	800221a <HAL_UART_Transmit>
  HAL_Delay(5000);
 8000364:	f241 3088 	movw	r0, #5000	; 0x1388
 8000368:	f000 fd64 	bl	8000e34 <HAL_Delay>

  uint8_t Test11[] = "0 - Waiting for button !!!\r\n"; //Data to send;
 800036c:	4b34      	ldr	r3, [pc, #208]	; (8000440 <main+0x118>)
 800036e:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000372:	461d      	mov	r5, r3
 8000374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000378:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800037c:	c407      	stmia	r4!, {r0, r1, r2}
 800037e:	7023      	strb	r3, [r4, #0]
  uint8_t Test12[] = "1 - Waiting for button !!!\r\n"; //Data to send;
 8000380:	4b30      	ldr	r3, [pc, #192]	; (8000444 <main+0x11c>)
 8000382:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000386:	461d      	mov	r5, r3
 8000388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000390:	c407      	stmia	r4!, {r0, r1, r2}
 8000392:	7023      	strb	r3, [r4, #0]

  while (1)
  {
	  if ( HAL_GPIO_ReadPin(READY_BTN_GPIO_Port, READY_BTN_Pin) == 0){
 8000394:	2108      	movs	r1, #8
 8000396:	482c      	ldr	r0, [pc, #176]	; (8000448 <main+0x120>)
 8000398:	f001 f834 	bl	8001404 <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d107      	bne.n	80003b2 <main+0x8a>
		  HAL_UART_Transmit(&huart1,Test11,sizeof(Test11),10);// Sending in normal mode
 80003a2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80003a6:	230a      	movs	r3, #10
 80003a8:	221d      	movs	r2, #29
 80003aa:	4824      	ldr	r0, [pc, #144]	; (800043c <main+0x114>)
 80003ac:	f001 ff35 	bl	800221a <HAL_UART_Transmit>
 80003b0:	e03b      	b.n	800042a <main+0x102>

	  }
	  else {
		  HAL_UART_Transmit(&huart1,Test12,sizeof(Test12),10);// Sending in normal mode
 80003b2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80003b6:	230a      	movs	r3, #10
 80003b8:	221d      	movs	r2, #29
 80003ba:	4820      	ldr	r0, [pc, #128]	; (800043c <main+0x114>)
 80003bc:	f001 ff2d 	bl	800221a <HAL_UART_Transmit>
		  break;
 80003c0:	bf00      	nop
	  }

	  HAL_Delay(5000);
  }

  uint8_t Test2[] = "button ready success !!!\r\n"; //Data to send
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <main+0x124>)
 80003c4:	f107 0420 	add.w	r4, r7, #32
 80003c8:	461d      	mov	r5, r3
 80003ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003d2:	c403      	stmia	r4!, {r0, r1}
 80003d4:	8022      	strh	r2, [r4, #0]
 80003d6:	3402      	adds	r4, #2
 80003d8:	0c13      	lsrs	r3, r2, #16
 80003da:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1,Test2,sizeof(Test2),10);// Sending in normal mode
 80003dc:	f107 0120 	add.w	r1, r7, #32
 80003e0:	230a      	movs	r3, #10
 80003e2:	221b      	movs	r2, #27
 80003e4:	4815      	ldr	r0, [pc, #84]	; (800043c <main+0x114>)
 80003e6:	f001 ff18 	bl	800221a <HAL_UART_Transmit>
  HAL_Delay(5000);
 80003ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80003ee:	f000 fd21 	bl	8000e34 <HAL_Delay>
  /*
   * DW_RESET_Pin has been configured by CubeMx as Exti0 line
   * Reconfigure the line as Input
   */
  setup_DW1000RSTnIRQ(0);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f000 fbfe 	bl	8000bf4 <setup_DW1000RSTnIRQ>

  stdio_init(&huart1);
 80003f8:	4810      	ldr	r0, [pc, #64]	; (800043c <main+0x114>)
 80003fa:	f000 fc67 	bl	8000ccc <stdio_init>

  uint8_t Test3[] = "going to start dw_main !!!\r\n"; //Data to send
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <main+0x128>)
 8000400:	463c      	mov	r4, r7
 8000402:	461d      	mov	r5, r3
 8000404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000408:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800040c:	c407      	stmia	r4!, {r0, r1, r2}
 800040e:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1,Test3,sizeof(Test3),10);// Sending in normal mode
 8000410:	4639      	mov	r1, r7
 8000412:	230a      	movs	r3, #10
 8000414:	221d      	movs	r2, #29
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <main+0x114>)
 8000418:	f001 feff 	bl	800221a <HAL_UART_Transmit>
  HAL_Delay(5000);
 800041c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000420:	f000 fd08 	bl	8000e34 <HAL_Delay>

  dw_main();
 8000424:	f7ff fe9a 	bl	800015c <dw_main>
 8000428:	e004      	b.n	8000434 <main+0x10c>
	  HAL_Delay(5000);
 800042a:	f241 3088 	movw	r0, #5000	; 0x1388
 800042e:	f000 fd01 	bl	8000e34 <HAL_Delay>
	  if ( HAL_GPIO_ReadPin(READY_BTN_GPIO_Port, READY_BTN_Pin) == 0){
 8000432:	e7af      	b.n	8000394 <main+0x6c>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000434:	e7fe      	b.n	8000434 <main+0x10c>
 8000436:	bf00      	nop
 8000438:	08003a94 	.word	0x08003a94
 800043c:	20000204 	.word	0x20000204
 8000440:	08003ab0 	.word	0x08003ab0
 8000444:	08003ad0 	.word	0x08003ad0
 8000448:	40010800 	.word	0x40010800
 800044c:	08003af0 	.word	0x08003af0
 8000450:	08003b0c 	.word	0x08003b0c

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b090      	sub	sp, #64	; 0x40
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f002 fe72 	bl	800314c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000476:	2301      	movs	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000488:	2302      	movs	r3, #2
 800048a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000492:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000496:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	4618      	mov	r0, r3
 800049e:	f000 ffe1 	bl	8001464 <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a8:	f000 f90c 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2102      	movs	r1, #2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fa4c 	bl	8001964 <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004d2:	f000 f8f7 	bl	80006c4 <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3740      	adds	r7, #64	; 0x40
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <MX_SPI1_Init+0x64>)
 80004e6:	4a18      	ldr	r2, [pc, #96]	; (8000548 <MX_SPI1_Init+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ea:	4b16      	ldr	r3, [pc, #88]	; (8000544 <MX_SPI1_Init+0x64>)
 80004ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_SPI1_Init+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_SPI1_Init+0x64>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_SPI1_Init+0x64>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_SPI1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_SPI1_Init+0x64>)
 800050c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000510:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_SPI1_Init+0x64>)
 8000514:	2220      	movs	r2, #32
 8000516:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <MX_SPI1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_SPI1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <MX_SPI1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_SPI1_Init+0x64>)
 800052c:	220a      	movs	r2, #10
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <MX_SPI1_Init+0x64>)
 8000532:	f001 fbb1 	bl	8001c98 <HAL_SPI_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800053c:	f000 f8c2 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000248 	.word	0x20000248
 8000548:	40013000 	.word	0x40013000

0800054c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <MX_USART1_UART_Init+0x50>)
 8000554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800055c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000572:	220c      	movs	r2, #12
 8000574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000584:	f001 fdfc 	bl	8002180 <HAL_UART_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800058e:	f000 f899 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000204 	.word	0x20000204
 800059c:	40013800 	.word	0x40013800

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b4:	4b3e      	ldr	r3, [pc, #248]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a3d      	ldr	r2, [pc, #244]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b3b      	ldr	r3, [pc, #236]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0310 	and.w	r3, r3, #16
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005cc:	4b38      	ldr	r3, [pc, #224]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a37      	ldr	r2, [pc, #220]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005d2:	f043 0320 	orr.w	r3, r3, #32
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0320 	and.w	r3, r3, #32
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a31      	ldr	r2, [pc, #196]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_GPIO_Init+0x110>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <MX_GPIO_Init+0x110>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_GPIO_Init+0x110>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061a:	4826      	ldr	r0, [pc, #152]	; (80006b4 <MX_GPIO_Init+0x114>)
 800061c:	f000 ff09 	bl	8001432 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_BTN_GPIO_Port, READY_BTN_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2108      	movs	r1, #8
 8000624:	4824      	ldr	r0, [pc, #144]	; (80006b8 <MX_GPIO_Init+0x118>)
 8000626:	f000 ff04 	bl	8001432 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000630:	4822      	ldr	r0, [pc, #136]	; (80006bc <MX_GPIO_Init+0x11c>)
 8000632:	f000 fefe 	bl	8001432 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8000636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800063a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2302      	movs	r3, #2
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4819      	ldr	r0, [pc, #100]	; (80006b4 <MX_GPIO_Init+0x114>)
 8000650:	f000 fd54 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_BTN_Pin */
  GPIO_InitStruct.Pin = READY_BTN_Pin;
 8000654:	2308      	movs	r3, #8
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(READY_BTN_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	4813      	ldr	r0, [pc, #76]	; (80006b8 <MX_GPIO_Init+0x118>)
 800066c:	f000 fd46 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2302      	movs	r3, #2
 8000680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4619      	mov	r1, r3
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <MX_GPIO_Init+0x11c>)
 800068a:	f000 fd37 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_GPIO_Init+0x120>)
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_GPIO_Init+0x11c>)
 80006a4:	f000 fd2a 	bl	80010fc <HAL_GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40011000 	.word	0x40011000
 80006b8:	40010800 	.word	0x40010800
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	10110000 	.word	0x10110000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_MspInit+0x5c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <HAL_MspInit+0x5c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_MspInit+0x5c>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_MspInit+0x5c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_MspInit+0x5c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_MspInit+0x5c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_MspInit+0x60>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_MspInit+0x60>)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40021000 	.word	0x40021000
 8000730:	40010000 	.word	0x40010000

08000734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <HAL_SPI_MspInit+0x88>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d12f      	bne.n	80007b4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <HAL_SPI_MspInit+0x8c>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <HAL_SPI_MspInit+0x8c>)
 800075a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_SPI_MspInit+0x8c>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_SPI_MspInit+0x8c>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <HAL_SPI_MspInit+0x8c>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_SPI_MspInit+0x8c>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000784:	23a0      	movs	r3, #160	; 0xa0
 8000786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <HAL_SPI_MspInit+0x90>)
 8000798:	f000 fcb0 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <HAL_SPI_MspInit+0x90>)
 80007b0:	f000 fca4 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40013000 	.word	0x40013000
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800

080007c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <HAL_UART_MspInit+0x8c>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d131      	bne.n	800084c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_UART_MspInit+0x90>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a1a      	ldr	r2, [pc, #104]	; (8000858 <HAL_UART_MspInit+0x90>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_UART_MspInit+0x90>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_UART_MspInit+0x90>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <HAL_UART_MspInit+0x90>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_UART_MspInit+0x90>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800081c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <HAL_UART_MspInit+0x94>)
 800082e:	f000 fc65 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_UART_MspInit+0x94>)
 8000848:	f000 fc58 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40013800 	.word	0x40013800
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a6:	f000 faa9 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <_sbrk+0x5c>)
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <_sbrk+0x60>)
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <_sbrk+0x64>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <_sbrk+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d207      	bcs.n	80008f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e0:	f002 fc0a 	bl	80030f8 <__errno>
 80008e4:	4603      	mov	r3, r0
 80008e6:	220c      	movs	r2, #12
 80008e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	e009      	b.n	8000904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <_sbrk+0x64>)
 8000900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20005000 	.word	0x20005000
 8000910:	00000400 	.word	0x00000400
 8000914:	200001bc 	.word	0x200001bc
 8000918:	20000378 	.word	0x20000378

0800091c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800092e:	f000 f9c5 	bl	8000cbc <port_GetEXT_IRQStatus>
 8000932:	4603      	mov	r3, r0
 8000934:	607b      	str	r3, [r7, #4]

	if(s) {
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800093c:	f000 f9b0 	bl	8000ca0 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8000958:	f000 f9a9 	bl	8000cae <port_EnableEXT_IRQ>
	}
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f8f6 	bl	8000b5e <Sleep>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800097c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8000980:	4683      	mov	fp, r0
 8000982:	468a      	mov	sl, r1
 8000984:	4691      	mov	r9, r2
 8000986:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8000988:	f7ff ffce 	bl	8000928 <decamutexon>
 800098c:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800098e:	4d14      	ldr	r5, [pc, #80]	; (80009e0 <writetospi+0x64>)
 8000990:	4628      	mov	r0, r5
 8000992:	f001 fb41 	bl	8002018 <HAL_SPI_GetState>
 8000996:	2801      	cmp	r0, #1
 8000998:	4604      	mov	r4, r0
 800099a:	d1f9      	bne.n	8000990 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	4810      	ldr	r0, [pc, #64]	; (80009e4 <writetospi+0x68>)
 80009a4:	f000 fd45 	bl	8001432 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80009a8:	465a      	mov	r2, fp
 80009aa:	4651      	mov	r1, sl
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <writetospi+0x64>)
 80009b2:	f001 f9f5 	bl	8001da0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	4641      	mov	r1, r8
 80009bc:	fa1f f289 	uxth.w	r2, r9
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <writetospi+0x64>)
 80009c2:	f001 f9ed 	bl	8001da0 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80009c6:	4622      	mov	r2, r4
 80009c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <writetospi+0x68>)
 80009ce:	f000 fd30 	bl	8001432 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80009d2:	4630      	mov	r0, r6
 80009d4:	f7ff ffb9 	bl	800094a <decamutexoff>

    return 0;
} // end writetospi()
 80009d8:	2000      	movs	r0, #0
 80009da:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80009de:	bf00      	nop
 80009e0:	20000248 	.word	0x20000248
 80009e4:	40011000 	.word	0x40011000

080009e8 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 80009e8:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 80009ec:	4681      	mov	r9, r0
 80009ee:	460c      	mov	r4, r1
 80009f0:	4690      	mov	r8, r2
 80009f2:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80009f4:	f7ff ff98 	bl	8000928 <decamutexon>
 80009f8:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80009fa:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8000a88 <readfromspi+0xa0>
 80009fe:	4650      	mov	r0, sl
 8000a00:	f001 fb0a 	bl	8002018 <HAL_SPI_GetState>
 8000a04:	2801      	cmp	r0, #1
 8000a06:	d1fa      	bne.n	80009fe <readfromspi+0x16>

    stdio_write("Reading SPI\r\n");
 8000a08:	481d      	ldr	r0, [pc, #116]	; (8000a80 <readfromspi+0x98>)
 8000a0a:	f000 f96d 	bl	8000ce8 <stdio_write>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a14:	481b      	ldr	r0, [pc, #108]	; (8000a84 <readfromspi+0x9c>)
 8000a16:	f000 fd0c 	bl	8001432 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8000a1a:	f1b9 0f00 	cmp.w	r9, #0
 8000a1e:	d00c      	beq.n	8000a3a <readfromspi+0x52>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8000a20:	f8df a064 	ldr.w	sl, [pc, #100]	; 8000a88 <readfromspi+0xa0>
 8000a24:	44a1      	add	r9, r4
 8000a26:	2201      	movs	r2, #1
 8000a28:	4621      	mov	r1, r4
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	4414      	add	r4, r2
 8000a30:	4650      	mov	r0, sl
 8000a32:	f001 f9b5 	bl	8001da0 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8000a36:	454c      	cmp	r4, r9
 8000a38:	d1f5      	bne.n	8000a26 <readfromspi+0x3e>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8000a3a:	f1b8 0f00 	cmp.w	r8, #0
 8000a3e:	d012      	beq.n	8000a66 <readfromspi+0x7e>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8000a40:	2400      	movs	r4, #0
 8000a42:	f8df c044 	ldr.w	ip, [pc, #68]	; 8000a88 <readfromspi+0xa0>
 8000a46:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8000a4a:	f8dc 2000 	ldr.w	r2, [ip]
 8000a4e:	6891      	ldr	r1, [r2, #8]
 8000a50:	0789      	lsls	r1, r1, #30
 8000a52:	d5fc      	bpl.n	8000a4e <readfromspi+0x66>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8000a54:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8000a56:	6891      	ldr	r1, [r2, #8]
 8000a58:	07cb      	lsls	r3, r1, #31
 8000a5a:	d5fc      	bpl.n	8000a56 <readfromspi+0x6e>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8000a5c:	68d3      	ldr	r3, [r2, #12]
 8000a5e:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8000a62:	4285      	cmp	r5, r0
 8000a64:	d1f1      	bne.n	8000a4a <readfromspi+0x62>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <readfromspi+0x9c>)
 8000a6e:	f000 fce0 	bl	8001432 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000a72:	4630      	mov	r0, r6
 8000a74:	f7ff ff69 	bl	800094a <decamutexoff>

    return 0;
} // end readfromspi()
 8000a78:	2000      	movs	r0, #0
 8000a7a:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8000a7e:	bf00      	nop
 8000a80:	08003b54 	.word	0x08003b54
 8000a84:	40011000 	.word	0x40011000
 8000a88:	20000248 	.word	0x20000248

08000a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db0b      	blt.n	8000ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f003 021f 	and.w	r2, r3, #31
 8000aa4:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <__NVIC_EnableIRQ+0x34>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	095b      	lsrs	r3, r3, #5
 8000aac:	2001      	movs	r0, #1
 8000aae:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db12      	blt.n	8000afc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 021f 	and.w	r2, r3, #31
 8000adc:	490a      	ldr	r1, [pc, #40]	; (8000b08 <__NVIC_DisableIRQ+0x44>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	3320      	adds	r3, #32
 8000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000af0:	f3bf 8f4f 	dsb	sy
}
 8000af4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af6:	f3bf 8f6f 	isb	sy
}
 8000afa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep(useconds_t usec)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e012      	b.n	8000b40 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	e004      	b.n	8000b2a <usleep+0x1e>
        {
            __NOP();
 8000b20:	bf00      	nop
            __NOP();
 8000b22:	bf00      	nop
        for(j=0;j<2;j++)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	3301      	adds	r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	bfd4      	ite	le
 8000b30:	2301      	movle	r3, #1
 8000b32:	2300      	movgt	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1f2      	bne.n	8000b20 <usleep+0x14>
    for(i=0;i<usec;i++)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	bf8c      	ite	hi
 8000b48:	2301      	movhi	r3, #1
 8000b4a:	2300      	movls	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1e3      	bne.n	8000b1a <usleep+0xe>
        }
    }
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 f964 	bl	8000e34 <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <EXTI_GetITEnStatus+0x34>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f003 031f 	and.w	r3, r3, #31
 8000b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf14      	ite	ne
 8000b98:	2301      	movne	r3, #1
 8000b9a:	2300      	moveq	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb6:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb8:	2311      	movs	r3, #17
 8000bba:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <reset_DW1000+0x44>)
 8000bc6:	f000 fa99 	bl	80010fc <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <reset_DW1000+0x44>)
 8000bd2:	f000 fc2e 	bl	8001432 <HAL_GPIO_WritePin>

    usleep(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff98 	bl	8000b0c <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 f809 	bl	8000bf4 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff ffbb 	bl	8000b5e <Sleep>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40010c00 	.word	0x40010c00

08000bf4 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d015      	beq.n	8000c2e <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c06:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <setup_DW1000RSTnIRQ+0x74>)
 8000c0a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4619      	mov	r1, r3
 8000c16:	4815      	ldr	r0, [pc, #84]	; (8000c6c <setup_DW1000RSTnIRQ+0x78>)
 8000c18:	f000 fa70 	bl	80010fc <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8000c1c:	2006      	movs	r0, #6
 8000c1e:	f000 fa44 	bl	80010aa <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2105      	movs	r1, #5
 8000c26:	2006      	movs	r0, #6
 8000c28:	f000 fa23 	bl	8001072 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8000c2c:	e017      	b.n	8000c5e <setup_DW1000RSTnIRQ+0x6a>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8000c2e:	2006      	movs	r0, #6
 8000c30:	f000 fa49 	bl	80010c6 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c3a:	2311      	movs	r3, #17
 8000c3c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <setup_DW1000RSTnIRQ+0x78>)
 8000c4e:	f000 fa55 	bl	80010fc <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <setup_DW1000RSTnIRQ+0x78>)
 8000c5a:	f000 fbea 	bl	8001432 <HAL_GPIO_WritePin>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	10110000 	.word	0x10110000
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <port_set_dw1000_slowrate+0x14>)
 8000c76:	2220      	movs	r2, #32
 8000c78:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8000c7a:	4802      	ldr	r0, [pc, #8]	; (8000c84 <port_set_dw1000_slowrate+0x14>)
 8000c7c:	f001 f80c 	bl	8001c98 <HAL_SPI_Init>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000248 	.word	0x20000248

08000c88 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <port_set_dw1000_fastrate+0x14>)
 8000c8e:	2208      	movs	r2, #8
 8000c90:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8000c92:	4802      	ldr	r0, [pc, #8]	; (8000c9c <port_set_dw1000_fastrate+0x14>)
 8000c94:	f001 f800 	bl	8001c98 <HAL_SPI_Init>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000248 	.word	0x20000248

08000ca0 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8000ca4:	2017      	movs	r0, #23
 8000ca6:	f7ff ff0d 	bl	8000ac4 <__NVIC_DisableIRQ>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}

08000cae <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8000cb2:	2017      	movs	r0, #23
 8000cb4:	f7ff feea 	bl	8000a8c <__NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8000cc0:	2017      	movs	r0, #23
 8000cc2:	f7ff ff57 	bl	8000b74 <EXTI_GetITEnStatus>
 8000cc6:	4603      	mov	r3, r0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <stdio_init>:
 * @fn port_stdio_init
 * @brief Initialize stdio on the given UART
 *
 * @param[in] huart Pointer to the STM32 HAL UART peripheral instance
 */
void stdio_init(UART_HandleTypeDef* huart) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    uart = huart;
 8000cd4:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <stdio_init+0x18>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	200001c0 	.word	0x200001c0

08000ce8 <stdio_write>:
 *
 * @param[in] data Pointer to null terminated string
 * @return Number of bytes transmitted or -1 if an error occurred
 */
inline int stdio_write(const char *data)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(data);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fa2b 	bl	800014c <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	81fb      	strh	r3, [r7, #14]
    if (HAL_UART_Transmit(uart, (uint8_t*) data, len, HAL_MAX_DELAY) == HAL_OK) {
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <stdio_write+0x38>)
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	89fa      	ldrh	r2, [r7, #14]
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	f001 fa88 	bl	800221a <HAL_UART_Transmit>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <stdio_write+0x2c>
        return len;
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	e001      	b.n	8000d18 <stdio_write+0x30>
    }
    return -1;
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001c0 	.word	0x200001c0

08000d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	; (8000d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d4a:	f7ff fde7 	bl	800091c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f002 f9d9 	bl	8003104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d52:	f7ff fae9 	bl	8000328 <main>
  bx lr
 8000d56:	4770      	bx	lr
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d60:	08003c54 	.word	0x08003c54
  ldr r2, =_sbss
 8000d64:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d68:	20000378 	.word	0x20000378

08000d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_Init+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_Init+0x28>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f96b 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fca0 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f991 	bl	80010e2 <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f94b 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000000c 	.word	0x2000000c
 8000df4:	20000014 	.word	0x20000014
 8000df8:	20000010 	.word	0x20000010

08000dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_IncTick+0x1c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x20>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <HAL_IncTick+0x20>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	20000014 	.word	0x20000014
 8000e1c:	20000364 	.word	0x20000364

08000e20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <HAL_GetTick+0x10>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	20000364 	.word	0x20000364

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff fff0 	bl	8000e20 <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffe0 	bl	8000e20 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000014 	.word	0x20000014

08000e7c <__NVIC_SetPriorityGrouping>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_EnableIRQ>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4906      	ldr	r1, [pc, #24]	; (8000f14 <__NVIC_EnableIRQ+0x34>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_DisableIRQ>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db12      	blt.n	8000f50 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	490a      	ldr	r1, [pc, #40]	; (8000f5c <__NVIC_DisableIRQ+0x44>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	3320      	adds	r3, #32
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f44:	f3bf 8f4f 	dsb	sy
}
 8000f48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f4a:	f3bf 8f6f 	isb	sy
}
 8000f4e:	bf00      	nop
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff90 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff09 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff1e 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff90 	bl	8000fb4 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5f 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff11 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff1f 	bl	8000f18 <__NVIC_DisableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff94 	bl	8001018 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e169      	b.n	80013e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001110:	2201      	movs	r2, #1
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8158 	bne.w	80013de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4a9a      	ldr	r2, [pc, #616]	; (800139c <HAL_GPIO_Init+0x2a0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d05e      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001138:	4a98      	ldr	r2, [pc, #608]	; (800139c <HAL_GPIO_Init+0x2a0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d875      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800113e:	4a98      	ldr	r2, [pc, #608]	; (80013a0 <HAL_GPIO_Init+0x2a4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d058      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001144:	4a96      	ldr	r2, [pc, #600]	; (80013a0 <HAL_GPIO_Init+0x2a4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d86f      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800114a:	4a96      	ldr	r2, [pc, #600]	; (80013a4 <HAL_GPIO_Init+0x2a8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d052      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001150:	4a94      	ldr	r2, [pc, #592]	; (80013a4 <HAL_GPIO_Init+0x2a8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d869      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001156:	4a94      	ldr	r2, [pc, #592]	; (80013a8 <HAL_GPIO_Init+0x2ac>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d04c      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 800115c:	4a92      	ldr	r2, [pc, #584]	; (80013a8 <HAL_GPIO_Init+0x2ac>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d863      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001162:	4a92      	ldr	r2, [pc, #584]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d046      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001168:	4a90      	ldr	r2, [pc, #576]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d85d      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d82a      	bhi.n	80011c8 <HAL_GPIO_Init+0xcc>
 8001172:	2b12      	cmp	r3, #18
 8001174:	d859      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <HAL_GPIO_Init+0x80>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	080011f7 	.word	0x080011f7
 8001180:	080011d1 	.word	0x080011d1
 8001184:	080011e3 	.word	0x080011e3
 8001188:	08001225 	.word	0x08001225
 800118c:	0800122b 	.word	0x0800122b
 8001190:	0800122b 	.word	0x0800122b
 8001194:	0800122b 	.word	0x0800122b
 8001198:	0800122b 	.word	0x0800122b
 800119c:	0800122b 	.word	0x0800122b
 80011a0:	0800122b 	.word	0x0800122b
 80011a4:	0800122b 	.word	0x0800122b
 80011a8:	0800122b 	.word	0x0800122b
 80011ac:	0800122b 	.word	0x0800122b
 80011b0:	0800122b 	.word	0x0800122b
 80011b4:	0800122b 	.word	0x0800122b
 80011b8:	0800122b 	.word	0x0800122b
 80011bc:	0800122b 	.word	0x0800122b
 80011c0:	080011d9 	.word	0x080011d9
 80011c4:	080011ed 	.word	0x080011ed
 80011c8:	4a79      	ldr	r2, [pc, #484]	; (80013b0 <HAL_GPIO_Init+0x2b4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ce:	e02c      	b.n	800122a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e029      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	3304      	adds	r3, #4
 80011de:	623b      	str	r3, [r7, #32]
          break;
 80011e0:	e024      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	3308      	adds	r3, #8
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e01f      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	330c      	adds	r3, #12
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e01a      	b.n	800122c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fe:	2304      	movs	r3, #4
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e013      	b.n	800122c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d105      	bne.n	8001218 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800120c:	2308      	movs	r3, #8
 800120e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	611a      	str	r2, [r3, #16]
          break;
 8001216:	e009      	b.n	800122c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001218:	2308      	movs	r3, #8
 800121a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	615a      	str	r2, [r3, #20]
          break;
 8001222:	e003      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x130>
          break;
 800122a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2bff      	cmp	r3, #255	; 0xff
 8001230:	d801      	bhi.n	8001236 <HAL_GPIO_Init+0x13a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	e001      	b.n	800123a <HAL_GPIO_Init+0x13e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2bff      	cmp	r3, #255	; 0xff
 8001240:	d802      	bhi.n	8001248 <HAL_GPIO_Init+0x14c>
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0x152>
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	3b08      	subs	r3, #8
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	210f      	movs	r1, #15
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	6a39      	ldr	r1, [r7, #32]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80b1 	beq.w	80013de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001294:	4a48      	ldr	r2, [pc, #288]	; (80013b8 <HAL_GPIO_Init+0x2bc>)
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a40      	ldr	r2, [pc, #256]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d013      	beq.n	80012e8 <HAL_GPIO_Init+0x1ec>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3f      	ldr	r2, [pc, #252]	; (80013c0 <HAL_GPIO_Init+0x2c4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00d      	beq.n	80012e4 <HAL_GPIO_Init+0x1e8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <HAL_GPIO_Init+0x2c8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0x1e4>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3d      	ldr	r2, [pc, #244]	; (80013c8 <HAL_GPIO_Init+0x2cc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d101      	bne.n	80012dc <HAL_GPIO_Init+0x1e0>
 80012d8:	2303      	movs	r3, #3
 80012da:	e006      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012dc:	2304      	movs	r3, #4
 80012de:	e004      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012e8:	2300      	movs	r3, #0
 80012ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ec:	f002 0203 	and.w	r2, r2, #3
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	4093      	lsls	r3, r2
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012fa:	492f      	ldr	r1, [pc, #188]	; (80013b8 <HAL_GPIO_Init+0x2bc>)
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	492c      	ldr	r1, [pc, #176]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	4928      	ldr	r1, [pc, #160]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800132c:	4013      	ands	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4922      	ldr	r1, [pc, #136]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	491e      	ldr	r1, [pc, #120]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001354:	4013      	ands	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	4918      	ldr	r1, [pc, #96]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	608b      	str	r3, [r1, #8]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	4914      	ldr	r1, [pc, #80]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d021      	beq.n	80013d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	490e      	ldr	r1, [pc, #56]	; (80013cc <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	60cb      	str	r3, [r1, #12]
 8001398:	e021      	b.n	80013de <HAL_GPIO_Init+0x2e2>
 800139a:	bf00      	nop
 800139c:	10320000 	.word	0x10320000
 80013a0:	10310000 	.word	0x10310000
 80013a4:	10220000 	.word	0x10220000
 80013a8:	10210000 	.word	0x10210000
 80013ac:	10120000 	.word	0x10120000
 80013b0:	10110000 	.word	0x10110000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	40011000 	.word	0x40011000
 80013c8:	40011400 	.word	0x40011400
 80013cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_GPIO_Init+0x304>)
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4909      	ldr	r1, [pc, #36]	; (8001400 <HAL_GPIO_Init+0x304>)
 80013da:	4013      	ands	r3, r2
 80013dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	3301      	adds	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f47f ae8e 	bne.w	8001110 <HAL_GPIO_Init+0x14>
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	372c      	adds	r7, #44	; 0x2c
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e001      	b.n	8001426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001442:	787b      	ldrb	r3, [r7, #1]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001448:	887a      	ldrh	r2, [r7, #2]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800144e:	e003      	b.n	8001458 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	041a      	lsls	r2, r3, #16
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	611a      	str	r2, [r3, #16]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
	...

08001464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e26c      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8087 	beq.w	8001592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b04      	cmp	r3, #4
 800148e:	d00c      	beq.n	80014aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001490:	4b8f      	ldr	r3, [pc, #572]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b08      	cmp	r3, #8
 800149a:	d112      	bne.n	80014c2 <HAL_RCC_OscConfig+0x5e>
 800149c:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d10b      	bne.n	80014c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d06c      	beq.n	8001590 <HAL_RCC_OscConfig+0x12c>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d168      	bne.n	8001590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e246      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x76>
 80014cc:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a7f      	ldr	r2, [pc, #508]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e02e      	b.n	8001538 <HAL_RCC_OscConfig+0xd4>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x98>
 80014e2:	4b7b      	ldr	r3, [pc, #492]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a7a      	ldr	r2, [pc, #488]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a77      	ldr	r2, [pc, #476]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e01d      	b.n	8001538 <HAL_RCC_OscConfig+0xd4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0xbc>
 8001506:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a71      	ldr	r2, [pc, #452]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6e      	ldr	r2, [pc, #440]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0xd4>
 8001520:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a6a      	ldr	r2, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a67      	ldr	r2, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fc6e 	bl	8000e20 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fc6a 	bl	8000e20 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1fa      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0xe4>
 8001566:	e014      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fc5a 	bl	8000e20 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fc56 	bl	8000e20 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1e6      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x10c>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d063      	beq.n	8001666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159e:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015aa:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d11c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x18c>
 80015b6:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d116      	bne.n	80015f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_RCC_OscConfig+0x176>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d001      	beq.n	80015da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1ba      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4939      	ldr	r1, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	e03a      	b.n	8001666 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <HAL_RCC_OscConfig+0x270>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fc0f 	bl	8000e20 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff fc0b 	bl	8000e20 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e19b      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4927      	ldr	r1, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
 8001638:	e015      	b.n	8001666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_RCC_OscConfig+0x270>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fbee 	bl	8000e20 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fbea 	bl	8000e20 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e17a      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d03a      	beq.n	80016e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d019      	beq.n	80016ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_RCC_OscConfig+0x274>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff fbce 	bl	8000e20 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fbca 	bl	8000e20 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e15a      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f000 fad8 	bl	8001c5c <RCC_Delay>
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_RCC_OscConfig+0x274>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff fbb4 	bl	8000e20 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ba:	e00f      	b.n	80016dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff fbb0 	bl	8000e20 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d908      	bls.n	80016dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e140      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	42420000 	.word	0x42420000
 80016d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	4b9e      	ldr	r3, [pc, #632]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e9      	bne.n	80016bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a6 	beq.w	8001842 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b97      	ldr	r3, [pc, #604]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b94      	ldr	r3, [pc, #592]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a93      	ldr	r2, [pc, #588]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b91      	ldr	r3, [pc, #580]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001722:	4b8e      	ldr	r3, [pc, #568]	; (800195c <HAL_RCC_OscConfig+0x4f8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172e:	4b8b      	ldr	r3, [pc, #556]	; (800195c <HAL_RCC_OscConfig+0x4f8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a8a      	ldr	r2, [pc, #552]	; (800195c <HAL_RCC_OscConfig+0x4f8>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff fb71 	bl	8000e20 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff fb6d 	bl	8000e20 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	; 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0fd      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	4b81      	ldr	r3, [pc, #516]	; (800195c <HAL_RCC_OscConfig+0x4f8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x312>
 8001768:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	e02d      	b.n	80017d2 <HAL_RCC_OscConfig+0x36e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x334>
 800177e:	4b76      	ldr	r3, [pc, #472]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a75      	ldr	r2, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6213      	str	r3, [r2, #32]
 800178a:	4b73      	ldr	r3, [pc, #460]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a72      	ldr	r2, [pc, #456]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	e01c      	b.n	80017d2 <HAL_RCC_OscConfig+0x36e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d10c      	bne.n	80017ba <HAL_RCC_OscConfig+0x356>
 80017a0:	4b6d      	ldr	r3, [pc, #436]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a6c      	ldr	r2, [pc, #432]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	4b6a      	ldr	r3, [pc, #424]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a69      	ldr	r2, [pc, #420]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	e00b      	b.n	80017d2 <HAL_RCC_OscConfig+0x36e>
 80017ba:	4b67      	ldr	r3, [pc, #412]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4a66      	ldr	r2, [pc, #408]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	4b64      	ldr	r3, [pc, #400]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a63      	ldr	r2, [pc, #396]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d015      	beq.n	8001806 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff fb21 	bl	8000e20 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff fb1d 	bl	8000e20 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0ab      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	4b57      	ldr	r3, [pc, #348]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ee      	beq.n	80017e2 <HAL_RCC_OscConfig+0x37e>
 8001804:	e014      	b.n	8001830 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff fb0b 	bl	8000e20 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff fb07 	bl	8000e20 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e095      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ee      	bne.n	800180e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d105      	bne.n	8001842 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001836:	4b48      	ldr	r3, [pc, #288]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a47      	ldr	r2, [pc, #284]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8081 	beq.w	800194e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184c:	4b42      	ldr	r3, [pc, #264]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d061      	beq.n	800191c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d146      	bne.n	80018ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_RCC_OscConfig+0x4fc>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff fadb 	bl	8000e20 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff fad7 	bl	8000e20 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e067      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001880:	4b35      	ldr	r3, [pc, #212]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d108      	bne.n	80018a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	492d      	ldr	r1, [pc, #180]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a19      	ldr	r1, [r3, #32]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	430b      	orrs	r3, r1
 80018ba:	4927      	ldr	r1, [pc, #156]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_RCC_OscConfig+0x4fc>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff faab 	bl	8000e20 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff faa7 	bl	8000e20 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e037      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x46a>
 80018ec:	e02f      	b.n	800194e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_RCC_OscConfig+0x4fc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fa94 	bl	8000e20 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fa90 	bl	8000e20 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e020      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x498>
 800191a:	e018      	b.n	800194e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e013      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	429a      	cmp	r2, r3
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	40007000 	.word	0x40007000
 8001960:	42420060 	.word	0x42420060

08001964 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0d0      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b6a      	ldr	r3, [pc, #424]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d910      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0207 	bic.w	r2, r3, #7
 800198e:	4965      	ldr	r1, [pc, #404]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0b8      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c0:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a52      	ldr	r2, [pc, #328]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	494d      	ldr	r1, [pc, #308]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d040      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d115      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e07f      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e073      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e06b      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4936      	ldr	r1, [pc, #216]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a54:	f7ff f9e4 	bl	8000e20 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7ff f9e0 	bl	8000e20 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e053      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 020c 	and.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1eb      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d210      	bcs.n	8001ab4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4922      	ldr	r1, [pc, #136]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e032      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4916      	ldr	r1, [pc, #88]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	490e      	ldr	r1, [pc, #56]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001af2:	f000 f821 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	490a      	ldr	r1, [pc, #40]	; (8001b2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	5ccb      	ldrb	r3, [r1, r3]
 8001b06:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1cc>)
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x1d0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f942 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08003b3c 	.word	0x08003b3c
 8001b30:	2000000c 	.word	0x2000000c
 8001b34:	20000010 	.word	0x20000010

08001b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b490      	push	{r4, r7}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b40:	1d3c      	adds	r4, r7, #4
 8001b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b48:	f240 2301 	movw	r3, #513	; 0x201
 8001b4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x40>
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x46>
 8001b76:	e02d      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7a:	623b      	str	r3, [r7, #32]
      break;
 8001b7c:	e02d      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	0c5b      	lsrs	r3, r3, #17
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001baa:	4413      	add	r3, r2
 8001bac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb6:	fb02 f203 	mul.w	r2, r2, r3
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc2:	e004      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	623b      	str	r3, [r7, #32]
      break;
 8001bd2:	e002      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd6:	623b      	str	r3, [r7, #32]
      break;
 8001bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bda:	6a3b      	ldr	r3, [r7, #32]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc90      	pop	{r4, r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	08003b2c 	.word	0x08003b2c
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	007a1200 	.word	0x007a1200
 8001bf4:	003d0900 	.word	0x003d0900

08001bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	2000000c 	.word	0x2000000c

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff2 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08003b4c 	.word	0x08003b4c

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0adb      	lsrs	r3, r3, #11
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08003b4c 	.word	0x08003b4c

08001c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <RCC_Delay+0x34>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <RCC_Delay+0x38>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a5b      	lsrs	r3, r3, #9
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c78:	bf00      	nop
  }
  while (Delay --);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	60fa      	str	r2, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <RCC_Delay+0x1c>
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	10624dd3 	.word	0x10624dd3

08001c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e076      	b.n	8001d98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d108      	bne.n	8001cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cba:	d009      	beq.n	8001cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
 8001cc2:	e005      	b.n	8001cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fd22 	bl	8000734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d54:	ea42 0103 	orr.w	r1, r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	0c1a      	lsrs	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f002 0204 	and.w	r2, r2, #4
 8001d76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_SPI_Transmit+0x22>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e126      	b.n	8002010 <HAL_SPI_Transmit+0x270>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dca:	f7ff f829 	bl	8000e20 <HAL_GetTick>
 8001dce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d002      	beq.n	8001de6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
 8001de2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001de4:	e10b      	b.n	8001ffe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_SPI_Transmit+0x52>
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001df6:	e102      	b.n	8001ffe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	88fa      	ldrh	r2, [r7, #6]
 8001e16:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3e:	d10f      	bne.n	8001e60 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6a:	2b40      	cmp	r3, #64	; 0x40
 8001e6c:	d007      	beq.n	8001e7e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e86:	d14b      	bne.n	8001f20 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_SPI_Transmit+0xf6>
 8001e90:	8afb      	ldrh	r3, [r7, #22]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d13e      	bne.n	8001f14 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	881a      	ldrh	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	1c9a      	adds	r2, r3, #2
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001eba:	e02b      	b.n	8001f14 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d112      	bne.n	8001ef0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	881a      	ldrh	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	1c9a      	adds	r2, r3, #2
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	86da      	strh	r2, [r3, #54]	; 0x36
 8001eee:	e011      	b.n	8001f14 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ef0:	f7fe ff96 	bl	8000e20 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d803      	bhi.n	8001f08 <HAL_SPI_Transmit+0x168>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f06:	d102      	bne.n	8001f0e <HAL_SPI_Transmit+0x16e>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f12:	e074      	b.n	8001ffe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ce      	bne.n	8001ebc <HAL_SPI_Transmit+0x11c>
 8001f1e:	e04c      	b.n	8001fba <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <HAL_SPI_Transmit+0x18e>
 8001f28:	8afb      	ldrh	r3, [r7, #22]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d140      	bne.n	8001fb0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	330c      	adds	r3, #12
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f54:	e02c      	b.n	8001fb0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d113      	bne.n	8001f8c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	7812      	ldrb	r2, [r2, #0]
 8001f70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f8a:	e011      	b.n	8001fb0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f8c:	f7fe ff48 	bl	8000e20 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d803      	bhi.n	8001fa4 <HAL_SPI_Transmit+0x204>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d102      	bne.n	8001faa <HAL_SPI_Transmit+0x20a>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fae:	e026      	b.n	8001ffe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1cd      	bne.n	8001f56 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f8c0 	bl	8002144 <SPI_EndRxTxTransaction>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	77fb      	strb	r3, [r7, #31]
 8001ffa:	e000      	b.n	8001ffe <HAL_SPI_Transmit+0x25e>
  }

error:
 8001ffc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800200e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002026:	b2db      	uxtb	r3, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
	...

08002034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002044:	f7fe feec 	bl	8000e20 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002054:	f7fe fee4 	bl	8000e20 <HAL_GetTick>
 8002058:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	0d1b      	lsrs	r3, r3, #20
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800206a:	e054      	b.n	8002116 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d050      	beq.n	8002116 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002074:	f7fe fed4 	bl	8000e20 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	d902      	bls.n	800208a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d13d      	bne.n	8002106 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020a2:	d111      	bne.n	80020c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ac:	d004      	beq.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d107      	bne.n	80020c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d0:	d10f      	bne.n	80020f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e017      	b.n	8002136 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3b01      	subs	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4013      	ands	r3, r2
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	429a      	cmp	r2, r3
 8002132:	d19b      	bne.n	800206c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000000c 	.word	0x2000000c

08002144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	2180      	movs	r1, #128	; 0x80
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7ff ff6a 	bl	8002034 <SPI_WaitFlagStateUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	f043 0220 	orr.w	r2, r3, #32
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e000      	b.n	8002178 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e03f      	b.n	8002212 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fb0e 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f905 	bl	80023d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b08a      	sub	sp, #40	; 0x28
 800221e:	af02      	add	r7, sp, #8
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b20      	cmp	r3, #32
 8002238:	d17c      	bne.n	8002334 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_UART_Transmit+0x2c>
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e075      	b.n	8002336 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_UART_Transmit+0x3e>
 8002254:	2302      	movs	r3, #2
 8002256:	e06e      	b.n	8002336 <HAL_UART_Transmit+0x11c>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2221      	movs	r2, #33	; 0x21
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800226e:	f7fe fdd7 	bl	8000e20 <HAL_GetTick>
 8002272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002288:	d108      	bne.n	800229c <HAL_UART_Transmit+0x82>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d104      	bne.n	800229c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	e003      	b.n	80022a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022ac:	e02a      	b.n	8002304 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f840 	bl	800233e <UART_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e036      	b.n	8002336 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	3302      	adds	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e007      	b.n	80022f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1cf      	bne.n	80022ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f810 	bl	800233e <UART_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800234e:	e02c      	b.n	80023aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d028      	beq.n	80023aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <UART_WaitOnFlagUntilTimeout+0x30>
 800235e:	f7fe fd5f 	bl	8000e20 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	429a      	cmp	r2, r3
 800236c:	d21d      	bcs.n	80023aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800237c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e00f      	b.n	80023ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4013      	ands	r3, r2
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d0c3      	beq.n	8002350 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800240e:	f023 030c 	bic.w	r3, r3, #12
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	430b      	orrs	r3, r1
 800241a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2c      	ldr	r2, [pc, #176]	; (80024e8 <UART_SetConfig+0x114>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d103      	bne.n	8002444 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800243c:	f7ff fbfa 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	e002      	b.n	800244a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002444:	f7ff fbe2 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8002448:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	009a      	lsls	r2, r3, #2
 8002454:	441a      	add	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <UART_SetConfig+0x118>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	0119      	lsls	r1, r3, #4
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	009a      	lsls	r2, r3, #2
 8002474:	441a      	add	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <UART_SetConfig+0x118>)
 8002482:	fba3 0302 	umull	r0, r3, r3, r2
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2064      	movs	r0, #100	; 0x64
 800248a:	fb00 f303 	mul.w	r3, r0, r3
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	3332      	adds	r3, #50	; 0x32
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <UART_SetConfig+0x118>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a0:	4419      	add	r1, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009a      	lsls	r2, r3, #2
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <UART_SetConfig+0x118>)
 80024ba:	fba3 0302 	umull	r0, r3, r3, r2
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	2064      	movs	r0, #100	; 0x64
 80024c2:	fb00 f303 	mul.w	r3, r0, r3
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	3332      	adds	r3, #50	; 0x32
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <UART_SetConfig+0x118>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	440a      	add	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40013800 	.word	0x40013800
 80024ec:	51eb851f 	.word	0x51eb851f

080024f0 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8002500:	4b9f      	ldr	r3, [pc, #636]	; (8002780 <dwt_initialise+0x290>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8002508:	4b9d      	ldr	r3, [pc, #628]	; (8002780 <dwt_initialise+0x290>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8002510:	4b9b      	ldr	r3, [pc, #620]	; (8002780 <dwt_initialise+0x290>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8002518:	4b99      	ldr	r3, [pc, #612]	; (8002780 <dwt_initialise+0x290>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8002520:	4b97      	ldr	r3, [pc, #604]	; (8002780 <dwt_initialise+0x290>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8002528:	4b95      	ldr	r3, [pc, #596]	; (8002780 <dwt_initialise+0x290>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8002530:	4b93      	ldr	r3, [pc, #588]	; (8002780 <dwt_initialise+0x290>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8002538:	f000 f926 	bl	8002788 <dwt_readdevid>
 800253c:	4603      	mov	r3, r0
 800253e:	4a91      	ldr	r2, [pc, #580]	; (8002784 <dwt_initialise+0x294>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d002      	beq.n	800254a <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	e115      	b.n	8002776 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8002554:	f000 fd92 	bl	800307c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <dwt_initialise+0x7c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800256c:	2000      	movs	r0, #0
 800256e:	f000 fc53 	bl	8002e18 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8002572:	2204      	movs	r2, #4
 8002574:	2100      	movs	r1, #0
 8002576:	2024      	movs	r0, #36	; 0x24
 8002578:	f000 fb98 	bl	8002cac <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d116      	bne.n	80025b4 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8002586:	2004      	movs	r0, #4
 8002588:	f000 fbe6 	bl	8002d58 <_dwt_otpread>
 800258c:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01f      	beq.n	80025d6 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8002596:	2202      	movs	r2, #2
 8002598:	2112      	movs	r1, #18
 800259a:	202d      	movs	r0, #45	; 0x2d
 800259c:	f000 fb86 	bl	8002cac <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80025a0:	4b77      	ldr	r3, [pc, #476]	; (8002780 <dwt_initialise+0x290>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	8ada      	ldrh	r2, [r3, #22]
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <dwt_initialise+0x290>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025ae:	b292      	uxth	r2, r2
 80025b0:	82da      	strh	r2, [r3, #22]
 80025b2:	e010      	b.n	80025d6 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80025b4:	2130      	movs	r1, #48	; 0x30
 80025b6:	2028      	movs	r0, #40	; 0x28
 80025b8:	f000 fb21 	bl	8002bfe <dwt_read32bitoffsetreg>
 80025bc:	4603      	mov	r3, r0
 80025be:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80025c2:	d008      	beq.n	80025d6 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80025c4:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <dwt_initialise+0x290>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	8ada      	ldrh	r2, [r3, #22]
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <dwt_initialise+0x290>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025d2:	b292      	uxth	r2, r2
 80025d4:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <dwt_initialise+0x104>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <dwt_initialise+0x11e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00c      	beq.n	800260e <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80025f4:	201e      	movs	r0, #30
 80025f6:	f000 fbaf 	bl	8002d58 <_dwt_otpread>
 80025fa:	4603      	mov	r3, r0
 80025fc:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80025fe:	8afb      	ldrh	r3, [r7, #22]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b29a      	uxth	r2, r3
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <dwt_initialise+0x290>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	72da      	strb	r2, [r3, #11]
 800260c:	e003      	b.n	8002616 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800260e:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <dwt_initialise+0x290>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10b      	bne.n	8002638 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8002620:	8afb      	ldrh	r3, [r7, #22]
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800262a:	2310      	movs	r3, #16
 800262c:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800262e:	8afb      	ldrh	r3, [r7, #22]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fd48 	bl	80030c8 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8002642:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <dwt_initialise+0x290>)
 8002644:	681c      	ldr	r4, [r3, #0]
 8002646:	2006      	movs	r0, #6
 8002648:	f000 fb86 	bl	8002d58 <_dwt_otpread>
 800264c:	4603      	mov	r3, r0
 800264e:	6023      	str	r3, [r4, #0]
 8002650:	e003      	b.n	800265a <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8002652:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <dwt_initialise+0x290>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8002664:	4b46      	ldr	r3, [pc, #280]	; (8002780 <dwt_initialise+0x290>)
 8002666:	681c      	ldr	r4, [r3, #0]
 8002668:	2007      	movs	r0, #7
 800266a:	f000 fb75 	bl	8002d58 <_dwt_otpread>
 800266e:	4603      	mov	r3, r0
 8002670:	6063      	str	r3, [r4, #4]
 8002672:	e003      	b.n	800267c <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8002674:	4b42      	ldr	r3, [pc, #264]	; (8002780 <dwt_initialise+0x290>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2200      	movs	r2, #0
 800267a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8002686:	2008      	movs	r0, #8
 8002688:	f000 fb66 	bl	8002d58 <_dwt_otpread>
 800268c:	4602      	mov	r2, r0
 800268e:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <dwt_initialise+0x290>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	721a      	strb	r2, [r3, #8]
 8002696:	e003      	b.n	80026a0 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <dwt_initialise+0x290>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2200      	movs	r2, #0
 800269e:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80026aa:	2009      	movs	r0, #9
 80026ac:	f000 fb54 	bl	8002d58 <_dwt_otpread>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b33      	ldr	r3, [pc, #204]	; (8002780 <dwt_initialise+0x290>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	725a      	strb	r2, [r3, #9]
 80026ba:	e003      	b.n	80026c4 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80026bc:	4b30      	ldr	r3, [pc, #192]	; (8002780 <dwt_initialise+0x290>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2200      	movs	r2, #0
 80026c2:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d121      	bne.n	8002712 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80026d8:	f000 fb8b 	bl	8002df2 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80026dc:	4b28      	ldr	r3, [pc, #160]	; (8002780 <dwt_initialise+0x290>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	8ada      	ldrh	r2, [r3, #22]
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <dwt_initialise+0x290>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ea:	b292      	uxth	r2, r2
 80026ec:	82da      	strh	r2, [r3, #22]
 80026ee:	e01e      	b.n	800272e <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80026f0:	2105      	movs	r1, #5
 80026f2:	2036      	movs	r0, #54	; 0x36
 80026f4:	f000 faaa 	bl	8002c4c <dwt_read16bitoffsetreg>
 80026f8:	4603      	mov	r3, r0
 80026fa:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80026fc:	89fb      	ldrh	r3, [r7, #14]
 80026fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002702:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8002704:	89fb      	ldrh	r3, [r7, #14]
 8002706:	461a      	mov	r2, r3
 8002708:	2105      	movs	r1, #5
 800270a:	2036      	movs	r0, #54	; 0x36
 800270c:	f000 fae1 	bl	8002cd2 <dwt_write16bitoffsetreg>
 8002710:	e00d      	b.n	800272e <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d108      	bne.n	800272e <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <dwt_initialise+0x290>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	8ada      	ldrh	r2, [r3, #22]
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <dwt_initialise+0x290>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800272a:	b292      	uxth	r2, r2
 800272c:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800272e:	2001      	movs	r0, #1
 8002730:	f000 fb72 	bl	8002e18 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8002734:	2200      	movs	r2, #0
 8002736:	210a      	movs	r1, #10
 8002738:	202c      	movs	r0, #44	; 0x2c
 800273a:	f000 fab7 	bl	8002cac <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <dwt_initialise+0x290>)
 8002740:	681c      	ldr	r4, [r3, #0]
 8002742:	2100      	movs	r1, #0
 8002744:	2004      	movs	r0, #4
 8002746:	f000 fa5a 	bl	8002bfe <dwt_read32bitoffsetreg>
 800274a:	4603      	mov	r3, r0
 800274c:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <dwt_initialise+0x290>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <dwt_initialise+0x290>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f002 0203 	and.w	r2, r2, #3
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <dwt_initialise+0x290>)
 8002766:	681c      	ldr	r4, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	2008      	movs	r0, #8
 800276c:	f000 fa47 	bl	8002bfe <dwt_read32bitoffsetreg>
 8002770:	4603      	mov	r3, r0
 8002772:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8002774:	2300      	movs	r3, #0

} // end dwt_initialise()
 8002776:	4618      	mov	r0, r3
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	bf00      	nop
 8002780:	20000018 	.word	0x20000018
 8002784:	deca0130 	.word	0xdeca0130

08002788 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800278c:	2100      	movs	r1, #0
 800278e:	2000      	movs	r0, #0
 8002790:	f000 fa35 	bl	8002bfe <dwt_read32bitoffsetreg>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	795b      	ldrb	r3, [r3, #5]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4ba1      	ldr	r3, [pc, #644]	; (8002a40 <dwt_configure+0x2a4>)
 80027ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027be:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <dwt_configure+0x38>
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b07      	cmp	r3, #7
 80027d2:	d101      	bne.n	80027d8 <dwt_configure+0x3c>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <dwt_configure+0x3e>
 80027d8:	2300      	movs	r3, #0
 80027da:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	79db      	ldrb	r3, [r3, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80027e4:	4b97      	ldr	r3, [pc, #604]	; (8002a44 <dwt_configure+0x2a8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	4b96      	ldr	r3, [pc, #600]	; (8002a44 <dwt_configure+0x2a8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80027f2:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80027f4:	8abb      	ldrh	r3, [r7, #20]
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	82bb      	strh	r3, [r7, #20]
 80027fa:	e007      	b.n	800280c <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80027fc:	4b91      	ldr	r3, [pc, #580]	; (8002a44 <dwt_configure+0x2a8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	4b90      	ldr	r3, [pc, #576]	; (8002a44 <dwt_configure+0x2a8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800280a:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800280c:	4b8d      	ldr	r3, [pc, #564]	; (8002a44 <dwt_configure+0x2a8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	7a12      	ldrb	r2, [r2, #8]
 8002814:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8002816:	4b8b      	ldr	r3, [pc, #556]	; (8002a44 <dwt_configure+0x2a8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	4b89      	ldr	r3, [pc, #548]	; (8002a44 <dwt_configure+0x2a8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002824:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8002826:	4b87      	ldr	r3, [pc, #540]	; (8002a44 <dwt_configure+0x2a8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6919      	ldr	r1, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7a1b      	ldrb	r3, [r3, #8]
 8002830:	041b      	lsls	r3, r3, #16
 8002832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002836:	4b83      	ldr	r3, [pc, #524]	; (8002a44 <dwt_configure+0x2a8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800283e:	4b81      	ldr	r3, [pc, #516]	; (8002a44 <dwt_configure+0x2a8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	461a      	mov	r2, r3
 8002846:	2100      	movs	r1, #0
 8002848:	2004      	movs	r0, #4
 800284a:	f000 fa5e 	bl	8002d0a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800284e:	8abb      	ldrh	r3, [r7, #20]
 8002850:	461a      	mov	r2, r3
 8002852:	f642 0104 	movw	r1, #10244	; 0x2804
 8002856:	202e      	movs	r0, #46	; 0x2e
 8002858:	f000 fa3b 	bl	8002cd2 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800285c:	7cbb      	ldrb	r3, [r7, #18]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 faa7 	bl	8002db2 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	4a78      	ldr	r2, [pc, #480]	; (8002a48 <dwt_configure+0x2ac>)
 8002868:	5cd3      	ldrb	r3, [r2, r3]
 800286a:	461a      	mov	r2, r3
 800286c:	4b77      	ldr	r3, [pc, #476]	; (8002a4c <dwt_configure+0x2b0>)
 800286e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002872:	461a      	mov	r2, r3
 8002874:	2107      	movs	r1, #7
 8002876:	202b      	movs	r0, #43	; 0x2b
 8002878:	f000 fa47 	bl	8002d0a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	4a72      	ldr	r2, [pc, #456]	; (8002a48 <dwt_configure+0x2ac>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	461a      	mov	r2, r3
 8002884:	4b72      	ldr	r3, [pc, #456]	; (8002a50 <dwt_configure+0x2b4>)
 8002886:	5c9b      	ldrb	r3, [r3, r2]
 8002888:	461a      	mov	r2, r3
 800288a:	210b      	movs	r1, #11
 800288c:	202b      	movs	r0, #43	; 0x2b
 800288e:	f000 fa0d 	bl	8002cac <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8002892:	7c7b      	ldrb	r3, [r7, #17]
 8002894:	4a6f      	ldr	r2, [pc, #444]	; (8002a54 <dwt_configure+0x2b8>)
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	461a      	mov	r2, r3
 800289a:	210b      	movs	r1, #11
 800289c:	2028      	movs	r0, #40	; 0x28
 800289e:	f000 fa05 	bl	8002cac <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	4a68      	ldr	r2, [pc, #416]	; (8002a48 <dwt_configure+0x2ac>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b6b      	ldr	r3, [pc, #428]	; (8002a58 <dwt_configure+0x2bc>)
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	461a      	mov	r2, r3
 80028b2:	210c      	movs	r1, #12
 80028b4:	2028      	movs	r0, #40	; 0x28
 80028b6:	f000 fa28 	bl	8002d0a <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	79db      	ldrb	r3, [r3, #7]
 80028be:	4618      	mov	r0, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	799b      	ldrb	r3, [r3, #6]
 80028c4:	4619      	mov	r1, r3
 80028c6:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <dwt_configure+0x2c0>)
 80028c8:	0043      	lsls	r3, r0, #1
 80028ca:	440b      	add	r3, r1
 80028cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028d0:	461a      	mov	r2, r3
 80028d2:	2102      	movs	r1, #2
 80028d4:	2027      	movs	r0, #39	; 0x27
 80028d6:	f000 f9fc 	bl	8002cd2 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80028da:	7cbb      	ldrb	r3, [r7, #18]
 80028dc:	4a60      	ldr	r2, [pc, #384]	; (8002a60 <dwt_configure+0x2c4>)
 80028de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028e2:	461a      	mov	r2, r3
 80028e4:	2104      	movs	r1, #4
 80028e6:	2027      	movs	r0, #39	; 0x27
 80028e8:	f000 f9f3 	bl	8002cd2 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	79db      	ldrb	r3, [r3, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80028f4:	2264      	movs	r2, #100	; 0x64
 80028f6:	2106      	movs	r1, #6
 80028f8:	2027      	movs	r0, #39	; 0x27
 80028fa:	f000 f9ea 	bl	8002cd2 <dwt_write16bitoffsetreg>
 80028fe:	e018      	b.n	8002932 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	789b      	ldrb	r3, [r3, #2]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d10a      	bne.n	800291e <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8002908:	2210      	movs	r2, #16
 800290a:	2106      	movs	r1, #6
 800290c:	2027      	movs	r0, #39	; 0x27
 800290e:	f000 f9e0 	bl	8002cd2 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8002912:	2210      	movs	r2, #16
 8002914:	2126      	movs	r1, #38	; 0x26
 8002916:	2027      	movs	r0, #39	; 0x27
 8002918:	f000 f9c8 	bl	8002cac <dwt_write8bitoffsetreg>
 800291c:	e009      	b.n	8002932 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800291e:	2220      	movs	r2, #32
 8002920:	2106      	movs	r1, #6
 8002922:	2027      	movs	r0, #39	; 0x27
 8002924:	f000 f9d5 	bl	8002cd2 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8002928:	2228      	movs	r2, #40	; 0x28
 800292a:	2126      	movs	r1, #38	; 0x26
 800292c:	2027      	movs	r0, #39	; 0x27
 800292e:	f000 f9bd 	bl	8002cac <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8002932:	7cbb      	ldrb	r3, [r7, #18]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	78d2      	ldrb	r2, [r2, #3]
 8002938:	4611      	mov	r1, r2
 800293a:	4a4a      	ldr	r2, [pc, #296]	; (8002a64 <dwt_configure+0x2c8>)
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002944:	461a      	mov	r2, r3
 8002946:	2108      	movs	r1, #8
 8002948:	2027      	movs	r0, #39	; 0x27
 800294a:	f000 f9de 	bl	8002d0a <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	895b      	ldrh	r3, [r3, #10]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f241 0241 	movw	r2, #4161	; 0x1041
 800295c:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	895b      	ldrh	r3, [r3, #10]
 8002962:	461a      	mov	r2, r3
 8002964:	2120      	movs	r1, #32
 8002966:	2027      	movs	r0, #39	; 0x27
 8002968:	f000 f9b3 	bl	8002cd2 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800296c:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <dwt_configure+0x2cc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	210c      	movs	r1, #12
 8002974:	2023      	movs	r0, #35	; 0x23
 8002976:	f000 f9c8 	bl	8002d0a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800297a:	7cbb      	ldrb	r3, [r7, #18]
 800297c:	4a3a      	ldr	r2, [pc, #232]	; (8002a68 <dwt_configure+0x2cc>)
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	889b      	ldrh	r3, [r3, #4]
 8002984:	461a      	mov	r2, r3
 8002986:	2104      	movs	r1, #4
 8002988:	2023      	movs	r0, #35	; 0x23
 800298a:	f000 f9a2 	bl	8002cd2 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	799b      	ldrb	r3, [r3, #6]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	79db      	ldrb	r3, [r3, #7]
 800299a:	461a      	mov	r2, r3
 800299c:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <dwt_configure+0x2d0>)
 800299e:	5c9b      	ldrb	r3, [r3, r2]
 80029a0:	461a      	mov	r2, r3
 80029a2:	2100      	movs	r1, #0
 80029a4:	2021      	movs	r0, #33	; 0x21
 80029a6:	f000 f981 	bl	8002cac <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80029aa:	2303      	movs	r3, #3
 80029ac:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80029be:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	049b      	lsls	r3, r3, #18
 80029c6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80029ca:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	051b      	lsls	r3, r3, #20
 80029d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80029d4:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80029d6:	7dbb      	ldrb	r3, [r7, #22]
 80029d8:	045b      	lsls	r3, r3, #17
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80029de:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	791b      	ldrb	r3, [r3, #4]
 80029e4:	059b      	lsls	r3, r3, #22
 80029e6:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80029ea:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	795b      	ldrb	r3, [r3, #5]
 80029f0:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	2100      	movs	r1, #0
 80029fa:	201f      	movs	r0, #31
 80029fc:	f000 f985 	bl	8002d0a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	789a      	ldrb	r2, [r3, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	0419      	lsls	r1, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	79db      	ldrb	r3, [r3, #7]
 8002a12:	035a      	lsls	r2, r3, #13
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <dwt_configure+0x2a8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <dwt_configure+0x2a8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	461a      	mov	r2, r3
 8002a24:	2100      	movs	r1, #0
 8002a26:	2008      	movs	r0, #8
 8002a28:	f000 f96f 	bl	8002d0a <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8002a2c:	2242      	movs	r2, #66	; 0x42
 8002a2e:	2100      	movs	r1, #0
 8002a30:	200d      	movs	r0, #13
 8002a32:	f000 f93b 	bl	8002cac <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	08003be4 	.word	0x08003be4
 8002a44:	20000018 	.word	0x20000018
 8002a48:	08003b64 	.word	0x08003b64
 8002a4c:	08003b84 	.word	0x08003b84
 8002a50:	08003b9c 	.word	0x08003b9c
 8002a54:	08003ba4 	.word	0x08003ba4
 8002a58:	08003b6c 	.word	0x08003b6c
 8002a5c:	08003bb4 	.word	0x08003bb4
 8002a60:	08003bc0 	.word	0x08003bc0
 8002a64:	08003bc4 	.word	0x08003bc4
 8002a68:	08003ba8 	.word	0x08003ba8
 8002a6c:	08003bb0 	.word	0x08003bb0

08002a70 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	8839      	ldrh	r1, [r7, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2011      	movs	r0, #17
 8002a88:	f000 f860 	bl	8002b4c <dwt_readfromdevice>
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60ba      	str	r2, [r7, #8]
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	81fb      	strh	r3, [r7, #14]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002aaa:	89bb      	ldrh	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002ab0:	89fb      	ldrh	r3, [r7, #14]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	1c59      	adds	r1, r3, #1
 8002ab8:	6179      	str	r1, [r7, #20]
 8002aba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	f107 0118 	add.w	r1, r7, #24
 8002ac4:	440b      	add	r3, r1
 8002ac6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002aca:	e033      	b.n	8002b34 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002acc:	89fb      	ldrh	r3, [r7, #14]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	1c59      	adds	r1, r3, #1
 8002ad4:	6179      	str	r1, [r7, #20]
 8002ad6:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f107 0118 	add.w	r1, r7, #24
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002ae6:	89bb      	ldrh	r3, [r7, #12]
 8002ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8002aea:	d80a      	bhi.n	8002b02 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	617a      	str	r2, [r7, #20]
 8002af2:	89ba      	ldrh	r2, [r7, #12]
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f107 0118 	add.w	r1, r7, #24
 8002afa:	440b      	add	r3, r1
 8002afc:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002b00:	e018      	b.n	8002b34 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002b02:	89bb      	ldrh	r3, [r7, #12]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	6179      	str	r1, [r7, #20]
 8002b0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f107 0118 	add.w	r1, r7, #24
 8002b16:	440b      	add	r3, r1
 8002b18:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002b1c:	89bb      	ldrh	r3, [r7, #12]
 8002b1e:	09db      	lsrs	r3, r3, #7
 8002b20:	b299      	uxth	r1, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	617a      	str	r2, [r7, #20]
 8002b28:	b2ca      	uxtb	r2, r1
 8002b2a:	f107 0118 	add.w	r1, r7, #24
 8002b2e:	440b      	add	r3, r1
 8002b30:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	b298      	uxth	r0, r3
 8002b38:	f107 0110 	add.w	r1, r7, #16
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	f7fd ff1c 	bl	800097c <writetospi>
} // end dwt_writetodevice()
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60ba      	str	r2, [r7, #8]
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	4603      	mov	r3, r0
 8002b58:	81fb      	strh	r3, [r7, #14]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002b62:	89bb      	ldrh	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	617a      	str	r2, [r7, #20]
 8002b6e:	89fa      	ldrh	r2, [r7, #14]
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	f107 0118 	add.w	r1, r7, #24
 8002b76:	440b      	add	r3, r1
 8002b78:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002b7c:	e033      	b.n	8002be6 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002b7e:	89fb      	ldrh	r3, [r7, #14]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1c59      	adds	r1, r3, #1
 8002b86:	6179      	str	r1, [r7, #20]
 8002b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f107 0118 	add.w	r1, r7, #24
 8002b92:	440b      	add	r3, r1
 8002b94:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002b98:	89bb      	ldrh	r3, [r7, #12]
 8002b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b9c:	d80a      	bhi.n	8002bb4 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	617a      	str	r2, [r7, #20]
 8002ba4:	89ba      	ldrh	r2, [r7, #12]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	f107 0118 	add.w	r1, r7, #24
 8002bac:	440b      	add	r3, r1
 8002bae:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002bb2:	e018      	b.n	8002be6 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002bb4:	89bb      	ldrh	r3, [r7, #12]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	6179      	str	r1, [r7, #20]
 8002bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f107 0118 	add.w	r1, r7, #24
 8002bc8:	440b      	add	r3, r1
 8002bca:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002bce:	89bb      	ldrh	r3, [r7, #12]
 8002bd0:	09db      	lsrs	r3, r3, #7
 8002bd2:	b299      	uxth	r1, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	617a      	str	r2, [r7, #20]
 8002bda:	b2ca      	uxtb	r2, r1
 8002bdc:	f107 0118 	add.w	r1, r7, #24
 8002be0:	440b      	add	r3, r1
 8002be2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	b298      	uxth	r0, r3
 8002bea:	f107 0110 	add.w	r1, r7, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	f7fd fef9 	bl	80009e8 <readfromspi>
} // end dwt_readfromdevice()
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	b298      	uxth	r0, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b299      	uxth	r1, r3
 8002c14:	f107 030c 	add.w	r3, r7, #12
 8002c18:	2204      	movs	r2, #4
 8002c1a:	f7ff ff97 	bl	8002b4c <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8002c1e:	2303      	movs	r3, #3
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	e00b      	b.n	8002c3c <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	f107 010c 	add.w	r1, r7, #12
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	440a      	add	r2, r1
 8002c30:	7812      	ldrb	r2, [r2, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	daf0      	bge.n	8002c24 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8002c42:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8002c56:	2300      	movs	r3, #0
 8002c58:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	b298      	uxth	r0, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b299      	uxth	r1, r3
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	2202      	movs	r2, #2
 8002c68:	f7ff ff70 	bl	8002b4c <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8002c6c:	7b7b      	ldrb	r3, [r7, #13]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	7b3b      	ldrb	r3, [r7, #12]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8002c7c:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	b298      	uxth	r0, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b299      	uxth	r1, r3
 8002c98:	f107 030f 	add.w	r3, r7, #15
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f7ff ff55 	bl	8002b4c <dwt_readfromdevice>

    return regval ;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	b298      	uxth	r0, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	b299      	uxth	r1, r3
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f7ff fee5 	bl	8002a94 <dwt_writetodevice>
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	b298      	uxth	r0, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	b299      	uxth	r1, r3
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f7ff fec9 	bl	8002a94 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b086      	sub	sp, #24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e00d      	b.n	8002d38 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	b2d9      	uxtb	r1, r3
 8002d20:	f107 0210 	add.w	r2, r7, #16
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	4413      	add	r3, r2
 8002d28:	460a      	mov	r2, r1
 8002d2a:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3301      	adds	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	ddee      	ble.n	8002d1c <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	b298      	uxth	r0, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	b299      	uxth	r1, r3
 8002d46:	f107 0310 	add.w	r3, r7, #16
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	f7ff fea2 	bl	8002a94 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	461a      	mov	r2, r3
 8002d66:	2104      	movs	r1, #4
 8002d68:	202d      	movs	r0, #45	; 0x2d
 8002d6a:	f7ff ffb2 	bl	8002cd2 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8002d6e:	2203      	movs	r2, #3
 8002d70:	2106      	movs	r1, #6
 8002d72:	202d      	movs	r0, #45	; 0x2d
 8002d74:	f7ff ff9a 	bl	8002cac <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2106      	movs	r1, #6
 8002d7c:	202d      	movs	r0, #45	; 0x2d
 8002d7e:	f7ff ff95 	bl	8002cac <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8002d82:	210a      	movs	r1, #10
 8002d84:	202d      	movs	r0, #45	; 0x2d
 8002d86:	f7ff ff3a 	bl	8002bfe <dwt_read32bitoffsetreg>
 8002d8a:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	f7ff ff84 	bl	8002cac <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8002da4:	2202      	movs	r2, #2
 8002da6:	2102      	movs	r1, #2
 8002da8:	202c      	movs	r0, #44	; 0x2c
 8002daa:	f7ff ff7f 	bl	8002cac <dwt_write8bitoffsetreg>
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8002dba:	226d      	movs	r2, #109	; 0x6d
 8002dbc:	f640 0106 	movw	r1, #2054	; 0x806
 8002dc0:	202e      	movs	r0, #46	; 0x2e
 8002dc2:	f7ff ff73 	bl	8002cac <dwt_write8bitoffsetreg>

    if(prfIndex)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8002dcc:	f240 6207 	movw	r2, #1543	; 0x607
 8002dd0:	f641 0106 	movw	r1, #6150	; 0x1806
 8002dd4:	202e      	movs	r0, #46	; 0x2e
 8002dd6:	f7ff ff7c 	bl	8002cd2 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8002dda:	e006      	b.n	8002dea <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8002ddc:	f241 6207 	movw	r2, #5639	; 0x1607
 8002de0:	f641 0106 	movw	r1, #6150	; 0x1806
 8002de4:	202e      	movs	r0, #46	; 0x2e
 8002de6:	f7ff ff74 	bl	8002cd2 <dwt_write16bitoffsetreg>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8002df6:	200e      	movs	r0, #14
 8002df8:	f000 f80e 	bl	8002e18 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8002dfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e00:	2106      	movs	r1, #6
 8002e02:	202d      	movs	r0, #45	; 0x2d
 8002e04:	f7ff ff65 	bl	8002cd2 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f7fd fdab 	bl	8000964 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f000 f802 	bl	8002e18 <_dwt_enableclocks>
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	2202      	movs	r2, #2
 8002e26:	2100      	movs	r1, #0
 8002e28:	2036      	movs	r0, #54	; 0x36
 8002e2a:	f7ff fe8f 	bl	8002b4c <dwt_readfromdevice>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b0e      	cmp	r3, #14
 8002e32:	d876      	bhi.n	8002f22 <_dwt_enableclocks+0x10a>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <_dwt_enableclocks+0x24>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e89 	.word	0x08002e89
 8002e40:	08002e79 	.word	0x08002e79
 8002e44:	08002e9f 	.word	0x08002e9f
 8002e48:	08002f23 	.word	0x08002f23
 8002e4c:	08002f23 	.word	0x08002f23
 8002e50:	08002f23 	.word	0x08002f23
 8002e54:	08002f23 	.word	0x08002f23
 8002e58:	08002eb5 	.word	0x08002eb5
 8002e5c:	08002ed5 	.word	0x08002ed5
 8002e60:	08002f23 	.word	0x08002f23
 8002e64:	08002f23 	.word	0x08002f23
 8002e68:	08002eeb 	.word	0x08002eeb
 8002e6c:	08002ef7 	.word	0x08002ef7
 8002e70:	08002f03 	.word	0x08002f03
 8002e74:	08002f19 	.word	0x08002f19
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8002e7c:	7b7b      	ldrb	r3, [r7, #13]
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002e86:	e04d      	b.n	8002f24 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8002e88:	7b3b      	ldrb	r3, [r7, #12]
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	f023 0303 	bic.w	r3, r3, #3
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	733b      	strb	r3, [r7, #12]
        }
        break;
 8002e9c:	e042      	b.n	8002f24 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8002e9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	b25b      	sxtb	r3, r3
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	b25b      	sxtb	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8002eb2:	e037      	b.n	8002f24 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002eb4:	7b3b      	ldrb	r3, [r7, #12]
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8002ec8:	7b7b      	ldrb	r3, [r7, #13]
 8002eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002ed2:	e027      	b.n	8002f24 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8002ed4:	7b3b      	ldrb	r3, [r7, #12]
 8002ed6:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8002ede:	7b7b      	ldrb	r3, [r7, #13]
 8002ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002ee8:	e01c      	b.n	8002f24 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8002eea:	7b7b      	ldrb	r3, [r7, #13]
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002ef4:	e016      	b.n	8002f24 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8002ef6:	7b7b      	ldrb	r3, [r7, #13]
 8002ef8:	f023 0302 	bic.w	r3, r3, #2
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002f00:	e010      	b.n	8002f24 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002f02:	7b3b      	ldrb	r3, [r7, #12]
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	f043 0320 	orr.w	r3, r3, #32
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	733b      	strb	r3, [r7, #12]
        }
        break;
 8002f16:	e005      	b.n	8002f24 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002f20:	e000      	b.n	8002f24 <_dwt_enableclocks+0x10c>
        default:
        break;
 8002f22:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8002f24:	f107 030c 	add.w	r3, r7, #12
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2036      	movs	r0, #54	; 0x36
 8002f2e:	f7ff fdb1 	bl	8002a94 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	3301      	adds	r3, #1
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	2036      	movs	r0, #54	; 0x36
 8002f3e:	f7ff fda9 	bl	8002a94 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop

08002f4c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7ff ff61 	bl	8002e18 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8002f56:	2200      	movs	r2, #0
 8002f58:	2104      	movs	r1, #4
 8002f5a:	2036      	movs	r0, #54	; 0x36
 8002f5c:	f7ff feb9 	bl	8002cd2 <dwt_write16bitoffsetreg>
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	200e      	movs	r0, #14
 8002f6e:	f7ff fe46 	bl	8002bfe <dwt_read32bitoffsetreg>
 8002f72:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8002f74:	f7fd fcd8 	bl	8000928 <decamutexon>
 8002f78:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	200e      	movs	r0, #14
 8002f80:	f7ff fec3 	bl	8002d0a <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8002f84:	2240      	movs	r2, #64	; 0x40
 8002f86:	2100      	movs	r1, #0
 8002f88:	200d      	movs	r0, #13
 8002f8a:	f7ff fe8f 	bl	8002cac <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <dwt_forcetrxoff+0x58>)
 8002f90:	2100      	movs	r1, #0
 8002f92:	200f      	movs	r0, #15
 8002f94:	f7ff feb9 	bl	8002d0a <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8002f98:	f000 f814 	bl	8002fc4 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	200e      	movs	r0, #14
 8002fa2:	f7ff feb2 	bl	8002d0a <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8002fa6:	6838      	ldr	r0, [r7, #0]
 8002fa8:	f7fd fccf 	bl	800094a <decamutexoff>
    pdw1000local->wait4resp = 0;
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <dwt_forcetrxoff+0x5c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	2427fff8 	.word	0x2427fff8
 8002fc0:	20000018 	.word	0x20000018

08002fc4 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002fca:	2103      	movs	r1, #3
 8002fcc:	200f      	movs	r0, #15
 8002fce:	f7ff fe5a 	bl	8002c86 <dwt_read8bitoffsetreg>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002fd6:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002fdc:	4053      	eors	r3, r2
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	2103      	movs	r1, #3
 8002fea:	200d      	movs	r0, #13
 8002fec:	f7ff fe5e 	bl	8002cac <dwt_write8bitoffsetreg>
    }
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 800300a:	f7ff ffdb 	bl	8002fc4 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 800300e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003012:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003024:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8003026:	89fb      	ldrh	r3, [r7, #14]
 8003028:	461a      	mov	r2, r3
 800302a:	2100      	movs	r1, #0
 800302c:	200d      	movs	r0, #13
 800302e:	f7ff fe50 	bl	8002cd2 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01a      	beq.n	8003072 <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800303c:	2103      	movs	r1, #3
 800303e:	200f      	movs	r0, #15
 8003040:	f7ff fe21 	bl	8002c86 <dwt_read8bitoffsetreg>
 8003044:	4603      	mov	r3, r0
 8003046:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8003048:	7b7b      	ldrb	r3, [r7, #13]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00f      	beq.n	8003072 <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8003052:	f7ff ff87 	bl	8002f64 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8003060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003064:	2100      	movs	r1, #0
 8003066:	200d      	movs	r0, #13
 8003068:	f7ff fe33 	bl	8002cd2 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 800306c:	f04f 33ff 	mov.w	r3, #4294967295
 8003070:	e000      	b.n	8003074 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8003072:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8003080:	f7ff ff64 	bl	8002f4c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	202c      	movs	r0, #44	; 0x2c
 800308a:	f7ff fe22 	bl	8002cd2 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800308e:	2200      	movs	r2, #0
 8003090:	2106      	movs	r1, #6
 8003092:	202c      	movs	r0, #44	; 0x2c
 8003094:	f7ff fe0a 	bl	8002cac <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8003098:	f7ff fe7d 	bl	8002d96 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800309c:	2200      	movs	r2, #0
 800309e:	2103      	movs	r1, #3
 80030a0:	2036      	movs	r0, #54	; 0x36
 80030a2:	f7ff fe03 	bl	8002cac <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7fd fc5c 	bl	8000964 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80030ac:	22f0      	movs	r2, #240	; 0xf0
 80030ae:	2103      	movs	r1, #3
 80030b0:	2036      	movs	r0, #54	; 0x36
 80030b2:	f7ff fdfb 	bl	8002cac <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 80030b6:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <dwt_softreset+0x48>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	755a      	strb	r2, [r3, #21]
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000018 	.word	0x20000018

080030c8 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	b25b      	sxtb	r3, r3
 80030dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030e0:	b25b      	sxtb	r3, r3
 80030e2:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	461a      	mov	r2, r3
 80030e8:	210e      	movs	r1, #14
 80030ea:	202b      	movs	r0, #43	; 0x2b
 80030ec:	f7ff fdde 	bl	8002cac <dwt_write8bitoffsetreg>
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <__errno>:
 80030f8:	4b01      	ldr	r3, [pc, #4]	; (8003100 <__errno+0x8>)
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	2000001c 	.word	0x2000001c

08003104 <__libc_init_array>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	2600      	movs	r6, #0
 8003108:	4d0c      	ldr	r5, [pc, #48]	; (800313c <__libc_init_array+0x38>)
 800310a:	4c0d      	ldr	r4, [pc, #52]	; (8003140 <__libc_init_array+0x3c>)
 800310c:	1b64      	subs	r4, r4, r5
 800310e:	10a4      	asrs	r4, r4, #2
 8003110:	42a6      	cmp	r6, r4
 8003112:	d109      	bne.n	8003128 <__libc_init_array+0x24>
 8003114:	f000 fc5c 	bl	80039d0 <_init>
 8003118:	2600      	movs	r6, #0
 800311a:	4d0a      	ldr	r5, [pc, #40]	; (8003144 <__libc_init_array+0x40>)
 800311c:	4c0a      	ldr	r4, [pc, #40]	; (8003148 <__libc_init_array+0x44>)
 800311e:	1b64      	subs	r4, r4, r5
 8003120:	10a4      	asrs	r4, r4, #2
 8003122:	42a6      	cmp	r6, r4
 8003124:	d105      	bne.n	8003132 <__libc_init_array+0x2e>
 8003126:	bd70      	pop	{r4, r5, r6, pc}
 8003128:	f855 3b04 	ldr.w	r3, [r5], #4
 800312c:	4798      	blx	r3
 800312e:	3601      	adds	r6, #1
 8003130:	e7ee      	b.n	8003110 <__libc_init_array+0xc>
 8003132:	f855 3b04 	ldr.w	r3, [r5], #4
 8003136:	4798      	blx	r3
 8003138:	3601      	adds	r6, #1
 800313a:	e7f2      	b.n	8003122 <__libc_init_array+0x1e>
 800313c:	08003c4c 	.word	0x08003c4c
 8003140:	08003c4c 	.word	0x08003c4c
 8003144:	08003c4c 	.word	0x08003c4c
 8003148:	08003c50 	.word	0x08003c50

0800314c <memset>:
 800314c:	4603      	mov	r3, r0
 800314e:	4402      	add	r2, r0
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <memset+0xa>
 8003154:	4770      	bx	lr
 8003156:	f803 1b01 	strb.w	r1, [r3], #1
 800315a:	e7f9      	b.n	8003150 <memset+0x4>

0800315c <siprintf>:
 800315c:	b40e      	push	{r1, r2, r3}
 800315e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003162:	b500      	push	{lr}
 8003164:	b09c      	sub	sp, #112	; 0x70
 8003166:	ab1d      	add	r3, sp, #116	; 0x74
 8003168:	9002      	str	r0, [sp, #8]
 800316a:	9006      	str	r0, [sp, #24]
 800316c:	9107      	str	r1, [sp, #28]
 800316e:	9104      	str	r1, [sp, #16]
 8003170:	4808      	ldr	r0, [pc, #32]	; (8003194 <siprintf+0x38>)
 8003172:	4909      	ldr	r1, [pc, #36]	; (8003198 <siprintf+0x3c>)
 8003174:	f853 2b04 	ldr.w	r2, [r3], #4
 8003178:	9105      	str	r1, [sp, #20]
 800317a:	6800      	ldr	r0, [r0, #0]
 800317c:	a902      	add	r1, sp, #8
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	f000 f868 	bl	8003254 <_svfiprintf_r>
 8003184:	2200      	movs	r2, #0
 8003186:	9b02      	ldr	r3, [sp, #8]
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	b01c      	add	sp, #112	; 0x70
 800318c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003190:	b003      	add	sp, #12
 8003192:	4770      	bx	lr
 8003194:	2000001c 	.word	0x2000001c
 8003198:	ffff0208 	.word	0xffff0208

0800319c <__ssputs_r>:
 800319c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a0:	688e      	ldr	r6, [r1, #8]
 80031a2:	4682      	mov	sl, r0
 80031a4:	429e      	cmp	r6, r3
 80031a6:	460c      	mov	r4, r1
 80031a8:	4690      	mov	r8, r2
 80031aa:	461f      	mov	r7, r3
 80031ac:	d838      	bhi.n	8003220 <__ssputs_r+0x84>
 80031ae:	898a      	ldrh	r2, [r1, #12]
 80031b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031b4:	d032      	beq.n	800321c <__ssputs_r+0x80>
 80031b6:	6825      	ldr	r5, [r4, #0]
 80031b8:	6909      	ldr	r1, [r1, #16]
 80031ba:	3301      	adds	r3, #1
 80031bc:	eba5 0901 	sub.w	r9, r5, r1
 80031c0:	6965      	ldr	r5, [r4, #20]
 80031c2:	444b      	add	r3, r9
 80031c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031cc:	106d      	asrs	r5, r5, #1
 80031ce:	429d      	cmp	r5, r3
 80031d0:	bf38      	it	cc
 80031d2:	461d      	movcc	r5, r3
 80031d4:	0553      	lsls	r3, r2, #21
 80031d6:	d531      	bpl.n	800323c <__ssputs_r+0xa0>
 80031d8:	4629      	mov	r1, r5
 80031da:	f000 fb53 	bl	8003884 <_malloc_r>
 80031de:	4606      	mov	r6, r0
 80031e0:	b950      	cbnz	r0, 80031f8 <__ssputs_r+0x5c>
 80031e2:	230c      	movs	r3, #12
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f8ca 3000 	str.w	r3, [sl]
 80031ec:	89a3      	ldrh	r3, [r4, #12]
 80031ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f2:	81a3      	strh	r3, [r4, #12]
 80031f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f8:	464a      	mov	r2, r9
 80031fa:	6921      	ldr	r1, [r4, #16]
 80031fc:	f000 face 	bl	800379c <memcpy>
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	6126      	str	r6, [r4, #16]
 800320e:	444e      	add	r6, r9
 8003210:	6026      	str	r6, [r4, #0]
 8003212:	463e      	mov	r6, r7
 8003214:	6165      	str	r5, [r4, #20]
 8003216:	eba5 0509 	sub.w	r5, r5, r9
 800321a:	60a5      	str	r5, [r4, #8]
 800321c:	42be      	cmp	r6, r7
 800321e:	d900      	bls.n	8003222 <__ssputs_r+0x86>
 8003220:	463e      	mov	r6, r7
 8003222:	4632      	mov	r2, r6
 8003224:	4641      	mov	r1, r8
 8003226:	6820      	ldr	r0, [r4, #0]
 8003228:	f000 fac6 	bl	80037b8 <memmove>
 800322c:	68a3      	ldr	r3, [r4, #8]
 800322e:	6822      	ldr	r2, [r4, #0]
 8003230:	1b9b      	subs	r3, r3, r6
 8003232:	4432      	add	r2, r6
 8003234:	2000      	movs	r0, #0
 8003236:	60a3      	str	r3, [r4, #8]
 8003238:	6022      	str	r2, [r4, #0]
 800323a:	e7db      	b.n	80031f4 <__ssputs_r+0x58>
 800323c:	462a      	mov	r2, r5
 800323e:	f000 fb7b 	bl	8003938 <_realloc_r>
 8003242:	4606      	mov	r6, r0
 8003244:	2800      	cmp	r0, #0
 8003246:	d1e1      	bne.n	800320c <__ssputs_r+0x70>
 8003248:	4650      	mov	r0, sl
 800324a:	6921      	ldr	r1, [r4, #16]
 800324c:	f000 face 	bl	80037ec <_free_r>
 8003250:	e7c7      	b.n	80031e2 <__ssputs_r+0x46>
	...

08003254 <_svfiprintf_r>:
 8003254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003258:	4698      	mov	r8, r3
 800325a:	898b      	ldrh	r3, [r1, #12]
 800325c:	4607      	mov	r7, r0
 800325e:	061b      	lsls	r3, r3, #24
 8003260:	460d      	mov	r5, r1
 8003262:	4614      	mov	r4, r2
 8003264:	b09d      	sub	sp, #116	; 0x74
 8003266:	d50e      	bpl.n	8003286 <_svfiprintf_r+0x32>
 8003268:	690b      	ldr	r3, [r1, #16]
 800326a:	b963      	cbnz	r3, 8003286 <_svfiprintf_r+0x32>
 800326c:	2140      	movs	r1, #64	; 0x40
 800326e:	f000 fb09 	bl	8003884 <_malloc_r>
 8003272:	6028      	str	r0, [r5, #0]
 8003274:	6128      	str	r0, [r5, #16]
 8003276:	b920      	cbnz	r0, 8003282 <_svfiprintf_r+0x2e>
 8003278:	230c      	movs	r3, #12
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	e0d1      	b.n	8003426 <_svfiprintf_r+0x1d2>
 8003282:	2340      	movs	r3, #64	; 0x40
 8003284:	616b      	str	r3, [r5, #20]
 8003286:	2300      	movs	r3, #0
 8003288:	9309      	str	r3, [sp, #36]	; 0x24
 800328a:	2320      	movs	r3, #32
 800328c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003290:	2330      	movs	r3, #48	; 0x30
 8003292:	f04f 0901 	mov.w	r9, #1
 8003296:	f8cd 800c 	str.w	r8, [sp, #12]
 800329a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003440 <_svfiprintf_r+0x1ec>
 800329e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032a2:	4623      	mov	r3, r4
 80032a4:	469a      	mov	sl, r3
 80032a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032aa:	b10a      	cbz	r2, 80032b0 <_svfiprintf_r+0x5c>
 80032ac:	2a25      	cmp	r2, #37	; 0x25
 80032ae:	d1f9      	bne.n	80032a4 <_svfiprintf_r+0x50>
 80032b0:	ebba 0b04 	subs.w	fp, sl, r4
 80032b4:	d00b      	beq.n	80032ce <_svfiprintf_r+0x7a>
 80032b6:	465b      	mov	r3, fp
 80032b8:	4622      	mov	r2, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	4638      	mov	r0, r7
 80032be:	f7ff ff6d 	bl	800319c <__ssputs_r>
 80032c2:	3001      	adds	r0, #1
 80032c4:	f000 80aa 	beq.w	800341c <_svfiprintf_r+0x1c8>
 80032c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ca:	445a      	add	r2, fp
 80032cc:	9209      	str	r2, [sp, #36]	; 0x24
 80032ce:	f89a 3000 	ldrb.w	r3, [sl]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a2 	beq.w	800341c <_svfiprintf_r+0x1c8>
 80032d8:	2300      	movs	r3, #0
 80032da:	f04f 32ff 	mov.w	r2, #4294967295
 80032de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032e2:	f10a 0a01 	add.w	sl, sl, #1
 80032e6:	9304      	str	r3, [sp, #16]
 80032e8:	9307      	str	r3, [sp, #28]
 80032ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032ee:	931a      	str	r3, [sp, #104]	; 0x68
 80032f0:	4654      	mov	r4, sl
 80032f2:	2205      	movs	r2, #5
 80032f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f8:	4851      	ldr	r0, [pc, #324]	; (8003440 <_svfiprintf_r+0x1ec>)
 80032fa:	f000 fa41 	bl	8003780 <memchr>
 80032fe:	9a04      	ldr	r2, [sp, #16]
 8003300:	b9d8      	cbnz	r0, 800333a <_svfiprintf_r+0xe6>
 8003302:	06d0      	lsls	r0, r2, #27
 8003304:	bf44      	itt	mi
 8003306:	2320      	movmi	r3, #32
 8003308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800330c:	0711      	lsls	r1, r2, #28
 800330e:	bf44      	itt	mi
 8003310:	232b      	movmi	r3, #43	; 0x2b
 8003312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003316:	f89a 3000 	ldrb.w	r3, [sl]
 800331a:	2b2a      	cmp	r3, #42	; 0x2a
 800331c:	d015      	beq.n	800334a <_svfiprintf_r+0xf6>
 800331e:	4654      	mov	r4, sl
 8003320:	2000      	movs	r0, #0
 8003322:	f04f 0c0a 	mov.w	ip, #10
 8003326:	9a07      	ldr	r2, [sp, #28]
 8003328:	4621      	mov	r1, r4
 800332a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800332e:	3b30      	subs	r3, #48	; 0x30
 8003330:	2b09      	cmp	r3, #9
 8003332:	d94e      	bls.n	80033d2 <_svfiprintf_r+0x17e>
 8003334:	b1b0      	cbz	r0, 8003364 <_svfiprintf_r+0x110>
 8003336:	9207      	str	r2, [sp, #28]
 8003338:	e014      	b.n	8003364 <_svfiprintf_r+0x110>
 800333a:	eba0 0308 	sub.w	r3, r0, r8
 800333e:	fa09 f303 	lsl.w	r3, r9, r3
 8003342:	4313      	orrs	r3, r2
 8003344:	46a2      	mov	sl, r4
 8003346:	9304      	str	r3, [sp, #16]
 8003348:	e7d2      	b.n	80032f0 <_svfiprintf_r+0x9c>
 800334a:	9b03      	ldr	r3, [sp, #12]
 800334c:	1d19      	adds	r1, r3, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	9103      	str	r1, [sp, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	bfbb      	ittet	lt
 8003356:	425b      	neglt	r3, r3
 8003358:	f042 0202 	orrlt.w	r2, r2, #2
 800335c:	9307      	strge	r3, [sp, #28]
 800335e:	9307      	strlt	r3, [sp, #28]
 8003360:	bfb8      	it	lt
 8003362:	9204      	strlt	r2, [sp, #16]
 8003364:	7823      	ldrb	r3, [r4, #0]
 8003366:	2b2e      	cmp	r3, #46	; 0x2e
 8003368:	d10c      	bne.n	8003384 <_svfiprintf_r+0x130>
 800336a:	7863      	ldrb	r3, [r4, #1]
 800336c:	2b2a      	cmp	r3, #42	; 0x2a
 800336e:	d135      	bne.n	80033dc <_svfiprintf_r+0x188>
 8003370:	9b03      	ldr	r3, [sp, #12]
 8003372:	3402      	adds	r4, #2
 8003374:	1d1a      	adds	r2, r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	9203      	str	r2, [sp, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	bfb8      	it	lt
 800337e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003382:	9305      	str	r3, [sp, #20]
 8003384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003450 <_svfiprintf_r+0x1fc>
 8003388:	2203      	movs	r2, #3
 800338a:	4650      	mov	r0, sl
 800338c:	7821      	ldrb	r1, [r4, #0]
 800338e:	f000 f9f7 	bl	8003780 <memchr>
 8003392:	b140      	cbz	r0, 80033a6 <_svfiprintf_r+0x152>
 8003394:	2340      	movs	r3, #64	; 0x40
 8003396:	eba0 000a 	sub.w	r0, r0, sl
 800339a:	fa03 f000 	lsl.w	r0, r3, r0
 800339e:	9b04      	ldr	r3, [sp, #16]
 80033a0:	3401      	adds	r4, #1
 80033a2:	4303      	orrs	r3, r0
 80033a4:	9304      	str	r3, [sp, #16]
 80033a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033aa:	2206      	movs	r2, #6
 80033ac:	4825      	ldr	r0, [pc, #148]	; (8003444 <_svfiprintf_r+0x1f0>)
 80033ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033b2:	f000 f9e5 	bl	8003780 <memchr>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d038      	beq.n	800342c <_svfiprintf_r+0x1d8>
 80033ba:	4b23      	ldr	r3, [pc, #140]	; (8003448 <_svfiprintf_r+0x1f4>)
 80033bc:	bb1b      	cbnz	r3, 8003406 <_svfiprintf_r+0x1b2>
 80033be:	9b03      	ldr	r3, [sp, #12]
 80033c0:	3307      	adds	r3, #7
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	3308      	adds	r3, #8
 80033c8:	9303      	str	r3, [sp, #12]
 80033ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033cc:	4433      	add	r3, r6
 80033ce:	9309      	str	r3, [sp, #36]	; 0x24
 80033d0:	e767      	b.n	80032a2 <_svfiprintf_r+0x4e>
 80033d2:	460c      	mov	r4, r1
 80033d4:	2001      	movs	r0, #1
 80033d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80033da:	e7a5      	b.n	8003328 <_svfiprintf_r+0xd4>
 80033dc:	2300      	movs	r3, #0
 80033de:	f04f 0c0a 	mov.w	ip, #10
 80033e2:	4619      	mov	r1, r3
 80033e4:	3401      	adds	r4, #1
 80033e6:	9305      	str	r3, [sp, #20]
 80033e8:	4620      	mov	r0, r4
 80033ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033ee:	3a30      	subs	r2, #48	; 0x30
 80033f0:	2a09      	cmp	r2, #9
 80033f2:	d903      	bls.n	80033fc <_svfiprintf_r+0x1a8>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0c5      	beq.n	8003384 <_svfiprintf_r+0x130>
 80033f8:	9105      	str	r1, [sp, #20]
 80033fa:	e7c3      	b.n	8003384 <_svfiprintf_r+0x130>
 80033fc:	4604      	mov	r4, r0
 80033fe:	2301      	movs	r3, #1
 8003400:	fb0c 2101 	mla	r1, ip, r1, r2
 8003404:	e7f0      	b.n	80033e8 <_svfiprintf_r+0x194>
 8003406:	ab03      	add	r3, sp, #12
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	462a      	mov	r2, r5
 800340c:	4638      	mov	r0, r7
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <_svfiprintf_r+0x1f8>)
 8003410:	a904      	add	r1, sp, #16
 8003412:	f3af 8000 	nop.w
 8003416:	1c42      	adds	r2, r0, #1
 8003418:	4606      	mov	r6, r0
 800341a:	d1d6      	bne.n	80033ca <_svfiprintf_r+0x176>
 800341c:	89ab      	ldrh	r3, [r5, #12]
 800341e:	065b      	lsls	r3, r3, #25
 8003420:	f53f af2c 	bmi.w	800327c <_svfiprintf_r+0x28>
 8003424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003426:	b01d      	add	sp, #116	; 0x74
 8003428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342c:	ab03      	add	r3, sp, #12
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	462a      	mov	r2, r5
 8003432:	4638      	mov	r0, r7
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <_svfiprintf_r+0x1f8>)
 8003436:	a904      	add	r1, sp, #16
 8003438:	f000 f87c 	bl	8003534 <_printf_i>
 800343c:	e7eb      	b.n	8003416 <_svfiprintf_r+0x1c2>
 800343e:	bf00      	nop
 8003440:	08003c16 	.word	0x08003c16
 8003444:	08003c20 	.word	0x08003c20
 8003448:	00000000 	.word	0x00000000
 800344c:	0800319d 	.word	0x0800319d
 8003450:	08003c1c 	.word	0x08003c1c

08003454 <_printf_common>:
 8003454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003458:	4616      	mov	r6, r2
 800345a:	4699      	mov	r9, r3
 800345c:	688a      	ldr	r2, [r1, #8]
 800345e:	690b      	ldr	r3, [r1, #16]
 8003460:	4607      	mov	r7, r0
 8003462:	4293      	cmp	r3, r2
 8003464:	bfb8      	it	lt
 8003466:	4613      	movlt	r3, r2
 8003468:	6033      	str	r3, [r6, #0]
 800346a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800346e:	460c      	mov	r4, r1
 8003470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003474:	b10a      	cbz	r2, 800347a <_printf_common+0x26>
 8003476:	3301      	adds	r3, #1
 8003478:	6033      	str	r3, [r6, #0]
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	0699      	lsls	r1, r3, #26
 800347e:	bf42      	ittt	mi
 8003480:	6833      	ldrmi	r3, [r6, #0]
 8003482:	3302      	addmi	r3, #2
 8003484:	6033      	strmi	r3, [r6, #0]
 8003486:	6825      	ldr	r5, [r4, #0]
 8003488:	f015 0506 	ands.w	r5, r5, #6
 800348c:	d106      	bne.n	800349c <_printf_common+0x48>
 800348e:	f104 0a19 	add.w	sl, r4, #25
 8003492:	68e3      	ldr	r3, [r4, #12]
 8003494:	6832      	ldr	r2, [r6, #0]
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	42ab      	cmp	r3, r5
 800349a:	dc28      	bgt.n	80034ee <_printf_common+0x9a>
 800349c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034a0:	1e13      	subs	r3, r2, #0
 80034a2:	6822      	ldr	r2, [r4, #0]
 80034a4:	bf18      	it	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	0692      	lsls	r2, r2, #26
 80034aa:	d42d      	bmi.n	8003508 <_printf_common+0xb4>
 80034ac:	4649      	mov	r1, r9
 80034ae:	4638      	mov	r0, r7
 80034b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034b4:	47c0      	blx	r8
 80034b6:	3001      	adds	r0, #1
 80034b8:	d020      	beq.n	80034fc <_printf_common+0xa8>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	68e5      	ldr	r5, [r4, #12]
 80034be:	f003 0306 	and.w	r3, r3, #6
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	bf18      	it	ne
 80034c6:	2500      	movne	r5, #0
 80034c8:	6832      	ldr	r2, [r6, #0]
 80034ca:	f04f 0600 	mov.w	r6, #0
 80034ce:	68a3      	ldr	r3, [r4, #8]
 80034d0:	bf08      	it	eq
 80034d2:	1aad      	subeq	r5, r5, r2
 80034d4:	6922      	ldr	r2, [r4, #16]
 80034d6:	bf08      	it	eq
 80034d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034dc:	4293      	cmp	r3, r2
 80034de:	bfc4      	itt	gt
 80034e0:	1a9b      	subgt	r3, r3, r2
 80034e2:	18ed      	addgt	r5, r5, r3
 80034e4:	341a      	adds	r4, #26
 80034e6:	42b5      	cmp	r5, r6
 80034e8:	d11a      	bne.n	8003520 <_printf_common+0xcc>
 80034ea:	2000      	movs	r0, #0
 80034ec:	e008      	b.n	8003500 <_printf_common+0xac>
 80034ee:	2301      	movs	r3, #1
 80034f0:	4652      	mov	r2, sl
 80034f2:	4649      	mov	r1, r9
 80034f4:	4638      	mov	r0, r7
 80034f6:	47c0      	blx	r8
 80034f8:	3001      	adds	r0, #1
 80034fa:	d103      	bne.n	8003504 <_printf_common+0xb0>
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003504:	3501      	adds	r5, #1
 8003506:	e7c4      	b.n	8003492 <_printf_common+0x3e>
 8003508:	2030      	movs	r0, #48	; 0x30
 800350a:	18e1      	adds	r1, r4, r3
 800350c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003516:	4422      	add	r2, r4
 8003518:	3302      	adds	r3, #2
 800351a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800351e:	e7c5      	b.n	80034ac <_printf_common+0x58>
 8003520:	2301      	movs	r3, #1
 8003522:	4622      	mov	r2, r4
 8003524:	4649      	mov	r1, r9
 8003526:	4638      	mov	r0, r7
 8003528:	47c0      	blx	r8
 800352a:	3001      	adds	r0, #1
 800352c:	d0e6      	beq.n	80034fc <_printf_common+0xa8>
 800352e:	3601      	adds	r6, #1
 8003530:	e7d9      	b.n	80034e6 <_printf_common+0x92>
	...

08003534 <_printf_i>:
 8003534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	460c      	mov	r4, r1
 800353a:	7e27      	ldrb	r7, [r4, #24]
 800353c:	4691      	mov	r9, r2
 800353e:	2f78      	cmp	r7, #120	; 0x78
 8003540:	4680      	mov	r8, r0
 8003542:	469a      	mov	sl, r3
 8003544:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800354a:	d807      	bhi.n	800355c <_printf_i+0x28>
 800354c:	2f62      	cmp	r7, #98	; 0x62
 800354e:	d80a      	bhi.n	8003566 <_printf_i+0x32>
 8003550:	2f00      	cmp	r7, #0
 8003552:	f000 80d9 	beq.w	8003708 <_printf_i+0x1d4>
 8003556:	2f58      	cmp	r7, #88	; 0x58
 8003558:	f000 80a4 	beq.w	80036a4 <_printf_i+0x170>
 800355c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003564:	e03a      	b.n	80035dc <_printf_i+0xa8>
 8003566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800356a:	2b15      	cmp	r3, #21
 800356c:	d8f6      	bhi.n	800355c <_printf_i+0x28>
 800356e:	a001      	add	r0, pc, #4	; (adr r0, 8003574 <_printf_i+0x40>)
 8003570:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003574:	080035cd 	.word	0x080035cd
 8003578:	080035e1 	.word	0x080035e1
 800357c:	0800355d 	.word	0x0800355d
 8003580:	0800355d 	.word	0x0800355d
 8003584:	0800355d 	.word	0x0800355d
 8003588:	0800355d 	.word	0x0800355d
 800358c:	080035e1 	.word	0x080035e1
 8003590:	0800355d 	.word	0x0800355d
 8003594:	0800355d 	.word	0x0800355d
 8003598:	0800355d 	.word	0x0800355d
 800359c:	0800355d 	.word	0x0800355d
 80035a0:	080036ef 	.word	0x080036ef
 80035a4:	08003611 	.word	0x08003611
 80035a8:	080036d1 	.word	0x080036d1
 80035ac:	0800355d 	.word	0x0800355d
 80035b0:	0800355d 	.word	0x0800355d
 80035b4:	08003711 	.word	0x08003711
 80035b8:	0800355d 	.word	0x0800355d
 80035bc:	08003611 	.word	0x08003611
 80035c0:	0800355d 	.word	0x0800355d
 80035c4:	0800355d 	.word	0x0800355d
 80035c8:	080036d9 	.word	0x080036d9
 80035cc:	680b      	ldr	r3, [r1, #0]
 80035ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035d2:	1d1a      	adds	r2, r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	600a      	str	r2, [r1, #0]
 80035d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035dc:	2301      	movs	r3, #1
 80035de:	e0a4      	b.n	800372a <_printf_i+0x1f6>
 80035e0:	6825      	ldr	r5, [r4, #0]
 80035e2:	6808      	ldr	r0, [r1, #0]
 80035e4:	062e      	lsls	r6, r5, #24
 80035e6:	f100 0304 	add.w	r3, r0, #4
 80035ea:	d50a      	bpl.n	8003602 <_printf_i+0xce>
 80035ec:	6805      	ldr	r5, [r0, #0]
 80035ee:	600b      	str	r3, [r1, #0]
 80035f0:	2d00      	cmp	r5, #0
 80035f2:	da03      	bge.n	80035fc <_printf_i+0xc8>
 80035f4:	232d      	movs	r3, #45	; 0x2d
 80035f6:	426d      	negs	r5, r5
 80035f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035fc:	230a      	movs	r3, #10
 80035fe:	485e      	ldr	r0, [pc, #376]	; (8003778 <_printf_i+0x244>)
 8003600:	e019      	b.n	8003636 <_printf_i+0x102>
 8003602:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003606:	6805      	ldr	r5, [r0, #0]
 8003608:	600b      	str	r3, [r1, #0]
 800360a:	bf18      	it	ne
 800360c:	b22d      	sxthne	r5, r5
 800360e:	e7ef      	b.n	80035f0 <_printf_i+0xbc>
 8003610:	680b      	ldr	r3, [r1, #0]
 8003612:	6825      	ldr	r5, [r4, #0]
 8003614:	1d18      	adds	r0, r3, #4
 8003616:	6008      	str	r0, [r1, #0]
 8003618:	0628      	lsls	r0, r5, #24
 800361a:	d501      	bpl.n	8003620 <_printf_i+0xec>
 800361c:	681d      	ldr	r5, [r3, #0]
 800361e:	e002      	b.n	8003626 <_printf_i+0xf2>
 8003620:	0669      	lsls	r1, r5, #25
 8003622:	d5fb      	bpl.n	800361c <_printf_i+0xe8>
 8003624:	881d      	ldrh	r5, [r3, #0]
 8003626:	2f6f      	cmp	r7, #111	; 0x6f
 8003628:	bf0c      	ite	eq
 800362a:	2308      	moveq	r3, #8
 800362c:	230a      	movne	r3, #10
 800362e:	4852      	ldr	r0, [pc, #328]	; (8003778 <_printf_i+0x244>)
 8003630:	2100      	movs	r1, #0
 8003632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003636:	6866      	ldr	r6, [r4, #4]
 8003638:	2e00      	cmp	r6, #0
 800363a:	bfa8      	it	ge
 800363c:	6821      	ldrge	r1, [r4, #0]
 800363e:	60a6      	str	r6, [r4, #8]
 8003640:	bfa4      	itt	ge
 8003642:	f021 0104 	bicge.w	r1, r1, #4
 8003646:	6021      	strge	r1, [r4, #0]
 8003648:	b90d      	cbnz	r5, 800364e <_printf_i+0x11a>
 800364a:	2e00      	cmp	r6, #0
 800364c:	d04d      	beq.n	80036ea <_printf_i+0x1b6>
 800364e:	4616      	mov	r6, r2
 8003650:	fbb5 f1f3 	udiv	r1, r5, r3
 8003654:	fb03 5711 	mls	r7, r3, r1, r5
 8003658:	5dc7      	ldrb	r7, [r0, r7]
 800365a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800365e:	462f      	mov	r7, r5
 8003660:	42bb      	cmp	r3, r7
 8003662:	460d      	mov	r5, r1
 8003664:	d9f4      	bls.n	8003650 <_printf_i+0x11c>
 8003666:	2b08      	cmp	r3, #8
 8003668:	d10b      	bne.n	8003682 <_printf_i+0x14e>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	07df      	lsls	r7, r3, #31
 800366e:	d508      	bpl.n	8003682 <_printf_i+0x14e>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	6861      	ldr	r1, [r4, #4]
 8003674:	4299      	cmp	r1, r3
 8003676:	bfde      	ittt	le
 8003678:	2330      	movle	r3, #48	; 0x30
 800367a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800367e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003682:	1b92      	subs	r2, r2, r6
 8003684:	6122      	str	r2, [r4, #16]
 8003686:	464b      	mov	r3, r9
 8003688:	4621      	mov	r1, r4
 800368a:	4640      	mov	r0, r8
 800368c:	f8cd a000 	str.w	sl, [sp]
 8003690:	aa03      	add	r2, sp, #12
 8003692:	f7ff fedf 	bl	8003454 <_printf_common>
 8003696:	3001      	adds	r0, #1
 8003698:	d14c      	bne.n	8003734 <_printf_i+0x200>
 800369a:	f04f 30ff 	mov.w	r0, #4294967295
 800369e:	b004      	add	sp, #16
 80036a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a4:	4834      	ldr	r0, [pc, #208]	; (8003778 <_printf_i+0x244>)
 80036a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036aa:	680e      	ldr	r6, [r1, #0]
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80036b2:	061f      	lsls	r7, r3, #24
 80036b4:	600e      	str	r6, [r1, #0]
 80036b6:	d514      	bpl.n	80036e2 <_printf_i+0x1ae>
 80036b8:	07d9      	lsls	r1, r3, #31
 80036ba:	bf44      	itt	mi
 80036bc:	f043 0320 	orrmi.w	r3, r3, #32
 80036c0:	6023      	strmi	r3, [r4, #0]
 80036c2:	b91d      	cbnz	r5, 80036cc <_printf_i+0x198>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	f023 0320 	bic.w	r3, r3, #32
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	2310      	movs	r3, #16
 80036ce:	e7af      	b.n	8003630 <_printf_i+0xfc>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	2378      	movs	r3, #120	; 0x78
 80036da:	4828      	ldr	r0, [pc, #160]	; (800377c <_printf_i+0x248>)
 80036dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036e0:	e7e3      	b.n	80036aa <_printf_i+0x176>
 80036e2:	065e      	lsls	r6, r3, #25
 80036e4:	bf48      	it	mi
 80036e6:	b2ad      	uxthmi	r5, r5
 80036e8:	e7e6      	b.n	80036b8 <_printf_i+0x184>
 80036ea:	4616      	mov	r6, r2
 80036ec:	e7bb      	b.n	8003666 <_printf_i+0x132>
 80036ee:	680b      	ldr	r3, [r1, #0]
 80036f0:	6826      	ldr	r6, [r4, #0]
 80036f2:	1d1d      	adds	r5, r3, #4
 80036f4:	6960      	ldr	r0, [r4, #20]
 80036f6:	600d      	str	r5, [r1, #0]
 80036f8:	0635      	lsls	r5, r6, #24
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	d501      	bpl.n	8003702 <_printf_i+0x1ce>
 80036fe:	6018      	str	r0, [r3, #0]
 8003700:	e002      	b.n	8003708 <_printf_i+0x1d4>
 8003702:	0671      	lsls	r1, r6, #25
 8003704:	d5fb      	bpl.n	80036fe <_printf_i+0x1ca>
 8003706:	8018      	strh	r0, [r3, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	4616      	mov	r6, r2
 800370c:	6123      	str	r3, [r4, #16]
 800370e:	e7ba      	b.n	8003686 <_printf_i+0x152>
 8003710:	680b      	ldr	r3, [r1, #0]
 8003712:	1d1a      	adds	r2, r3, #4
 8003714:	600a      	str	r2, [r1, #0]
 8003716:	681e      	ldr	r6, [r3, #0]
 8003718:	2100      	movs	r1, #0
 800371a:	4630      	mov	r0, r6
 800371c:	6862      	ldr	r2, [r4, #4]
 800371e:	f000 f82f 	bl	8003780 <memchr>
 8003722:	b108      	cbz	r0, 8003728 <_printf_i+0x1f4>
 8003724:	1b80      	subs	r0, r0, r6
 8003726:	6060      	str	r0, [r4, #4]
 8003728:	6863      	ldr	r3, [r4, #4]
 800372a:	6123      	str	r3, [r4, #16]
 800372c:	2300      	movs	r3, #0
 800372e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003732:	e7a8      	b.n	8003686 <_printf_i+0x152>
 8003734:	4632      	mov	r2, r6
 8003736:	4649      	mov	r1, r9
 8003738:	4640      	mov	r0, r8
 800373a:	6923      	ldr	r3, [r4, #16]
 800373c:	47d0      	blx	sl
 800373e:	3001      	adds	r0, #1
 8003740:	d0ab      	beq.n	800369a <_printf_i+0x166>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	079b      	lsls	r3, r3, #30
 8003746:	d413      	bmi.n	8003770 <_printf_i+0x23c>
 8003748:	68e0      	ldr	r0, [r4, #12]
 800374a:	9b03      	ldr	r3, [sp, #12]
 800374c:	4298      	cmp	r0, r3
 800374e:	bfb8      	it	lt
 8003750:	4618      	movlt	r0, r3
 8003752:	e7a4      	b.n	800369e <_printf_i+0x16a>
 8003754:	2301      	movs	r3, #1
 8003756:	4632      	mov	r2, r6
 8003758:	4649      	mov	r1, r9
 800375a:	4640      	mov	r0, r8
 800375c:	47d0      	blx	sl
 800375e:	3001      	adds	r0, #1
 8003760:	d09b      	beq.n	800369a <_printf_i+0x166>
 8003762:	3501      	adds	r5, #1
 8003764:	68e3      	ldr	r3, [r4, #12]
 8003766:	9903      	ldr	r1, [sp, #12]
 8003768:	1a5b      	subs	r3, r3, r1
 800376a:	42ab      	cmp	r3, r5
 800376c:	dcf2      	bgt.n	8003754 <_printf_i+0x220>
 800376e:	e7eb      	b.n	8003748 <_printf_i+0x214>
 8003770:	2500      	movs	r5, #0
 8003772:	f104 0619 	add.w	r6, r4, #25
 8003776:	e7f5      	b.n	8003764 <_printf_i+0x230>
 8003778:	08003c27 	.word	0x08003c27
 800377c:	08003c38 	.word	0x08003c38

08003780 <memchr>:
 8003780:	4603      	mov	r3, r0
 8003782:	b510      	push	{r4, lr}
 8003784:	b2c9      	uxtb	r1, r1
 8003786:	4402      	add	r2, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	4618      	mov	r0, r3
 800378c:	d101      	bne.n	8003792 <memchr+0x12>
 800378e:	2000      	movs	r0, #0
 8003790:	e003      	b.n	800379a <memchr+0x1a>
 8003792:	7804      	ldrb	r4, [r0, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	428c      	cmp	r4, r1
 8003798:	d1f6      	bne.n	8003788 <memchr+0x8>
 800379a:	bd10      	pop	{r4, pc}

0800379c <memcpy>:
 800379c:	440a      	add	r2, r1
 800379e:	4291      	cmp	r1, r2
 80037a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037a4:	d100      	bne.n	80037a8 <memcpy+0xc>
 80037a6:	4770      	bx	lr
 80037a8:	b510      	push	{r4, lr}
 80037aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ae:	4291      	cmp	r1, r2
 80037b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037b4:	d1f9      	bne.n	80037aa <memcpy+0xe>
 80037b6:	bd10      	pop	{r4, pc}

080037b8 <memmove>:
 80037b8:	4288      	cmp	r0, r1
 80037ba:	b510      	push	{r4, lr}
 80037bc:	eb01 0402 	add.w	r4, r1, r2
 80037c0:	d902      	bls.n	80037c8 <memmove+0x10>
 80037c2:	4284      	cmp	r4, r0
 80037c4:	4623      	mov	r3, r4
 80037c6:	d807      	bhi.n	80037d8 <memmove+0x20>
 80037c8:	1e43      	subs	r3, r0, #1
 80037ca:	42a1      	cmp	r1, r4
 80037cc:	d008      	beq.n	80037e0 <memmove+0x28>
 80037ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037d6:	e7f8      	b.n	80037ca <memmove+0x12>
 80037d8:	4601      	mov	r1, r0
 80037da:	4402      	add	r2, r0
 80037dc:	428a      	cmp	r2, r1
 80037de:	d100      	bne.n	80037e2 <memmove+0x2a>
 80037e0:	bd10      	pop	{r4, pc}
 80037e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037ea:	e7f7      	b.n	80037dc <memmove+0x24>

080037ec <_free_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4605      	mov	r5, r0
 80037f0:	2900      	cmp	r1, #0
 80037f2:	d043      	beq.n	800387c <_free_r+0x90>
 80037f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037f8:	1f0c      	subs	r4, r1, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bfb8      	it	lt
 80037fe:	18e4      	addlt	r4, r4, r3
 8003800:	f000 f8d0 	bl	80039a4 <__malloc_lock>
 8003804:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <_free_r+0x94>)
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	4610      	mov	r0, r2
 800380a:	b933      	cbnz	r3, 800381a <_free_r+0x2e>
 800380c:	6063      	str	r3, [r4, #4]
 800380e:	6014      	str	r4, [r2, #0]
 8003810:	4628      	mov	r0, r5
 8003812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003816:	f000 b8cb 	b.w	80039b0 <__malloc_unlock>
 800381a:	42a3      	cmp	r3, r4
 800381c:	d90a      	bls.n	8003834 <_free_r+0x48>
 800381e:	6821      	ldr	r1, [r4, #0]
 8003820:	1862      	adds	r2, r4, r1
 8003822:	4293      	cmp	r3, r2
 8003824:	bf01      	itttt	eq
 8003826:	681a      	ldreq	r2, [r3, #0]
 8003828:	685b      	ldreq	r3, [r3, #4]
 800382a:	1852      	addeq	r2, r2, r1
 800382c:	6022      	streq	r2, [r4, #0]
 800382e:	6063      	str	r3, [r4, #4]
 8003830:	6004      	str	r4, [r0, #0]
 8003832:	e7ed      	b.n	8003810 <_free_r+0x24>
 8003834:	461a      	mov	r2, r3
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	b10b      	cbz	r3, 800383e <_free_r+0x52>
 800383a:	42a3      	cmp	r3, r4
 800383c:	d9fa      	bls.n	8003834 <_free_r+0x48>
 800383e:	6811      	ldr	r1, [r2, #0]
 8003840:	1850      	adds	r0, r2, r1
 8003842:	42a0      	cmp	r0, r4
 8003844:	d10b      	bne.n	800385e <_free_r+0x72>
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	4401      	add	r1, r0
 800384a:	1850      	adds	r0, r2, r1
 800384c:	4283      	cmp	r3, r0
 800384e:	6011      	str	r1, [r2, #0]
 8003850:	d1de      	bne.n	8003810 <_free_r+0x24>
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4401      	add	r1, r0
 8003858:	6011      	str	r1, [r2, #0]
 800385a:	6053      	str	r3, [r2, #4]
 800385c:	e7d8      	b.n	8003810 <_free_r+0x24>
 800385e:	d902      	bls.n	8003866 <_free_r+0x7a>
 8003860:	230c      	movs	r3, #12
 8003862:	602b      	str	r3, [r5, #0]
 8003864:	e7d4      	b.n	8003810 <_free_r+0x24>
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	1821      	adds	r1, r4, r0
 800386a:	428b      	cmp	r3, r1
 800386c:	bf01      	itttt	eq
 800386e:	6819      	ldreq	r1, [r3, #0]
 8003870:	685b      	ldreq	r3, [r3, #4]
 8003872:	1809      	addeq	r1, r1, r0
 8003874:	6021      	streq	r1, [r4, #0]
 8003876:	6063      	str	r3, [r4, #4]
 8003878:	6054      	str	r4, [r2, #4]
 800387a:	e7c9      	b.n	8003810 <_free_r+0x24>
 800387c:	bd38      	pop	{r3, r4, r5, pc}
 800387e:	bf00      	nop
 8003880:	200001fc 	.word	0x200001fc

08003884 <_malloc_r>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	1ccd      	adds	r5, r1, #3
 8003888:	f025 0503 	bic.w	r5, r5, #3
 800388c:	3508      	adds	r5, #8
 800388e:	2d0c      	cmp	r5, #12
 8003890:	bf38      	it	cc
 8003892:	250c      	movcc	r5, #12
 8003894:	2d00      	cmp	r5, #0
 8003896:	4606      	mov	r6, r0
 8003898:	db01      	blt.n	800389e <_malloc_r+0x1a>
 800389a:	42a9      	cmp	r1, r5
 800389c:	d903      	bls.n	80038a6 <_malloc_r+0x22>
 800389e:	230c      	movs	r3, #12
 80038a0:	6033      	str	r3, [r6, #0]
 80038a2:	2000      	movs	r0, #0
 80038a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a6:	f000 f87d 	bl	80039a4 <__malloc_lock>
 80038aa:	4921      	ldr	r1, [pc, #132]	; (8003930 <_malloc_r+0xac>)
 80038ac:	680a      	ldr	r2, [r1, #0]
 80038ae:	4614      	mov	r4, r2
 80038b0:	b99c      	cbnz	r4, 80038da <_malloc_r+0x56>
 80038b2:	4f20      	ldr	r7, [pc, #128]	; (8003934 <_malloc_r+0xb0>)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	b923      	cbnz	r3, 80038c2 <_malloc_r+0x3e>
 80038b8:	4621      	mov	r1, r4
 80038ba:	4630      	mov	r0, r6
 80038bc:	f000 f862 	bl	8003984 <_sbrk_r>
 80038c0:	6038      	str	r0, [r7, #0]
 80038c2:	4629      	mov	r1, r5
 80038c4:	4630      	mov	r0, r6
 80038c6:	f000 f85d 	bl	8003984 <_sbrk_r>
 80038ca:	1c43      	adds	r3, r0, #1
 80038cc:	d123      	bne.n	8003916 <_malloc_r+0x92>
 80038ce:	230c      	movs	r3, #12
 80038d0:	4630      	mov	r0, r6
 80038d2:	6033      	str	r3, [r6, #0]
 80038d4:	f000 f86c 	bl	80039b0 <__malloc_unlock>
 80038d8:	e7e3      	b.n	80038a2 <_malloc_r+0x1e>
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	1b5b      	subs	r3, r3, r5
 80038de:	d417      	bmi.n	8003910 <_malloc_r+0x8c>
 80038e0:	2b0b      	cmp	r3, #11
 80038e2:	d903      	bls.n	80038ec <_malloc_r+0x68>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	441c      	add	r4, r3
 80038e8:	6025      	str	r5, [r4, #0]
 80038ea:	e004      	b.n	80038f6 <_malloc_r+0x72>
 80038ec:	6863      	ldr	r3, [r4, #4]
 80038ee:	42a2      	cmp	r2, r4
 80038f0:	bf0c      	ite	eq
 80038f2:	600b      	streq	r3, [r1, #0]
 80038f4:	6053      	strne	r3, [r2, #4]
 80038f6:	4630      	mov	r0, r6
 80038f8:	f000 f85a 	bl	80039b0 <__malloc_unlock>
 80038fc:	f104 000b 	add.w	r0, r4, #11
 8003900:	1d23      	adds	r3, r4, #4
 8003902:	f020 0007 	bic.w	r0, r0, #7
 8003906:	1ac2      	subs	r2, r0, r3
 8003908:	d0cc      	beq.n	80038a4 <_malloc_r+0x20>
 800390a:	1a1b      	subs	r3, r3, r0
 800390c:	50a3      	str	r3, [r4, r2]
 800390e:	e7c9      	b.n	80038a4 <_malloc_r+0x20>
 8003910:	4622      	mov	r2, r4
 8003912:	6864      	ldr	r4, [r4, #4]
 8003914:	e7cc      	b.n	80038b0 <_malloc_r+0x2c>
 8003916:	1cc4      	adds	r4, r0, #3
 8003918:	f024 0403 	bic.w	r4, r4, #3
 800391c:	42a0      	cmp	r0, r4
 800391e:	d0e3      	beq.n	80038e8 <_malloc_r+0x64>
 8003920:	1a21      	subs	r1, r4, r0
 8003922:	4630      	mov	r0, r6
 8003924:	f000 f82e 	bl	8003984 <_sbrk_r>
 8003928:	3001      	adds	r0, #1
 800392a:	d1dd      	bne.n	80038e8 <_malloc_r+0x64>
 800392c:	e7cf      	b.n	80038ce <_malloc_r+0x4a>
 800392e:	bf00      	nop
 8003930:	200001fc 	.word	0x200001fc
 8003934:	20000200 	.word	0x20000200

08003938 <_realloc_r>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	4607      	mov	r7, r0
 800393c:	4614      	mov	r4, r2
 800393e:	460e      	mov	r6, r1
 8003940:	b921      	cbnz	r1, 800394c <_realloc_r+0x14>
 8003942:	4611      	mov	r1, r2
 8003944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003948:	f7ff bf9c 	b.w	8003884 <_malloc_r>
 800394c:	b922      	cbnz	r2, 8003958 <_realloc_r+0x20>
 800394e:	f7ff ff4d 	bl	80037ec <_free_r>
 8003952:	4625      	mov	r5, r4
 8003954:	4628      	mov	r0, r5
 8003956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003958:	f000 f830 	bl	80039bc <_malloc_usable_size_r>
 800395c:	42a0      	cmp	r0, r4
 800395e:	d20f      	bcs.n	8003980 <_realloc_r+0x48>
 8003960:	4621      	mov	r1, r4
 8003962:	4638      	mov	r0, r7
 8003964:	f7ff ff8e 	bl	8003884 <_malloc_r>
 8003968:	4605      	mov	r5, r0
 800396a:	2800      	cmp	r0, #0
 800396c:	d0f2      	beq.n	8003954 <_realloc_r+0x1c>
 800396e:	4631      	mov	r1, r6
 8003970:	4622      	mov	r2, r4
 8003972:	f7ff ff13 	bl	800379c <memcpy>
 8003976:	4631      	mov	r1, r6
 8003978:	4638      	mov	r0, r7
 800397a:	f7ff ff37 	bl	80037ec <_free_r>
 800397e:	e7e9      	b.n	8003954 <_realloc_r+0x1c>
 8003980:	4635      	mov	r5, r6
 8003982:	e7e7      	b.n	8003954 <_realloc_r+0x1c>

08003984 <_sbrk_r>:
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	2300      	movs	r3, #0
 8003988:	4d05      	ldr	r5, [pc, #20]	; (80039a0 <_sbrk_r+0x1c>)
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	602b      	str	r3, [r5, #0]
 8003990:	f7fc ff8e 	bl	80008b0 <_sbrk>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d102      	bne.n	800399e <_sbrk_r+0x1a>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	b103      	cbz	r3, 800399e <_sbrk_r+0x1a>
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	20000368 	.word	0x20000368

080039a4 <__malloc_lock>:
 80039a4:	4801      	ldr	r0, [pc, #4]	; (80039ac <__malloc_lock+0x8>)
 80039a6:	f000 b811 	b.w	80039cc <__retarget_lock_acquire_recursive>
 80039aa:	bf00      	nop
 80039ac:	20000370 	.word	0x20000370

080039b0 <__malloc_unlock>:
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <__malloc_unlock+0x8>)
 80039b2:	f000 b80c 	b.w	80039ce <__retarget_lock_release_recursive>
 80039b6:	bf00      	nop
 80039b8:	20000370 	.word	0x20000370

080039bc <_malloc_usable_size_r>:
 80039bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039c0:	1f18      	subs	r0, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bfbc      	itt	lt
 80039c6:	580b      	ldrlt	r3, [r1, r0]
 80039c8:	18c0      	addlt	r0, r0, r3
 80039ca:	4770      	bx	lr

080039cc <__retarget_lock_acquire_recursive>:
 80039cc:	4770      	bx	lr

080039ce <__retarget_lock_release_recursive>:
 80039ce:	4770      	bx	lr

080039d0 <_init>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr

080039dc <_fini>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	bf00      	nop
 80039e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e2:	bc08      	pop	{r3}
 80039e4:	469e      	mov	lr, r3
 80039e6:	4770      	bx	lr
