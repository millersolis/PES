
DW1000_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003204  08003204  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003204  08003204  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003204  08003204  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800320c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000001c  08003228  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003228  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001045e  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c0  00000000  00000000  000304a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00032d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00033a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ed2  00000000  00000000  00034628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e009  00000000  00000000  0004e4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1aa  00000000  00000000  0005c503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e86ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003250  00000000  00000000  000e8700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003010 	.word	0x08003010

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003010 	.word	0x08003010

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
    /* Display application name. */
    stdio_write(APP_NAME);
 8000162:	4834      	ldr	r0, [pc, #208]	; (8000234 <dw_main+0xd8>)
 8000164:	f000 fd20 	bl	8000ba8 <stdio_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8000168:	f000 fc80 	bl	8000a6c <reset_DW1000>
    port_set_dw1000_slowrate();
 800016c:	f000 fce0 	bl	8000b30 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8000170:	2000      	movs	r0, #0
 8000172:	f002 f91d 	bl	80023b0 <dwt_initialise>
 8000176:	4603      	mov	r3, r0
 8000178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800017c:	d103      	bne.n	8000186 <dw_main+0x2a>
    {
        stdio_write("INIT FAILED");
 800017e:	482e      	ldr	r0, [pc, #184]	; (8000238 <dw_main+0xdc>)
 8000180:	f000 fd12 	bl	8000ba8 <stdio_write>
        while (1)
 8000184:	e7fe      	b.n	8000184 <dw_main+0x28>
        { };
    }
    port_set_dw1000_fastrate();
 8000186:	f000 fcdf 	bl	8000b48 <port_set_dw1000_fastrate>

    /* Configure DW1000. */
    dwt_configure(&config);
 800018a:	482c      	ldr	r0, [pc, #176]	; (800023c <dw_main+0xe0>)
 800018c:	f002 fa66 	bl	800265c <dwt_configure>

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8000190:	2300      	movs	r3, #0
 8000192:	607b      	str	r3, [r7, #4]
 8000194:	e007      	b.n	80001a6 <dw_main+0x4a>
        {
            rx_buffer[i] = 0;
 8000196:	4a2a      	ldr	r2, [pc, #168]	; (8000240 <dw_main+0xe4>)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4413      	add	r3, r2
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3301      	adds	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b7e      	cmp	r3, #126	; 0x7e
 80001aa:	ddf4      	ble.n	8000196 <dw_main+0x3a>
        }

        /* Activate reception immediately. See NOTE 3 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f002 fe83 	bl	8002eb8 <dwt_rxenable>

        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 80001b2:	e002      	b.n	80001ba <dw_main+0x5e>
        {
        	stdio_write("Waiting for frame!\r\n");
 80001b4:	4823      	ldr	r0, [pc, #140]	; (8000244 <dw_main+0xe8>)
 80001b6:	f000 fcf7 	bl	8000ba8 <stdio_write>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 80001ba:	2100      	movs	r1, #0
 80001bc:	200f      	movs	r0, #15
 80001be:	f002 fc7e 	bl	8002abe <dwt_read32bitoffsetreg>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a20      	ldr	r2, [pc, #128]	; (8000248 <dw_main+0xec>)
 80001c6:	6013      	str	r3, [r2, #0]
 80001c8:	4b1f      	ldr	r3, [pc, #124]	; (8000248 <dw_main+0xec>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	4b1f      	ldr	r3, [pc, #124]	; (800024c <dw_main+0xf0>)
 80001ce:	4013      	ands	r3, r2
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d0ef      	beq.n	80001b4 <dw_main+0x58>
        };

        if (status_reg & SYS_STATUS_RXFCG)
 80001d4:	4b1c      	ldr	r3, [pc, #112]	; (8000248 <dw_main+0xec>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d01f      	beq.n	8000220 <dw_main+0xc4>
        {
            stdio_write("Frame received!\r\n");
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <dw_main+0xf4>)
 80001e2:	f000 fce1 	bl	8000ba8 <stdio_write>
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 80001e6:	2100      	movs	r1, #0
 80001e8:	2010      	movs	r0, #16
 80001ea:	f002 fc68 	bl	8002abe <dwt_read32bitoffsetreg>
 80001ee:	4603      	mov	r3, r0
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	4b16      	ldr	r3, [pc, #88]	; (8000254 <dw_main+0xf8>)
 80001fa:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 80001fc:	4b15      	ldr	r3, [pc, #84]	; (8000254 <dw_main+0xf8>)
 80001fe:	881b      	ldrh	r3, [r3, #0]
 8000200:	2b7f      	cmp	r3, #127	; 0x7f
 8000202:	d806      	bhi.n	8000212 <dw_main+0xb6>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8000204:	4b13      	ldr	r3, [pc, #76]	; (8000254 <dw_main+0xf8>)
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	2200      	movs	r2, #0
 800020a:	4619      	mov	r1, r3
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <dw_main+0xe4>)
 800020e:	f002 fb8f 	bl	8002930 <dwt_readrxdata>
            }

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8000212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000216:	2100      	movs	r1, #0
 8000218:	200f      	movs	r0, #15
 800021a:	f002 fcd6 	bl	8002bca <dwt_write32bitoffsetreg>
 800021e:	e004      	b.n	800022a <dw_main+0xce>
        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8000220:	4a0d      	ldr	r2, [pc, #52]	; (8000258 <dw_main+0xfc>)
 8000222:	2100      	movs	r1, #0
 8000224:	200f      	movs	r0, #15
 8000226:	f002 fcd0 	bl	8002bca <dwt_write32bitoffsetreg>
        }
        stdio_write("NEXT-FRAME\r\n");
 800022a:	480c      	ldr	r0, [pc, #48]	; (800025c <dw_main+0x100>)
 800022c:	f000 fcbc 	bl	8000ba8 <stdio_write>
    {
 8000230:	e7ae      	b.n	8000190 <dw_main+0x34>
 8000232:	bf00      	nop
 8000234:	08003028 	.word	0x08003028
 8000238:	08003038 	.word	0x08003038
 800023c:	20000000 	.word	0x20000000
 8000240:	20000038 	.word	0x20000038
 8000244:	08003044 	.word	0x08003044
 8000248:	200000b8 	.word	0x200000b8
 800024c:	2405d000 	.word	0x2405d000
 8000250:	0800305c 	.word	0x0800305c
 8000254:	200000bc 	.word	0x200000bc
 8000258:	24059000 	.word	0x24059000
 800025c:	08003070 	.word	0x08003070

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b0a6      	sub	sp, #152	; 0x98
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fce3 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f88f 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f929 	bl	80004c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000272:	f000 f8c7 	bl	8000404 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000276:	f000 f8fb 	bl	8000470 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t Test[] = "Initial setup success !!!\r\n"; //Data to send
 800027a:	4b3d      	ldr	r3, [pc, #244]	; (8000370 <main+0x110>)
 800027c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000280:	461d      	mov	r5, r3
 8000282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800028a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 800028e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000292:	230a      	movs	r3, #10
 8000294:	221c      	movs	r2, #28
 8000296:	4837      	ldr	r0, [pc, #220]	; (8000374 <main+0x114>)
 8000298:	f001 ff1f 	bl	80020da <HAL_UART_Transmit>
  HAL_Delay(5000);
 800029c:	f241 3088 	movw	r0, #5000	; 0x1388
 80002a0:	f000 fd28 	bl	8000cf4 <HAL_Delay>

  uint8_t Test11[] = "0 - Waiting for button !!!\r\n"; //Data to send;
 80002a4:	4b34      	ldr	r3, [pc, #208]	; (8000378 <main+0x118>)
 80002a6:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80002aa:	461d      	mov	r5, r3
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002b4:	c407      	stmia	r4!, {r0, r1, r2}
 80002b6:	7023      	strb	r3, [r4, #0]
  uint8_t Test12[] = "1 - Waiting for button !!!\r\n"; //Data to send;
 80002b8:	4b30      	ldr	r3, [pc, #192]	; (800037c <main+0x11c>)
 80002ba:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80002be:	461d      	mov	r5, r3
 80002c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002c8:	c407      	stmia	r4!, {r0, r1, r2}
 80002ca:	7023      	strb	r3, [r4, #0]

  while (1)
  {
	  if ( HAL_GPIO_ReadPin(READY_BTN_GPIO_Port, READY_BTN_Pin) == 0){
 80002cc:	2108      	movs	r1, #8
 80002ce:	482c      	ldr	r0, [pc, #176]	; (8000380 <main+0x120>)
 80002d0:	f000 fff8 	bl	80012c4 <HAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d107      	bne.n	80002ea <main+0x8a>
		  HAL_UART_Transmit(&huart1,Test11,sizeof(Test11),10);// Sending in normal mode
 80002da:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80002de:	230a      	movs	r3, #10
 80002e0:	221d      	movs	r2, #29
 80002e2:	4824      	ldr	r0, [pc, #144]	; (8000374 <main+0x114>)
 80002e4:	f001 fef9 	bl	80020da <HAL_UART_Transmit>
 80002e8:	e03b      	b.n	8000362 <main+0x102>

	  }
	  else {
		  HAL_UART_Transmit(&huart1,Test12,sizeof(Test12),10);// Sending in normal mode
 80002ea:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80002ee:	230a      	movs	r3, #10
 80002f0:	221d      	movs	r2, #29
 80002f2:	4820      	ldr	r0, [pc, #128]	; (8000374 <main+0x114>)
 80002f4:	f001 fef1 	bl	80020da <HAL_UART_Transmit>
		  break;
 80002f8:	bf00      	nop
	  }

	  HAL_Delay(5000);
  }

  uint8_t Test2[] = "button ready success !!!\r\n"; //Data to send
 80002fa:	4b22      	ldr	r3, [pc, #136]	; (8000384 <main+0x124>)
 80002fc:	f107 0420 	add.w	r4, r7, #32
 8000300:	461d      	mov	r5, r3
 8000302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000306:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030a:	c403      	stmia	r4!, {r0, r1}
 800030c:	8022      	strh	r2, [r4, #0]
 800030e:	3402      	adds	r4, #2
 8000310:	0c13      	lsrs	r3, r2, #16
 8000312:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1,Test2,sizeof(Test2),10);// Sending in normal mode
 8000314:	f107 0120 	add.w	r1, r7, #32
 8000318:	230a      	movs	r3, #10
 800031a:	221b      	movs	r2, #27
 800031c:	4815      	ldr	r0, [pc, #84]	; (8000374 <main+0x114>)
 800031e:	f001 fedc 	bl	80020da <HAL_UART_Transmit>
  HAL_Delay(5000);
 8000322:	f241 3088 	movw	r0, #5000	; 0x1388
 8000326:	f000 fce5 	bl	8000cf4 <HAL_Delay>
  /*
   * DW_RESET_Pin has been configured by CubeMx as Exti0 line
   * Reconfigure the line as Input
   */
  setup_DW1000RSTnIRQ(0);
 800032a:	2000      	movs	r0, #0
 800032c:	f000 fbc2 	bl	8000ab4 <setup_DW1000RSTnIRQ>

  stdio_init(&huart1);
 8000330:	4810      	ldr	r0, [pc, #64]	; (8000374 <main+0x114>)
 8000332:	f000 fc2b 	bl	8000b8c <stdio_init>

  uint8_t Test3[] = "going to start dw_main !!!\r\n"; //Data to send
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <main+0x128>)
 8000338:	463c      	mov	r4, r7
 800033a:	461d      	mov	r5, r3
 800033c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800033e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000340:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000344:	c407      	stmia	r4!, {r0, r1, r2}
 8000346:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1,Test3,sizeof(Test3),10);// Sending in normal mode
 8000348:	4639      	mov	r1, r7
 800034a:	230a      	movs	r3, #10
 800034c:	221d      	movs	r2, #29
 800034e:	4809      	ldr	r0, [pc, #36]	; (8000374 <main+0x114>)
 8000350:	f001 fec3 	bl	80020da <HAL_UART_Transmit>
  HAL_Delay(5000);
 8000354:	f241 3088 	movw	r0, #5000	; 0x1388
 8000358:	f000 fccc 	bl	8000cf4 <HAL_Delay>

  dw_main();
 800035c:	f7ff fefe 	bl	800015c <dw_main>
 8000360:	e004      	b.n	800036c <main+0x10c>
	  HAL_Delay(5000);
 8000362:	f241 3088 	movw	r0, #5000	; 0x1388
 8000366:	f000 fcc5 	bl	8000cf4 <HAL_Delay>
	  if ( HAL_GPIO_ReadPin(READY_BTN_GPIO_Port, READY_BTN_Pin) == 0){
 800036a:	e7af      	b.n	80002cc <main+0x6c>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800036c:	e7fe      	b.n	800036c <main+0x10c>
 800036e:	bf00      	nop
 8000370:	08003080 	.word	0x08003080
 8000374:	200000fc 	.word	0x200000fc
 8000378:	0800309c 	.word	0x0800309c
 800037c:	080030bc 	.word	0x080030bc
 8000380:	40010800 	.word	0x40010800
 8000384:	080030dc 	.word	0x080030dc
 8000388:	080030f8 	.word	0x080030f8

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b090      	sub	sp, #64	; 0x40
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fe30 	bl	8003000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b6:	2310      	movs	r3, #16
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 ffae 	bl	8001324 <HAL_RCC_OscConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ce:	f000 f90b 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
 80003d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 fa1a 	bl	8001824 <HAL_RCC_ClockConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003f6:	f000 f8f7 	bl	80005e8 <Error_Handler>
  }
}
 80003fa:	bf00      	nop
 80003fc:	3740      	adds	r7, #64	; 0x40
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_SPI1_Init+0x64>)
 800040a:	4a18      	ldr	r2, [pc, #96]	; (800046c <MX_SPI1_Init+0x68>)
 800040c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_SPI1_Init+0x64>)
 8000410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_SPI1_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_SPI1_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_SPI1_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_SPI1_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_SPI1_Init+0x64>)
 8000430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000434:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_SPI1_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MX_SPI1_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_SPI1_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_SPI1_Init+0x64>)
 8000450:	220a      	movs	r2, #10
 8000452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_SPI1_Init+0x64>)
 8000456:	f001 fb7f 	bl	8001b58 <HAL_SPI_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000460:	f000 f8c2 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000140 	.word	0x20000140
 800046c:	40013000 	.word	0x40013000

08000470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <MX_USART1_UART_Init+0x50>)
 8000478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800047c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a8:	f001 fdca 	bl	8002040 <HAL_UART_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004b2:	f000 f899 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000fc 	.word	0x200000fc
 80004c0:	40013800 	.word	0x40013800

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	4b3e      	ldr	r3, [pc, #248]	; (80005d4 <MX_GPIO_Init+0x110>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a3d      	ldr	r2, [pc, #244]	; (80005d4 <MX_GPIO_Init+0x110>)
 80004de:	f043 0310 	orr.w	r3, r3, #16
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b3b      	ldr	r3, [pc, #236]	; (80005d4 <MX_GPIO_Init+0x110>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0310 	and.w	r3, r3, #16
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f0:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <MX_GPIO_Init+0x110>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a37      	ldr	r2, [pc, #220]	; (80005d4 <MX_GPIO_Init+0x110>)
 80004f6:	f043 0320 	orr.w	r3, r3, #32
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b35      	ldr	r3, [pc, #212]	; (80005d4 <MX_GPIO_Init+0x110>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0320 	and.w	r3, r3, #32
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <MX_GPIO_Init+0x110>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a31      	ldr	r2, [pc, #196]	; (80005d4 <MX_GPIO_Init+0x110>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <MX_GPIO_Init+0x110>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b2c      	ldr	r3, [pc, #176]	; (80005d4 <MX_GPIO_Init+0x110>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a2b      	ldr	r2, [pc, #172]	; (80005d4 <MX_GPIO_Init+0x110>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <MX_GPIO_Init+0x110>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	603b      	str	r3, [r7, #0]
 8000536:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053e:	4826      	ldr	r0, [pc, #152]	; (80005d8 <MX_GPIO_Init+0x114>)
 8000540:	f000 fed7 	bl	80012f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_BTN_GPIO_Port, READY_BTN_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2108      	movs	r1, #8
 8000548:	4824      	ldr	r0, [pc, #144]	; (80005dc <MX_GPIO_Init+0x118>)
 800054a:	f000 fed2 	bl	80012f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000554:	4822      	ldr	r0, [pc, #136]	; (80005e0 <MX_GPIO_Init+0x11c>)
 8000556:	f000 fecc 	bl	80012f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 800055a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2302      	movs	r3, #2
 800056a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4819      	ldr	r0, [pc, #100]	; (80005d8 <MX_GPIO_Init+0x114>)
 8000574:	f000 fd22 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_BTN_Pin */
  GPIO_InitStruct.Pin = READY_BTN_Pin;
 8000578:	2308      	movs	r3, #8
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(READY_BTN_GPIO_Port, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4813      	ldr	r0, [pc, #76]	; (80005dc <MX_GPIO_Init+0x118>)
 8000590:	f000 fd14 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	4619      	mov	r1, r3
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <MX_GPIO_Init+0x11c>)
 80005ae:	f000 fd05 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MX_GPIO_Init+0x120>)
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_GPIO_Init+0x11c>)
 80005c8:	f000 fcf8 	bl	8000fbc <HAL_GPIO_Init>

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40011000 	.word	0x40011000
 80005dc:	40010800 	.word	0x40010800
 80005e0:	40010c00 	.word	0x40010c00
 80005e4:	10110000 	.word	0x10110000

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <Error_Handler+0x8>
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <HAL_MspInit+0x5c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_MspInit+0x5c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_MspInit+0x60>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_MspInit+0x60>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <HAL_SPI_MspInit+0x88>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d12f      	bne.n	80006d8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 800067e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006a8:	23a0      	movs	r3, #160	; 0xa0
 80006aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <HAL_SPI_MspInit+0x90>)
 80006bc:	f000 fc7e 	bl	8000fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <HAL_SPI_MspInit+0x90>)
 80006d4:	f000 fc72 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40013000 	.word	0x40013000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010800 	.word	0x40010800

080006ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <HAL_UART_MspInit+0x8c>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d131      	bne.n	8000770 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_UART_MspInit+0x90>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a1a      	ldr	r2, [pc, #104]	; (800077c <HAL_UART_MspInit+0x90>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_UART_MspInit+0x90>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_UART_MspInit+0x90>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <HAL_UART_MspInit+0x90>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_UART_MspInit+0x90>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800073c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000740:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4619      	mov	r1, r3
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <HAL_UART_MspInit+0x94>)
 8000752:	f000 fc33 	bl	8000fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <HAL_UART_MspInit+0x94>)
 800076c:	f000 fc26 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40013800 	.word	0x40013800
 800077c:	40021000 	.word	0x40021000
 8000780:	40010800 	.word	0x40010800

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <NMI_Handler+0x4>

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ca:	f000 fa77 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80007e4:	f000 f9ca 	bl	8000b7c <port_GetEXT_IRQStatus>
 80007e8:	4603      	mov	r3, r0
 80007ea:	607b      	str	r3, [r7, #4]

	if(s) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80007f2:	f000 f9b5 	bl	8000b60 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80007f6:	687b      	ldr	r3, [r7, #4]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800080e:	f000 f9ae 	bl	8000b6e <port_EnableEXT_IRQ>
	}
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f000 f8fb 	bl	8000a1e <Sleep>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8000830:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8000834:	4683      	mov	fp, r0
 8000836:	468a      	mov	sl, r1
 8000838:	4691      	mov	r9, r2
 800083a:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800083c:	f7ff ffcf 	bl	80007de <decamutexon>
 8000840:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000842:	4d14      	ldr	r5, [pc, #80]	; (8000894 <writetospi+0x64>)
 8000844:	4628      	mov	r0, r5
 8000846:	f001 fb47 	bl	8001ed8 <HAL_SPI_GetState>
 800084a:	2801      	cmp	r0, #1
 800084c:	4604      	mov	r4, r0
 800084e:	d1f9      	bne.n	8000844 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <writetospi+0x68>)
 8000858:	f000 fd4b 	bl	80012f2 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800085c:	465a      	mov	r2, fp
 800085e:	4651      	mov	r1, sl
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <writetospi+0x64>)
 8000866:	f001 f9fb 	bl	8001c60 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	4641      	mov	r1, r8
 8000870:	fa1f f289 	uxth.w	r2, r9
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <writetospi+0x64>)
 8000876:	f001 f9f3 	bl	8001c60 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800087a:	4622      	mov	r2, r4
 800087c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <writetospi+0x68>)
 8000882:	f000 fd36 	bl	80012f2 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000886:	4630      	mov	r0, r6
 8000888:	f7ff ffba 	bl	8000800 <decamutexoff>

    return 0;
} // end writetospi()
 800088c:	2000      	movs	r0, #0
 800088e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8000892:	bf00      	nop
 8000894:	20000140 	.word	0x20000140
 8000898:	40011000 	.word	0x40011000

0800089c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800089c:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 80008a0:	4681      	mov	r9, r0
 80008a2:	460c      	mov	r4, r1
 80008a4:	4690      	mov	r8, r2
 80008a6:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80008a8:	f7ff ff99 	bl	80007de <decamutexon>
 80008ac:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80008ae:	f8df a098 	ldr.w	sl, [pc, #152]	; 8000948 <readfromspi+0xac>
 80008b2:	4650      	mov	r0, sl
 80008b4:	f001 fb10 	bl	8001ed8 <HAL_SPI_GetState>
 80008b8:	2801      	cmp	r0, #1
 80008ba:	d1fa      	bne.n	80008b2 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80008bc:	4602      	mov	r2, r0
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	481f      	ldr	r0, [pc, #124]	; (8000940 <readfromspi+0xa4>)
 80008c4:	f000 fd15 	bl	80012f2 <HAL_GPIO_WritePin>
    HAL_Delay(3000);
 80008c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008cc:	f000 fa12 	bl	8000cf4 <HAL_Delay>
	stdio_write("Tested NSS/n");
 80008d0:	481c      	ldr	r0, [pc, #112]	; (8000944 <readfromspi+0xa8>)
 80008d2:	f000 f969 	bl	8000ba8 <stdio_write>
    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008dc:	4818      	ldr	r0, [pc, #96]	; (8000940 <readfromspi+0xa4>)
 80008de:	f000 fd08 	bl	80012f2 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 80008e2:	f1b9 0f00 	cmp.w	r9, #0
 80008e6:	d00c      	beq.n	8000902 <readfromspi+0x66>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80008e8:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8000948 <readfromspi+0xac>
 80008ec:	44a1      	add	r9, r4
 80008ee:	2201      	movs	r2, #1
 80008f0:	4621      	mov	r1, r4
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	4414      	add	r4, r2
 80008f8:	4650      	mov	r0, sl
 80008fa:	f001 f9b1 	bl	8001c60 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80008fe:	454c      	cmp	r4, r9
 8000900:	d1f5      	bne.n	80008ee <readfromspi+0x52>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8000902:	f1b8 0f00 	cmp.w	r8, #0
 8000906:	d00f      	beq.n	8000928 <readfromspi+0x8c>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8000908:	2000      	movs	r0, #0
 800090a:	4c0f      	ldr	r4, [pc, #60]	; (8000948 <readfromspi+0xac>)
 800090c:	44a8      	add	r8, r5
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800090e:	6822      	ldr	r2, [r4, #0]
 8000910:	6891      	ldr	r1, [r2, #8]
 8000912:	0789      	lsls	r1, r1, #30
 8000914:	d5fc      	bpl.n	8000910 <readfromspi+0x74>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8000916:	60d0      	str	r0, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8000918:	6891      	ldr	r1, [r2, #8]
 800091a:	07cb      	lsls	r3, r1, #31
 800091c:	d5fc      	bpl.n	8000918 <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 800091e:	68d3      	ldr	r3, [r2, #12]
 8000920:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8000924:	4545      	cmp	r5, r8
 8000926:	d1f2      	bne.n	800090e <readfromspi+0x72>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <readfromspi+0xa4>)
 8000930:	f000 fcdf 	bl	80012f2 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000934:	4630      	mov	r0, r6
 8000936:	f7ff ff63 	bl	8000800 <decamutexoff>

    return 0;
} // end readfromspi()
 800093a:	2000      	movs	r0, #0
 800093c:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8000940:	40011000 	.word	0x40011000
 8000944:	08003140 	.word	0x08003140
 8000948:	20000140 	.word	0x20000140

0800094c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	db0b      	blt.n	8000976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 021f 	and.w	r2, r3, #31
 8000964:	4906      	ldr	r1, [pc, #24]	; (8000980 <__NVIC_EnableIRQ+0x34>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	095b      	lsrs	r3, r3, #5
 800096c:	2001      	movs	r0, #1
 800096e:	fa00 f202 	lsl.w	r2, r0, r2
 8000972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100

08000984 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db12      	blt.n	80009bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f003 021f 	and.w	r2, r3, #31
 800099c:	490a      	ldr	r1, [pc, #40]	; (80009c8 <__NVIC_DisableIRQ+0x44>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	2001      	movs	r0, #1
 80009a6:	fa00 f202 	lsl.w	r2, r0, r2
 80009aa:	3320      	adds	r3, #32
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009b0:	f3bf 8f4f 	dsb	sy
}
 80009b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009b6:	f3bf 8f6f 	isb	sy
}
 80009ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100

080009cc <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep(useconds_t usec)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	e012      	b.n	8000a00 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	e004      	b.n	80009ea <usleep+0x1e>
        {
            __NOP();
 80009e0:	bf00      	nop
            __NOP();
 80009e2:	bf00      	nop
        for(j=0;j<2;j++)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	bfd4      	ite	le
 80009f0:	2301      	movle	r3, #1
 80009f2:	2300      	movgt	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1f2      	bne.n	80009e0 <usleep+0x14>
    for(i=0;i<usec;i++)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3301      	adds	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	bf8c      	ite	hi
 8000a08:	2301      	movhi	r3, #1
 8000a0a:	2300      	movls	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1e3      	bne.n	80009da <usleep+0xe>
        }
    }
}
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f964 	bl	8000cf4 <HAL_Delay>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <EXTI_GetITEnStatus+0x34>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	095b      	lsrs	r3, r3, #5
 8000a42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f003 031f 	and.w	r3, r3, #31
 8000a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a76:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a78:	2311      	movs	r3, #17
 8000a7a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <reset_DW1000+0x44>)
 8000a86:	f000 fa99 	bl	8000fbc <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <reset_DW1000+0x44>)
 8000a92:	f000 fc2e 	bl	80012f2 <HAL_GPIO_WritePin>

    usleep(1);
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff ff98 	bl	80009cc <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f809 	bl	8000ab4 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f7ff ffbb 	bl	8000a1e <Sleep>
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d015      	beq.n	8000aee <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac6:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <setup_DW1000RSTnIRQ+0x74>)
 8000aca:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4815      	ldr	r0, [pc, #84]	; (8000b2c <setup_DW1000RSTnIRQ+0x78>)
 8000ad8:	f000 fa70 	bl	8000fbc <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8000adc:	2006      	movs	r0, #6
 8000ade:	f000 fa44 	bl	8000f6a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2105      	movs	r1, #5
 8000ae6:	2006      	movs	r0, #6
 8000ae8:	f000 fa23 	bl	8000f32 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8000aec:	e017      	b.n	8000b1e <setup_DW1000RSTnIRQ+0x6a>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8000aee:	2006      	movs	r0, #6
 8000af0:	f000 fa49 	bl	8000f86 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af8:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000afa:	2311      	movs	r3, #17
 8000afc:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <setup_DW1000RSTnIRQ+0x78>)
 8000b0e:	f000 fa55 	bl	8000fbc <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <setup_DW1000RSTnIRQ+0x78>)
 8000b1a:	f000 fbea 	bl	80012f2 <HAL_GPIO_WritePin>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	10110000 	.word	0x10110000
 8000b2c:	40010c00 	.word	0x40010c00

08000b30 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <port_set_dw1000_slowrate+0x14>)
 8000b36:	2220      	movs	r2, #32
 8000b38:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8000b3a:	4802      	ldr	r0, [pc, #8]	; (8000b44 <port_set_dw1000_slowrate+0x14>)
 8000b3c:	f001 f80c 	bl	8001b58 <HAL_SPI_Init>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000140 	.word	0x20000140

08000b48 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <port_set_dw1000_fastrate+0x14>)
 8000b4e:	2208      	movs	r2, #8
 8000b50:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8000b52:	4802      	ldr	r0, [pc, #8]	; (8000b5c <port_set_dw1000_fastrate+0x14>)
 8000b54:	f001 f800 	bl	8001b58 <HAL_SPI_Init>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000140 	.word	0x20000140

08000b60 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8000b64:	2017      	movs	r0, #23
 8000b66:	f7ff ff0d 	bl	8000984 <__NVIC_DisableIRQ>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8000b72:	2017      	movs	r0, #23
 8000b74:	f7ff feea 	bl	800094c <__NVIC_EnableIRQ>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8000b80:	2017      	movs	r0, #23
 8000b82:	f7ff ff57 	bl	8000a34 <EXTI_GetITEnStatus>
 8000b86:	4603      	mov	r3, r0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <stdio_init>:
 * @fn port_stdio_init
 * @brief Initialize stdio on the given UART
 *
 * @param[in] huart Pointer to the STM32 HAL UART peripheral instance
 */
void stdio_init(UART_HandleTypeDef* huart) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    uart = huart;
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <stdio_init+0x18>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	200000c0 	.word	0x200000c0

08000ba8 <stdio_write>:
 *
 * @param[in] data Pointer to null terminated string
 * @return Number of bytes transmitted or -1 if an error occurred
 */
inline int stdio_write(const char *data)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(data);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff facb 	bl	800014c <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	81fb      	strh	r3, [r7, #14]
    if (HAL_UART_Transmit(uart, (uint8_t*) data, len, HAL_MAX_DELAY) == HAL_OK) {
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <stdio_write+0x38>)
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	89fa      	ldrh	r2, [r7, #14]
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	f001 fa88 	bl	80020da <HAL_UART_Transmit>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <stdio_write+0x2c>
        return len;
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	e001      	b.n	8000bd8 <stdio_write+0x30>
    }
    return -1;
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000c0 	.word	0x200000c0

08000be4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c0a:	f7ff fde2 	bl	80007d2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f002 f9d3 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c12:	f7ff fb25 	bl	8000260 <main>
  bx lr
 8000c16:	4770      	bx	lr
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c20:	0800320c 	.word	0x0800320c
  ldr r2, =_sbss
 8000c24:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c28:	20000260 	.word	0x20000260

08000c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_2_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x28>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x28>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f96b 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fcd2 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f991 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f94b 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	20000014 	.word	0x20000014
 8000cb8:	20000010 	.word	0x20000010

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x1c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <HAL_IncTick+0x20>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	2000025c 	.word	0x2000025c

08000ce0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <HAL_GetTick+0x10>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	2000025c 	.word	0x2000025c

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff fff0 	bl	8000ce0 <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffe0 	bl	8000ce0 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000014 	.word	0x20000014

08000d3c <__NVIC_SetPriorityGrouping>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4906      	ldr	r1, [pc, #24]	; (8000dd4 <__NVIC_EnableIRQ+0x34>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_DisableIRQ>:
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db12      	blt.n	8000e10 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	490a      	ldr	r1, [pc, #40]	; (8000e1c <__NVIC_DisableIRQ+0x44>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	3320      	adds	r3, #32
 8000e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e04:	f3bf 8f4f 	dsb	sy
}
 8000e08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e0a:	f3bf 8f6f 	isb	sy
}
 8000e0e:	bf00      	nop
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff90 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff09 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff1e 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff90 	bl	8000e74 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5f 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff11 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff1f 	bl	8000dd8 <__NVIC_DisableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff94 	bl	8000ed8 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e169      	b.n	80012a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8158 	bne.w	800129e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a9a      	ldr	r2, [pc, #616]	; (800125c <HAL_GPIO_Init+0x2a0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d05e      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a98      	ldr	r2, [pc, #608]	; (800125c <HAL_GPIO_Init+0x2a0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d875      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8000ffe:	4a98      	ldr	r2, [pc, #608]	; (8001260 <HAL_GPIO_Init+0x2a4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d058      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8001004:	4a96      	ldr	r2, [pc, #600]	; (8001260 <HAL_GPIO_Init+0x2a4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d86f      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 800100a:	4a96      	ldr	r2, [pc, #600]	; (8001264 <HAL_GPIO_Init+0x2a8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d052      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8001010:	4a94      	ldr	r2, [pc, #592]	; (8001264 <HAL_GPIO_Init+0x2a8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d869      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8001016:	4a94      	ldr	r2, [pc, #592]	; (8001268 <HAL_GPIO_Init+0x2ac>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d04c      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 800101c:	4a92      	ldr	r2, [pc, #584]	; (8001268 <HAL_GPIO_Init+0x2ac>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d863      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8001022:	4a92      	ldr	r2, [pc, #584]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d046      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8001028:	4a90      	ldr	r2, [pc, #576]	; (800126c <HAL_GPIO_Init+0x2b0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d85d      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 800102e:	2b12      	cmp	r3, #18
 8001030:	d82a      	bhi.n	8001088 <HAL_GPIO_Init+0xcc>
 8001032:	2b12      	cmp	r3, #18
 8001034:	d859      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8001036:	a201      	add	r2, pc, #4	; (adr r2, 800103c <HAL_GPIO_Init+0x80>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	080010b7 	.word	0x080010b7
 8001040:	08001091 	.word	0x08001091
 8001044:	080010a3 	.word	0x080010a3
 8001048:	080010e5 	.word	0x080010e5
 800104c:	080010eb 	.word	0x080010eb
 8001050:	080010eb 	.word	0x080010eb
 8001054:	080010eb 	.word	0x080010eb
 8001058:	080010eb 	.word	0x080010eb
 800105c:	080010eb 	.word	0x080010eb
 8001060:	080010eb 	.word	0x080010eb
 8001064:	080010eb 	.word	0x080010eb
 8001068:	080010eb 	.word	0x080010eb
 800106c:	080010eb 	.word	0x080010eb
 8001070:	080010eb 	.word	0x080010eb
 8001074:	080010eb 	.word	0x080010eb
 8001078:	080010eb 	.word	0x080010eb
 800107c:	080010eb 	.word	0x080010eb
 8001080:	08001099 	.word	0x08001099
 8001084:	080010ad 	.word	0x080010ad
 8001088:	4a79      	ldr	r2, [pc, #484]	; (8001270 <HAL_GPIO_Init+0x2b4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800108e:	e02c      	b.n	80010ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e029      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	3304      	adds	r3, #4
 800109e:	623b      	str	r3, [r7, #32]
          break;
 80010a0:	e024      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	3308      	adds	r3, #8
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e01f      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	330c      	adds	r3, #12
 80010b2:	623b      	str	r3, [r7, #32]
          break;
 80010b4:	e01a      	b.n	80010ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010be:	2304      	movs	r3, #4
 80010c0:	623b      	str	r3, [r7, #32]
          break;
 80010c2:	e013      	b.n	80010ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d105      	bne.n	80010d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010cc:	2308      	movs	r3, #8
 80010ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	611a      	str	r2, [r3, #16]
          break;
 80010d6:	e009      	b.n	80010ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d8:	2308      	movs	r3, #8
 80010da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	615a      	str	r2, [r3, #20]
          break;
 80010e2:	e003      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x130>
          break;
 80010ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2bff      	cmp	r3, #255	; 0xff
 80010f0:	d801      	bhi.n	80010f6 <HAL_GPIO_Init+0x13a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	e001      	b.n	80010fa <HAL_GPIO_Init+0x13e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3304      	adds	r3, #4
 80010fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2bff      	cmp	r3, #255	; 0xff
 8001100:	d802      	bhi.n	8001108 <HAL_GPIO_Init+0x14c>
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x152>
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	3b08      	subs	r3, #8
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	210f      	movs	r1, #15
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
 8001120:	6a39      	ldr	r1, [r7, #32]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	431a      	orrs	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80b1 	beq.w	800129e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800113c:	4b4d      	ldr	r3, [pc, #308]	; (8001274 <HAL_GPIO_Init+0x2b8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_GPIO_Init+0x2b8>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <HAL_GPIO_Init+0x2b8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001154:	4a48      	ldr	r2, [pc, #288]	; (8001278 <HAL_GPIO_Init+0x2bc>)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001160:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a40      	ldr	r2, [pc, #256]	; (800127c <HAL_GPIO_Init+0x2c0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d013      	beq.n	80011a8 <HAL_GPIO_Init+0x1ec>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a3f      	ldr	r2, [pc, #252]	; (8001280 <HAL_GPIO_Init+0x2c4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d00d      	beq.n	80011a4 <HAL_GPIO_Init+0x1e8>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a3e      	ldr	r2, [pc, #248]	; (8001284 <HAL_GPIO_Init+0x2c8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d007      	beq.n	80011a0 <HAL_GPIO_Init+0x1e4>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <HAL_GPIO_Init+0x2cc>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_GPIO_Init+0x1e0>
 8001198:	2303      	movs	r3, #3
 800119a:	e006      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 800119c:	2304      	movs	r3, #4
 800119e:	e004      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e002      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 80011a8:	2300      	movs	r3, #0
 80011aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ac:	f002 0203 	and.w	r2, r2, #3
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	4093      	lsls	r3, r2
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ba:	492f      	ldr	r1, [pc, #188]	; (8001278 <HAL_GPIO_Init+0x2bc>)
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	492c      	ldr	r1, [pc, #176]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4928      	ldr	r1, [pc, #160]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4922      	ldr	r1, [pc, #136]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	43db      	mvns	r3, r3
 8001212:	491e      	ldr	r1, [pc, #120]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001214:	4013      	ands	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	4918      	ldr	r1, [pc, #96]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	4914      	ldr	r1, [pc, #80]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800123c:	4013      	ands	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d021      	beq.n	8001290 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	490e      	ldr	r1, [pc, #56]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	60cb      	str	r3, [r1, #12]
 8001258:	e021      	b.n	800129e <HAL_GPIO_Init+0x2e2>
 800125a:	bf00      	nop
 800125c:	10320000 	.word	0x10320000
 8001260:	10310000 	.word	0x10310000
 8001264:	10220000 	.word	0x10220000
 8001268:	10210000 	.word	0x10210000
 800126c:	10120000 	.word	0x10120000
 8001270:	10110000 	.word	0x10110000
 8001274:	40021000 	.word	0x40021000
 8001278:	40010000 	.word	0x40010000
 800127c:	40010800 	.word	0x40010800
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40011000 	.word	0x40011000
 8001288:	40011400 	.word	0x40011400
 800128c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	43db      	mvns	r3, r3
 8001298:	4909      	ldr	r1, [pc, #36]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800129a:	4013      	ands	r3, r2
 800129c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	3301      	adds	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f47f ae8e 	bne.w	8000fd0 <HAL_GPIO_Init+0x14>
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	372c      	adds	r7, #44	; 0x2c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e001      	b.n	80012e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	807b      	strh	r3, [r7, #2]
 80012fe:	4613      	mov	r3, r2
 8001300:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001302:	787b      	ldrb	r3, [r7, #1]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001308:	887a      	ldrh	r2, [r7, #2]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800130e:	e003      	b.n	8001318 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	041a      	lsls	r2, r3, #16
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
	...

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e26c      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8087 	beq.w	8001452 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001344:	4b92      	ldr	r3, [pc, #584]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b04      	cmp	r3, #4
 800134e:	d00c      	beq.n	800136a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001350:	4b8f      	ldr	r3, [pc, #572]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d112      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
 800135c:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d10b      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d06c      	beq.n	8001450 <HAL_RCC_OscConfig+0x12c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d168      	bne.n	8001450 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e246      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x76>
 800138c:	4b80      	ldr	r3, [pc, #512]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7f      	ldr	r2, [pc, #508]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e02e      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x98>
 80013a2:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7a      	ldr	r2, [pc, #488]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b78      	ldr	r3, [pc, #480]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a77      	ldr	r2, [pc, #476]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0xbc>
 80013c6:	4b72      	ldr	r3, [pc, #456]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a71      	ldr	r2, [pc, #452]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013e0:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b68      	ldr	r3, [pc, #416]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a67      	ldr	r2, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fc6e 	bl	8000ce0 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fc6a 	bl	8000ce0 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1fa      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xe4>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fc5a 	bl	8000ce0 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fc56 	bl	8000ce0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e1e6      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x10c>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d063      	beq.n	8001526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800146a:	4b49      	ldr	r3, [pc, #292]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d11c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b43      	ldr	r3, [pc, #268]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1ba      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4939      	ldr	r1, [pc, #228]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e03a      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_RCC_OscConfig+0x270>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fc0f 	bl	8000ce0 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc0b 	bl	8000ce0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e19b      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4927      	ldr	r1, [pc, #156]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <HAL_RCC_OscConfig+0x270>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fbee 	bl	8000ce0 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fbea 	bl	8000ce0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e17a      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d03a      	beq.n	80015a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d019      	beq.n	800156e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_RCC_OscConfig+0x274>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff fbce 	bl	8000ce0 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff fbca 	bl	8000ce0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e15a      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f000 fad8 	bl	8001b1c <RCC_Delay>
 800156c:	e01c      	b.n	80015a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_RCC_OscConfig+0x274>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fbb4 	bl	8000ce0 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157a:	e00f      	b.n	800159c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fbb0 	bl	8000ce0 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d908      	bls.n	800159c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e140      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	42420000 	.word	0x42420000
 8001598:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	4b9e      	ldr	r3, [pc, #632]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e9      	bne.n	800157c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a6 	beq.w	8001702 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ba:	4b97      	ldr	r3, [pc, #604]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10d      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b94      	ldr	r3, [pc, #592]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a93      	ldr	r2, [pc, #588]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b91      	ldr	r3, [pc, #580]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b8e      	ldr	r3, [pc, #568]	; (800181c <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b8b      	ldr	r3, [pc, #556]	; (800181c <HAL_RCC_OscConfig+0x4f8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a8a      	ldr	r2, [pc, #552]	; (800181c <HAL_RCC_OscConfig+0x4f8>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fb71 	bl	8000ce0 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fb6d 	bl	8000ce0 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b64      	cmp	r3, #100	; 0x64
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0fd      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b81      	ldr	r3, [pc, #516]	; (800181c <HAL_RCC_OscConfig+0x4f8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x312>
 8001628:	4b7b      	ldr	r3, [pc, #492]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a7a      	ldr	r2, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e02d      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x334>
 800163e:	4b76      	ldr	r3, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a75      	ldr	r2, [pc, #468]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a72      	ldr	r2, [pc, #456]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	e01c      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x356>
 8001660:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a6c      	ldr	r2, [pc, #432]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a69      	ldr	r2, [pc, #420]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 800167a:	4b67      	ldr	r3, [pc, #412]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a66      	ldr	r2, [pc, #408]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a63      	ldr	r2, [pc, #396]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fb21 	bl	8000ce0 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fb1d 	bl	8000ce0 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0ab      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	4b57      	ldr	r3, [pc, #348]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ee      	beq.n	80016a2 <HAL_RCC_OscConfig+0x37e>
 80016c4:	e014      	b.n	80016f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb0b 	bl	8000ce0 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff fb07 	bl	8000ce0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e095      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ee      	bne.n	80016ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f6:	4b48      	ldr	r3, [pc, #288]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a47      	ldr	r2, [pc, #284]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8081 	beq.w	800180e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170c:	4b42      	ldr	r3, [pc, #264]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d061      	beq.n	80017dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d146      	bne.n	80017ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <HAL_RCC_OscConfig+0x4fc>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fadb 	bl	8000ce0 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fad7 	bl	8000ce0 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e067      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d108      	bne.n	8001768 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	492d      	ldr	r1, [pc, #180]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a19      	ldr	r1, [r3, #32]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	430b      	orrs	r3, r1
 800177a:	4927      	ldr	r1, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x4fc>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff faab 	bl	8000ce0 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff faa7 	bl	8000ce0 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e037      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x46a>
 80017ac:	e02f      	b.n	800180e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_RCC_OscConfig+0x4fc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fa94 	bl	8000ce0 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff fa90 	bl	8000ce0 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e020      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x498>
 80017da:	e018      	b.n	800180e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e013      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	40007000 	.word	0x40007000
 8001820:	42420060 	.word	0x42420060

08001824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0d0      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d910      	bls.n	8001868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0207 	bic.w	r2, r3, #7
 800184e:	4965      	ldr	r1, [pc, #404]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800188a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d040      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d115      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e073      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e06b      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4936      	ldr	r1, [pc, #216]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff f9e4 	bl	8000ce0 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff f9e0 	bl	8000ce0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e053      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d210      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0207 	bic.w	r2, r3, #7
 800195a:	4922      	ldr	r1, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1cc>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1d0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f942 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	08003128 	.word	0x08003128
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	20000010 	.word	0x20000010

080019f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b490      	push	{r4, r7}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a00:	1d3c      	adds	r4, r7, #4
 8001a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a08:	f240 2301 	movw	r3, #513	; 0x201
 8001a0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d002      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d003      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x46>
 8001a36:	e02d      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a3a:	623b      	str	r3, [r7, #32]
      break;
 8001a3c:	e02d      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	0c5b      	lsrs	r3, r3, #17
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a76:	fb02 f203 	mul.w	r2, r2, r3
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	e004      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	623b      	str	r3, [r7, #32]
      break;
 8001a92:	e002      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a96:	623b      	str	r3, [r7, #32]
      break;
 8001a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc90      	pop	{r4, r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	08003118 	.word	0x08003118
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	007a1200 	.word	0x007a1200
 8001ab4:	003d0900 	.word	0x003d0900

08001ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	2000000c 	.word	0x2000000c

08001acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad0:	f7ff fff2 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	; (8001af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08003138 	.word	0x08003138

08001af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0adb      	lsrs	r3, r3, #11
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	; (8001b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08003138 	.word	0x08003138

08001b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <RCC_Delay+0x34>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <RCC_Delay+0x38>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0a5b      	lsrs	r3, r3, #9
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b38:	bf00      	nop
  }
  while (Delay --);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	60fa      	str	r2, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f9      	bne.n	8001b38 <RCC_Delay+0x1c>
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	2000000c 	.word	0x2000000c
 8001b54:	10624dd3 	.word	0x10624dd3

08001b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e076      	b.n	8001c58 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d108      	bne.n	8001b84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b7a:	d009      	beq.n	8001b90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
 8001b82:	e005      	b.n	8001b90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fd54 	bl	8000658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c14:	ea42 0103 	orr.w	r1, r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	0c1a      	lsrs	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f002 0204 	and.w	r2, r2, #4
 8001c36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_SPI_Transmit+0x22>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e126      	b.n	8001ed0 <HAL_SPI_Transmit+0x270>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c8a:	f7ff f829 	bl	8000ce0 <HAL_GetTick>
 8001c8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d002      	beq.n	8001ca6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ca4:	e10b      	b.n	8001ebe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_SPI_Transmit+0x52>
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cb6:	e102      	b.n	8001ebe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	88fa      	ldrh	r2, [r7, #6]
 8001cd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cfe:	d10f      	bne.n	8001d20 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	2b40      	cmp	r3, #64	; 0x40
 8001d2c:	d007      	beq.n	8001d3e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d46:	d14b      	bne.n	8001de0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_SPI_Transmit+0xf6>
 8001d50:	8afb      	ldrh	r3, [r7, #22]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d13e      	bne.n	8001dd4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	881a      	ldrh	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	1c9a      	adds	r2, r3, #2
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d7a:	e02b      	b.n	8001dd4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d112      	bne.n	8001db0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	881a      	ldrh	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	1c9a      	adds	r2, r3, #2
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dae:	e011      	b.n	8001dd4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001db0:	f7fe ff96 	bl	8000ce0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d803      	bhi.n	8001dc8 <HAL_SPI_Transmit+0x168>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc6:	d102      	bne.n	8001dce <HAL_SPI_Transmit+0x16e>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dd2:	e074      	b.n	8001ebe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ce      	bne.n	8001d7c <HAL_SPI_Transmit+0x11c>
 8001dde:	e04c      	b.n	8001e7a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_SPI_Transmit+0x18e>
 8001de8:	8afb      	ldrh	r3, [r7, #22]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d140      	bne.n	8001e70 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	330c      	adds	r3, #12
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e14:	e02c      	b.n	8001e70 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d113      	bne.n	8001e4c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e4a:	e011      	b.n	8001e70 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e4c:	f7fe ff48 	bl	8000ce0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d803      	bhi.n	8001e64 <HAL_SPI_Transmit+0x204>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e62:	d102      	bne.n	8001e6a <HAL_SPI_Transmit+0x20a>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e6e:	e026      	b.n	8001ebe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1cd      	bne.n	8001e16 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f8c0 	bl	8002004 <SPI_EndRxTxTransaction>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10a      	bne.n	8001eae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	77fb      	strb	r3, [r7, #31]
 8001eba:	e000      	b.n	8001ebe <HAL_SPI_Transmit+0x25e>
  }

error:
 8001ebc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ee6:	b2db      	uxtb	r3, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f04:	f7fe feec 	bl	8000ce0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	4413      	add	r3, r2
 8001f12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f14:	f7fe fee4 	bl	8000ce0 <HAL_GetTick>
 8001f18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f1a:	4b39      	ldr	r3, [pc, #228]	; (8002000 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	015b      	lsls	r3, r3, #5
 8001f20:	0d1b      	lsrs	r3, r3, #20
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f2a:	e054      	b.n	8001fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d050      	beq.n	8001fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f34:	f7fe fed4 	bl	8000ce0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d902      	bls.n	8001f4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d13d      	bne.n	8001fc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f62:	d111      	bne.n	8001f88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f6c:	d004      	beq.n	8001f78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f76:	d107      	bne.n	8001f88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f90:	d10f      	bne.n	8001fb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e017      	b.n	8001ff6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	bf0c      	ite	eq
 8001fe6:	2301      	moveq	r3, #1
 8001fe8:	2300      	movne	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d19b      	bne.n	8001f2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c

08002004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2200      	movs	r2, #0
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7ff ff6a 	bl	8001ef4 <SPI_WaitFlagStateUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0220 	orr.w	r2, r3, #32
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e000      	b.n	8002038 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e03f      	b.n	80020d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fb40 	bl	80006ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f905 	bl	8002294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b08a      	sub	sp, #40	; 0x28
 80020de:	af02      	add	r7, sp, #8
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4613      	mov	r3, r2
 80020e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d17c      	bne.n	80021f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_UART_Transmit+0x2c>
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e075      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_UART_Transmit+0x3e>
 8002114:	2302      	movs	r3, #2
 8002116:	e06e      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2221      	movs	r2, #33	; 0x21
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800212e:	f7fe fdd7 	bl	8000ce0 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	88fa      	ldrh	r2, [r7, #6]
 800213e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002148:	d108      	bne.n	800215c <HAL_UART_Transmit+0x82>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d104      	bne.n	800215c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	e003      	b.n	8002164 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800216c:	e02a      	b.n	80021c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2200      	movs	r2, #0
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f840 	bl	80021fe <UART_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e036      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800219c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3302      	adds	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	e007      	b.n	80021b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	3301      	adds	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1cf      	bne.n	800216e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f810 	bl	80021fe <UART_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e006      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800220e:	e02c      	b.n	800226a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002216:	d028      	beq.n	800226a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <UART_WaitOnFlagUntilTimeout+0x30>
 800221e:	f7fe fd5f 	bl	8000ce0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	429a      	cmp	r2, r3
 800222c:	d21d      	bcs.n	800226a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800223c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e00f      	b.n	800228a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4013      	ands	r3, r2
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	429a      	cmp	r2, r3
 8002286:	d0c3      	beq.n	8002210 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022ce:	f023 030c 	bic.w	r3, r3, #12
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	430b      	orrs	r3, r1
 80022da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2c      	ldr	r2, [pc, #176]	; (80023a8 <UART_SetConfig+0x114>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d103      	bne.n	8002304 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022fc:	f7ff fbfa 	bl	8001af4 <HAL_RCC_GetPCLK2Freq>
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	e002      	b.n	800230a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002304:	f7ff fbe2 	bl	8001acc <HAL_RCC_GetPCLK1Freq>
 8002308:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	009a      	lsls	r2, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	4a22      	ldr	r2, [pc, #136]	; (80023ac <UART_SetConfig+0x118>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	0119      	lsls	r1, r3, #4
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009a      	lsls	r2, r3, #2
 8002334:	441a      	add	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <UART_SetConfig+0x118>)
 8002342:	fba3 0302 	umull	r0, r3, r3, r2
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2064      	movs	r0, #100	; 0x64
 800234a:	fb00 f303 	mul.w	r3, r0, r3
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	3332      	adds	r3, #50	; 0x32
 8002354:	4a15      	ldr	r2, [pc, #84]	; (80023ac <UART_SetConfig+0x118>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002360:	4419      	add	r1, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fbb2 f2f3 	udiv	r2, r2, r3
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <UART_SetConfig+0x118>)
 800237a:	fba3 0302 	umull	r0, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2064      	movs	r0, #100	; 0x64
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <UART_SetConfig+0x118>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	440a      	add	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40013800 	.word	0x40013800
 80023ac:	51eb851f 	.word	0x51eb851f

080023b0 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80023c0:	4b9f      	ldr	r3, [pc, #636]	; (8002640 <dwt_initialise+0x290>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80023c8:	4b9d      	ldr	r3, [pc, #628]	; (8002640 <dwt_initialise+0x290>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2200      	movs	r2, #0
 80023ce:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80023d0:	4b9b      	ldr	r3, [pc, #620]	; (8002640 <dwt_initialise+0x290>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80023d8:	4b99      	ldr	r3, [pc, #612]	; (8002640 <dwt_initialise+0x290>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80023e0:	4b97      	ldr	r3, [pc, #604]	; (8002640 <dwt_initialise+0x290>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80023e8:	4b95      	ldr	r3, [pc, #596]	; (8002640 <dwt_initialise+0x290>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80023f0:	4b93      	ldr	r3, [pc, #588]	; (8002640 <dwt_initialise+0x290>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80023f8:	f000 f926 	bl	8002648 <dwt_readdevid>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4a91      	ldr	r2, [pc, #580]	; (8002644 <dwt_initialise+0x294>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d002      	beq.n	800240a <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
 8002408:	e115      	b.n	8002636 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8002414:	f000 fd92 	bl	8002f3c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <dwt_initialise+0x7c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800242c:	2000      	movs	r0, #0
 800242e:	f000 fc53 	bl	8002cd8 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8002432:	2204      	movs	r2, #4
 8002434:	2100      	movs	r1, #0
 8002436:	2024      	movs	r0, #36	; 0x24
 8002438:	f000 fb98 	bl	8002b6c <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8002446:	2004      	movs	r0, #4
 8002448:	f000 fbe6 	bl	8002c18 <_dwt_otpread>
 800244c:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01f      	beq.n	8002496 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8002456:	2202      	movs	r2, #2
 8002458:	2112      	movs	r1, #18
 800245a:	202d      	movs	r0, #45	; 0x2d
 800245c:	f000 fb86 	bl	8002b6c <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8002460:	4b77      	ldr	r3, [pc, #476]	; (8002640 <dwt_initialise+0x290>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	8ada      	ldrh	r2, [r3, #22]
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <dwt_initialise+0x290>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800246e:	b292      	uxth	r2, r2
 8002470:	82da      	strh	r2, [r3, #22]
 8002472:	e010      	b.n	8002496 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8002474:	2130      	movs	r1, #48	; 0x30
 8002476:	2028      	movs	r0, #40	; 0x28
 8002478:	f000 fb21 	bl	8002abe <dwt_read32bitoffsetreg>
 800247c:	4603      	mov	r3, r0
 800247e:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8002482:	d008      	beq.n	8002496 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8002484:	4b6e      	ldr	r3, [pc, #440]	; (8002640 <dwt_initialise+0x290>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	8ada      	ldrh	r2, [r3, #22]
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <dwt_initialise+0x290>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002492:	b292      	uxth	r2, r2
 8002494:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <dwt_initialise+0x104>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d011      	beq.n	80024ce <dwt_initialise+0x11e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00c      	beq.n	80024ce <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80024b4:	201e      	movs	r0, #30
 80024b6:	f000 fbaf 	bl	8002c18 <_dwt_otpread>
 80024ba:	4603      	mov	r3, r0
 80024bc:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80024be:	8afb      	ldrh	r3, [r7, #22]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <dwt_initialise+0x290>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	72da      	strb	r2, [r3, #11]
 80024cc:	e003      	b.n	80024d6 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80024ce:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <dwt_initialise+0x290>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80024e0:	8afb      	ldrh	r3, [r7, #22]
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80024ea:	2310      	movs	r3, #16
 80024ec:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80024ee:	8afb      	ldrh	r3, [r7, #22]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fd48 	bl	8002f88 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8002502:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <dwt_initialise+0x290>)
 8002504:	681c      	ldr	r4, [r3, #0]
 8002506:	2006      	movs	r0, #6
 8002508:	f000 fb86 	bl	8002c18 <_dwt_otpread>
 800250c:	4603      	mov	r3, r0
 800250e:	6023      	str	r3, [r4, #0]
 8002510:	e003      	b.n	800251a <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8002512:	4b4b      	ldr	r3, [pc, #300]	; (8002640 <dwt_initialise+0x290>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8002524:	4b46      	ldr	r3, [pc, #280]	; (8002640 <dwt_initialise+0x290>)
 8002526:	681c      	ldr	r4, [r3, #0]
 8002528:	2007      	movs	r0, #7
 800252a:	f000 fb75 	bl	8002c18 <_dwt_otpread>
 800252e:	4603      	mov	r3, r0
 8002530:	6063      	str	r3, [r4, #4]
 8002532:	e003      	b.n	800253c <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8002534:	4b42      	ldr	r3, [pc, #264]	; (8002640 <dwt_initialise+0x290>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8002546:	2008      	movs	r0, #8
 8002548:	f000 fb66 	bl	8002c18 <_dwt_otpread>
 800254c:	4602      	mov	r2, r0
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <dwt_initialise+0x290>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	721a      	strb	r2, [r3, #8]
 8002556:	e003      	b.n	8002560 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8002558:	4b39      	ldr	r3, [pc, #228]	; (8002640 <dwt_initialise+0x290>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800256a:	2009      	movs	r0, #9
 800256c:	f000 fb54 	bl	8002c18 <_dwt_otpread>
 8002570:	4602      	mov	r2, r0
 8002572:	4b33      	ldr	r3, [pc, #204]	; (8002640 <dwt_initialise+0x290>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	725a      	strb	r2, [r3, #9]
 800257a:	e003      	b.n	8002584 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <dwt_initialise+0x290>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d121      	bne.n	80025d2 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8002598:	f000 fb8b 	bl	8002cb2 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <dwt_initialise+0x290>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	8ada      	ldrh	r2, [r3, #22]
 80025a2:	4b27      	ldr	r3, [pc, #156]	; (8002640 <dwt_initialise+0x290>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025aa:	b292      	uxth	r2, r2
 80025ac:	82da      	strh	r2, [r3, #22]
 80025ae:	e01e      	b.n	80025ee <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80025b0:	2105      	movs	r1, #5
 80025b2:	2036      	movs	r0, #54	; 0x36
 80025b4:	f000 faaa 	bl	8002b0c <dwt_read16bitoffsetreg>
 80025b8:	4603      	mov	r3, r0
 80025ba:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80025bc:	89fb      	ldrh	r3, [r7, #14]
 80025be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025c2:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80025c4:	89fb      	ldrh	r3, [r7, #14]
 80025c6:	461a      	mov	r2, r3
 80025c8:	2105      	movs	r1, #5
 80025ca:	2036      	movs	r0, #54	; 0x36
 80025cc:	f000 fae1 	bl	8002b92 <dwt_write16bitoffsetreg>
 80025d0:	e00d      	b.n	80025ee <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d108      	bne.n	80025ee <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <dwt_initialise+0x290>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	8ada      	ldrh	r2, [r3, #22]
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <dwt_initialise+0x290>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ea:	b292      	uxth	r2, r2
 80025ec:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80025ee:	2001      	movs	r0, #1
 80025f0:	f000 fb72 	bl	8002cd8 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80025f4:	2200      	movs	r2, #0
 80025f6:	210a      	movs	r1, #10
 80025f8:	202c      	movs	r0, #44	; 0x2c
 80025fa:	f000 fab7 	bl	8002b6c <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <dwt_initialise+0x290>)
 8002600:	681c      	ldr	r4, [r3, #0]
 8002602:	2100      	movs	r1, #0
 8002604:	2004      	movs	r0, #4
 8002606:	f000 fa5a 	bl	8002abe <dwt_read32bitoffsetreg>
 800260a:	4603      	mov	r3, r0
 800260c:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <dwt_initialise+0x290>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <dwt_initialise+0x290>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f002 0203 	and.w	r2, r2, #3
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <dwt_initialise+0x290>)
 8002626:	681c      	ldr	r4, [r3, #0]
 8002628:	2100      	movs	r1, #0
 800262a:	2008      	movs	r0, #8
 800262c:	f000 fa47 	bl	8002abe <dwt_read32bitoffsetreg>
 8002630:	4603      	mov	r3, r0
 8002632:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8002634:	2300      	movs	r3, #0

} // end dwt_initialise()
 8002636:	4618      	mov	r0, r3
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd90      	pop	{r4, r7, pc}
 800263e:	bf00      	nop
 8002640:	20000018 	.word	0x20000018
 8002644:	deca0130 	.word	0xdeca0130

08002648 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800264c:	2100      	movs	r1, #0
 800264e:	2000      	movs	r0, #0
 8002650:	f000 fa35 	bl	8002abe <dwt_read32bitoffsetreg>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	795b      	ldrb	r3, [r3, #5]
 8002676:	461a      	mov	r2, r3
 8002678:	4ba1      	ldr	r3, [pc, #644]	; (8002900 <dwt_configure+0x2a4>)
 800267a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800267e:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	3b01      	subs	r3, #1
 8002686:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b04      	cmp	r3, #4
 800268c:	d002      	beq.n	8002694 <dwt_configure+0x38>
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b07      	cmp	r3, #7
 8002692:	d101      	bne.n	8002698 <dwt_configure+0x3c>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <dwt_configure+0x3e>
 8002698:	2300      	movs	r3, #0
 800269a:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	79db      	ldrb	r3, [r3, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10b      	bne.n	80026bc <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80026a4:	4b97      	ldr	r3, [pc, #604]	; (8002904 <dwt_configure+0x2a8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	4b96      	ldr	r3, [pc, #600]	; (8002904 <dwt_configure+0x2a8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80026b2:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80026b4:	8abb      	ldrh	r3, [r7, #20]
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	82bb      	strh	r3, [r7, #20]
 80026ba:	e007      	b.n	80026cc <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80026bc:	4b91      	ldr	r3, [pc, #580]	; (8002904 <dwt_configure+0x2a8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	4b90      	ldr	r3, [pc, #576]	; (8002904 <dwt_configure+0x2a8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80026ca:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80026cc:	4b8d      	ldr	r3, [pc, #564]	; (8002904 <dwt_configure+0x2a8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	7a12      	ldrb	r2, [r2, #8]
 80026d4:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80026d6:	4b8b      	ldr	r3, [pc, #556]	; (8002904 <dwt_configure+0x2a8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	4b89      	ldr	r3, [pc, #548]	; (8002904 <dwt_configure+0x2a8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80026e4:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80026e6:	4b87      	ldr	r3, [pc, #540]	; (8002904 <dwt_configure+0x2a8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6919      	ldr	r1, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7a1b      	ldrb	r3, [r3, #8]
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f6:	4b83      	ldr	r3, [pc, #524]	; (8002904 <dwt_configure+0x2a8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80026fe:	4b81      	ldr	r3, [pc, #516]	; (8002904 <dwt_configure+0x2a8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	461a      	mov	r2, r3
 8002706:	2100      	movs	r1, #0
 8002708:	2004      	movs	r0, #4
 800270a:	f000 fa5e 	bl	8002bca <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800270e:	8abb      	ldrh	r3, [r7, #20]
 8002710:	461a      	mov	r2, r3
 8002712:	f642 0104 	movw	r1, #10244	; 0x2804
 8002716:	202e      	movs	r0, #46	; 0x2e
 8002718:	f000 fa3b 	bl	8002b92 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800271c:	7cbb      	ldrb	r3, [r7, #18]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 faa7 	bl	8002c72 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	4a78      	ldr	r2, [pc, #480]	; (8002908 <dwt_configure+0x2ac>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	461a      	mov	r2, r3
 800272c:	4b77      	ldr	r3, [pc, #476]	; (800290c <dwt_configure+0x2b0>)
 800272e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002732:	461a      	mov	r2, r3
 8002734:	2107      	movs	r1, #7
 8002736:	202b      	movs	r0, #43	; 0x2b
 8002738:	f000 fa47 	bl	8002bca <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	4a72      	ldr	r2, [pc, #456]	; (8002908 <dwt_configure+0x2ac>)
 8002740:	5cd3      	ldrb	r3, [r2, r3]
 8002742:	461a      	mov	r2, r3
 8002744:	4b72      	ldr	r3, [pc, #456]	; (8002910 <dwt_configure+0x2b4>)
 8002746:	5c9b      	ldrb	r3, [r3, r2]
 8002748:	461a      	mov	r2, r3
 800274a:	210b      	movs	r1, #11
 800274c:	202b      	movs	r0, #43	; 0x2b
 800274e:	f000 fa0d 	bl	8002b6c <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8002752:	7c7b      	ldrb	r3, [r7, #17]
 8002754:	4a6f      	ldr	r2, [pc, #444]	; (8002914 <dwt_configure+0x2b8>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	461a      	mov	r2, r3
 800275a:	210b      	movs	r1, #11
 800275c:	2028      	movs	r0, #40	; 0x28
 800275e:	f000 fa05 	bl	8002b6c <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	4a68      	ldr	r2, [pc, #416]	; (8002908 <dwt_configure+0x2ac>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	461a      	mov	r2, r3
 800276a:	4b6b      	ldr	r3, [pc, #428]	; (8002918 <dwt_configure+0x2bc>)
 800276c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002770:	461a      	mov	r2, r3
 8002772:	210c      	movs	r1, #12
 8002774:	2028      	movs	r0, #40	; 0x28
 8002776:	f000 fa28 	bl	8002bca <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	79db      	ldrb	r3, [r3, #7]
 800277e:	4618      	mov	r0, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	799b      	ldrb	r3, [r3, #6]
 8002784:	4619      	mov	r1, r3
 8002786:	4a65      	ldr	r2, [pc, #404]	; (800291c <dwt_configure+0x2c0>)
 8002788:	0043      	lsls	r3, r0, #1
 800278a:	440b      	add	r3, r1
 800278c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002790:	461a      	mov	r2, r3
 8002792:	2102      	movs	r1, #2
 8002794:	2027      	movs	r0, #39	; 0x27
 8002796:	f000 f9fc 	bl	8002b92 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800279a:	7cbb      	ldrb	r3, [r7, #18]
 800279c:	4a60      	ldr	r2, [pc, #384]	; (8002920 <dwt_configure+0x2c4>)
 800279e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027a2:	461a      	mov	r2, r3
 80027a4:	2104      	movs	r1, #4
 80027a6:	2027      	movs	r0, #39	; 0x27
 80027a8:	f000 f9f3 	bl	8002b92 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	79db      	ldrb	r3, [r3, #7]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80027b4:	2264      	movs	r2, #100	; 0x64
 80027b6:	2106      	movs	r1, #6
 80027b8:	2027      	movs	r0, #39	; 0x27
 80027ba:	f000 f9ea 	bl	8002b92 <dwt_write16bitoffsetreg>
 80027be:	e018      	b.n	80027f2 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	789b      	ldrb	r3, [r3, #2]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d10a      	bne.n	80027de <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80027c8:	2210      	movs	r2, #16
 80027ca:	2106      	movs	r1, #6
 80027cc:	2027      	movs	r0, #39	; 0x27
 80027ce:	f000 f9e0 	bl	8002b92 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80027d2:	2210      	movs	r2, #16
 80027d4:	2126      	movs	r1, #38	; 0x26
 80027d6:	2027      	movs	r0, #39	; 0x27
 80027d8:	f000 f9c8 	bl	8002b6c <dwt_write8bitoffsetreg>
 80027dc:	e009      	b.n	80027f2 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80027de:	2220      	movs	r2, #32
 80027e0:	2106      	movs	r1, #6
 80027e2:	2027      	movs	r0, #39	; 0x27
 80027e4:	f000 f9d5 	bl	8002b92 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80027e8:	2228      	movs	r2, #40	; 0x28
 80027ea:	2126      	movs	r1, #38	; 0x26
 80027ec:	2027      	movs	r0, #39	; 0x27
 80027ee:	f000 f9bd 	bl	8002b6c <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80027f2:	7cbb      	ldrb	r3, [r7, #18]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	78d2      	ldrb	r2, [r2, #3]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4a4a      	ldr	r2, [pc, #296]	; (8002924 <dwt_configure+0x2c8>)
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	461a      	mov	r2, r3
 8002806:	2108      	movs	r1, #8
 8002808:	2027      	movs	r0, #39	; 0x27
 800280a:	f000 f9de 	bl	8002bca <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	895b      	ldrh	r3, [r3, #10]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f241 0241 	movw	r2, #4161	; 0x1041
 800281c:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	895b      	ldrh	r3, [r3, #10]
 8002822:	461a      	mov	r2, r3
 8002824:	2120      	movs	r1, #32
 8002826:	2027      	movs	r0, #39	; 0x27
 8002828:	f000 f9b3 	bl	8002b92 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800282c:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <dwt_configure+0x2cc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	210c      	movs	r1, #12
 8002834:	2023      	movs	r0, #35	; 0x23
 8002836:	f000 f9c8 	bl	8002bca <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800283a:	7cbb      	ldrb	r3, [r7, #18]
 800283c:	4a3a      	ldr	r2, [pc, #232]	; (8002928 <dwt_configure+0x2cc>)
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	889b      	ldrh	r3, [r3, #4]
 8002844:	461a      	mov	r2, r3
 8002846:	2104      	movs	r1, #4
 8002848:	2023      	movs	r0, #35	; 0x23
 800284a:	f000 f9a2 	bl	8002b92 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	799b      	ldrb	r3, [r3, #6]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	79db      	ldrb	r3, [r3, #7]
 800285a:	461a      	mov	r2, r3
 800285c:	4b33      	ldr	r3, [pc, #204]	; (800292c <dwt_configure+0x2d0>)
 800285e:	5c9b      	ldrb	r3, [r3, r2]
 8002860:	461a      	mov	r2, r3
 8002862:	2100      	movs	r1, #0
 8002864:	2021      	movs	r0, #33	; 0x21
 8002866:	f000 f981 	bl	8002b6c <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800286a:	2303      	movs	r3, #3
 800286c:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 800286e:	2301      	movs	r3, #1
 8002870:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800287e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	785b      	ldrb	r3, [r3, #1]
 8002884:	049b      	lsls	r3, r3, #18
 8002886:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800288a:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	051b      	lsls	r3, r3, #20
 8002890:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002894:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8002896:	7dbb      	ldrb	r3, [r7, #22]
 8002898:	045b      	lsls	r3, r3, #17
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800289e:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	791b      	ldrb	r3, [r3, #4]
 80028a4:	059b      	lsls	r3, r3, #22
 80028a6:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80028aa:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	795b      	ldrb	r3, [r3, #5]
 80028b0:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	2100      	movs	r1, #0
 80028ba:	201f      	movs	r0, #31
 80028bc:	f000 f985 	bl	8002bca <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	789a      	ldrb	r2, [r3, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	0419      	lsls	r1, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	79db      	ldrb	r3, [r3, #7]
 80028d2:	035a      	lsls	r2, r3, #13
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <dwt_configure+0x2a8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <dwt_configure+0x2a8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	461a      	mov	r2, r3
 80028e4:	2100      	movs	r1, #0
 80028e6:	2008      	movs	r0, #8
 80028e8:	f000 f96f 	bl	8002bca <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80028ec:	2242      	movs	r2, #66	; 0x42
 80028ee:	2100      	movs	r1, #0
 80028f0:	200d      	movs	r0, #13
 80028f2:	f000 f93b 	bl	8002b6c <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	080031d0 	.word	0x080031d0
 8002904:	20000018 	.word	0x20000018
 8002908:	08003150 	.word	0x08003150
 800290c:	08003170 	.word	0x08003170
 8002910:	08003188 	.word	0x08003188
 8002914:	08003190 	.word	0x08003190
 8002918:	08003158 	.word	0x08003158
 800291c:	080031a0 	.word	0x080031a0
 8002920:	080031ac 	.word	0x080031ac
 8002924:	080031b0 	.word	0x080031b0
 8002928:	08003194 	.word	0x08003194
 800292c:	0800319c 	.word	0x0800319c

08002930 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8002940:	887a      	ldrh	r2, [r7, #2]
 8002942:	8839      	ldrh	r1, [r7, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2011      	movs	r0, #17
 8002948:	f000 f860 	bl	8002a0c <dwt_readfromdevice>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60ba      	str	r2, [r7, #8]
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4603      	mov	r3, r0
 8002960:	81fb      	strh	r3, [r7, #14]
 8002962:	460b      	mov	r3, r1
 8002964:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800296a:	89bb      	ldrh	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10d      	bne.n	800298c <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	1c59      	adds	r1, r3, #1
 8002978:	6179      	str	r1, [r7, #20]
 800297a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f107 0118 	add.w	r1, r7, #24
 8002984:	440b      	add	r3, r1
 8002986:	f803 2c08 	strb.w	r2, [r3, #-8]
 800298a:	e033      	b.n	80029f4 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	6179      	str	r1, [r7, #20]
 8002996:	f062 023f 	orn	r2, r2, #63	; 0x3f
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f107 0118 	add.w	r1, r7, #24
 80029a0:	440b      	add	r3, r1
 80029a2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80029a6:	89bb      	ldrh	r3, [r7, #12]
 80029a8:	2b7f      	cmp	r3, #127	; 0x7f
 80029aa:	d80a      	bhi.n	80029c2 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	617a      	str	r2, [r7, #20]
 80029b2:	89ba      	ldrh	r2, [r7, #12]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f107 0118 	add.w	r1, r7, #24
 80029ba:	440b      	add	r3, r1
 80029bc:	f803 2c08 	strb.w	r2, [r3, #-8]
 80029c0:	e018      	b.n	80029f4 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80029c2:	89bb      	ldrh	r3, [r7, #12]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1c59      	adds	r1, r3, #1
 80029ca:	6179      	str	r1, [r7, #20]
 80029cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f107 0118 	add.w	r1, r7, #24
 80029d6:	440b      	add	r3, r1
 80029d8:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80029dc:	89bb      	ldrh	r3, [r7, #12]
 80029de:	09db      	lsrs	r3, r3, #7
 80029e0:	b299      	uxth	r1, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	617a      	str	r2, [r7, #20]
 80029e8:	b2ca      	uxtb	r2, r1
 80029ea:	f107 0118 	add.w	r1, r7, #24
 80029ee:	440b      	add	r3, r1
 80029f0:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	b298      	uxth	r0, r3
 80029f8:	f107 0110 	add.w	r1, r7, #16
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f7fd ff16 	bl	8000830 <writetospi>
} // end dwt_writetodevice()
 8002a04:	bf00      	nop
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60ba      	str	r2, [r7, #8]
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	4603      	mov	r3, r0
 8002a18:	81fb      	strh	r3, [r7, #14]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	617a      	str	r2, [r7, #20]
 8002a2e:	89fa      	ldrh	r2, [r7, #14]
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f107 0118 	add.w	r1, r7, #24
 8002a36:	440b      	add	r3, r1
 8002a38:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002a3c:	e033      	b.n	8002aa6 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	1c59      	adds	r1, r3, #1
 8002a46:	6179      	str	r1, [r7, #20]
 8002a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f107 0118 	add.w	r1, r7, #24
 8002a52:	440b      	add	r3, r1
 8002a54:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002a58:	89bb      	ldrh	r3, [r7, #12]
 8002a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a5c:	d80a      	bhi.n	8002a74 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	617a      	str	r2, [r7, #20]
 8002a64:	89ba      	ldrh	r2, [r7, #12]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f107 0118 	add.w	r1, r7, #24
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002a72:	e018      	b.n	8002aa6 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002a74:	89bb      	ldrh	r3, [r7, #12]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	1c59      	adds	r1, r3, #1
 8002a7c:	6179      	str	r1, [r7, #20]
 8002a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f107 0118 	add.w	r1, r7, #24
 8002a88:	440b      	add	r3, r1
 8002a8a:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002a8e:	89bb      	ldrh	r3, [r7, #12]
 8002a90:	09db      	lsrs	r3, r3, #7
 8002a92:	b299      	uxth	r1, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	617a      	str	r2, [r7, #20]
 8002a9a:	b2ca      	uxtb	r2, r1
 8002a9c:	f107 0118 	add.w	r1, r7, #24
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	b298      	uxth	r0, r3
 8002aaa:	f107 0110 	add.w	r1, r7, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	f7fd fef3 	bl	800089c <readfromspi>
} // end dwt_readfromdevice()
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	b298      	uxth	r0, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	b299      	uxth	r1, r3
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	2204      	movs	r2, #4
 8002ada:	f7ff ff97 	bl	8002a0c <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8002ade:	2303      	movs	r3, #3
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e00b      	b.n	8002afc <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	f107 010c 	add.w	r1, r7, #12
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	440a      	add	r2, r1
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	daf0      	bge.n	8002ae4 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8002b02:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8002b16:	2300      	movs	r3, #0
 8002b18:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	b298      	uxth	r0, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b299      	uxth	r1, r3
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	2202      	movs	r2, #2
 8002b28:	f7ff ff70 	bl	8002a0c <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8002b2c:	7b7b      	ldrb	r3, [r7, #13]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	7b3b      	ldrb	r3, [r7, #12]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8002b3c:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	b298      	uxth	r0, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b299      	uxth	r1, r3
 8002b58:	f107 030f 	add.w	r3, r7, #15
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f7ff ff55 	bl	8002a0c <dwt_readfromdevice>

    return regval ;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	b298      	uxth	r0, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	b299      	uxth	r1, r3
 8002b82:	1dfb      	adds	r3, r7, #7
 8002b84:	2201      	movs	r2, #1
 8002b86:	f7ff fee5 	bl	8002954 <dwt_writetodevice>
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	b298      	uxth	r0, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	b299      	uxth	r1, r3
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f7ff fec9 	bl	8002954 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e00d      	b.n	8002bf8 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	b2d9      	uxtb	r1, r3
 8002be0:	f107 0210 	add.w	r2, r7, #16
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4413      	add	r3, r2
 8002be8:	460a      	mov	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	ddee      	ble.n	8002bdc <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	b298      	uxth	r0, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	b299      	uxth	r1, r3
 8002c06:	f107 0310 	add.w	r3, r7, #16
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	f7ff fea2 	bl	8002954 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	461a      	mov	r2, r3
 8002c26:	2104      	movs	r1, #4
 8002c28:	202d      	movs	r0, #45	; 0x2d
 8002c2a:	f7ff ffb2 	bl	8002b92 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8002c2e:	2203      	movs	r2, #3
 8002c30:	2106      	movs	r1, #6
 8002c32:	202d      	movs	r0, #45	; 0x2d
 8002c34:	f7ff ff9a 	bl	8002b6c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2106      	movs	r1, #6
 8002c3c:	202d      	movs	r0, #45	; 0x2d
 8002c3e:	f7ff ff95 	bl	8002b6c <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8002c42:	210a      	movs	r1, #10
 8002c44:	202d      	movs	r0, #45	; 0x2d
 8002c46:	f7ff ff3a 	bl	8002abe <dwt_read32bitoffsetreg>
 8002c4a:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	202c      	movs	r0, #44	; 0x2c
 8002c60:	f7ff ff84 	bl	8002b6c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8002c64:	2202      	movs	r2, #2
 8002c66:	2102      	movs	r1, #2
 8002c68:	202c      	movs	r0, #44	; 0x2c
 8002c6a:	f7ff ff7f 	bl	8002b6c <dwt_write8bitoffsetreg>
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8002c7a:	226d      	movs	r2, #109	; 0x6d
 8002c7c:	f640 0106 	movw	r1, #2054	; 0x806
 8002c80:	202e      	movs	r0, #46	; 0x2e
 8002c82:	f7ff ff73 	bl	8002b6c <dwt_write8bitoffsetreg>

    if(prfIndex)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8002c8c:	f240 6207 	movw	r2, #1543	; 0x607
 8002c90:	f641 0106 	movw	r1, #6150	; 0x1806
 8002c94:	202e      	movs	r0, #46	; 0x2e
 8002c96:	f7ff ff7c 	bl	8002b92 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8002c9a:	e006      	b.n	8002caa <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8002c9c:	f241 6207 	movw	r2, #5639	; 0x1607
 8002ca0:	f641 0106 	movw	r1, #6150	; 0x1806
 8002ca4:	202e      	movs	r0, #46	; 0x2e
 8002ca6:	f7ff ff74 	bl	8002b92 <dwt_write16bitoffsetreg>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8002cb6:	200e      	movs	r0, #14
 8002cb8:	f000 f80e 	bl	8002cd8 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8002cbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cc0:	2106      	movs	r1, #6
 8002cc2:	202d      	movs	r0, #45	; 0x2d
 8002cc4:	f7ff ff65 	bl	8002b92 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f7fd fda6 	bl	800081a <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f000 f802 	bl	8002cd8 <_dwt_enableclocks>
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8002ce0:	f107 030c 	add.w	r3, r7, #12
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2036      	movs	r0, #54	; 0x36
 8002cea:	f7ff fe8f 	bl	8002a0c <dwt_readfromdevice>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0e      	cmp	r3, #14
 8002cf2:	d876      	bhi.n	8002de2 <_dwt_enableclocks+0x10a>
 8002cf4:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <_dwt_enableclocks+0x24>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d49 	.word	0x08002d49
 8002d00:	08002d39 	.word	0x08002d39
 8002d04:	08002d5f 	.word	0x08002d5f
 8002d08:	08002de3 	.word	0x08002de3
 8002d0c:	08002de3 	.word	0x08002de3
 8002d10:	08002de3 	.word	0x08002de3
 8002d14:	08002de3 	.word	0x08002de3
 8002d18:	08002d75 	.word	0x08002d75
 8002d1c:	08002d95 	.word	0x08002d95
 8002d20:	08002de3 	.word	0x08002de3
 8002d24:	08002de3 	.word	0x08002de3
 8002d28:	08002dab 	.word	0x08002dab
 8002d2c:	08002db7 	.word	0x08002db7
 8002d30:	08002dc3 	.word	0x08002dc3
 8002d34:	08002dd9 	.word	0x08002dd9
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8002d3c:	7b7b      	ldrb	r3, [r7, #13]
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002d46:	e04d      	b.n	8002de4 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8002d48:	7b3b      	ldrb	r3, [r7, #12]
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	f023 0303 	bic.w	r3, r3, #3
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	733b      	strb	r3, [r7, #12]
        }
        break;
 8002d5c:	e042      	b.n	8002de4 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8002d5e:	7b3b      	ldrb	r3, [r7, #12]
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	f023 0303 	bic.w	r3, r3, #3
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	b25b      	sxtb	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	733b      	strb	r3, [r7, #12]
        }
        break;
 8002d72:	e037      	b.n	8002de4 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002d74:	7b3b      	ldrb	r3, [r7, #12]
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8002d82:	b25b      	sxtb	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8002d88:	7b7b      	ldrb	r3, [r7, #13]
 8002d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002d92:	e027      	b.n	8002de4 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8002d94:	7b3b      	ldrb	r3, [r7, #12]
 8002d96:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8002d9e:	7b7b      	ldrb	r3, [r7, #13]
 8002da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002da8:	e01c      	b.n	8002de4 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8002daa:	7b7b      	ldrb	r3, [r7, #13]
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002db4:	e016      	b.n	8002de4 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8002db6:	7b7b      	ldrb	r3, [r7, #13]
 8002db8:	f023 0302 	bic.w	r3, r3, #2
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002dc0:	e010      	b.n	8002de4 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002dc2:	7b3b      	ldrb	r3, [r7, #12]
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	f043 0320 	orr.w	r3, r3, #32
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	733b      	strb	r3, [r7, #12]
        }
        break;
 8002dd6:	e005      	b.n	8002de4 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	737b      	strb	r3, [r7, #13]
        }
        break;
 8002de0:	e000      	b.n	8002de4 <_dwt_enableclocks+0x10c>
        default:
        break;
 8002de2:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	2201      	movs	r2, #1
 8002dea:	2100      	movs	r1, #0
 8002dec:	2036      	movs	r0, #54	; 0x36
 8002dee:	f7ff fdb1 	bl	8002954 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	3301      	adds	r3, #1
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	2036      	movs	r0, #54	; 0x36
 8002dfe:	f7ff fda9 	bl	8002954 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop

08002e0c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7ff ff61 	bl	8002cd8 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8002e16:	2200      	movs	r2, #0
 8002e18:	2104      	movs	r1, #4
 8002e1a:	2036      	movs	r0, #54	; 0x36
 8002e1c:	f7ff feb9 	bl	8002b92 <dwt_write16bitoffsetreg>
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	200e      	movs	r0, #14
 8002e2e:	f7ff fe46 	bl	8002abe <dwt_read32bitoffsetreg>
 8002e32:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8002e34:	f7fd fcd3 	bl	80007de <decamutexon>
 8002e38:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	200e      	movs	r0, #14
 8002e40:	f7ff fec3 	bl	8002bca <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8002e44:	2240      	movs	r2, #64	; 0x40
 8002e46:	2100      	movs	r1, #0
 8002e48:	200d      	movs	r0, #13
 8002e4a:	f7ff fe8f 	bl	8002b6c <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <dwt_forcetrxoff+0x58>)
 8002e50:	2100      	movs	r1, #0
 8002e52:	200f      	movs	r0, #15
 8002e54:	f7ff feb9 	bl	8002bca <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8002e58:	f000 f814 	bl	8002e84 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	2100      	movs	r1, #0
 8002e60:	200e      	movs	r0, #14
 8002e62:	f7ff feb2 	bl	8002bca <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	f7fd fcca 	bl	8000800 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <dwt_forcetrxoff+0x5c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2200      	movs	r2, #0
 8002e72:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	2427fff8 	.word	0x2427fff8
 8002e80:	20000018 	.word	0x20000018

08002e84 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	200f      	movs	r0, #15
 8002e8e:	f7ff fe5a 	bl	8002b46 <dwt_read8bitoffsetreg>
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002e96:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002e9c:	4053      	eors	r3, r2
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	200d      	movs	r0, #13
 8002eac:	f7ff fe5e 	bl	8002b6c <dwt_write8bitoffsetreg>
    }
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8002eca:	f7ff ffdb 	bl	8002e84 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8002ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed2:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8002ede:	89fb      	ldrh	r3, [r7, #14]
 8002ee0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee4:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002ee6:	89fb      	ldrh	r3, [r7, #14]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	200d      	movs	r0, #13
 8002eee:	f7ff fe50 	bl	8002b92 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01a      	beq.n	8002f32 <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002efc:	2103      	movs	r1, #3
 8002efe:	200f      	movs	r0, #15
 8002f00:	f7ff fe21 	bl	8002b46 <dwt_read8bitoffsetreg>
 8002f04:	4603      	mov	r3, r0
 8002f06:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8002f08:	7b7b      	ldrb	r3, [r7, #13]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00f      	beq.n	8002f32 <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8002f12:	f7ff ff87 	bl	8002e24 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8002f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f24:	2100      	movs	r1, #0
 8002f26:	200d      	movs	r0, #13
 8002f28:	f7ff fe33 	bl	8002b92 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8002f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f30:	e000      	b.n	8002f34 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8002f32:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8002f40:	f7ff ff64 	bl	8002e0c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	202c      	movs	r0, #44	; 0x2c
 8002f4a:	f7ff fe22 	bl	8002b92 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2106      	movs	r1, #6
 8002f52:	202c      	movs	r0, #44	; 0x2c
 8002f54:	f7ff fe0a 	bl	8002b6c <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8002f58:	f7ff fe7d 	bl	8002c56 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2103      	movs	r1, #3
 8002f60:	2036      	movs	r0, #54	; 0x36
 8002f62:	f7ff fe03 	bl	8002b6c <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8002f66:	2001      	movs	r0, #1
 8002f68:	f7fd fc57 	bl	800081a <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8002f6c:	22f0      	movs	r2, #240	; 0xf0
 8002f6e:	2103      	movs	r1, #3
 8002f70:	2036      	movs	r0, #54	; 0x36
 8002f72:	f7ff fdfb 	bl	8002b6c <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8002f76:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <dwt_softreset+0x48>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	755a      	strb	r2, [r3, #21]
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000018 	.word	0x20000018

08002f88 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fa0:	b25b      	sxtb	r3, r3
 8002fa2:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	210e      	movs	r1, #14
 8002faa:	202b      	movs	r0, #43	; 0x2b
 8002fac:	f7ff fdde 	bl	8002b6c <dwt_write8bitoffsetreg>
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	2600      	movs	r6, #0
 8002fbc:	4d0c      	ldr	r5, [pc, #48]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbe:	4c0d      	ldr	r4, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fc0:	1b64      	subs	r4, r4, r5
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	42a6      	cmp	r6, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	f000 f822 	bl	8003010 <_init>
 8002fcc:	2600      	movs	r6, #0
 8002fce:	4d0a      	ldr	r5, [pc, #40]	; (8002ff8 <__libc_init_array+0x40>)
 8002fd0:	4c0a      	ldr	r4, [pc, #40]	; (8002ffc <__libc_init_array+0x44>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	42a6      	cmp	r6, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe0:	4798      	blx	r3
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fea:	4798      	blx	r3
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	08003204 	.word	0x08003204
 8002ff4:	08003204 	.word	0x08003204
 8002ff8:	08003204 	.word	0x08003204
 8002ffc:	08003208 	.word	0x08003208

08003000 <memset>:
 8003000:	4603      	mov	r3, r0
 8003002:	4402      	add	r2, r0
 8003004:	4293      	cmp	r3, r2
 8003006:	d100      	bne.n	800300a <memset+0xa>
 8003008:	4770      	bx	lr
 800300a:	f803 1b01 	strb.w	r1, [r3], #1
 800300e:	e7f9      	b.n	8003004 <memset+0x4>

08003010 <_init>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr

0800301c <_fini>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	bf00      	nop
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr
